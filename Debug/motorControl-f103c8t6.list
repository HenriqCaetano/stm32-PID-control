
motorControl-f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  080063b0  080063b0  000163b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067ec  080067ec  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  080067ec  080067ec  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080067ec  080067ec  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067ec  080067ec  000167ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067f0  080067f0  000167f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  080067f4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000174  200001e8  080069d8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  080069d8  0002035c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c641  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b6a  00000000  00000000  0002c84e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0002e3b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bb0  00000000  00000000  0002f010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183e2  00000000  00000000  0002fbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cb57  00000000  00000000  00047fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba1d  00000000  00000000  00054af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0516  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004448  00000000  00000000  000e0568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08006398 	.word	0x08006398

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08006398 	.word	0x08006398

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <_write>:
static void MX_TIM1_Init(void);
static void MX_TIM2_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_TIM3_Init(void);
/* USER CODE BEGIN PFP */
int _write(int fd, char* ptr, int len) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a9c:	68b9      	ldr	r1, [r7, #8]
 8000a9e:	4804      	ldr	r0, [pc, #16]	; (8000ab0 <_write+0x28>)
 8000aa0:	f002 fda4 	bl	80035ec <HAL_UART_Transmit>
    return len;
 8000aa4:	687b      	ldr	r3, [r7, #4]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	200002dc 	.word	0x200002dc

08000ab4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab8:	f000 fc9e 	bl	80013f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000abc:	f000 f826 	bl	8000b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac0:	f000 f9a0 	bl	8000e04 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000ac4:	f000 f85e 	bl	8000b84 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000ac8:	f000 f8b4 	bl	8000c34 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000acc:	f000 f970 	bl	8000db0 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000ad0:	f000 f914 	bl	8000cfc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_ALL);
 8000ad4:	213c      	movs	r1, #60	; 0x3c
 8000ad6:	4809      	ldr	r0, [pc, #36]	; (8000afc <main+0x48>)
 8000ad8:	f001 fc84 	bl	80023e4 <HAL_TIM_PWM_Start>
  dutyCycle = HAL_TIM_ReadCapturedValue(&htim2, TIM_CHANNEL_1);
 8000adc:	2100      	movs	r1, #0
 8000ade:	4808      	ldr	r0, [pc, #32]	; (8000b00 <main+0x4c>)
 8000ae0:	f002 f926 	bl	8002d30 <HAL_TIM_ReadCapturedValue>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	b29a      	uxth	r2, r3
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <main+0x50>)
 8000aea:	801a      	strh	r2, [r3, #0]
  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000aec:	213c      	movs	r1, #60	; 0x3c
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <main+0x54>)
 8000af0:	f001 fdbc 	bl	800266c <HAL_TIM_Encoder_Start>


  HAL_TIM_Base_Start_IT(&htim2);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <main+0x4c>)
 8000af6:	f001 fbd3 	bl	80022a0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000afa:	e7fe      	b.n	8000afa <main+0x46>
 8000afc:	20000294 	.word	0x20000294
 8000b00:	2000024c 	.word	0x2000024c
 8000b04:	20000340 	.word	0x20000340
 8000b08:	20000204 	.word	0x20000204

08000b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b090      	sub	sp, #64	; 0x40
 8000b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b12:	f107 0318 	add.w	r3, r7, #24
 8000b16:	2228      	movs	r2, #40	; 0x28
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f002 ff10 	bl	8003940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b20:	1d3b      	adds	r3, r7, #4
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b32:	2301      	movs	r3, #1
 8000b34:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b36:	2310      	movs	r3, #16
 8000b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3e:	f107 0318 	add.w	r3, r7, #24
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 ff4c 	bl	80019e0 <HAL_RCC_OscConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000b4e:	f000 fa1b 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b52:	230f      	movs	r3, #15
 8000b54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b56:	2300      	movs	r3, #0
 8000b58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f001 f9ba 	bl	8001ee4 <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000b76:	f000 fa07 	bl	8000f88 <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3740      	adds	r7, #64	; 0x40
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b08c      	sub	sp, #48	; 0x30
 8000b88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000b8a:	f107 030c 	add.w	r3, r7, #12
 8000b8e:	2224      	movs	r2, #36	; 0x24
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f002 fed4 	bl	8003940 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b98:	1d3b      	adds	r3, r7, #4
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	601a      	str	r2, [r3, #0]
 8000b9e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ba0:	4b22      	ldr	r3, [pc, #136]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000ba2:	4a23      	ldr	r2, [pc, #140]	; (8000c30 <MX_TIM1_Init+0xac>)
 8000ba4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ba6:	4b21      	ldr	r3, [pc, #132]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1f      	ldr	r3, [pc, #124]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bb2:	4b1e      	ldr	r3, [pc, #120]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bba:	4b1c      	ldr	r3, [pc, #112]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bc0:	4b1a      	ldr	r3, [pc, #104]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000bcc:	2303      	movs	r3, #3
 8000bce:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000be4:	2301      	movs	r3, #1
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000be8:	2300      	movs	r3, #0
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000bf0:	f107 030c 	add.w	r3, r7, #12
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480d      	ldr	r0, [pc, #52]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000bf8:	f001 fc96 	bl	8002528 <HAL_TIM_Encoder_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8000c02:	f000 f9c1 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4806      	ldr	r0, [pc, #24]	; (8000c2c <MX_TIM1_Init+0xa8>)
 8000c14:	f002 fc2a 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000c1e:	f000 f9b3 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	3730      	adds	r7, #48	; 0x30
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	20000204 	.word	0x20000204
 8000c30:	40012c00 	.word	0x40012c00

08000c34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b08c      	sub	sp, #48	; 0x30
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
 8000c42:	605a      	str	r2, [r3, #4]
 8000c44:	609a      	str	r2, [r3, #8]
 8000c46:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
 8000c5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c60:	4b25      	ldr	r3, [pc, #148]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c62:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c66:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100;
 8000c68:	4b23      	ldr	r3, [pc, #140]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c6a:	2264      	movs	r2, #100	; 0x64
 8000c6c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6e:	4b22      	ldr	r3, [pc, #136]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8000c74:	4b20      	ldr	r3, [pc, #128]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c76:	f44f 7248 	mov.w	r2, #800	; 0x320
 8000c7a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7c:	4b1e      	ldr	r3, [pc, #120]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c82:	4b1d      	ldr	r3, [pc, #116]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c84:	2280      	movs	r2, #128	; 0x80
 8000c86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c88:	481b      	ldr	r0, [pc, #108]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000c8a:	f001 fab9 	bl	8002200 <HAL_TIM_Base_Init>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000c94:	f000 f978 	bl	8000f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c9e:	f107 0320 	add.w	r3, r7, #32
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4814      	ldr	r0, [pc, #80]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000ca6:	f001 ff39 	bl	8002b1c <HAL_TIM_ConfigClockSource>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000cb0:	f000 f96a 	bl	8000f88 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000cbc:	f107 030c 	add.w	r3, r7, #12
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	480d      	ldr	r0, [pc, #52]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000cc4:	f001 fff1 	bl	8002caa <HAL_TIM_SlaveConfigSynchro>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8000cce:	f000 f95b 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4806      	ldr	r0, [pc, #24]	; (8000cf8 <MX_TIM2_Init+0xc4>)
 8000ce0:	f002 fbc4 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8000cea:	f000 f94d 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cee:	bf00      	nop
 8000cf0:	3730      	adds	r7, #48	; 0x30
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	2000024c 	.word	0x2000024c

08000cfc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b08a      	sub	sp, #40	; 0x28
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d02:	f107 0320 	add.w	r3, r7, #32
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d0c:	1d3b      	adds	r3, r7, #4
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]
 8000d14:	609a      	str	r2, [r3, #8]
 8000d16:	60da      	str	r2, [r3, #12]
 8000d18:	611a      	str	r2, [r3, #16]
 8000d1a:	615a      	str	r2, [r3, #20]
 8000d1c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d1e:	4b22      	ldr	r3, [pc, #136]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d20:	4a22      	ldr	r2, [pc, #136]	; (8000dac <MX_TIM3_Init+0xb0>)
 8000d22:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d24:	4b20      	ldr	r3, [pc, #128]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b1f      	ldr	r3, [pc, #124]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000d30:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d36:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b1b      	ldr	r3, [pc, #108]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b1a      	ldr	r3, [pc, #104]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d44:	4818      	ldr	r0, [pc, #96]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d46:	f001 fafd 	bl	8002344 <HAL_TIM_PWM_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000d50:	f000 f91a 	bl	8000f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d54:	2300      	movs	r3, #0
 8000d56:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d5c:	f107 0320 	add.w	r3, r7, #32
 8000d60:	4619      	mov	r1, r3
 8000d62:	4811      	ldr	r0, [pc, #68]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d64:	f002 fb82 	bl	800346c <HAL_TIMEx_MasterConfigSynchronization>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000d6e:	f000 f90b 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d72:	2360      	movs	r3, #96	; 0x60
 8000d74:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	2200      	movs	r2, #0
 8000d86:	4619      	mov	r1, r3
 8000d88:	4807      	ldr	r0, [pc, #28]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d8a:	f001 fe05 	bl	8002998 <HAL_TIM_PWM_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000d94:	f000 f8f8 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <MX_TIM3_Init+0xac>)
 8000d9a:	f000 f99f 	bl	80010dc <HAL_TIM_MspPostInit>

}
 8000d9e:	bf00      	nop
 8000da0:	3728      	adds	r7, #40	; 0x28
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000294 	.word	0x20000294
 8000dac:	40000400 	.word	0x40000400

08000db0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_USART1_UART_Init+0x4c>)
 8000db6:	4a12      	ldr	r2, [pc, #72]	; (8000e00 <MX_USART1_UART_Init+0x50>)
 8000db8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000dba:	4b10      	ldr	r3, [pc, #64]	; (8000dfc <MX_USART1_UART_Init+0x4c>)
 8000dbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000dc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc2:	4b0e      	ldr	r3, [pc, #56]	; (8000dfc <MX_USART1_UART_Init+0x4c>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000dc8:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_USART1_UART_Init+0x4c>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dce:	4b0b      	ldr	r3, [pc, #44]	; (8000dfc <MX_USART1_UART_Init+0x4c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dd4:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_USART1_UART_Init+0x4c>)
 8000dd6:	220c      	movs	r2, #12
 8000dd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dda:	4b08      	ldr	r3, [pc, #32]	; (8000dfc <MX_USART1_UART_Init+0x4c>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de0:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_USART1_UART_Init+0x4c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000de6:	4805      	ldr	r0, [pc, #20]	; (8000dfc <MX_USART1_UART_Init+0x4c>)
 8000de8:	f002 fbb0 	bl	800354c <HAL_UART_Init>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000df2:	f000 f8c9 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200002dc 	.word	0x200002dc
 8000e00:	40013800 	.word	0x40013800

08000e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_GPIO_Init+0x58>)
 8000e0c:	699b      	ldr	r3, [r3, #24]
 8000e0e:	4a13      	ldr	r2, [pc, #76]	; (8000e5c <MX_GPIO_Init+0x58>)
 8000e10:	f043 0320 	orr.w	r3, r3, #32
 8000e14:	6193      	str	r3, [r2, #24]
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_GPIO_Init+0x58>)
 8000e18:	699b      	ldr	r3, [r3, #24]
 8000e1a:	f003 0320 	and.w	r3, r3, #32
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_GPIO_Init+0x58>)
 8000e24:	699b      	ldr	r3, [r3, #24]
 8000e26:	4a0d      	ldr	r2, [pc, #52]	; (8000e5c <MX_GPIO_Init+0x58>)
 8000e28:	f043 0304 	orr.w	r3, r3, #4
 8000e2c:	6193      	str	r3, [r2, #24]
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_GPIO_Init+0x58>)
 8000e30:	699b      	ldr	r3, [r3, #24]
 8000e32:	f003 0304 	and.w	r3, r3, #4
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <MX_GPIO_Init+0x58>)
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	4a07      	ldr	r2, [pc, #28]	; (8000e5c <MX_GPIO_Init+0x58>)
 8000e40:	f043 0308 	orr.w	r3, r3, #8
 8000e44:	6193      	str	r3, [r2, #24]
 8000e46:	4b05      	ldr	r3, [pc, #20]	; (8000e5c <MX_GPIO_Init+0x58>)
 8000e48:	699b      	ldr	r3, [r3, #24]
 8000e4a:	f003 0308 	and.w	r3, r3, #8
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]

}
 8000e52:	bf00      	nop
 8000e54:	3714      	adds	r7, #20
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	40021000 	.word	0x40021000

08000e60 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8000e60:	b5b0      	push	{r4, r5, r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af02      	add	r7, sp, #8
 8000e66:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a3b      	ldr	r2, [pc, #236]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d167      	bne.n	8000f40 <HAL_TIM_PeriodElapsedCallback+0xe0>
		 * PASSAR VELOCIDADE ATUAL E ALVO PARA A FUNÇÃO DE CÁLCULO DE PID
		 * PASSAR O RESULTADO PARA O TIMER DE PWM
		 * VERIFICAR RESULTADOS
		 * */

		currentTick = HAL_GetTick();
 8000e70:	f000 fb1a 	bl	80014a8 <HAL_GetTick>
 8000e74:	4603      	mov	r3, r0
 8000e76:	4a39      	ldr	r2, [pc, #228]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e78:	6013      	str	r3, [r2, #0]

		//setPoint in RPM becomes encoder pulses
		pulsesSetPoint = setPoint * RPM_TO_DEGREES_PER_SECOND * (currentTick - lastTick) * MILISECONDS_TO_SECONDS * ((float)PPR / (float)ONE_LAP);
 8000e7a:	4b39      	ldr	r3, [pc, #228]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8000e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000e80:	f04f 0200 	mov.w	r2, #0
 8000e84:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8000e86:	f7ff fb27 	bl	80004d8 <__aeabi_dmul>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	4614      	mov	r4, r2
 8000e90:	461d      	mov	r5, r3
 8000e92:	4b32      	ldr	r3, [pc, #200]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	1ad3      	subs	r3, r2, r3
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff faa1 	bl	80003e4 <__aeabi_ui2d>
 8000ea2:	4602      	mov	r2, r0
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	4620      	mov	r0, r4
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	f7ff fb15 	bl	80004d8 <__aeabi_dmul>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4610      	mov	r0, r2
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	a324      	add	r3, pc, #144	; (adr r3, 8000f48 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8000eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ebc:	f7ff fb0c 	bl	80004d8 <__aeabi_dmul>
 8000ec0:	4602      	mov	r2, r0
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	a321      	add	r3, pc, #132	; (adr r3, 8000f50 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8000eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ece:	f7ff fb03 	bl	80004d8 <__aeabi_dmul>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	460b      	mov	r3, r1
 8000ed6:	4925      	ldr	r1, [pc, #148]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000ed8:	e9c1 2300 	strd	r2, r3, [r1]


		currentStep = TIM2->CNT;
 8000edc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ee2:	461a      	mov	r2, r3
 8000ee4:	4b22      	ldr	r3, [pc, #136]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000ee6:	601a      	str	r2, [r3, #0]
		//velocidade atual
		deltaSteps = currentStep - lastStep;
 8000ee8:	4b21      	ldr	r3, [pc, #132]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b21      	ldr	r3, [pc, #132]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	1ad3      	subs	r3, r2, r3
 8000ef2:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ef4:	6013      	str	r3, [r2, #0]


		//debug
		printf("TEMPO: %ld, ENCODER_STEP: %d, SETPOINT_PULSES: %f\n\r", (currentTick - lastTick), deltaSteps, pulsesSetPoint);
 8000ef6:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	1ad1      	subs	r1, r2, r3
 8000f00:	4b1d      	ldr	r3, [pc, #116]	; (8000f78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000f02:	6818      	ldr	r0, [r3, #0]
 8000f04:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	e9cd 2300 	strd	r2, r3, [sp]
 8000f0e:	4602      	mov	r2, r0
 8000f10:	481a      	ldr	r0, [pc, #104]	; (8000f7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000f12:	f003 f97d 	bl	8004210 <iprintf>
		//TODO: ajuste dos parâmetros do PID


		//atualização no PWM
		//TODO: revisar fórmulas para encontrar valores bons de pwm
		dutyCycle += pwmOutput;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f18:	881a      	ldrh	r2, [r3, #0]
 8000f1a:	4b1a      	ldr	r3, [pc, #104]	; (8000f84 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	4b17      	ldr	r3, [pc, #92]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f24:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, dutyCycle);
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000f28:	881a      	ldrh	r2, [r3, #0]
 8000f2a:	4b0b      	ldr	r3, [pc, #44]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	635a      	str	r2, [r3, #52]	; 0x34

		//TODO: gerar gráficos para avaliar o resultado

		//updates for next interruption
		lastStep = currentStep;
 8000f30:	4b0f      	ldr	r3, [pc, #60]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a0f      	ldr	r2, [pc, #60]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000f36:	6013      	str	r3, [r2, #0]
		lastTick = currentTick;
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8000f3e:	6013      	str	r3, [r2, #0]
	}
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bdb0      	pop	{r4, r5, r7, pc}
 8000f48:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f4c:	3f50624d 	.word	0x3f50624d
 8000f50:	20000000 	.word	0x20000000
 8000f54:	4006c16c 	.word	0x4006c16c
 8000f58:	2000024c 	.word	0x2000024c
 8000f5c:	20000330 	.word	0x20000330
 8000f60:	20000000 	.word	0x20000000
 8000f64:	40180000 	.word	0x40180000
 8000f68:	20000334 	.word	0x20000334
 8000f6c:	20000338 	.word	0x20000338
 8000f70:	20000324 	.word	0x20000324
 8000f74:	20000328 	.word	0x20000328
 8000f78:	2000032c 	.word	0x2000032c
 8000f7c:	080063b0 	.word	0x080063b0
 8000f80:	20000340 	.word	0x20000340
 8000f84:	20000342 	.word	0x20000342

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f9a:	4b0e      	ldr	r3, [pc, #56]	; (8000fd4 <HAL_MspInit+0x40>)
 8000f9c:	699b      	ldr	r3, [r3, #24]
 8000f9e:	4a0d      	ldr	r2, [pc, #52]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6193      	str	r3, [r2, #24]
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	4a07      	ldr	r2, [pc, #28]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	61d3      	str	r3, [r2, #28]
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_MspInit+0x40>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bc80      	pop	{r7}
 8000fd2:	4770      	bx	lr
 8000fd4:	40021000 	.word	0x40021000

08000fd8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a16      	ldr	r2, [pc, #88]	; (800104c <HAL_TIM_Encoder_MspInit+0x74>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d124      	bne.n	8001042 <HAL_TIM_Encoder_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <HAL_TIM_Encoder_MspInit+0x78>)
 8000ffa:	699b      	ldr	r3, [r3, #24]
 8000ffc:	4a14      	ldr	r2, [pc, #80]	; (8001050 <HAL_TIM_Encoder_MspInit+0x78>)
 8000ffe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001002:	6193      	str	r3, [r2, #24]
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <HAL_TIM_Encoder_MspInit+0x78>)
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800100c:	60fb      	str	r3, [r7, #12]
 800100e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <HAL_TIM_Encoder_MspInit+0x78>)
 8001012:	699b      	ldr	r3, [r3, #24]
 8001014:	4a0e      	ldr	r2, [pc, #56]	; (8001050 <HAL_TIM_Encoder_MspInit+0x78>)
 8001016:	f043 0304 	orr.w	r3, r3, #4
 800101a:	6193      	str	r3, [r2, #24]
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <HAL_TIM_Encoder_MspInit+0x78>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	60bb      	str	r3, [r7, #8]
 8001026:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001028:	f44f 7340 	mov.w	r3, #768	; 0x300
 800102c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001036:	f107 0310 	add.w	r3, r7, #16
 800103a:	4619      	mov	r1, r3
 800103c:	4805      	ldr	r0, [pc, #20]	; (8001054 <HAL_TIM_Encoder_MspInit+0x7c>)
 800103e:	f000 fb4b 	bl	80016d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001042:	bf00      	nop
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40012c00 	.word	0x40012c00
 8001050:	40021000 	.word	0x40021000
 8001054:	40010800 	.word	0x40010800

08001058 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001068:	d113      	bne.n	8001092 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800106a:	4b0c      	ldr	r3, [pc, #48]	; (800109c <HAL_TIM_Base_MspInit+0x44>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a0b      	ldr	r2, [pc, #44]	; (800109c <HAL_TIM_Base_MspInit+0x44>)
 8001070:	f043 0301 	orr.w	r3, r3, #1
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_TIM_Base_MspInit+0x44>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001082:	2200      	movs	r2, #0
 8001084:	2100      	movs	r1, #0
 8001086:	201c      	movs	r0, #28
 8001088:	f000 faef 	bl	800166a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800108c:	201c      	movs	r0, #28
 800108e:	f000 fb08 	bl	80016a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001092:	bf00      	nop
 8001094:	3710      	adds	r7, #16
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	40021000 	.word	0x40021000

080010a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a09      	ldr	r2, [pc, #36]	; (80010d4 <HAL_TIM_PWM_MspInit+0x34>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d10b      	bne.n	80010ca <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80010b2:	4b09      	ldr	r3, [pc, #36]	; (80010d8 <HAL_TIM_PWM_MspInit+0x38>)
 80010b4:	69db      	ldr	r3, [r3, #28]
 80010b6:	4a08      	ldr	r2, [pc, #32]	; (80010d8 <HAL_TIM_PWM_MspInit+0x38>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	61d3      	str	r3, [r2, #28]
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_TIM_PWM_MspInit+0x38>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80010ca:	bf00      	nop
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40000400 	.word	0x40000400
 80010d8:	40021000 	.word	0x40021000

080010dc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0310 	add.w	r3, r7, #16
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	4a0f      	ldr	r2, [pc, #60]	; (8001134 <HAL_TIM_MspPostInit+0x58>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d117      	bne.n	800112c <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b0e      	ldr	r3, [pc, #56]	; (8001138 <HAL_TIM_MspPostInit+0x5c>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a0d      	ldr	r2, [pc, #52]	; (8001138 <HAL_TIM_MspPostInit+0x5c>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_TIM_MspPostInit+0x5c>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001114:	2340      	movs	r3, #64	; 0x40
 8001116:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001118:	2302      	movs	r3, #2
 800111a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2302      	movs	r3, #2
 800111e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	4619      	mov	r1, r3
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <HAL_TIM_MspPostInit+0x60>)
 8001128:	f000 fad6 	bl	80016d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800112c:	bf00      	nop
 800112e:	3720      	adds	r7, #32
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40000400 	.word	0x40000400
 8001138:	40021000 	.word	0x40021000
 800113c:	40010800 	.word	0x40010800

08001140 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08a      	sub	sp, #40	; 0x28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	2200      	movs	r2, #0
 800114e:	601a      	str	r2, [r3, #0]
 8001150:	605a      	str	r2, [r3, #4]
 8001152:	609a      	str	r2, [r3, #8]
 8001154:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a22      	ldr	r2, [pc, #136]	; (80011e4 <HAL_UART_MspInit+0xa4>)
 800115c:	4293      	cmp	r3, r2
 800115e:	d13d      	bne.n	80011dc <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001160:	4b21      	ldr	r3, [pc, #132]	; (80011e8 <HAL_UART_MspInit+0xa8>)
 8001162:	699b      	ldr	r3, [r3, #24]
 8001164:	4a20      	ldr	r2, [pc, #128]	; (80011e8 <HAL_UART_MspInit+0xa8>)
 8001166:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116a:	6193      	str	r3, [r2, #24]
 800116c:	4b1e      	ldr	r3, [pc, #120]	; (80011e8 <HAL_UART_MspInit+0xa8>)
 800116e:	699b      	ldr	r3, [r3, #24]
 8001170:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001174:	613b      	str	r3, [r7, #16]
 8001176:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001178:	4b1b      	ldr	r3, [pc, #108]	; (80011e8 <HAL_UART_MspInit+0xa8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <HAL_UART_MspInit+0xa8>)
 800117e:	f043 0308 	orr.w	r3, r3, #8
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0xa8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0308 	and.w	r3, r3, #8
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001190:	2340      	movs	r3, #64	; 0x40
 8001192:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001194:	2302      	movs	r3, #2
 8001196:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001198:	2303      	movs	r3, #3
 800119a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 0314 	add.w	r3, r7, #20
 80011a0:	4619      	mov	r1, r3
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <HAL_UART_MspInit+0xac>)
 80011a4:	f000 fa98 	bl	80016d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011b4:	f107 0314 	add.w	r3, r7, #20
 80011b8:	4619      	mov	r1, r3
 80011ba:	480c      	ldr	r0, [pc, #48]	; (80011ec <HAL_UART_MspInit+0xac>)
 80011bc:	f000 fa8c 	bl	80016d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 80011c0:	4b0b      	ldr	r3, [pc, #44]	; (80011f0 <HAL_UART_MspInit+0xb0>)
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	627b      	str	r3, [r7, #36]	; 0x24
 80011c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
 80011d6:	4a06      	ldr	r2, [pc, #24]	; (80011f0 <HAL_UART_MspInit+0xb0>)
 80011d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011da:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80011dc:	bf00      	nop
 80011de:	3728      	adds	r7, #40	; 0x28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40013800 	.word	0x40013800
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010c00 	.word	0x40010c00
 80011f0:	40010000 	.word	0x40010000

080011f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <NMI_Handler+0x4>

080011fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011fa:	b480      	push	{r7}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011fe:	e7fe      	b.n	80011fe <HardFault_Handler+0x4>

08001200 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <MemManage_Handler+0x4>

08001206 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <BusFault_Handler+0x4>

0800120c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <UsageFault_Handler+0x4>

08001212 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	46bd      	mov	sp, r7
 800121a:	bc80      	pop	{r7}
 800121c:	4770      	bx	lr

0800121e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr

08001236 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800123a:	f000 f923 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
	...

08001244 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001248:	4802      	ldr	r0, [pc, #8]	; (8001254 <TIM2_IRQHandler+0x10>)
 800124a:	f001 fa9d 	bl	8002788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	2000024c 	.word	0x2000024c

08001258 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
	return 1;
 800125c:	2301      	movs	r3, #1
}
 800125e:	4618      	mov	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <_kill>:

int _kill(int pid, int sig)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001270:	f002 fb3c 	bl	80038ec <__errno>
 8001274:	4603      	mov	r3, r0
 8001276:	2216      	movs	r2, #22
 8001278:	601a      	str	r2, [r3, #0]
	return -1;
 800127a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <_exit>:

void _exit (int status)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800128e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ffe7 	bl	8001266 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001298:	e7fe      	b.n	8001298 <_exit+0x12>

0800129a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	60f8      	str	r0, [r7, #12]
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	2300      	movs	r3, #0
 80012a8:	617b      	str	r3, [r7, #20]
 80012aa:	e00a      	b.n	80012c2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ac:	f3af 8000 	nop.w
 80012b0:	4601      	mov	r1, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1c5a      	adds	r2, r3, #1
 80012b6:	60ba      	str	r2, [r7, #8]
 80012b8:	b2ca      	uxtb	r2, r1
 80012ba:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	3301      	adds	r3, #1
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697a      	ldr	r2, [r7, #20]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	429a      	cmp	r2, r3
 80012c8:	dbf0      	blt.n	80012ac <_read+0x12>
	}

return len;
 80012ca:	687b      	ldr	r3, [r7, #4]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
	return -1;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bc80      	pop	{r7}
 80012e8:	4770      	bx	lr

080012ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ea:	b480      	push	{r7}
 80012ec:	b083      	sub	sp, #12
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	6078      	str	r0, [r7, #4]
 80012f2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fa:	605a      	str	r2, [r3, #4]
	return 0;
 80012fc:	2300      	movs	r3, #0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <_isatty>:

int _isatty(int file)
{
 8001308:	b480      	push	{r7}
 800130a:	b083      	sub	sp, #12
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
	return 1;
 8001310:	2301      	movs	r3, #1
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	bc80      	pop	{r7}
 800131a:	4770      	bx	lr

0800131c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	60f8      	str	r0, [r7, #12]
 8001324:	60b9      	str	r1, [r7, #8]
 8001326:	607a      	str	r2, [r7, #4]
	return 0;
 8001328:	2300      	movs	r3, #0
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	bc80      	pop	{r7}
 8001332:	4770      	bx	lr

08001334 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b086      	sub	sp, #24
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800133c:	4a14      	ldr	r2, [pc, #80]	; (8001390 <_sbrk+0x5c>)
 800133e:	4b15      	ldr	r3, [pc, #84]	; (8001394 <_sbrk+0x60>)
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001348:	4b13      	ldr	r3, [pc, #76]	; (8001398 <_sbrk+0x64>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d102      	bne.n	8001356 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <_sbrk+0x64>)
 8001352:	4a12      	ldr	r2, [pc, #72]	; (800139c <_sbrk+0x68>)
 8001354:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001356:	4b10      	ldr	r3, [pc, #64]	; (8001398 <_sbrk+0x64>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4413      	add	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	429a      	cmp	r2, r3
 8001362:	d207      	bcs.n	8001374 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001364:	f002 fac2 	bl	80038ec <__errno>
 8001368:	4603      	mov	r3, r0
 800136a:	220c      	movs	r2, #12
 800136c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001372:	e009      	b.n	8001388 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001374:	4b08      	ldr	r3, [pc, #32]	; (8001398 <_sbrk+0x64>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800137a:	4b07      	ldr	r3, [pc, #28]	; (8001398 <_sbrk+0x64>)
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	4a05      	ldr	r2, [pc, #20]	; (8001398 <_sbrk+0x64>)
 8001384:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001386:	68fb      	ldr	r3, [r7, #12]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3718      	adds	r7, #24
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20005000 	.word	0x20005000
 8001394:	00000400 	.word	0x00000400
 8001398:	20000344 	.word	0x20000344
 800139c:	20000360 	.word	0x20000360

080013a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013ac:	f7ff fff8 	bl	80013a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013b0:	480b      	ldr	r0, [pc, #44]	; (80013e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80013b2:	490c      	ldr	r1, [pc, #48]	; (80013e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80013b4:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80013c8:	4c09      	ldr	r4, [pc, #36]	; (80013f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d6:	f002 fa8f 	bl	80038f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80013da:	f7ff fb6b 	bl	8000ab4 <main>
  bx lr
 80013de:	4770      	bx	lr
  ldr r0, =_sdata
 80013e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e4:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 80013e8:	080067f4 	.word	0x080067f4
  ldr r2, =_sbss
 80013ec:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80013f0:	2000035c 	.word	0x2000035c

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>
	...

080013f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <HAL_Init+0x28>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <HAL_Init+0x28>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f923 	bl	8001654 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140e:	200f      	movs	r0, #15
 8001410:	f000 f808 	bl	8001424 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001414:	f7ff fdbe 	bl	8000f94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40022000 	.word	0x40022000

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x54>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b12      	ldr	r3, [pc, #72]	; (800147c <HAL_InitTick+0x58>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f93b 	bl	80016be <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001460:	f000 f903 	bl	800166a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_InitTick+0x5c>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20000008 	.word	0x20000008
 800147c:	20000010 	.word	0x20000010
 8001480:	2000000c 	.word	0x2000000c

08001484 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001488:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_IncTick+0x1c>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <HAL_IncTick+0x20>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a03      	ldr	r2, [pc, #12]	; (80014a4 <HAL_IncTick+0x20>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	20000010 	.word	0x20000010
 80014a4:	20000348 	.word	0x20000348

080014a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <HAL_GetTick+0x10>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	20000348 	.word	0x20000348

080014bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014ce:	68db      	ldr	r3, [r3, #12]
 80014d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014d8:	4013      	ands	r3, r2
 80014da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ee:	4a04      	ldr	r2, [pc, #16]	; (8001500 <__NVIC_SetPriorityGrouping+0x44>)
 80014f0:	68bb      	ldr	r3, [r7, #8]
 80014f2:	60d3      	str	r3, [r2, #12]
}
 80014f4:	bf00      	nop
 80014f6:	3714      	adds	r7, #20
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	e000ed00 	.word	0xe000ed00

08001504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001508:	4b04      	ldr	r3, [pc, #16]	; (800151c <__NVIC_GetPriorityGrouping+0x18>)
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	0a1b      	lsrs	r3, r3, #8
 800150e:	f003 0307 	and.w	r3, r3, #7
}
 8001512:	4618      	mov	r0, r3
 8001514:	46bd      	mov	sp, r7
 8001516:	bc80      	pop	{r7}
 8001518:	4770      	bx	lr
 800151a:	bf00      	nop
 800151c:	e000ed00 	.word	0xe000ed00

08001520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	4603      	mov	r3, r0
 8001528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800152a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800152e:	2b00      	cmp	r3, #0
 8001530:	db0b      	blt.n	800154a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	f003 021f 	and.w	r2, r3, #31
 8001538:	4906      	ldr	r1, [pc, #24]	; (8001554 <__NVIC_EnableIRQ+0x34>)
 800153a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153e:	095b      	lsrs	r3, r3, #5
 8001540:	2001      	movs	r0, #1
 8001542:	fa00 f202 	lsl.w	r2, r0, r2
 8001546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800154a:	bf00      	nop
 800154c:	370c      	adds	r7, #12
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100

08001558 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	6039      	str	r1, [r7, #0]
 8001562:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001568:	2b00      	cmp	r3, #0
 800156a:	db0a      	blt.n	8001582 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	b2da      	uxtb	r2, r3
 8001570:	490c      	ldr	r1, [pc, #48]	; (80015a4 <__NVIC_SetPriority+0x4c>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	0112      	lsls	r2, r2, #4
 8001578:	b2d2      	uxtb	r2, r2
 800157a:	440b      	add	r3, r1
 800157c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001580:	e00a      	b.n	8001598 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	4908      	ldr	r1, [pc, #32]	; (80015a8 <__NVIC_SetPriority+0x50>)
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	f003 030f 	and.w	r3, r3, #15
 800158e:	3b04      	subs	r3, #4
 8001590:	0112      	lsls	r2, r2, #4
 8001592:	b2d2      	uxtb	r2, r2
 8001594:	440b      	add	r3, r1
 8001596:	761a      	strb	r2, [r3, #24]
}
 8001598:	bf00      	nop
 800159a:	370c      	adds	r7, #12
 800159c:	46bd      	mov	sp, r7
 800159e:	bc80      	pop	{r7}
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b089      	sub	sp, #36	; 0x24
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	60f8      	str	r0, [r7, #12]
 80015b4:	60b9      	str	r1, [r7, #8]
 80015b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f1c3 0307 	rsb	r3, r3, #7
 80015c6:	2b04      	cmp	r3, #4
 80015c8:	bf28      	it	cs
 80015ca:	2304      	movcs	r3, #4
 80015cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015ce:	69fb      	ldr	r3, [r7, #28]
 80015d0:	3304      	adds	r3, #4
 80015d2:	2b06      	cmp	r3, #6
 80015d4:	d902      	bls.n	80015dc <NVIC_EncodePriority+0x30>
 80015d6:	69fb      	ldr	r3, [r7, #28]
 80015d8:	3b03      	subs	r3, #3
 80015da:	e000      	b.n	80015de <NVIC_EncodePriority+0x32>
 80015dc:	2300      	movs	r3, #0
 80015de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	43da      	mvns	r2, r3
 80015ec:	68bb      	ldr	r3, [r7, #8]
 80015ee:	401a      	ands	r2, r3
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fa01 f303 	lsl.w	r3, r1, r3
 80015fe:	43d9      	mvns	r1, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001604:	4313      	orrs	r3, r2
         );
}
 8001606:	4618      	mov	r0, r3
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	bc80      	pop	{r7}
 800160e:	4770      	bx	lr

08001610 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3b01      	subs	r3, #1
 800161c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001620:	d301      	bcc.n	8001626 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001622:	2301      	movs	r3, #1
 8001624:	e00f      	b.n	8001646 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <SysTick_Config+0x40>)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3b01      	subs	r3, #1
 800162c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800162e:	210f      	movs	r1, #15
 8001630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001634:	f7ff ff90 	bl	8001558 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <SysTick_Config+0x40>)
 800163a:	2200      	movs	r2, #0
 800163c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800163e:	4b04      	ldr	r3, [pc, #16]	; (8001650 <SysTick_Config+0x40>)
 8001640:	2207      	movs	r2, #7
 8001642:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001644:	2300      	movs	r3, #0
}
 8001646:	4618      	mov	r0, r3
 8001648:	3708      	adds	r7, #8
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	e000e010 	.word	0xe000e010

08001654 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f7ff ff2d 	bl	80014bc <__NVIC_SetPriorityGrouping>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800166a:	b580      	push	{r7, lr}
 800166c:	b086      	sub	sp, #24
 800166e:	af00      	add	r7, sp, #0
 8001670:	4603      	mov	r3, r0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800167c:	f7ff ff42 	bl	8001504 <__NVIC_GetPriorityGrouping>
 8001680:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	68b9      	ldr	r1, [r7, #8]
 8001686:	6978      	ldr	r0, [r7, #20]
 8001688:	f7ff ff90 	bl	80015ac <NVIC_EncodePriority>
 800168c:	4602      	mov	r2, r0
 800168e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001692:	4611      	mov	r1, r2
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff5f 	bl	8001558 <__NVIC_SetPriority>
}
 800169a:	bf00      	nop
 800169c:	3718      	adds	r7, #24
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}

080016a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a2:	b580      	push	{r7, lr}
 80016a4:	b082      	sub	sp, #8
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	4603      	mov	r3, r0
 80016aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff35 	bl	8001520 <__NVIC_EnableIRQ>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016c6:	6878      	ldr	r0, [r7, #4]
 80016c8:	f7ff ffa2 	bl	8001610 <SysTick_Config>
 80016cc:	4603      	mov	r3, r0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b08b      	sub	sp, #44	; 0x2c
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ea:	e169      	b.n	80019c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80016ec:	2201      	movs	r2, #1
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	69fa      	ldr	r2, [r7, #28]
 80016fc:	4013      	ands	r3, r2
 80016fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	429a      	cmp	r2, r3
 8001706:	f040 8158 	bne.w	80019ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4a9a      	ldr	r2, [pc, #616]	; (8001978 <HAL_GPIO_Init+0x2a0>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d05e      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001714:	4a98      	ldr	r2, [pc, #608]	; (8001978 <HAL_GPIO_Init+0x2a0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d875      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 800171a:	4a98      	ldr	r2, [pc, #608]	; (800197c <HAL_GPIO_Init+0x2a4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d058      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001720:	4a96      	ldr	r2, [pc, #600]	; (800197c <HAL_GPIO_Init+0x2a4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d86f      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 8001726:	4a96      	ldr	r2, [pc, #600]	; (8001980 <HAL_GPIO_Init+0x2a8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d052      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 800172c:	4a94      	ldr	r2, [pc, #592]	; (8001980 <HAL_GPIO_Init+0x2a8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d869      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 8001732:	4a94      	ldr	r2, [pc, #592]	; (8001984 <HAL_GPIO_Init+0x2ac>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d04c      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001738:	4a92      	ldr	r2, [pc, #584]	; (8001984 <HAL_GPIO_Init+0x2ac>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d863      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 800173e:	4a92      	ldr	r2, [pc, #584]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d046      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
 8001744:	4a90      	ldr	r2, [pc, #576]	; (8001988 <HAL_GPIO_Init+0x2b0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d85d      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 800174a:	2b12      	cmp	r3, #18
 800174c:	d82a      	bhi.n	80017a4 <HAL_GPIO_Init+0xcc>
 800174e:	2b12      	cmp	r3, #18
 8001750:	d859      	bhi.n	8001806 <HAL_GPIO_Init+0x12e>
 8001752:	a201      	add	r2, pc, #4	; (adr r2, 8001758 <HAL_GPIO_Init+0x80>)
 8001754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001758:	080017d3 	.word	0x080017d3
 800175c:	080017ad 	.word	0x080017ad
 8001760:	080017bf 	.word	0x080017bf
 8001764:	08001801 	.word	0x08001801
 8001768:	08001807 	.word	0x08001807
 800176c:	08001807 	.word	0x08001807
 8001770:	08001807 	.word	0x08001807
 8001774:	08001807 	.word	0x08001807
 8001778:	08001807 	.word	0x08001807
 800177c:	08001807 	.word	0x08001807
 8001780:	08001807 	.word	0x08001807
 8001784:	08001807 	.word	0x08001807
 8001788:	08001807 	.word	0x08001807
 800178c:	08001807 	.word	0x08001807
 8001790:	08001807 	.word	0x08001807
 8001794:	08001807 	.word	0x08001807
 8001798:	08001807 	.word	0x08001807
 800179c:	080017b5 	.word	0x080017b5
 80017a0:	080017c9 	.word	0x080017c9
 80017a4:	4a79      	ldr	r2, [pc, #484]	; (800198c <HAL_GPIO_Init+0x2b4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d013      	beq.n	80017d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80017aa:	e02c      	b.n	8001806 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	68db      	ldr	r3, [r3, #12]
 80017b0:	623b      	str	r3, [r7, #32]
          break;
 80017b2:	e029      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	3304      	adds	r3, #4
 80017ba:	623b      	str	r3, [r7, #32]
          break;
 80017bc:	e024      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	3308      	adds	r3, #8
 80017c4:	623b      	str	r3, [r7, #32]
          break;
 80017c6:	e01f      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	330c      	adds	r3, #12
 80017ce:	623b      	str	r3, [r7, #32]
          break;
 80017d0:	e01a      	b.n	8001808 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d102      	bne.n	80017e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80017da:	2304      	movs	r3, #4
 80017dc:	623b      	str	r3, [r7, #32]
          break;
 80017de:	e013      	b.n	8001808 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689b      	ldr	r3, [r3, #8]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017e8:	2308      	movs	r3, #8
 80017ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	69fa      	ldr	r2, [r7, #28]
 80017f0:	611a      	str	r2, [r3, #16]
          break;
 80017f2:	e009      	b.n	8001808 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80017f4:	2308      	movs	r3, #8
 80017f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69fa      	ldr	r2, [r7, #28]
 80017fc:	615a      	str	r2, [r3, #20]
          break;
 80017fe:	e003      	b.n	8001808 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001800:	2300      	movs	r3, #0
 8001802:	623b      	str	r3, [r7, #32]
          break;
 8001804:	e000      	b.n	8001808 <HAL_GPIO_Init+0x130>
          break;
 8001806:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2bff      	cmp	r3, #255	; 0xff
 800180c:	d801      	bhi.n	8001812 <HAL_GPIO_Init+0x13a>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	e001      	b.n	8001816 <HAL_GPIO_Init+0x13e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3304      	adds	r3, #4
 8001816:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2bff      	cmp	r3, #255	; 0xff
 800181c:	d802      	bhi.n	8001824 <HAL_GPIO_Init+0x14c>
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	e002      	b.n	800182a <HAL_GPIO_Init+0x152>
 8001824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001826:	3b08      	subs	r3, #8
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	681a      	ldr	r2, [r3, #0]
 8001830:	210f      	movs	r1, #15
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	401a      	ands	r2, r3
 800183c:	6a39      	ldr	r1, [r7, #32]
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	431a      	orrs	r2, r3
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80b1 	beq.w	80019ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001858:	4b4d      	ldr	r3, [pc, #308]	; (8001990 <HAL_GPIO_Init+0x2b8>)
 800185a:	699b      	ldr	r3, [r3, #24]
 800185c:	4a4c      	ldr	r2, [pc, #304]	; (8001990 <HAL_GPIO_Init+0x2b8>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	6193      	str	r3, [r2, #24]
 8001864:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <HAL_GPIO_Init+0x2b8>)
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001870:	4a48      	ldr	r2, [pc, #288]	; (8001994 <HAL_GPIO_Init+0x2bc>)
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	089b      	lsrs	r3, r3, #2
 8001876:	3302      	adds	r3, #2
 8001878:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800187c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800187e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001880:	f003 0303 	and.w	r3, r3, #3
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	220f      	movs	r2, #15
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	43db      	mvns	r3, r3
 800188e:	68fa      	ldr	r2, [r7, #12]
 8001890:	4013      	ands	r3, r2
 8001892:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	4a40      	ldr	r2, [pc, #256]	; (8001998 <HAL_GPIO_Init+0x2c0>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d013      	beq.n	80018c4 <HAL_GPIO_Init+0x1ec>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	4a3f      	ldr	r2, [pc, #252]	; (800199c <HAL_GPIO_Init+0x2c4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d00d      	beq.n	80018c0 <HAL_GPIO_Init+0x1e8>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4a3e      	ldr	r2, [pc, #248]	; (80019a0 <HAL_GPIO_Init+0x2c8>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d007      	beq.n	80018bc <HAL_GPIO_Init+0x1e4>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4a3d      	ldr	r2, [pc, #244]	; (80019a4 <HAL_GPIO_Init+0x2cc>)
 80018b0:	4293      	cmp	r3, r2
 80018b2:	d101      	bne.n	80018b8 <HAL_GPIO_Init+0x1e0>
 80018b4:	2303      	movs	r3, #3
 80018b6:	e006      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018b8:	2304      	movs	r3, #4
 80018ba:	e004      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018bc:	2302      	movs	r3, #2
 80018be:	e002      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018c0:	2301      	movs	r3, #1
 80018c2:	e000      	b.n	80018c6 <HAL_GPIO_Init+0x1ee>
 80018c4:	2300      	movs	r3, #0
 80018c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c8:	f002 0203 	and.w	r2, r2, #3
 80018cc:	0092      	lsls	r2, r2, #2
 80018ce:	4093      	lsls	r3, r2
 80018d0:	68fa      	ldr	r2, [r7, #12]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80018d6:	492f      	ldr	r1, [pc, #188]	; (8001994 <HAL_GPIO_Init+0x2bc>)
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	3302      	adds	r3, #2
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d006      	beq.n	80018fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018f0:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 80018f2:	689a      	ldr	r2, [r3, #8]
 80018f4:	492c      	ldr	r1, [pc, #176]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
 80018fc:	e006      	b.n	800190c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001900:	689a      	ldr	r2, [r3, #8]
 8001902:	69bb      	ldr	r3, [r7, #24]
 8001904:	43db      	mvns	r3, r3
 8001906:	4928      	ldr	r1, [pc, #160]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001908:	4013      	ands	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001918:	4b23      	ldr	r3, [pc, #140]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	4922      	ldr	r1, [pc, #136]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 800191e:	69bb      	ldr	r3, [r7, #24]
 8001920:	4313      	orrs	r3, r2
 8001922:	60cb      	str	r3, [r1, #12]
 8001924:	e006      	b.n	8001934 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001926:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001928:	68da      	ldr	r2, [r3, #12]
 800192a:	69bb      	ldr	r3, [r7, #24]
 800192c:	43db      	mvns	r3, r3
 800192e:	491e      	ldr	r1, [pc, #120]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001930:	4013      	ands	r3, r2
 8001932:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d006      	beq.n	800194e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001940:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	4918      	ldr	r1, [pc, #96]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	4313      	orrs	r3, r2
 800194a:	604b      	str	r3, [r1, #4]
 800194c:	e006      	b.n	800195c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	43db      	mvns	r3, r3
 8001956:	4914      	ldr	r1, [pc, #80]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 8001958:	4013      	ands	r3, r2
 800195a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001964:	2b00      	cmp	r3, #0
 8001966:	d021      	beq.n	80019ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	490e      	ldr	r1, [pc, #56]	; (80019a8 <HAL_GPIO_Init+0x2d0>)
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	600b      	str	r3, [r1, #0]
 8001974:	e021      	b.n	80019ba <HAL_GPIO_Init+0x2e2>
 8001976:	bf00      	nop
 8001978:	10320000 	.word	0x10320000
 800197c:	10310000 	.word	0x10310000
 8001980:	10220000 	.word	0x10220000
 8001984:	10210000 	.word	0x10210000
 8001988:	10120000 	.word	0x10120000
 800198c:	10110000 	.word	0x10110000
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000
 8001998:	40010800 	.word	0x40010800
 800199c:	40010c00 	.word	0x40010c00
 80019a0:	40011000 	.word	0x40011000
 80019a4:	40011400 	.word	0x40011400
 80019a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019ac:	4b0b      	ldr	r3, [pc, #44]	; (80019dc <HAL_GPIO_Init+0x304>)
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	4909      	ldr	r1, [pc, #36]	; (80019dc <HAL_GPIO_Init+0x304>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80019ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019bc:	3301      	adds	r3, #1
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	fa22 f303 	lsr.w	r3, r2, r3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f47f ae8e 	bne.w	80016ec <HAL_GPIO_Init+0x14>
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	372c      	adds	r7, #44	; 0x2c
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bc80      	pop	{r7}
 80019da:	4770      	bx	lr
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e272      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 8087 	beq.w	8001b0e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a00:	4b92      	ldr	r3, [pc, #584]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 030c 	and.w	r3, r3, #12
 8001a08:	2b04      	cmp	r3, #4
 8001a0a:	d00c      	beq.n	8001a26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a0c:	4b8f      	ldr	r3, [pc, #572]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 030c 	and.w	r3, r3, #12
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d112      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
 8001a18:	4b8c      	ldr	r3, [pc, #560]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a24:	d10b      	bne.n	8001a3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a26:	4b89      	ldr	r3, [pc, #548]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d06c      	beq.n	8001b0c <HAL_RCC_OscConfig+0x12c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d168      	bne.n	8001b0c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e24c      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a46:	d106      	bne.n	8001a56 <HAL_RCC_OscConfig+0x76>
 8001a48:	4b80      	ldr	r3, [pc, #512]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a7f      	ldr	r2, [pc, #508]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	e02e      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d10c      	bne.n	8001a78 <HAL_RCC_OscConfig+0x98>
 8001a5e:	4b7b      	ldr	r3, [pc, #492]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	4a7a      	ldr	r2, [pc, #488]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a68:	6013      	str	r3, [r2, #0]
 8001a6a:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a77      	ldr	r2, [pc, #476]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a74:	6013      	str	r3, [r2, #0]
 8001a76:	e01d      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a80:	d10c      	bne.n	8001a9c <HAL_RCC_OscConfig+0xbc>
 8001a82:	4b72      	ldr	r3, [pc, #456]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a71      	ldr	r2, [pc, #452]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a8c:	6013      	str	r3, [r2, #0]
 8001a8e:	4b6f      	ldr	r3, [pc, #444]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a6e      	ldr	r2, [pc, #440]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	e00b      	b.n	8001ab4 <HAL_RCC_OscConfig+0xd4>
 8001a9c:	4b6b      	ldr	r3, [pc, #428]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a6a      	ldr	r2, [pc, #424]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001aa6:	6013      	str	r3, [r2, #0]
 8001aa8:	4b68      	ldr	r3, [pc, #416]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a67      	ldr	r2, [pc, #412]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ab2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d013      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001abc:	f7ff fcf4 	bl	80014a8 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ac4:	f7ff fcf0 	bl	80014a8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b64      	cmp	r3, #100	; 0x64
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e200      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xe4>
 8001ae2:	e014      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fce0 	bl	80014a8 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001aec:	f7ff fcdc 	bl	80014a8 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b64      	cmp	r3, #100	; 0x64
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1ec      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afe:	4b53      	ldr	r3, [pc, #332]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d1f0      	bne.n	8001aec <HAL_RCC_OscConfig+0x10c>
 8001b0a:	e000      	b.n	8001b0e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d063      	beq.n	8001be2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b1a:	4b4c      	ldr	r3, [pc, #304]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 030c 	and.w	r3, r3, #12
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00b      	beq.n	8001b3e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b26:	4b49      	ldr	r3, [pc, #292]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 030c 	and.w	r3, r3, #12
 8001b2e:	2b08      	cmp	r3, #8
 8001b30:	d11c      	bne.n	8001b6c <HAL_RCC_OscConfig+0x18c>
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d116      	bne.n	8001b6c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b3e:	4b43      	ldr	r3, [pc, #268]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d005      	beq.n	8001b56 <HAL_RCC_OscConfig+0x176>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d001      	beq.n	8001b56 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e1c0      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b56:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4939      	ldr	r1, [pc, #228]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b6a:	e03a      	b.n	8001be2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d020      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b7a:	f7ff fc95 	bl	80014a8 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b82:	f7ff fc91 	bl	80014a8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e1a1      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b94:	4b2d      	ldr	r3, [pc, #180]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f0      	beq.n	8001b82 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4927      	ldr	r1, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	600b      	str	r3, [r1, #0]
 8001bb4:	e015      	b.n	8001be2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bb6:	4b26      	ldr	r3, [pc, #152]	; (8001c50 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bbc:	f7ff fc74 	bl	80014a8 <HAL_GetTick>
 8001bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bc2:	e008      	b.n	8001bd6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bc4:	f7ff fc70 	bl	80014a8 <HAL_GetTick>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	693b      	ldr	r3, [r7, #16]
 8001bcc:	1ad3      	subs	r3, r2, r3
 8001bce:	2b02      	cmp	r3, #2
 8001bd0:	d901      	bls.n	8001bd6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e180      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 0302 	and.w	r3, r3, #2
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d1f0      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0308 	and.w	r3, r3, #8
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d03a      	beq.n	8001c64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d019      	beq.n	8001c2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bf6:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bfc:	f7ff fc54 	bl	80014a8 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c04:	f7ff fc50 	bl	80014a8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e160      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c16:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <HAL_RCC_OscConfig+0x26c>)
 8001c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c22:	2001      	movs	r0, #1
 8001c24:	f000 face 	bl	80021c4 <RCC_Delay>
 8001c28:	e01c      	b.n	8001c64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCC_OscConfig+0x274>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c30:	f7ff fc3a 	bl	80014a8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c36:	e00f      	b.n	8001c58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c38:	f7ff fc36 	bl	80014a8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d908      	bls.n	8001c58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e146      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	42420000 	.word	0x42420000
 8001c54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c58:	4b92      	ldr	r3, [pc, #584]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1e9      	bne.n	8001c38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 80a6 	beq.w	8001dbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c72:	2300      	movs	r3, #0
 8001c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c76:	4b8b      	ldr	r3, [pc, #556]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d10d      	bne.n	8001c9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c82:	4b88      	ldr	r3, [pc, #544]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	4a87      	ldr	r2, [pc, #540]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	61d3      	str	r3, [r2, #28]
 8001c8e:	4b85      	ldr	r3, [pc, #532]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	60bb      	str	r3, [r7, #8]
 8001c98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c9e:	4b82      	ldr	r3, [pc, #520]	; (8001ea8 <HAL_RCC_OscConfig+0x4c8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d118      	bne.n	8001cdc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001caa:	4b7f      	ldr	r3, [pc, #508]	; (8001ea8 <HAL_RCC_OscConfig+0x4c8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a7e      	ldr	r2, [pc, #504]	; (8001ea8 <HAL_RCC_OscConfig+0x4c8>)
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cb6:	f7ff fbf7 	bl	80014a8 <HAL_GetTick>
 8001cba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cbe:	f7ff fbf3 	bl	80014a8 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b64      	cmp	r3, #100	; 0x64
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e103      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd0:	4b75      	ldr	r3, [pc, #468]	; (8001ea8 <HAL_RCC_OscConfig+0x4c8>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0f0      	beq.n	8001cbe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d106      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x312>
 8001ce4:	4b6f      	ldr	r3, [pc, #444]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4a6e      	ldr	r2, [pc, #440]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001cea:	f043 0301 	orr.w	r3, r3, #1
 8001cee:	6213      	str	r3, [r2, #32]
 8001cf0:	e02d      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d10c      	bne.n	8001d14 <HAL_RCC_OscConfig+0x334>
 8001cfa:	4b6a      	ldr	r3, [pc, #424]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	4a69      	ldr	r2, [pc, #420]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	6213      	str	r3, [r2, #32]
 8001d06:	4b67      	ldr	r3, [pc, #412]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d08:	6a1b      	ldr	r3, [r3, #32]
 8001d0a:	4a66      	ldr	r2, [pc, #408]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d0c:	f023 0304 	bic.w	r3, r3, #4
 8001d10:	6213      	str	r3, [r2, #32]
 8001d12:	e01c      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	2b05      	cmp	r3, #5
 8001d1a:	d10c      	bne.n	8001d36 <HAL_RCC_OscConfig+0x356>
 8001d1c:	4b61      	ldr	r3, [pc, #388]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
 8001d20:	4a60      	ldr	r2, [pc, #384]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d22:	f043 0304 	orr.w	r3, r3, #4
 8001d26:	6213      	str	r3, [r2, #32]
 8001d28:	4b5e      	ldr	r3, [pc, #376]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2a:	6a1b      	ldr	r3, [r3, #32]
 8001d2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	6213      	str	r3, [r2, #32]
 8001d34:	e00b      	b.n	8001d4e <HAL_RCC_OscConfig+0x36e>
 8001d36:	4b5b      	ldr	r3, [pc, #364]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	4a5a      	ldr	r2, [pc, #360]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d3c:	f023 0301 	bic.w	r3, r3, #1
 8001d40:	6213      	str	r3, [r2, #32]
 8001d42:	4b58      	ldr	r3, [pc, #352]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	4a57      	ldr	r2, [pc, #348]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d48:	f023 0304 	bic.w	r3, r3, #4
 8001d4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d015      	beq.n	8001d82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d56:	f7ff fba7 	bl	80014a8 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d5e:	f7ff fba3 	bl	80014a8 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e0b1      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d74:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d0ee      	beq.n	8001d5e <HAL_RCC_OscConfig+0x37e>
 8001d80:	e014      	b.n	8001dac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d82:	f7ff fb91 	bl	80014a8 <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d88:	e00a      	b.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d8a:	f7ff fb8d 	bl	80014a8 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d901      	bls.n	8001da0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	e09b      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001da0:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f003 0302 	and.w	r3, r3, #2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1ee      	bne.n	8001d8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dac:	7dfb      	ldrb	r3, [r7, #23]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d105      	bne.n	8001dbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001db2:	4b3c      	ldr	r3, [pc, #240]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	4a3b      	ldr	r2, [pc, #236]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001db8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	f000 8087 	beq.w	8001ed6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f003 030c 	and.w	r3, r3, #12
 8001dd0:	2b08      	cmp	r3, #8
 8001dd2:	d061      	beq.n	8001e98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d146      	bne.n	8001e6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ddc:	4b33      	ldr	r3, [pc, #204]	; (8001eac <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7ff fb61 	bl	80014a8 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7ff fb5d 	bl	80014a8 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e06d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfc:	4b29      	ldr	r3, [pc, #164]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d1f0      	bne.n	8001dea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e10:	d108      	bne.n	8001e24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e12:	4b24      	ldr	r3, [pc, #144]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	4921      	ldr	r1, [pc, #132]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a19      	ldr	r1, [r3, #32]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e34:	430b      	orrs	r3, r1
 8001e36:	491b      	ldr	r1, [pc, #108]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <HAL_RCC_OscConfig+0x4cc>)
 8001e3e:	2201      	movs	r2, #1
 8001e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e42:	f7ff fb31 	bl	80014a8 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e4a:	f7ff fb2d 	bl	80014a8 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e03d      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e5c:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d0f0      	beq.n	8001e4a <HAL_RCC_OscConfig+0x46a>
 8001e68:	e035      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <HAL_RCC_OscConfig+0x4cc>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e70:	f7ff fb1a 	bl	80014a8 <HAL_GetTick>
 8001e74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e76:	e008      	b.n	8001e8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e78:	f7ff fb16 	bl	80014a8 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	2b02      	cmp	r3, #2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e026      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e8a:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_RCC_OscConfig+0x4c4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d1f0      	bne.n	8001e78 <HAL_RCC_OscConfig+0x498>
 8001e96:	e01e      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	69db      	ldr	r3, [r3, #28]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e019      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40007000 	.word	0x40007000
 8001eac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eb0:	4b0b      	ldr	r3, [pc, #44]	; (8001ee0 <HAL_RCC_OscConfig+0x500>)
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d106      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d001      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b084      	sub	sp, #16
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
 8001eec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d101      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e0d0      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ef8:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d910      	bls.n	8001f28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f06:	4b67      	ldr	r3, [pc, #412]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 0207 	bic.w	r2, r3, #7
 8001f0e:	4965      	ldr	r1, [pc, #404]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	4313      	orrs	r3, r2
 8001f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f16:	4b63      	ldr	r3, [pc, #396]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0307 	and.w	r3, r3, #7
 8001f1e:	683a      	ldr	r2, [r7, #0]
 8001f20:	429a      	cmp	r2, r3
 8001f22:	d001      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b8      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0302 	and.w	r3, r3, #2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d020      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0304 	and.w	r3, r3, #4
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f40:	4b59      	ldr	r3, [pc, #356]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	4a58      	ldr	r2, [pc, #352]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d005      	beq.n	8001f64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f64:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689b      	ldr	r3, [r3, #8]
 8001f70:	494d      	ldr	r1, [pc, #308]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d040      	beq.n	8002004 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d107      	bne.n	8001f9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8a:	4b47      	ldr	r3, [pc, #284]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d115      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e07f      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d107      	bne.n	8001fb2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa2:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d109      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	e073      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d101      	bne.n	8001fc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e06b      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc2:	4b39      	ldr	r3, [pc, #228]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f023 0203 	bic.w	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4936      	ldr	r1, [pc, #216]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd4:	f7ff fa68 	bl	80014a8 <HAL_GetTick>
 8001fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fda:	e00a      	b.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fdc:	f7ff fa64 	bl	80014a8 <HAL_GetTick>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	1ad3      	subs	r3, r2, r3
 8001fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e053      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff2:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f003 020c 	and.w	r2, r3, #12
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	429a      	cmp	r2, r3
 8002002:	d1eb      	bne.n	8001fdc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002004:	4b27      	ldr	r3, [pc, #156]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f003 0307 	and.w	r3, r3, #7
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d210      	bcs.n	8002034 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 0207 	bic.w	r2, r3, #7
 800201a:	4922      	ldr	r1, [pc, #136]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	4313      	orrs	r3, r2
 8002020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002022:	4b20      	ldr	r3, [pc, #128]	; (80020a4 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0307 	and.w	r3, r3, #7
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	d001      	beq.n	8002034 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e032      	b.n	800209a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0304 	and.w	r3, r3, #4
 800203c:	2b00      	cmp	r3, #0
 800203e:	d008      	beq.n	8002052 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002040:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4916      	ldr	r1, [pc, #88]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	4313      	orrs	r3, r2
 8002050:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0308 	and.w	r3, r3, #8
 800205a:	2b00      	cmp	r3, #0
 800205c:	d009      	beq.n	8002072 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800205e:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	490e      	ldr	r1, [pc, #56]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	4313      	orrs	r3, r2
 8002070:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002072:	f000 f821 	bl	80020b8 <HAL_RCC_GetSysClockFreq>
 8002076:	4602      	mov	r2, r0
 8002078:	4b0b      	ldr	r3, [pc, #44]	; (80020a8 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	490a      	ldr	r1, [pc, #40]	; (80020ac <HAL_RCC_ClockConfig+0x1c8>)
 8002084:	5ccb      	ldrb	r3, [r1, r3]
 8002086:	fa22 f303 	lsr.w	r3, r2, r3
 800208a:	4a09      	ldr	r2, [pc, #36]	; (80020b0 <HAL_RCC_ClockConfig+0x1cc>)
 800208c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <HAL_RCC_ClockConfig+0x1d0>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4618      	mov	r0, r3
 8002094:	f7ff f9c6 	bl	8001424 <HAL_InitTick>

  return HAL_OK;
 8002098:	2300      	movs	r3, #0
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	080063e4 	.word	0x080063e4
 80020b0:	20000008 	.word	0x20000008
 80020b4:	2000000c 	.word	0x2000000c

080020b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	2300      	movs	r3, #0
 80020c4:	60bb      	str	r3, [r7, #8]
 80020c6:	2300      	movs	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	2300      	movs	r3, #0
 80020cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020d2:	4b1e      	ldr	r3, [pc, #120]	; (800214c <HAL_RCC_GetSysClockFreq+0x94>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	2b04      	cmp	r3, #4
 80020e0:	d002      	beq.n	80020e8 <HAL_RCC_GetSysClockFreq+0x30>
 80020e2:	2b08      	cmp	r3, #8
 80020e4:	d003      	beq.n	80020ee <HAL_RCC_GetSysClockFreq+0x36>
 80020e6:	e027      	b.n	8002138 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 80020ea:	613b      	str	r3, [r7, #16]
      break;
 80020ec:	e027      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	0c9b      	lsrs	r3, r3, #18
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	4a17      	ldr	r2, [pc, #92]	; (8002154 <HAL_RCC_GetSysClockFreq+0x9c>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d010      	beq.n	8002128 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002106:	4b11      	ldr	r3, [pc, #68]	; (800214c <HAL_RCC_GetSysClockFreq+0x94>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	0c5b      	lsrs	r3, r3, #17
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	4a11      	ldr	r2, [pc, #68]	; (8002158 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002112:	5cd3      	ldrb	r3, [r2, r3]
 8002114:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a0d      	ldr	r2, [pc, #52]	; (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 800211a:	fb03 f202 	mul.w	r2, r3, r2
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	fbb2 f3f3 	udiv	r3, r2, r3
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e004      	b.n	8002132 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a0c      	ldr	r2, [pc, #48]	; (800215c <HAL_RCC_GetSysClockFreq+0xa4>)
 800212c:	fb02 f303 	mul.w	r3, r2, r3
 8002130:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	613b      	str	r3, [r7, #16]
      break;
 8002136:	e002      	b.n	800213e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <HAL_RCC_GetSysClockFreq+0x98>)
 800213a:	613b      	str	r3, [r7, #16]
      break;
 800213c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800213e:	693b      	ldr	r3, [r7, #16]
}
 8002140:	4618      	mov	r0, r3
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	007a1200 	.word	0x007a1200
 8002154:	080063fc 	.word	0x080063fc
 8002158:	0800640c 	.word	0x0800640c
 800215c:	003d0900 	.word	0x003d0900

08002160 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002164:	4b02      	ldr	r3, [pc, #8]	; (8002170 <HAL_RCC_GetHCLKFreq+0x10>)
 8002166:	681b      	ldr	r3, [r3, #0]
}
 8002168:	4618      	mov	r0, r3
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr
 8002170:	20000008 	.word	0x20000008

08002174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002178:	f7ff fff2 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 800217c:	4602      	mov	r2, r0
 800217e:	4b05      	ldr	r3, [pc, #20]	; (8002194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	f003 0307 	and.w	r3, r3, #7
 8002188:	4903      	ldr	r1, [pc, #12]	; (8002198 <HAL_RCC_GetPCLK1Freq+0x24>)
 800218a:	5ccb      	ldrb	r3, [r1, r3]
 800218c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002190:	4618      	mov	r0, r3
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40021000 	.word	0x40021000
 8002198:	080063f4 	.word	0x080063f4

0800219c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021a0:	f7ff ffde 	bl	8002160 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0adb      	lsrs	r3, r3, #11
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4903      	ldr	r1, [pc, #12]	; (80021c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	080063f4 	.word	0x080063f4

080021c4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021cc:	4b0a      	ldr	r3, [pc, #40]	; (80021f8 <RCC_Delay+0x34>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a0a      	ldr	r2, [pc, #40]	; (80021fc <RCC_Delay+0x38>)
 80021d2:	fba2 2303 	umull	r2, r3, r2, r3
 80021d6:	0a5b      	lsrs	r3, r3, #9
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	fb02 f303 	mul.w	r3, r2, r3
 80021de:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80021e0:	bf00      	nop
  }
  while (Delay --);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1e5a      	subs	r2, r3, #1
 80021e6:	60fa      	str	r2, [r7, #12]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1f9      	bne.n	80021e0 <RCC_Delay+0x1c>
}
 80021ec:	bf00      	nop
 80021ee:	bf00      	nop
 80021f0:	3714      	adds	r7, #20
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bc80      	pop	{r7}
 80021f6:	4770      	bx	lr
 80021f8:	20000008 	.word	0x20000008
 80021fc:	10624dd3 	.word	0x10624dd3

08002200 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e041      	b.n	8002296 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d106      	bne.n	800222c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2200      	movs	r2, #0
 8002222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f7fe ff16 	bl	8001058 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2202      	movs	r2, #2
 8002230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3304      	adds	r3, #4
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f000 fdde 	bl	8002e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2201      	movs	r2, #1
 8002250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2201      	movs	r2, #1
 8002288:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002294:	2300      	movs	r3, #0
}
 8002296:	4618      	mov	r0, r3
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022ae:	b2db      	uxtb	r3, r3
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d001      	beq.n	80022b8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e03a      	b.n	800232e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2202      	movs	r2, #2
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_TIM_Base_Start_IT+0x98>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00e      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x58>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e2:	d009      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x58>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a14      	ldr	r2, [pc, #80]	; (800233c <HAL_TIM_Base_Start_IT+0x9c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d004      	beq.n	80022f8 <HAL_TIM_Base_Start_IT+0x58>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a13      	ldr	r2, [pc, #76]	; (8002340 <HAL_TIM_Base_Start_IT+0xa0>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d111      	bne.n	800231c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 0307 	and.w	r3, r3, #7
 8002302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	2b06      	cmp	r3, #6
 8002308:	d010      	beq.n	800232c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f042 0201 	orr.w	r2, r2, #1
 8002318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800231a:	e007      	b.n	800232c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f042 0201 	orr.w	r2, r2, #1
 800232a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800232c:	2300      	movs	r3, #0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3714      	adds	r7, #20
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr
 8002338:	40012c00 	.word	0x40012c00
 800233c:	40000400 	.word	0x40000400
 8002340:	40000800 	.word	0x40000800

08002344 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d101      	bne.n	8002356 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e041      	b.n	80023da <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800235c:	b2db      	uxtb	r3, r3
 800235e:	2b00      	cmp	r3, #0
 8002360:	d106      	bne.n	8002370 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7fe fe98 	bl	80010a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2202      	movs	r2, #2
 8002374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681a      	ldr	r2, [r3, #0]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3304      	adds	r3, #4
 8002380:	4619      	mov	r1, r3
 8002382:	4610      	mov	r0, r2
 8002384:	f000 fd3c 	bl	8002e00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2201      	movs	r2, #1
 800238c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2201      	movs	r2, #1
 8002394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2201      	movs	r2, #1
 800239c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2201      	movs	r2, #1
 80023a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2201      	movs	r2, #1
 80023ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2201      	movs	r2, #1
 80023bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2201      	movs	r2, #1
 80023c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3708      	adds	r7, #8
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
	...

080023e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b084      	sub	sp, #16
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
 80023ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d109      	bne.n	8002408 <HAL_TIM_PWM_Start+0x24>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023fa:	b2db      	uxtb	r3, r3
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	bf14      	ite	ne
 8002400:	2301      	movne	r3, #1
 8002402:	2300      	moveq	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e022      	b.n	800244e <HAL_TIM_PWM_Start+0x6a>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	2b04      	cmp	r3, #4
 800240c:	d109      	bne.n	8002422 <HAL_TIM_PWM_Start+0x3e>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002414:	b2db      	uxtb	r3, r3
 8002416:	2b01      	cmp	r3, #1
 8002418:	bf14      	ite	ne
 800241a:	2301      	movne	r3, #1
 800241c:	2300      	moveq	r3, #0
 800241e:	b2db      	uxtb	r3, r3
 8002420:	e015      	b.n	800244e <HAL_TIM_PWM_Start+0x6a>
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	2b08      	cmp	r3, #8
 8002426:	d109      	bne.n	800243c <HAL_TIM_PWM_Start+0x58>
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800242e:	b2db      	uxtb	r3, r3
 8002430:	2b01      	cmp	r3, #1
 8002432:	bf14      	ite	ne
 8002434:	2301      	movne	r3, #1
 8002436:	2300      	moveq	r3, #0
 8002438:	b2db      	uxtb	r3, r3
 800243a:	e008      	b.n	800244e <HAL_TIM_PWM_Start+0x6a>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002442:	b2db      	uxtb	r3, r3
 8002444:	2b01      	cmp	r3, #1
 8002446:	bf14      	ite	ne
 8002448:	2301      	movne	r3, #1
 800244a:	2300      	moveq	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e05e      	b.n	8002514 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d104      	bne.n	8002466 <HAL_TIM_PWM_Start+0x82>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2202      	movs	r2, #2
 8002460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002464:	e013      	b.n	800248e <HAL_TIM_PWM_Start+0xaa>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	2b04      	cmp	r3, #4
 800246a:	d104      	bne.n	8002476 <HAL_TIM_PWM_Start+0x92>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002474:	e00b      	b.n	800248e <HAL_TIM_PWM_Start+0xaa>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	2b08      	cmp	r3, #8
 800247a:	d104      	bne.n	8002486 <HAL_TIM_PWM_Start+0xa2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2202      	movs	r2, #2
 8002480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002484:	e003      	b.n	800248e <HAL_TIM_PWM_Start+0xaa>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2202      	movs	r2, #2
 800248a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	2201      	movs	r2, #1
 8002494:	6839      	ldr	r1, [r7, #0]
 8002496:	4618      	mov	r0, r3
 8002498:	f000 ffc3 	bl	8003422 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1e      	ldr	r2, [pc, #120]	; (800251c <HAL_TIM_PWM_Start+0x138>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d107      	bne.n	80024b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <HAL_TIM_PWM_Start+0x138>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d00e      	beq.n	80024de <HAL_TIM_PWM_Start+0xfa>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024c8:	d009      	beq.n	80024de <HAL_TIM_PWM_Start+0xfa>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a14      	ldr	r2, [pc, #80]	; (8002520 <HAL_TIM_PWM_Start+0x13c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d004      	beq.n	80024de <HAL_TIM_PWM_Start+0xfa>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a12      	ldr	r2, [pc, #72]	; (8002524 <HAL_TIM_PWM_Start+0x140>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d111      	bne.n	8002502 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d010      	beq.n	8002512 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f042 0201 	orr.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002500:	e007      	b.n	8002512 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f042 0201 	orr.w	r2, r2, #1
 8002510:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40012c00 	.word	0x40012c00
 8002520:	40000400 	.word	0x40000400
 8002524:	40000800 	.word	0x40000800

08002528 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e093      	b.n	8002664 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002542:	b2db      	uxtb	r3, r3
 8002544:	2b00      	cmp	r3, #0
 8002546:	d106      	bne.n	8002556 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7fe fd41 	bl	8000fd8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2202      	movs	r2, #2
 800255a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800256c:	f023 0307 	bic.w	r3, r3, #7
 8002570:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3304      	adds	r3, #4
 800257a:	4619      	mov	r1, r3
 800257c:	4610      	mov	r0, r2
 800257e:	f000 fc3f 	bl	8002e00 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6a1b      	ldr	r3, [r3, #32]
 8002598:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	697a      	ldr	r2, [r7, #20]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025aa:	f023 0303 	bic.w	r3, r3, #3
 80025ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	699b      	ldr	r3, [r3, #24]
 80025b8:	021b      	lsls	r3, r3, #8
 80025ba:	4313      	orrs	r3, r2
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	4313      	orrs	r3, r2
 80025c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80025c8:	f023 030c 	bic.w	r3, r3, #12
 80025cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80025d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	68da      	ldr	r2, [r3, #12]
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	021b      	lsls	r3, r3, #8
 80025e4:	4313      	orrs	r3, r2
 80025e6:	693a      	ldr	r2, [r7, #16]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	011a      	lsls	r2, r3, #4
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6a1b      	ldr	r3, [r3, #32]
 80025f6:	031b      	lsls	r3, r3, #12
 80025f8:	4313      	orrs	r3, r2
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002606:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685a      	ldr	r2, [r3, #4]
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	695b      	ldr	r3, [r3, #20]
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	4313      	orrs	r3, r2
 8002614:	68fa      	ldr	r2, [r7, #12]
 8002616:	4313      	orrs	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	697a      	ldr	r2, [r7, #20]
 8002620:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	68fa      	ldr	r2, [r7, #12]
 8002630:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2201      	movs	r2, #1
 8002636:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2201      	movs	r2, #1
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800267c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002684:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800268c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002694:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d110      	bne.n	80026be <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d102      	bne.n	80026a8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80026a2:	7b7b      	ldrb	r3, [r7, #13]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d001      	beq.n	80026ac <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e069      	b.n	8002780 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2202      	movs	r2, #2
 80026b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2202      	movs	r2, #2
 80026b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80026bc:	e031      	b.n	8002722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	2b04      	cmp	r3, #4
 80026c2:	d110      	bne.n	80026e6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80026c4:	7bbb      	ldrb	r3, [r7, #14]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d102      	bne.n	80026d0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026ca:	7b3b      	ldrb	r3, [r7, #12]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d001      	beq.n	80026d4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e055      	b.n	8002780 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2202      	movs	r2, #2
 80026d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80026e4:	e01d      	b.n	8002722 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026e6:	7bfb      	ldrb	r3, [r7, #15]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d108      	bne.n	80026fe <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80026ec:	7bbb      	ldrb	r3, [r7, #14]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d105      	bne.n	80026fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80026f2:	7b7b      	ldrb	r3, [r7, #13]
 80026f4:	2b01      	cmp	r3, #1
 80026f6:	d102      	bne.n	80026fe <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80026f8:	7b3b      	ldrb	r3, [r7, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e03e      	b.n	8002780 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2202      	movs	r2, #2
 8002706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2202      	movs	r2, #2
 800270e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2202      	movs	r2, #2
 800271e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_TIM_Encoder_Start+0xc4>
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b04      	cmp	r3, #4
 800272c:	d008      	beq.n	8002740 <HAL_TIM_Encoder_Start+0xd4>
 800272e:	e00f      	b.n	8002750 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	2201      	movs	r2, #1
 8002736:	2100      	movs	r1, #0
 8002738:	4618      	mov	r0, r3
 800273a:	f000 fe72 	bl	8003422 <TIM_CCxChannelCmd>
      break;
 800273e:	e016      	b.n	800276e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2201      	movs	r2, #1
 8002746:	2104      	movs	r1, #4
 8002748:	4618      	mov	r0, r3
 800274a:	f000 fe6a 	bl	8003422 <TIM_CCxChannelCmd>
      break;
 800274e:	e00e      	b.n	800276e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2201      	movs	r2, #1
 8002756:	2100      	movs	r1, #0
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fe62 	bl	8003422 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2201      	movs	r2, #1
 8002764:	2104      	movs	r1, #4
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fe5b 	bl	8003422 <TIM_CCxChannelCmd>
      break;
 800276c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	681a      	ldr	r2, [r3, #0]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f042 0201 	orr.w	r2, r2, #1
 800277c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b02      	cmp	r3, #2
 800279c:	d122      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d11b      	bne.n	80027e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f06f 0202 	mvn.w	r2, #2
 80027b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699b      	ldr	r3, [r3, #24]
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 fafd 	bl	8002dca <HAL_TIM_IC_CaptureCallback>
 80027d0:	e005      	b.n	80027de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 faf0 	bl	8002db8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027d8:	6878      	ldr	r0, [r7, #4]
 80027da:	f000 faff 	bl	8002ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	f003 0304 	and.w	r3, r3, #4
 80027ee:	2b04      	cmp	r3, #4
 80027f0:	d122      	bne.n	8002838 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b04      	cmp	r3, #4
 80027fe:	d11b      	bne.n	8002838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0204 	mvn.w	r2, #4
 8002808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 fad3 	bl	8002dca <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 fac6 	bl	8002db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 fad5 	bl	8002ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f003 0308 	and.w	r3, r3, #8
 8002842:	2b08      	cmp	r3, #8
 8002844:	d122      	bne.n	800288c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	68db      	ldr	r3, [r3, #12]
 800284c:	f003 0308 	and.w	r3, r3, #8
 8002850:	2b08      	cmp	r3, #8
 8002852:	d11b      	bne.n	800288c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f06f 0208 	mvn.w	r2, #8
 800285c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2204      	movs	r2, #4
 8002862:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 0303 	and.w	r3, r3, #3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d003      	beq.n	800287a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 faa9 	bl	8002dca <HAL_TIM_IC_CaptureCallback>
 8002878:	e005      	b.n	8002886 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 fa9c 	bl	8002db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	f000 faab 	bl	8002ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	691b      	ldr	r3, [r3, #16]
 8002892:	f003 0310 	and.w	r3, r3, #16
 8002896:	2b10      	cmp	r3, #16
 8002898:	d122      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f003 0310 	and.w	r3, r3, #16
 80028a4:	2b10      	cmp	r3, #16
 80028a6:	d11b      	bne.n	80028e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f06f 0210 	mvn.w	r2, #16
 80028b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2208      	movs	r2, #8
 80028b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 fa7f 	bl	8002dca <HAL_TIM_IC_CaptureCallback>
 80028cc:	e005      	b.n	80028da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028ce:	6878      	ldr	r0, [r7, #4]
 80028d0:	f000 fa72 	bl	8002db8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028d4:	6878      	ldr	r0, [r7, #4]
 80028d6:	f000 fa81 	bl	8002ddc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d10e      	bne.n	800290c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f003 0301 	and.w	r3, r3, #1
 80028f8:	2b01      	cmp	r3, #1
 80028fa:	d107      	bne.n	800290c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f06f 0201 	mvn.w	r2, #1
 8002904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe faaa 	bl	8000e60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002916:	2b80      	cmp	r3, #128	; 0x80
 8002918:	d10e      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002924:	2b80      	cmp	r3, #128	; 0x80
 8002926:	d107      	bne.n	8002938 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f000 fe01 	bl	800353a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002942:	2b40      	cmp	r3, #64	; 0x40
 8002944:	d10e      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002950:	2b40      	cmp	r3, #64	; 0x40
 8002952:	d107      	bne.n	8002964 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800295c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f000 fa45 	bl	8002dee <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b20      	cmp	r3, #32
 8002970:	d10e      	bne.n	8002990 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	f003 0320 	and.w	r3, r3, #32
 800297c:	2b20      	cmp	r3, #32
 800297e:	d107      	bne.n	8002990 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f06f 0220 	mvn.w	r2, #32
 8002988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 fdcc 	bl	8003528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002990:	bf00      	nop
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b086      	sub	sp, #24
 800299c:	af00      	add	r7, sp, #0
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029a4:	2300      	movs	r3, #0
 80029a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d101      	bne.n	80029b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e0ae      	b.n	8002b14 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2201      	movs	r2, #1
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b0c      	cmp	r3, #12
 80029c2:	f200 809f 	bhi.w	8002b04 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80029c6:	a201      	add	r2, pc, #4	; (adr r2, 80029cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80029c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029cc:	08002a01 	.word	0x08002a01
 80029d0:	08002b05 	.word	0x08002b05
 80029d4:	08002b05 	.word	0x08002b05
 80029d8:	08002b05 	.word	0x08002b05
 80029dc:	08002a41 	.word	0x08002a41
 80029e0:	08002b05 	.word	0x08002b05
 80029e4:	08002b05 	.word	0x08002b05
 80029e8:	08002b05 	.word	0x08002b05
 80029ec:	08002a83 	.word	0x08002a83
 80029f0:	08002b05 	.word	0x08002b05
 80029f4:	08002b05 	.word	0x08002b05
 80029f8:	08002b05 	.word	0x08002b05
 80029fc:	08002ac3 	.word	0x08002ac3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 fa5c 	bl	8002ec4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	699a      	ldr	r2, [r3, #24]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0208 	orr.w	r2, r2, #8
 8002a1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0204 	bic.w	r2, r2, #4
 8002a2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	6999      	ldr	r1, [r3, #24]
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	691a      	ldr	r2, [r3, #16]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	619a      	str	r2, [r3, #24]
      break;
 8002a3e:	e064      	b.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68b9      	ldr	r1, [r7, #8]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 faa2 	bl	8002f90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	699a      	ldr	r2, [r3, #24]
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699a      	ldr	r2, [r3, #24]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	6999      	ldr	r1, [r3, #24]
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	021a      	lsls	r2, r3, #8
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	619a      	str	r2, [r3, #24]
      break;
 8002a80:	e043      	b.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	68b9      	ldr	r1, [r7, #8]
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 faeb 	bl	8003064 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69da      	ldr	r2, [r3, #28]
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0208 	orr.w	r2, r2, #8
 8002a9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	69da      	ldr	r2, [r3, #28]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0204 	bic.w	r2, r2, #4
 8002aac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	69d9      	ldr	r1, [r3, #28]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	430a      	orrs	r2, r1
 8002abe:	61da      	str	r2, [r3, #28]
      break;
 8002ac0:	e023      	b.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68b9      	ldr	r1, [r7, #8]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f000 fb35 	bl	8003138 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	69da      	ldr	r2, [r3, #28]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	69da      	ldr	r2, [r3, #28]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69d9      	ldr	r1, [r3, #28]
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	021a      	lsls	r2, r3, #8
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	430a      	orrs	r2, r1
 8002b00:	61da      	str	r2, [r3, #28]
      break;
 8002b02:	e002      	b.n	8002b0a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	75fb      	strb	r3, [r7, #23]
      break;
 8002b08:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b12:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}

08002b1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b26:	2300      	movs	r3, #0
 8002b28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d101      	bne.n	8002b38 <HAL_TIM_ConfigClockSource+0x1c>
 8002b34:	2302      	movs	r3, #2
 8002b36:	e0b4      	b.n	8002ca2 <HAL_TIM_ConfigClockSource+0x186>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2202      	movs	r2, #2
 8002b44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002b56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	68ba      	ldr	r2, [r7, #8]
 8002b66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b70:	d03e      	beq.n	8002bf0 <HAL_TIM_ConfigClockSource+0xd4>
 8002b72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b76:	f200 8087 	bhi.w	8002c88 <HAL_TIM_ConfigClockSource+0x16c>
 8002b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7e:	f000 8086 	beq.w	8002c8e <HAL_TIM_ConfigClockSource+0x172>
 8002b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b86:	d87f      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x16c>
 8002b88:	2b70      	cmp	r3, #112	; 0x70
 8002b8a:	d01a      	beq.n	8002bc2 <HAL_TIM_ConfigClockSource+0xa6>
 8002b8c:	2b70      	cmp	r3, #112	; 0x70
 8002b8e:	d87b      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x16c>
 8002b90:	2b60      	cmp	r3, #96	; 0x60
 8002b92:	d050      	beq.n	8002c36 <HAL_TIM_ConfigClockSource+0x11a>
 8002b94:	2b60      	cmp	r3, #96	; 0x60
 8002b96:	d877      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x16c>
 8002b98:	2b50      	cmp	r3, #80	; 0x50
 8002b9a:	d03c      	beq.n	8002c16 <HAL_TIM_ConfigClockSource+0xfa>
 8002b9c:	2b50      	cmp	r3, #80	; 0x50
 8002b9e:	d873      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba0:	2b40      	cmp	r3, #64	; 0x40
 8002ba2:	d058      	beq.n	8002c56 <HAL_TIM_ConfigClockSource+0x13a>
 8002ba4:	2b40      	cmp	r3, #64	; 0x40
 8002ba6:	d86f      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ba8:	2b30      	cmp	r3, #48	; 0x30
 8002baa:	d064      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15a>
 8002bac:	2b30      	cmp	r3, #48	; 0x30
 8002bae:	d86b      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb0:	2b20      	cmp	r3, #32
 8002bb2:	d060      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15a>
 8002bb4:	2b20      	cmp	r3, #32
 8002bb6:	d867      	bhi.n	8002c88 <HAL_TIM_ConfigClockSource+0x16c>
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d05c      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15a>
 8002bbc:	2b10      	cmp	r3, #16
 8002bbe:	d05a      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0x15a>
 8002bc0:	e062      	b.n	8002c88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6818      	ldr	r0, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	6899      	ldr	r1, [r3, #8]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	685a      	ldr	r2, [r3, #4]
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f000 fc07 	bl	80033e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002bde:	68bb      	ldr	r3, [r7, #8]
 8002be0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002be4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68ba      	ldr	r2, [r7, #8]
 8002bec:	609a      	str	r2, [r3, #8]
      break;
 8002bee:	e04f      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6818      	ldr	r0, [r3, #0]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	6899      	ldr	r1, [r3, #8]
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f000 fbf0 	bl	80033e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689a      	ldr	r2, [r3, #8]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c12:	609a      	str	r2, [r3, #8]
      break;
 8002c14:	e03c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6818      	ldr	r0, [r3, #0]
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	6859      	ldr	r1, [r3, #4]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	461a      	mov	r2, r3
 8002c24:	f000 fb67 	bl	80032f6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2150      	movs	r1, #80	; 0x50
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f000 fbbe 	bl	80033b0 <TIM_ITRx_SetConfig>
      break;
 8002c34:	e02c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6818      	ldr	r0, [r3, #0]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6859      	ldr	r1, [r3, #4]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	461a      	mov	r2, r3
 8002c44:	f000 fb85 	bl	8003352 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2160      	movs	r1, #96	; 0x60
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 fbae 	bl	80033b0 <TIM_ITRx_SetConfig>
      break;
 8002c54:	e01c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	461a      	mov	r2, r3
 8002c64:	f000 fb47 	bl	80032f6 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2140      	movs	r1, #64	; 0x40
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f000 fb9e 	bl	80033b0 <TIM_ITRx_SetConfig>
      break;
 8002c74:	e00c      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4610      	mov	r0, r2
 8002c82:	f000 fb95 	bl	80033b0 <TIM_ITRx_SetConfig>
      break;
 8002c86:	e003      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e000      	b.n	8002c90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002c8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3710      	adds	r7, #16
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002caa:	b580      	push	{r7, lr}
 8002cac:	b082      	sub	sp, #8
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
 8002cb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d101      	bne.n	8002cc2 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	e031      	b.n	8002d26 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002cd2:	6839      	ldr	r1, [r7, #0]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 fa7d 	bl	80031d4 <TIM_SlaveTimer_SetConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d009      	beq.n	8002cf4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e018      	b.n	8002d26 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d02:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68da      	ldr	r2, [r3, #12]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d12:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b0c      	cmp	r3, #12
 8002d42:	d831      	bhi.n	8002da8 <HAL_TIM_ReadCapturedValue+0x78>
 8002d44:	a201      	add	r2, pc, #4	; (adr r2, 8002d4c <HAL_TIM_ReadCapturedValue+0x1c>)
 8002d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d4a:	bf00      	nop
 8002d4c:	08002d81 	.word	0x08002d81
 8002d50:	08002da9 	.word	0x08002da9
 8002d54:	08002da9 	.word	0x08002da9
 8002d58:	08002da9 	.word	0x08002da9
 8002d5c:	08002d8b 	.word	0x08002d8b
 8002d60:	08002da9 	.word	0x08002da9
 8002d64:	08002da9 	.word	0x08002da9
 8002d68:	08002da9 	.word	0x08002da9
 8002d6c:	08002d95 	.word	0x08002d95
 8002d70:	08002da9 	.word	0x08002da9
 8002d74:	08002da9 	.word	0x08002da9
 8002d78:	08002da9 	.word	0x08002da9
 8002d7c:	08002d9f 	.word	0x08002d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d86:	60fb      	str	r3, [r7, #12]

      break;
 8002d88:	e00f      	b.n	8002daa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d90:	60fb      	str	r3, [r7, #12]

      break;
 8002d92:	e00a      	b.n	8002daa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9a:	60fb      	str	r3, [r7, #12]

      break;
 8002d9c:	e005      	b.n	8002daa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	60fb      	str	r3, [r7, #12]

      break;
 8002da6:	e000      	b.n	8002daa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002da8:	bf00      	nop
  }

  return tmpreg;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bc80      	pop	{r7}
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop

08002db8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b083      	sub	sp, #12
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dd2:	bf00      	nop
 8002dd4:	370c      	adds	r7, #12
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr

08002ddc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002de4:	bf00      	nop
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr

08002dee <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b083      	sub	sp, #12
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002df6:	bf00      	nop
 8002df8:	370c      	adds	r7, #12
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bc80      	pop	{r7}
 8002dfe:	4770      	bx	lr

08002e00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a29      	ldr	r2, [pc, #164]	; (8002eb8 <TIM_Base_SetConfig+0xb8>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d00b      	beq.n	8002e30 <TIM_Base_SetConfig+0x30>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e1e:	d007      	beq.n	8002e30 <TIM_Base_SetConfig+0x30>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <TIM_Base_SetConfig+0xbc>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <TIM_Base_SetConfig+0x30>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a25      	ldr	r2, [pc, #148]	; (8002ec0 <TIM_Base_SetConfig+0xc0>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d108      	bne.n	8002e42 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a1c      	ldr	r2, [pc, #112]	; (8002eb8 <TIM_Base_SetConfig+0xb8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d00b      	beq.n	8002e62 <TIM_Base_SetConfig+0x62>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e50:	d007      	beq.n	8002e62 <TIM_Base_SetConfig+0x62>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a19      	ldr	r2, [pc, #100]	; (8002ebc <TIM_Base_SetConfig+0xbc>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d003      	beq.n	8002e62 <TIM_Base_SetConfig+0x62>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a18      	ldr	r2, [pc, #96]	; (8002ec0 <TIM_Base_SetConfig+0xc0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d108      	bne.n	8002e74 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	68db      	ldr	r3, [r3, #12]
 8002e6e:	68fa      	ldr	r2, [r7, #12]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	4a07      	ldr	r2, [pc, #28]	; (8002eb8 <TIM_Base_SetConfig+0xb8>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d103      	bne.n	8002ea8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	615a      	str	r2, [r3, #20]
}
 8002eae:	bf00      	nop
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bc80      	pop	{r7}
 8002eb6:	4770      	bx	lr
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40000800 	.word	0x40000800

08002ec4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b087      	sub	sp, #28
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
 8002ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6a1b      	ldr	r3, [r3, #32]
 8002ed2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1b      	ldr	r3, [r3, #32]
 8002ed8:	f023 0201 	bic.w	r2, r3, #1
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	699b      	ldr	r3, [r3, #24]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f023 0303 	bic.w	r3, r3, #3
 8002efa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f023 0302 	bic.w	r3, r3, #2
 8002f0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a1c      	ldr	r2, [pc, #112]	; (8002f8c <TIM_OC1_SetConfig+0xc8>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d10c      	bne.n	8002f3a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f023 0308 	bic.w	r3, r3, #8
 8002f26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	697a      	ldr	r2, [r7, #20]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a13      	ldr	r2, [pc, #76]	; (8002f8c <TIM_OC1_SetConfig+0xc8>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d111      	bne.n	8002f66 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	697a      	ldr	r2, [r7, #20]
 8002f7e:	621a      	str	r2, [r3, #32]
}
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bc80      	pop	{r7}
 8002f88:	4770      	bx	lr
 8002f8a:	bf00      	nop
 8002f8c:	40012c00 	.word	0x40012c00

08002f90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002f90:	b480      	push	{r7}
 8002f92:	b087      	sub	sp, #28
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6a1b      	ldr	r3, [r3, #32]
 8002fa4:	f023 0210 	bic.w	r2, r3, #16
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	021b      	lsls	r3, r3, #8
 8002fce:	68fa      	ldr	r2, [r7, #12]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	f023 0320 	bic.w	r3, r3, #32
 8002fda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	011b      	lsls	r3, r3, #4
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a1d      	ldr	r2, [pc, #116]	; (8003060 <TIM_OC2_SetConfig+0xd0>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d10d      	bne.n	800300c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	011b      	lsls	r3, r3, #4
 8002ffe:	697a      	ldr	r2, [r7, #20]
 8003000:	4313      	orrs	r3, r2
 8003002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800300a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a14      	ldr	r2, [pc, #80]	; (8003060 <TIM_OC2_SetConfig+0xd0>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d113      	bne.n	800303c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800301a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003022:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	695b      	ldr	r3, [r3, #20]
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	009b      	lsls	r3, r3, #2
 8003036:	693a      	ldr	r2, [r7, #16]
 8003038:	4313      	orrs	r3, r2
 800303a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	685a      	ldr	r2, [r3, #4]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	bc80      	pop	{r7}
 800305e:	4770      	bx	lr
 8003060:	40012c00 	.word	0x40012c00

08003064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003064:	b480      	push	{r7}
 8003066:	b087      	sub	sp, #28
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a1b      	ldr	r3, [r3, #32]
 8003078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	69db      	ldr	r3, [r3, #28]
 800308a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f023 0303 	bic.w	r3, r3, #3
 800309a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80030ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	021b      	lsls	r3, r3, #8
 80030b4:	697a      	ldr	r2, [r7, #20]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a1d      	ldr	r2, [pc, #116]	; (8003134 <TIM_OC3_SetConfig+0xd0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10d      	bne.n	80030de <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80030c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80030dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a14      	ldr	r2, [pc, #80]	; (8003134 <TIM_OC3_SetConfig+0xd0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d113      	bne.n	800310e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80030ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	011b      	lsls	r3, r3, #4
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	699b      	ldr	r3, [r3, #24]
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68fa      	ldr	r2, [r7, #12]
 8003118:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	685a      	ldr	r2, [r3, #4]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	621a      	str	r2, [r3, #32]
}
 8003128:	bf00      	nop
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40012c00 	.word	0x40012c00

08003138 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	021b      	lsls	r3, r3, #8
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4313      	orrs	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003182:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	031b      	lsls	r3, r3, #12
 800318a:	693a      	ldr	r2, [r7, #16]
 800318c:	4313      	orrs	r3, r2
 800318e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	4a0f      	ldr	r2, [pc, #60]	; (80031d0 <TIM_OC4_SetConfig+0x98>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d109      	bne.n	80031ac <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800319e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	019b      	lsls	r3, r3, #6
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	68fa      	ldr	r2, [r7, #12]
 80031b6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	685a      	ldr	r2, [r3, #4]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	693a      	ldr	r2, [r7, #16]
 80031c4:	621a      	str	r2, [r3, #32]
}
 80031c6:	bf00      	nop
 80031c8:	371c      	adds	r7, #28
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bc80      	pop	{r7}
 80031ce:	4770      	bx	lr
 80031d0:	40012c00 	.word	0x40012c00

080031d4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031f0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	693a      	ldr	r2, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f023 0307 	bic.w	r3, r3, #7
 8003202:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	2b70      	cmp	r3, #112	; 0x70
 800321c:	d01a      	beq.n	8003254 <TIM_SlaveTimer_SetConfig+0x80>
 800321e:	2b70      	cmp	r3, #112	; 0x70
 8003220:	d860      	bhi.n	80032e4 <TIM_SlaveTimer_SetConfig+0x110>
 8003222:	2b60      	cmp	r3, #96	; 0x60
 8003224:	d054      	beq.n	80032d0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003226:	2b60      	cmp	r3, #96	; 0x60
 8003228:	d85c      	bhi.n	80032e4 <TIM_SlaveTimer_SetConfig+0x110>
 800322a:	2b50      	cmp	r3, #80	; 0x50
 800322c:	d046      	beq.n	80032bc <TIM_SlaveTimer_SetConfig+0xe8>
 800322e:	2b50      	cmp	r3, #80	; 0x50
 8003230:	d858      	bhi.n	80032e4 <TIM_SlaveTimer_SetConfig+0x110>
 8003232:	2b40      	cmp	r3, #64	; 0x40
 8003234:	d019      	beq.n	800326a <TIM_SlaveTimer_SetConfig+0x96>
 8003236:	2b40      	cmp	r3, #64	; 0x40
 8003238:	d854      	bhi.n	80032e4 <TIM_SlaveTimer_SetConfig+0x110>
 800323a:	2b30      	cmp	r3, #48	; 0x30
 800323c:	d055      	beq.n	80032ea <TIM_SlaveTimer_SetConfig+0x116>
 800323e:	2b30      	cmp	r3, #48	; 0x30
 8003240:	d850      	bhi.n	80032e4 <TIM_SlaveTimer_SetConfig+0x110>
 8003242:	2b20      	cmp	r3, #32
 8003244:	d051      	beq.n	80032ea <TIM_SlaveTimer_SetConfig+0x116>
 8003246:	2b20      	cmp	r3, #32
 8003248:	d84c      	bhi.n	80032e4 <TIM_SlaveTimer_SetConfig+0x110>
 800324a:	2b00      	cmp	r3, #0
 800324c:	d04d      	beq.n	80032ea <TIM_SlaveTimer_SetConfig+0x116>
 800324e:	2b10      	cmp	r3, #16
 8003250:	d04b      	beq.n	80032ea <TIM_SlaveTimer_SetConfig+0x116>
 8003252:	e047      	b.n	80032e4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6818      	ldr	r0, [r3, #0]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	68d9      	ldr	r1, [r3, #12]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	f000 f8be 	bl	80033e4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003268:	e040      	b.n	80032ec <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2b05      	cmp	r3, #5
 8003270:	d101      	bne.n	8003276 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e03b      	b.n	80032ee <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	6a1b      	ldr	r3, [r3, #32]
 800327c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a1a      	ldr	r2, [r3, #32]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f022 0201 	bic.w	r2, r2, #1
 800328c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800329c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	691b      	ldr	r3, [r3, #16]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	68ba      	ldr	r2, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	621a      	str	r2, [r3, #32]
      break;
 80032ba:	e017      	b.n	80032ec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6818      	ldr	r0, [r3, #0]
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	6899      	ldr	r1, [r3, #8]
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	691b      	ldr	r3, [r3, #16]
 80032c8:	461a      	mov	r2, r3
 80032ca:	f000 f814 	bl	80032f6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80032ce:	e00d      	b.n	80032ec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6899      	ldr	r1, [r3, #8]
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	691b      	ldr	r3, [r3, #16]
 80032dc:	461a      	mov	r2, r3
 80032de:	f000 f838 	bl	8003352 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 80032e2:	e003      	b.n	80032ec <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	75fb      	strb	r3, [r7, #23]
      break;
 80032e8:	e000      	b.n	80032ec <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80032ea:	bf00      	nop
  }

  return status;
 80032ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3718      	adds	r7, #24
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b087      	sub	sp, #28
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	60f8      	str	r0, [r7, #12]
 80032fe:	60b9      	str	r1, [r7, #8]
 8003300:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6a1b      	ldr	r3, [r3, #32]
 8003306:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f023 0201 	bic.w	r2, r3, #1
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003320:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	4313      	orrs	r3, r2
 800332a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f023 030a 	bic.w	r3, r3, #10
 8003332:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4313      	orrs	r3, r2
 800333a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	693a      	ldr	r2, [r7, #16]
 8003340:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	697a      	ldr	r2, [r7, #20]
 8003346:	621a      	str	r2, [r3, #32]
}
 8003348:	bf00      	nop
 800334a:	371c      	adds	r7, #28
 800334c:	46bd      	mov	sp, r7
 800334e:	bc80      	pop	{r7}
 8003350:	4770      	bx	lr

08003352 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003352:	b480      	push	{r7}
 8003354:	b087      	sub	sp, #28
 8003356:	af00      	add	r7, sp, #0
 8003358:	60f8      	str	r0, [r7, #12]
 800335a:	60b9      	str	r1, [r7, #8]
 800335c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	6a1b      	ldr	r3, [r3, #32]
 8003362:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 0210 	bic.w	r2, r3, #16
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800337c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	031b      	lsls	r3, r3, #12
 8003382:	693a      	ldr	r2, [r7, #16]
 8003384:	4313      	orrs	r3, r2
 8003386:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800338e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	697a      	ldr	r2, [r7, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	693a      	ldr	r2, [r7, #16]
 800339e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr

080033b0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033c8:	683a      	ldr	r2, [r7, #0]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f043 0307 	orr.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	68fa      	ldr	r2, [r7, #12]
 80033d8:	609a      	str	r2, [r3, #8]
}
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr

080033e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b087      	sub	sp, #28
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	021a      	lsls	r2, r3, #8
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	431a      	orrs	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	4313      	orrs	r3, r2
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4313      	orrs	r3, r2
 8003410:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	697a      	ldr	r2, [r7, #20]
 8003416:	609a      	str	r2, [r3, #8]
}
 8003418:	bf00      	nop
 800341a:	371c      	adds	r7, #28
 800341c:	46bd      	mov	sp, r7
 800341e:	bc80      	pop	{r7}
 8003420:	4770      	bx	lr

08003422 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003422:	b480      	push	{r7}
 8003424:	b087      	sub	sp, #28
 8003426:	af00      	add	r7, sp, #0
 8003428:	60f8      	str	r0, [r7, #12]
 800342a:	60b9      	str	r1, [r7, #8]
 800342c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	f003 031f 	and.w	r3, r3, #31
 8003434:	2201      	movs	r2, #1
 8003436:	fa02 f303 	lsl.w	r3, r2, r3
 800343a:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	6a1a      	ldr	r2, [r3, #32]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	43db      	mvns	r3, r3
 8003444:	401a      	ands	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6a1a      	ldr	r2, [r3, #32]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	f003 031f 	and.w	r3, r3, #31
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	fa01 f303 	lsl.w	r3, r1, r3
 800345a:	431a      	orrs	r2, r3
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	621a      	str	r2, [r3, #32]
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
	...

0800346c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347c:	2b01      	cmp	r3, #1
 800347e:	d101      	bne.n	8003484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003480:	2302      	movs	r3, #2
 8003482:	e046      	b.n	8003512 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68fa      	ldr	r2, [r7, #12]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68fa      	ldr	r2, [r7, #12]
 80034bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a16      	ldr	r2, [pc, #88]	; (800351c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d00e      	beq.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d009      	beq.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a12      	ldr	r2, [pc, #72]	; (8003520 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d004      	beq.n	80034e6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a10      	ldr	r2, [pc, #64]	; (8003524 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d10c      	bne.n	8003500 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	4313      	orrs	r3, r2
 80034f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68ba      	ldr	r2, [r7, #8]
 80034fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr
 800351c:	40012c00 	.word	0x40012c00
 8003520:	40000400 	.word	0x40000400
 8003524:	40000800 	.word	0x40000800

08003528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr

0800353a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800353a:	b480      	push	{r7}
 800353c:	b083      	sub	sp, #12
 800353e:	af00      	add	r7, sp, #0
 8003540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003542:	bf00      	nop
 8003544:	370c      	adds	r7, #12
 8003546:	46bd      	mov	sp, r7
 8003548:	bc80      	pop	{r7}
 800354a:	4770      	bx	lr

0800354c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e042      	b.n	80035e4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fd fde4 	bl	8001140 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2224      	movs	r2, #36	; 0x24
 800357c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800358e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f000 f91d 	bl	80037d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	695a      	ldr	r2, [r3, #20]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3708      	adds	r7, #8
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	; 0x28
 80035f0:	af02      	add	r7, sp, #8
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	603b      	str	r3, [r7, #0]
 80035f8:	4613      	mov	r3, r2
 80035fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003606:	b2db      	uxtb	r3, r3
 8003608:	2b20      	cmp	r3, #32
 800360a:	d16d      	bne.n	80036e8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_UART_Transmit+0x2c>
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e066      	b.n	80036ea <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2221      	movs	r2, #33	; 0x21
 8003626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800362a:	f7fd ff3d 	bl	80014a8 <HAL_GetTick>
 800362e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	88fa      	ldrh	r2, [r7, #6]
 8003634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	88fa      	ldrh	r2, [r7, #6]
 800363a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003644:	d108      	bne.n	8003658 <HAL_UART_Transmit+0x6c>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	e003      	b.n	8003660 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800365c:	2300      	movs	r3, #0
 800365e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003660:	e02a      	b.n	80036b8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2200      	movs	r2, #0
 800366a:	2180      	movs	r1, #128	; 0x80
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f840 	bl	80036f2 <UART_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e036      	b.n	80036ea <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d10b      	bne.n	800369a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	881b      	ldrh	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003690:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003692:	69bb      	ldr	r3, [r7, #24]
 8003694:	3302      	adds	r3, #2
 8003696:	61bb      	str	r3, [r7, #24]
 8003698:	e007      	b.n	80036aa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	781a      	ldrb	r2, [r3, #0]
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	3301      	adds	r3, #1
 80036a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	3b01      	subs	r3, #1
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1cf      	bne.n	8003662 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	697b      	ldr	r3, [r7, #20]
 80036c8:	2200      	movs	r2, #0
 80036ca:	2140      	movs	r1, #64	; 0x40
 80036cc:	68f8      	ldr	r0, [r7, #12]
 80036ce:	f000 f810 	bl	80036f2 <UART_WaitOnFlagUntilTimeout>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e006      	b.n	80036ea <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e000      	b.n	80036ea <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80036e8:	2302      	movs	r3, #2
  }
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3720      	adds	r7, #32
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b090      	sub	sp, #64	; 0x40
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003702:	e050      	b.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003704:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800370a:	d04c      	beq.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800370c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800370e:	2b00      	cmp	r3, #0
 8003710:	d007      	beq.n	8003722 <UART_WaitOnFlagUntilTimeout+0x30>
 8003712:	f7fd fec9 	bl	80014a8 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800371e:	429a      	cmp	r2, r3
 8003720:	d241      	bcs.n	80037a6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	330c      	adds	r3, #12
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	e853 3f00 	ldrex	r3, [r3]
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003734:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003738:	63fb      	str	r3, [r7, #60]	; 0x3c
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	330c      	adds	r3, #12
 8003740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003742:	637a      	str	r2, [r7, #52]	; 0x34
 8003744:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003746:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003748:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800374a:	e841 2300 	strex	r3, r2, [r1]
 800374e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003752:	2b00      	cmp	r3, #0
 8003754:	d1e5      	bne.n	8003722 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3314      	adds	r3, #20
 800375c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	e853 3f00 	ldrex	r3, [r3]
 8003764:	613b      	str	r3, [r7, #16]
   return(result);
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f023 0301 	bic.w	r3, r3, #1
 800376c:	63bb      	str	r3, [r7, #56]	; 0x38
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	3314      	adds	r3, #20
 8003774:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003776:	623a      	str	r2, [r7, #32]
 8003778:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800377a:	69f9      	ldr	r1, [r7, #28]
 800377c:	6a3a      	ldr	r2, [r7, #32]
 800377e:	e841 2300 	strex	r3, r2, [r1]
 8003782:	61bb      	str	r3, [r7, #24]
   return(result);
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1e5      	bne.n	8003756 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e00f      	b.n	80037c6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	4013      	ands	r3, r2
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	461a      	mov	r2, r3
 80037be:	79fb      	ldrb	r3, [r7, #7]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d09f      	beq.n	8003704 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3740      	adds	r7, #64	; 0x40
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	431a      	orrs	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800380a:	f023 030c 	bic.w	r3, r3, #12
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6812      	ldr	r2, [r2, #0]
 8003812:	68b9      	ldr	r1, [r7, #8]
 8003814:	430b      	orrs	r3, r1
 8003816:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699a      	ldr	r2, [r3, #24]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a2c      	ldr	r2, [pc, #176]	; (80038e4 <UART_SetConfig+0x114>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d103      	bne.n	8003840 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003838:	f7fe fcb0 	bl	800219c <HAL_RCC_GetPCLK2Freq>
 800383c:	60f8      	str	r0, [r7, #12]
 800383e:	e002      	b.n	8003846 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003840:	f7fe fc98 	bl	8002174 <HAL_RCC_GetPCLK1Freq>
 8003844:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	4613      	mov	r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4413      	add	r3, r2
 800384e:	009a      	lsls	r2, r3, #2
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	fbb2 f3f3 	udiv	r3, r2, r3
 800385c:	4a22      	ldr	r2, [pc, #136]	; (80038e8 <UART_SetConfig+0x118>)
 800385e:	fba2 2303 	umull	r2, r3, r2, r3
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	0119      	lsls	r1, r3, #4
 8003866:	68fa      	ldr	r2, [r7, #12]
 8003868:	4613      	mov	r3, r2
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4413      	add	r3, r2
 800386e:	009a      	lsls	r2, r3, #2
 8003870:	441a      	add	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	fbb2 f2f3 	udiv	r2, r2, r3
 800387c:	4b1a      	ldr	r3, [pc, #104]	; (80038e8 <UART_SetConfig+0x118>)
 800387e:	fba3 0302 	umull	r0, r3, r3, r2
 8003882:	095b      	lsrs	r3, r3, #5
 8003884:	2064      	movs	r0, #100	; 0x64
 8003886:	fb00 f303 	mul.w	r3, r0, r3
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	3332      	adds	r3, #50	; 0x32
 8003890:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <UART_SetConfig+0x118>)
 8003892:	fba2 2303 	umull	r2, r3, r2, r3
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800389c:	4419      	add	r1, r3
 800389e:	68fa      	ldr	r2, [r7, #12]
 80038a0:	4613      	mov	r3, r2
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	009a      	lsls	r2, r3, #2
 80038a8:	441a      	add	r2, r3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80038b4:	4b0c      	ldr	r3, [pc, #48]	; (80038e8 <UART_SetConfig+0x118>)
 80038b6:	fba3 0302 	umull	r0, r3, r3, r2
 80038ba:	095b      	lsrs	r3, r3, #5
 80038bc:	2064      	movs	r0, #100	; 0x64
 80038be:	fb00 f303 	mul.w	r3, r0, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	3332      	adds	r3, #50	; 0x32
 80038c8:	4a07      	ldr	r2, [pc, #28]	; (80038e8 <UART_SetConfig+0x118>)
 80038ca:	fba2 2303 	umull	r2, r3, r2, r3
 80038ce:	095b      	lsrs	r3, r3, #5
 80038d0:	f003 020f 	and.w	r2, r3, #15
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	440a      	add	r2, r1
 80038da:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80038dc:	bf00      	nop
 80038de:	3710      	adds	r7, #16
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	40013800 	.word	0x40013800
 80038e8:	51eb851f 	.word	0x51eb851f

080038ec <__errno>:
 80038ec:	4b01      	ldr	r3, [pc, #4]	; (80038f4 <__errno+0x8>)
 80038ee:	6818      	ldr	r0, [r3, #0]
 80038f0:	4770      	bx	lr
 80038f2:	bf00      	nop
 80038f4:	20000014 	.word	0x20000014

080038f8 <__libc_init_array>:
 80038f8:	b570      	push	{r4, r5, r6, lr}
 80038fa:	2600      	movs	r6, #0
 80038fc:	4d0c      	ldr	r5, [pc, #48]	; (8003930 <__libc_init_array+0x38>)
 80038fe:	4c0d      	ldr	r4, [pc, #52]	; (8003934 <__libc_init_array+0x3c>)
 8003900:	1b64      	subs	r4, r4, r5
 8003902:	10a4      	asrs	r4, r4, #2
 8003904:	42a6      	cmp	r6, r4
 8003906:	d109      	bne.n	800391c <__libc_init_array+0x24>
 8003908:	f002 fd46 	bl	8006398 <_init>
 800390c:	2600      	movs	r6, #0
 800390e:	4d0a      	ldr	r5, [pc, #40]	; (8003938 <__libc_init_array+0x40>)
 8003910:	4c0a      	ldr	r4, [pc, #40]	; (800393c <__libc_init_array+0x44>)
 8003912:	1b64      	subs	r4, r4, r5
 8003914:	10a4      	asrs	r4, r4, #2
 8003916:	42a6      	cmp	r6, r4
 8003918:	d105      	bne.n	8003926 <__libc_init_array+0x2e>
 800391a:	bd70      	pop	{r4, r5, r6, pc}
 800391c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003920:	4798      	blx	r3
 8003922:	3601      	adds	r6, #1
 8003924:	e7ee      	b.n	8003904 <__libc_init_array+0xc>
 8003926:	f855 3b04 	ldr.w	r3, [r5], #4
 800392a:	4798      	blx	r3
 800392c:	3601      	adds	r6, #1
 800392e:	e7f2      	b.n	8003916 <__libc_init_array+0x1e>
 8003930:	080067ec 	.word	0x080067ec
 8003934:	080067ec 	.word	0x080067ec
 8003938:	080067ec 	.word	0x080067ec
 800393c:	080067f0 	.word	0x080067f0

08003940 <memset>:
 8003940:	4603      	mov	r3, r0
 8003942:	4402      	add	r2, r0
 8003944:	4293      	cmp	r3, r2
 8003946:	d100      	bne.n	800394a <memset+0xa>
 8003948:	4770      	bx	lr
 800394a:	f803 1b01 	strb.w	r1, [r3], #1
 800394e:	e7f9      	b.n	8003944 <memset+0x4>

08003950 <__cvt>:
 8003950:	2b00      	cmp	r3, #0
 8003952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003956:	461f      	mov	r7, r3
 8003958:	bfbb      	ittet	lt
 800395a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800395e:	461f      	movlt	r7, r3
 8003960:	2300      	movge	r3, #0
 8003962:	232d      	movlt	r3, #45	; 0x2d
 8003964:	b088      	sub	sp, #32
 8003966:	4614      	mov	r4, r2
 8003968:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800396a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800396c:	7013      	strb	r3, [r2, #0]
 800396e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003970:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003974:	f023 0820 	bic.w	r8, r3, #32
 8003978:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800397c:	d005      	beq.n	800398a <__cvt+0x3a>
 800397e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003982:	d100      	bne.n	8003986 <__cvt+0x36>
 8003984:	3501      	adds	r5, #1
 8003986:	2302      	movs	r3, #2
 8003988:	e000      	b.n	800398c <__cvt+0x3c>
 800398a:	2303      	movs	r3, #3
 800398c:	aa07      	add	r2, sp, #28
 800398e:	9204      	str	r2, [sp, #16]
 8003990:	aa06      	add	r2, sp, #24
 8003992:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003996:	e9cd 3500 	strd	r3, r5, [sp]
 800399a:	4622      	mov	r2, r4
 800399c:	463b      	mov	r3, r7
 800399e:	f000 fcdb 	bl	8004358 <_dtoa_r>
 80039a2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80039a6:	4606      	mov	r6, r0
 80039a8:	d102      	bne.n	80039b0 <__cvt+0x60>
 80039aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80039ac:	07db      	lsls	r3, r3, #31
 80039ae:	d522      	bpl.n	80039f6 <__cvt+0xa6>
 80039b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80039b4:	eb06 0905 	add.w	r9, r6, r5
 80039b8:	d110      	bne.n	80039dc <__cvt+0x8c>
 80039ba:	7833      	ldrb	r3, [r6, #0]
 80039bc:	2b30      	cmp	r3, #48	; 0x30
 80039be:	d10a      	bne.n	80039d6 <__cvt+0x86>
 80039c0:	2200      	movs	r2, #0
 80039c2:	2300      	movs	r3, #0
 80039c4:	4620      	mov	r0, r4
 80039c6:	4639      	mov	r1, r7
 80039c8:	f7fc ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80039cc:	b918      	cbnz	r0, 80039d6 <__cvt+0x86>
 80039ce:	f1c5 0501 	rsb	r5, r5, #1
 80039d2:	f8ca 5000 	str.w	r5, [sl]
 80039d6:	f8da 3000 	ldr.w	r3, [sl]
 80039da:	4499      	add	r9, r3
 80039dc:	2200      	movs	r2, #0
 80039de:	2300      	movs	r3, #0
 80039e0:	4620      	mov	r0, r4
 80039e2:	4639      	mov	r1, r7
 80039e4:	f7fc ffe0 	bl	80009a8 <__aeabi_dcmpeq>
 80039e8:	b108      	cbz	r0, 80039ee <__cvt+0x9e>
 80039ea:	f8cd 901c 	str.w	r9, [sp, #28]
 80039ee:	2230      	movs	r2, #48	; 0x30
 80039f0:	9b07      	ldr	r3, [sp, #28]
 80039f2:	454b      	cmp	r3, r9
 80039f4:	d307      	bcc.n	8003a06 <__cvt+0xb6>
 80039f6:	4630      	mov	r0, r6
 80039f8:	9b07      	ldr	r3, [sp, #28]
 80039fa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80039fc:	1b9b      	subs	r3, r3, r6
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	b008      	add	sp, #32
 8003a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a06:	1c59      	adds	r1, r3, #1
 8003a08:	9107      	str	r1, [sp, #28]
 8003a0a:	701a      	strb	r2, [r3, #0]
 8003a0c:	e7f0      	b.n	80039f0 <__cvt+0xa0>

08003a0e <__exponent>:
 8003a0e:	4603      	mov	r3, r0
 8003a10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a12:	2900      	cmp	r1, #0
 8003a14:	f803 2b02 	strb.w	r2, [r3], #2
 8003a18:	bfb6      	itet	lt
 8003a1a:	222d      	movlt	r2, #45	; 0x2d
 8003a1c:	222b      	movge	r2, #43	; 0x2b
 8003a1e:	4249      	neglt	r1, r1
 8003a20:	2909      	cmp	r1, #9
 8003a22:	7042      	strb	r2, [r0, #1]
 8003a24:	dd2b      	ble.n	8003a7e <__exponent+0x70>
 8003a26:	f10d 0407 	add.w	r4, sp, #7
 8003a2a:	46a4      	mov	ip, r4
 8003a2c:	270a      	movs	r7, #10
 8003a2e:	fb91 f6f7 	sdiv	r6, r1, r7
 8003a32:	460a      	mov	r2, r1
 8003a34:	46a6      	mov	lr, r4
 8003a36:	fb07 1516 	mls	r5, r7, r6, r1
 8003a3a:	2a63      	cmp	r2, #99	; 0x63
 8003a3c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8003a40:	4631      	mov	r1, r6
 8003a42:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8003a46:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8003a4a:	dcf0      	bgt.n	8003a2e <__exponent+0x20>
 8003a4c:	3130      	adds	r1, #48	; 0x30
 8003a4e:	f1ae 0502 	sub.w	r5, lr, #2
 8003a52:	f804 1c01 	strb.w	r1, [r4, #-1]
 8003a56:	4629      	mov	r1, r5
 8003a58:	1c44      	adds	r4, r0, #1
 8003a5a:	4561      	cmp	r1, ip
 8003a5c:	d30a      	bcc.n	8003a74 <__exponent+0x66>
 8003a5e:	f10d 0209 	add.w	r2, sp, #9
 8003a62:	eba2 020e 	sub.w	r2, r2, lr
 8003a66:	4565      	cmp	r5, ip
 8003a68:	bf88      	it	hi
 8003a6a:	2200      	movhi	r2, #0
 8003a6c:	4413      	add	r3, r2
 8003a6e:	1a18      	subs	r0, r3, r0
 8003a70:	b003      	add	sp, #12
 8003a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a78:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003a7c:	e7ed      	b.n	8003a5a <__exponent+0x4c>
 8003a7e:	2330      	movs	r3, #48	; 0x30
 8003a80:	3130      	adds	r1, #48	; 0x30
 8003a82:	7083      	strb	r3, [r0, #2]
 8003a84:	70c1      	strb	r1, [r0, #3]
 8003a86:	1d03      	adds	r3, r0, #4
 8003a88:	e7f1      	b.n	8003a6e <__exponent+0x60>
	...

08003a8c <_printf_float>:
 8003a8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a90:	b091      	sub	sp, #68	; 0x44
 8003a92:	460c      	mov	r4, r1
 8003a94:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003a98:	4616      	mov	r6, r2
 8003a9a:	461f      	mov	r7, r3
 8003a9c:	4605      	mov	r5, r0
 8003a9e:	f001 fb3f 	bl	8005120 <_localeconv_r>
 8003aa2:	6803      	ldr	r3, [r0, #0]
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	9309      	str	r3, [sp, #36]	; 0x24
 8003aa8:	f7fc fb52 	bl	8000150 <strlen>
 8003aac:	2300      	movs	r3, #0
 8003aae:	930e      	str	r3, [sp, #56]	; 0x38
 8003ab0:	f8d8 3000 	ldr.w	r3, [r8]
 8003ab4:	900a      	str	r0, [sp, #40]	; 0x28
 8003ab6:	3307      	adds	r3, #7
 8003ab8:	f023 0307 	bic.w	r3, r3, #7
 8003abc:	f103 0208 	add.w	r2, r3, #8
 8003ac0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003ac4:	f8d4 b000 	ldr.w	fp, [r4]
 8003ac8:	f8c8 2000 	str.w	r2, [r8]
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003ad4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003ad8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003adc:	930b      	str	r3, [sp, #44]	; 0x2c
 8003ade:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ae2:	4640      	mov	r0, r8
 8003ae4:	4b9c      	ldr	r3, [pc, #624]	; (8003d58 <_printf_float+0x2cc>)
 8003ae6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ae8:	f7fc ff90 	bl	8000a0c <__aeabi_dcmpun>
 8003aec:	bb70      	cbnz	r0, 8003b4c <_printf_float+0xc0>
 8003aee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003af2:	4640      	mov	r0, r8
 8003af4:	4b98      	ldr	r3, [pc, #608]	; (8003d58 <_printf_float+0x2cc>)
 8003af6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003af8:	f7fc ff6a 	bl	80009d0 <__aeabi_dcmple>
 8003afc:	bb30      	cbnz	r0, 8003b4c <_printf_float+0xc0>
 8003afe:	2200      	movs	r2, #0
 8003b00:	2300      	movs	r3, #0
 8003b02:	4640      	mov	r0, r8
 8003b04:	4651      	mov	r1, sl
 8003b06:	f7fc ff59 	bl	80009bc <__aeabi_dcmplt>
 8003b0a:	b110      	cbz	r0, 8003b12 <_printf_float+0x86>
 8003b0c:	232d      	movs	r3, #45	; 0x2d
 8003b0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b12:	4b92      	ldr	r3, [pc, #584]	; (8003d5c <_printf_float+0x2d0>)
 8003b14:	4892      	ldr	r0, [pc, #584]	; (8003d60 <_printf_float+0x2d4>)
 8003b16:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003b1a:	bf94      	ite	ls
 8003b1c:	4698      	movls	r8, r3
 8003b1e:	4680      	movhi	r8, r0
 8003b20:	2303      	movs	r3, #3
 8003b22:	f04f 0a00 	mov.w	sl, #0
 8003b26:	6123      	str	r3, [r4, #16]
 8003b28:	f02b 0304 	bic.w	r3, fp, #4
 8003b2c:	6023      	str	r3, [r4, #0]
 8003b2e:	4633      	mov	r3, r6
 8003b30:	4621      	mov	r1, r4
 8003b32:	4628      	mov	r0, r5
 8003b34:	9700      	str	r7, [sp, #0]
 8003b36:	aa0f      	add	r2, sp, #60	; 0x3c
 8003b38:	f000 f9d4 	bl	8003ee4 <_printf_common>
 8003b3c:	3001      	adds	r0, #1
 8003b3e:	f040 8090 	bne.w	8003c62 <_printf_float+0x1d6>
 8003b42:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b46:	b011      	add	sp, #68	; 0x44
 8003b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b4c:	4642      	mov	r2, r8
 8003b4e:	4653      	mov	r3, sl
 8003b50:	4640      	mov	r0, r8
 8003b52:	4651      	mov	r1, sl
 8003b54:	f7fc ff5a 	bl	8000a0c <__aeabi_dcmpun>
 8003b58:	b148      	cbz	r0, 8003b6e <_printf_float+0xe2>
 8003b5a:	f1ba 0f00 	cmp.w	sl, #0
 8003b5e:	bfb8      	it	lt
 8003b60:	232d      	movlt	r3, #45	; 0x2d
 8003b62:	4880      	ldr	r0, [pc, #512]	; (8003d64 <_printf_float+0x2d8>)
 8003b64:	bfb8      	it	lt
 8003b66:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8003b6a:	4b7f      	ldr	r3, [pc, #508]	; (8003d68 <_printf_float+0x2dc>)
 8003b6c:	e7d3      	b.n	8003b16 <_printf_float+0x8a>
 8003b6e:	6863      	ldr	r3, [r4, #4]
 8003b70:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8003b74:	1c5a      	adds	r2, r3, #1
 8003b76:	d142      	bne.n	8003bfe <_printf_float+0x172>
 8003b78:	2306      	movs	r3, #6
 8003b7a:	6063      	str	r3, [r4, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	9206      	str	r2, [sp, #24]
 8003b80:	aa0e      	add	r2, sp, #56	; 0x38
 8003b82:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8003b86:	aa0d      	add	r2, sp, #52	; 0x34
 8003b88:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8003b8c:	9203      	str	r2, [sp, #12]
 8003b8e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8003b92:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003b96:	6023      	str	r3, [r4, #0]
 8003b98:	6863      	ldr	r3, [r4, #4]
 8003b9a:	4642      	mov	r2, r8
 8003b9c:	9300      	str	r3, [sp, #0]
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	4653      	mov	r3, sl
 8003ba2:	910b      	str	r1, [sp, #44]	; 0x2c
 8003ba4:	f7ff fed4 	bl	8003950 <__cvt>
 8003ba8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003baa:	4680      	mov	r8, r0
 8003bac:	2947      	cmp	r1, #71	; 0x47
 8003bae:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003bb0:	d108      	bne.n	8003bc4 <_printf_float+0x138>
 8003bb2:	1cc8      	adds	r0, r1, #3
 8003bb4:	db02      	blt.n	8003bbc <_printf_float+0x130>
 8003bb6:	6863      	ldr	r3, [r4, #4]
 8003bb8:	4299      	cmp	r1, r3
 8003bba:	dd40      	ble.n	8003c3e <_printf_float+0x1b2>
 8003bbc:	f1a9 0902 	sub.w	r9, r9, #2
 8003bc0:	fa5f f989 	uxtb.w	r9, r9
 8003bc4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003bc8:	d81f      	bhi.n	8003c0a <_printf_float+0x17e>
 8003bca:	464a      	mov	r2, r9
 8003bcc:	3901      	subs	r1, #1
 8003bce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003bd2:	910d      	str	r1, [sp, #52]	; 0x34
 8003bd4:	f7ff ff1b 	bl	8003a0e <__exponent>
 8003bd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003bda:	4682      	mov	sl, r0
 8003bdc:	1813      	adds	r3, r2, r0
 8003bde:	2a01      	cmp	r2, #1
 8003be0:	6123      	str	r3, [r4, #16]
 8003be2:	dc02      	bgt.n	8003bea <_printf_float+0x15e>
 8003be4:	6822      	ldr	r2, [r4, #0]
 8003be6:	07d2      	lsls	r2, r2, #31
 8003be8:	d501      	bpl.n	8003bee <_printf_float+0x162>
 8003bea:	3301      	adds	r3, #1
 8003bec:	6123      	str	r3, [r4, #16]
 8003bee:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d09b      	beq.n	8003b2e <_printf_float+0xa2>
 8003bf6:	232d      	movs	r3, #45	; 0x2d
 8003bf8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bfc:	e797      	b.n	8003b2e <_printf_float+0xa2>
 8003bfe:	2947      	cmp	r1, #71	; 0x47
 8003c00:	d1bc      	bne.n	8003b7c <_printf_float+0xf0>
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1ba      	bne.n	8003b7c <_printf_float+0xf0>
 8003c06:	2301      	movs	r3, #1
 8003c08:	e7b7      	b.n	8003b7a <_printf_float+0xee>
 8003c0a:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8003c0e:	d118      	bne.n	8003c42 <_printf_float+0x1b6>
 8003c10:	2900      	cmp	r1, #0
 8003c12:	6863      	ldr	r3, [r4, #4]
 8003c14:	dd0b      	ble.n	8003c2e <_printf_float+0x1a2>
 8003c16:	6121      	str	r1, [r4, #16]
 8003c18:	b913      	cbnz	r3, 8003c20 <_printf_float+0x194>
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	07d0      	lsls	r0, r2, #31
 8003c1e:	d502      	bpl.n	8003c26 <_printf_float+0x19a>
 8003c20:	3301      	adds	r3, #1
 8003c22:	440b      	add	r3, r1
 8003c24:	6123      	str	r3, [r4, #16]
 8003c26:	f04f 0a00 	mov.w	sl, #0
 8003c2a:	65a1      	str	r1, [r4, #88]	; 0x58
 8003c2c:	e7df      	b.n	8003bee <_printf_float+0x162>
 8003c2e:	b913      	cbnz	r3, 8003c36 <_printf_float+0x1aa>
 8003c30:	6822      	ldr	r2, [r4, #0]
 8003c32:	07d2      	lsls	r2, r2, #31
 8003c34:	d501      	bpl.n	8003c3a <_printf_float+0x1ae>
 8003c36:	3302      	adds	r3, #2
 8003c38:	e7f4      	b.n	8003c24 <_printf_float+0x198>
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e7f2      	b.n	8003c24 <_printf_float+0x198>
 8003c3e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8003c42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003c44:	4299      	cmp	r1, r3
 8003c46:	db05      	blt.n	8003c54 <_printf_float+0x1c8>
 8003c48:	6823      	ldr	r3, [r4, #0]
 8003c4a:	6121      	str	r1, [r4, #16]
 8003c4c:	07d8      	lsls	r0, r3, #31
 8003c4e:	d5ea      	bpl.n	8003c26 <_printf_float+0x19a>
 8003c50:	1c4b      	adds	r3, r1, #1
 8003c52:	e7e7      	b.n	8003c24 <_printf_float+0x198>
 8003c54:	2900      	cmp	r1, #0
 8003c56:	bfcc      	ite	gt
 8003c58:	2201      	movgt	r2, #1
 8003c5a:	f1c1 0202 	rsble	r2, r1, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	e7e0      	b.n	8003c24 <_printf_float+0x198>
 8003c62:	6823      	ldr	r3, [r4, #0]
 8003c64:	055a      	lsls	r2, r3, #21
 8003c66:	d407      	bmi.n	8003c78 <_printf_float+0x1ec>
 8003c68:	6923      	ldr	r3, [r4, #16]
 8003c6a:	4642      	mov	r2, r8
 8003c6c:	4631      	mov	r1, r6
 8003c6e:	4628      	mov	r0, r5
 8003c70:	47b8      	blx	r7
 8003c72:	3001      	adds	r0, #1
 8003c74:	d12b      	bne.n	8003cce <_printf_float+0x242>
 8003c76:	e764      	b.n	8003b42 <_printf_float+0xb6>
 8003c78:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003c7c:	f240 80dd 	bls.w	8003e3a <_printf_float+0x3ae>
 8003c80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003c84:	2200      	movs	r2, #0
 8003c86:	2300      	movs	r3, #0
 8003c88:	f7fc fe8e 	bl	80009a8 <__aeabi_dcmpeq>
 8003c8c:	2800      	cmp	r0, #0
 8003c8e:	d033      	beq.n	8003cf8 <_printf_float+0x26c>
 8003c90:	2301      	movs	r3, #1
 8003c92:	4631      	mov	r1, r6
 8003c94:	4628      	mov	r0, r5
 8003c96:	4a35      	ldr	r2, [pc, #212]	; (8003d6c <_printf_float+0x2e0>)
 8003c98:	47b8      	blx	r7
 8003c9a:	3001      	adds	r0, #1
 8003c9c:	f43f af51 	beq.w	8003b42 <_printf_float+0xb6>
 8003ca0:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	db02      	blt.n	8003cae <_printf_float+0x222>
 8003ca8:	6823      	ldr	r3, [r4, #0]
 8003caa:	07d8      	lsls	r0, r3, #31
 8003cac:	d50f      	bpl.n	8003cce <_printf_float+0x242>
 8003cae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003cb2:	4631      	mov	r1, r6
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	47b8      	blx	r7
 8003cb8:	3001      	adds	r0, #1
 8003cba:	f43f af42 	beq.w	8003b42 <_printf_float+0xb6>
 8003cbe:	f04f 0800 	mov.w	r8, #0
 8003cc2:	f104 091a 	add.w	r9, r4, #26
 8003cc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	4543      	cmp	r3, r8
 8003ccc:	dc09      	bgt.n	8003ce2 <_printf_float+0x256>
 8003cce:	6823      	ldr	r3, [r4, #0]
 8003cd0:	079b      	lsls	r3, r3, #30
 8003cd2:	f100 8102 	bmi.w	8003eda <_printf_float+0x44e>
 8003cd6:	68e0      	ldr	r0, [r4, #12]
 8003cd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003cda:	4298      	cmp	r0, r3
 8003cdc:	bfb8      	it	lt
 8003cde:	4618      	movlt	r0, r3
 8003ce0:	e731      	b.n	8003b46 <_printf_float+0xba>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	464a      	mov	r2, r9
 8003ce6:	4631      	mov	r1, r6
 8003ce8:	4628      	mov	r0, r5
 8003cea:	47b8      	blx	r7
 8003cec:	3001      	adds	r0, #1
 8003cee:	f43f af28 	beq.w	8003b42 <_printf_float+0xb6>
 8003cf2:	f108 0801 	add.w	r8, r8, #1
 8003cf6:	e7e6      	b.n	8003cc6 <_printf_float+0x23a>
 8003cf8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	dc38      	bgt.n	8003d70 <_printf_float+0x2e4>
 8003cfe:	2301      	movs	r3, #1
 8003d00:	4631      	mov	r1, r6
 8003d02:	4628      	mov	r0, r5
 8003d04:	4a19      	ldr	r2, [pc, #100]	; (8003d6c <_printf_float+0x2e0>)
 8003d06:	47b8      	blx	r7
 8003d08:	3001      	adds	r0, #1
 8003d0a:	f43f af1a 	beq.w	8003b42 <_printf_float+0xb6>
 8003d0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d12:	4313      	orrs	r3, r2
 8003d14:	d102      	bne.n	8003d1c <_printf_float+0x290>
 8003d16:	6823      	ldr	r3, [r4, #0]
 8003d18:	07d9      	lsls	r1, r3, #31
 8003d1a:	d5d8      	bpl.n	8003cce <_printf_float+0x242>
 8003d1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003d20:	4631      	mov	r1, r6
 8003d22:	4628      	mov	r0, r5
 8003d24:	47b8      	blx	r7
 8003d26:	3001      	adds	r0, #1
 8003d28:	f43f af0b 	beq.w	8003b42 <_printf_float+0xb6>
 8003d2c:	f04f 0900 	mov.w	r9, #0
 8003d30:	f104 0a1a 	add.w	sl, r4, #26
 8003d34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003d36:	425b      	negs	r3, r3
 8003d38:	454b      	cmp	r3, r9
 8003d3a:	dc01      	bgt.n	8003d40 <_printf_float+0x2b4>
 8003d3c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003d3e:	e794      	b.n	8003c6a <_printf_float+0x1de>
 8003d40:	2301      	movs	r3, #1
 8003d42:	4652      	mov	r2, sl
 8003d44:	4631      	mov	r1, r6
 8003d46:	4628      	mov	r0, r5
 8003d48:	47b8      	blx	r7
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	f43f aef9 	beq.w	8003b42 <_printf_float+0xb6>
 8003d50:	f109 0901 	add.w	r9, r9, #1
 8003d54:	e7ee      	b.n	8003d34 <_printf_float+0x2a8>
 8003d56:	bf00      	nop
 8003d58:	7fefffff 	.word	0x7fefffff
 8003d5c:	08006414 	.word	0x08006414
 8003d60:	08006418 	.word	0x08006418
 8003d64:	08006420 	.word	0x08006420
 8003d68:	0800641c 	.word	0x0800641c
 8003d6c:	08006424 	.word	0x08006424
 8003d70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003d72:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003d74:	429a      	cmp	r2, r3
 8003d76:	bfa8      	it	ge
 8003d78:	461a      	movge	r2, r3
 8003d7a:	2a00      	cmp	r2, #0
 8003d7c:	4691      	mov	r9, r2
 8003d7e:	dc37      	bgt.n	8003df0 <_printf_float+0x364>
 8003d80:	f04f 0b00 	mov.w	fp, #0
 8003d84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003d88:	f104 021a 	add.w	r2, r4, #26
 8003d8c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8003d90:	ebaa 0309 	sub.w	r3, sl, r9
 8003d94:	455b      	cmp	r3, fp
 8003d96:	dc33      	bgt.n	8003e00 <_printf_float+0x374>
 8003d98:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	db3b      	blt.n	8003e18 <_printf_float+0x38c>
 8003da0:	6823      	ldr	r3, [r4, #0]
 8003da2:	07da      	lsls	r2, r3, #31
 8003da4:	d438      	bmi.n	8003e18 <_printf_float+0x38c>
 8003da6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003da8:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003daa:	eba3 020a 	sub.w	r2, r3, sl
 8003dae:	eba3 0901 	sub.w	r9, r3, r1
 8003db2:	4591      	cmp	r9, r2
 8003db4:	bfa8      	it	ge
 8003db6:	4691      	movge	r9, r2
 8003db8:	f1b9 0f00 	cmp.w	r9, #0
 8003dbc:	dc34      	bgt.n	8003e28 <_printf_float+0x39c>
 8003dbe:	f04f 0800 	mov.w	r8, #0
 8003dc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003dc6:	f104 0a1a 	add.w	sl, r4, #26
 8003dca:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	eba3 0309 	sub.w	r3, r3, r9
 8003dd4:	4543      	cmp	r3, r8
 8003dd6:	f77f af7a 	ble.w	8003cce <_printf_float+0x242>
 8003dda:	2301      	movs	r3, #1
 8003ddc:	4652      	mov	r2, sl
 8003dde:	4631      	mov	r1, r6
 8003de0:	4628      	mov	r0, r5
 8003de2:	47b8      	blx	r7
 8003de4:	3001      	adds	r0, #1
 8003de6:	f43f aeac 	beq.w	8003b42 <_printf_float+0xb6>
 8003dea:	f108 0801 	add.w	r8, r8, #1
 8003dee:	e7ec      	b.n	8003dca <_printf_float+0x33e>
 8003df0:	4613      	mov	r3, r2
 8003df2:	4631      	mov	r1, r6
 8003df4:	4642      	mov	r2, r8
 8003df6:	4628      	mov	r0, r5
 8003df8:	47b8      	blx	r7
 8003dfa:	3001      	adds	r0, #1
 8003dfc:	d1c0      	bne.n	8003d80 <_printf_float+0x2f4>
 8003dfe:	e6a0      	b.n	8003b42 <_printf_float+0xb6>
 8003e00:	2301      	movs	r3, #1
 8003e02:	4631      	mov	r1, r6
 8003e04:	4628      	mov	r0, r5
 8003e06:	920b      	str	r2, [sp, #44]	; 0x2c
 8003e08:	47b8      	blx	r7
 8003e0a:	3001      	adds	r0, #1
 8003e0c:	f43f ae99 	beq.w	8003b42 <_printf_float+0xb6>
 8003e10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003e12:	f10b 0b01 	add.w	fp, fp, #1
 8003e16:	e7b9      	b.n	8003d8c <_printf_float+0x300>
 8003e18:	4631      	mov	r1, r6
 8003e1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e1e:	4628      	mov	r0, r5
 8003e20:	47b8      	blx	r7
 8003e22:	3001      	adds	r0, #1
 8003e24:	d1bf      	bne.n	8003da6 <_printf_float+0x31a>
 8003e26:	e68c      	b.n	8003b42 <_printf_float+0xb6>
 8003e28:	464b      	mov	r3, r9
 8003e2a:	4631      	mov	r1, r6
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	eb08 020a 	add.w	r2, r8, sl
 8003e32:	47b8      	blx	r7
 8003e34:	3001      	adds	r0, #1
 8003e36:	d1c2      	bne.n	8003dbe <_printf_float+0x332>
 8003e38:	e683      	b.n	8003b42 <_printf_float+0xb6>
 8003e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003e3c:	2a01      	cmp	r2, #1
 8003e3e:	dc01      	bgt.n	8003e44 <_printf_float+0x3b8>
 8003e40:	07db      	lsls	r3, r3, #31
 8003e42:	d537      	bpl.n	8003eb4 <_printf_float+0x428>
 8003e44:	2301      	movs	r3, #1
 8003e46:	4642      	mov	r2, r8
 8003e48:	4631      	mov	r1, r6
 8003e4a:	4628      	mov	r0, r5
 8003e4c:	47b8      	blx	r7
 8003e4e:	3001      	adds	r0, #1
 8003e50:	f43f ae77 	beq.w	8003b42 <_printf_float+0xb6>
 8003e54:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003e58:	4631      	mov	r1, r6
 8003e5a:	4628      	mov	r0, r5
 8003e5c:	47b8      	blx	r7
 8003e5e:	3001      	adds	r0, #1
 8003e60:	f43f ae6f 	beq.w	8003b42 <_printf_float+0xb6>
 8003e64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003e68:	2200      	movs	r2, #0
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f7fc fd9c 	bl	80009a8 <__aeabi_dcmpeq>
 8003e70:	b9d8      	cbnz	r0, 8003eaa <_printf_float+0x41e>
 8003e72:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e74:	f108 0201 	add.w	r2, r8, #1
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	4631      	mov	r1, r6
 8003e7c:	4628      	mov	r0, r5
 8003e7e:	47b8      	blx	r7
 8003e80:	3001      	adds	r0, #1
 8003e82:	d10e      	bne.n	8003ea2 <_printf_float+0x416>
 8003e84:	e65d      	b.n	8003b42 <_printf_float+0xb6>
 8003e86:	2301      	movs	r3, #1
 8003e88:	464a      	mov	r2, r9
 8003e8a:	4631      	mov	r1, r6
 8003e8c:	4628      	mov	r0, r5
 8003e8e:	47b8      	blx	r7
 8003e90:	3001      	adds	r0, #1
 8003e92:	f43f ae56 	beq.w	8003b42 <_printf_float+0xb6>
 8003e96:	f108 0801 	add.w	r8, r8, #1
 8003e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	4543      	cmp	r3, r8
 8003ea0:	dcf1      	bgt.n	8003e86 <_printf_float+0x3fa>
 8003ea2:	4653      	mov	r3, sl
 8003ea4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003ea8:	e6e0      	b.n	8003c6c <_printf_float+0x1e0>
 8003eaa:	f04f 0800 	mov.w	r8, #0
 8003eae:	f104 091a 	add.w	r9, r4, #26
 8003eb2:	e7f2      	b.n	8003e9a <_printf_float+0x40e>
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	4642      	mov	r2, r8
 8003eb8:	e7df      	b.n	8003e7a <_printf_float+0x3ee>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	464a      	mov	r2, r9
 8003ebe:	4631      	mov	r1, r6
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	47b8      	blx	r7
 8003ec4:	3001      	adds	r0, #1
 8003ec6:	f43f ae3c 	beq.w	8003b42 <_printf_float+0xb6>
 8003eca:	f108 0801 	add.w	r8, r8, #1
 8003ece:	68e3      	ldr	r3, [r4, #12]
 8003ed0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003ed2:	1a5b      	subs	r3, r3, r1
 8003ed4:	4543      	cmp	r3, r8
 8003ed6:	dcf0      	bgt.n	8003eba <_printf_float+0x42e>
 8003ed8:	e6fd      	b.n	8003cd6 <_printf_float+0x24a>
 8003eda:	f04f 0800 	mov.w	r8, #0
 8003ede:	f104 0919 	add.w	r9, r4, #25
 8003ee2:	e7f4      	b.n	8003ece <_printf_float+0x442>

08003ee4 <_printf_common>:
 8003ee4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ee8:	4616      	mov	r6, r2
 8003eea:	4699      	mov	r9, r3
 8003eec:	688a      	ldr	r2, [r1, #8]
 8003eee:	690b      	ldr	r3, [r1, #16]
 8003ef0:	4607      	mov	r7, r0
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	bfb8      	it	lt
 8003ef6:	4613      	movlt	r3, r2
 8003ef8:	6033      	str	r3, [r6, #0]
 8003efa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003efe:	460c      	mov	r4, r1
 8003f00:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003f04:	b10a      	cbz	r2, 8003f0a <_printf_common+0x26>
 8003f06:	3301      	adds	r3, #1
 8003f08:	6033      	str	r3, [r6, #0]
 8003f0a:	6823      	ldr	r3, [r4, #0]
 8003f0c:	0699      	lsls	r1, r3, #26
 8003f0e:	bf42      	ittt	mi
 8003f10:	6833      	ldrmi	r3, [r6, #0]
 8003f12:	3302      	addmi	r3, #2
 8003f14:	6033      	strmi	r3, [r6, #0]
 8003f16:	6825      	ldr	r5, [r4, #0]
 8003f18:	f015 0506 	ands.w	r5, r5, #6
 8003f1c:	d106      	bne.n	8003f2c <_printf_common+0x48>
 8003f1e:	f104 0a19 	add.w	sl, r4, #25
 8003f22:	68e3      	ldr	r3, [r4, #12]
 8003f24:	6832      	ldr	r2, [r6, #0]
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	42ab      	cmp	r3, r5
 8003f2a:	dc28      	bgt.n	8003f7e <_printf_common+0x9a>
 8003f2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003f30:	1e13      	subs	r3, r2, #0
 8003f32:	6822      	ldr	r2, [r4, #0]
 8003f34:	bf18      	it	ne
 8003f36:	2301      	movne	r3, #1
 8003f38:	0692      	lsls	r2, r2, #26
 8003f3a:	d42d      	bmi.n	8003f98 <_printf_common+0xb4>
 8003f3c:	4649      	mov	r1, r9
 8003f3e:	4638      	mov	r0, r7
 8003f40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003f44:	47c0      	blx	r8
 8003f46:	3001      	adds	r0, #1
 8003f48:	d020      	beq.n	8003f8c <_printf_common+0xa8>
 8003f4a:	6823      	ldr	r3, [r4, #0]
 8003f4c:	68e5      	ldr	r5, [r4, #12]
 8003f4e:	f003 0306 	and.w	r3, r3, #6
 8003f52:	2b04      	cmp	r3, #4
 8003f54:	bf18      	it	ne
 8003f56:	2500      	movne	r5, #0
 8003f58:	6832      	ldr	r2, [r6, #0]
 8003f5a:	f04f 0600 	mov.w	r6, #0
 8003f5e:	68a3      	ldr	r3, [r4, #8]
 8003f60:	bf08      	it	eq
 8003f62:	1aad      	subeq	r5, r5, r2
 8003f64:	6922      	ldr	r2, [r4, #16]
 8003f66:	bf08      	it	eq
 8003f68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	bfc4      	itt	gt
 8003f70:	1a9b      	subgt	r3, r3, r2
 8003f72:	18ed      	addgt	r5, r5, r3
 8003f74:	341a      	adds	r4, #26
 8003f76:	42b5      	cmp	r5, r6
 8003f78:	d11a      	bne.n	8003fb0 <_printf_common+0xcc>
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e008      	b.n	8003f90 <_printf_common+0xac>
 8003f7e:	2301      	movs	r3, #1
 8003f80:	4652      	mov	r2, sl
 8003f82:	4649      	mov	r1, r9
 8003f84:	4638      	mov	r0, r7
 8003f86:	47c0      	blx	r8
 8003f88:	3001      	adds	r0, #1
 8003f8a:	d103      	bne.n	8003f94 <_printf_common+0xb0>
 8003f8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f94:	3501      	adds	r5, #1
 8003f96:	e7c4      	b.n	8003f22 <_printf_common+0x3e>
 8003f98:	2030      	movs	r0, #48	; 0x30
 8003f9a:	18e1      	adds	r1, r4, r3
 8003f9c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003fa0:	1c5a      	adds	r2, r3, #1
 8003fa2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003fa6:	4422      	add	r2, r4
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003fae:	e7c5      	b.n	8003f3c <_printf_common+0x58>
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	4622      	mov	r2, r4
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	4638      	mov	r0, r7
 8003fb8:	47c0      	blx	r8
 8003fba:	3001      	adds	r0, #1
 8003fbc:	d0e6      	beq.n	8003f8c <_printf_common+0xa8>
 8003fbe:	3601      	adds	r6, #1
 8003fc0:	e7d9      	b.n	8003f76 <_printf_common+0x92>
	...

08003fc4 <_printf_i>:
 8003fc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003fc8:	7e0f      	ldrb	r7, [r1, #24]
 8003fca:	4691      	mov	r9, r2
 8003fcc:	2f78      	cmp	r7, #120	; 0x78
 8003fce:	4680      	mov	r8, r0
 8003fd0:	460c      	mov	r4, r1
 8003fd2:	469a      	mov	sl, r3
 8003fd4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003fd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003fda:	d807      	bhi.n	8003fec <_printf_i+0x28>
 8003fdc:	2f62      	cmp	r7, #98	; 0x62
 8003fde:	d80a      	bhi.n	8003ff6 <_printf_i+0x32>
 8003fe0:	2f00      	cmp	r7, #0
 8003fe2:	f000 80d9 	beq.w	8004198 <_printf_i+0x1d4>
 8003fe6:	2f58      	cmp	r7, #88	; 0x58
 8003fe8:	f000 80a4 	beq.w	8004134 <_printf_i+0x170>
 8003fec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ff0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003ff4:	e03a      	b.n	800406c <_printf_i+0xa8>
 8003ff6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003ffa:	2b15      	cmp	r3, #21
 8003ffc:	d8f6      	bhi.n	8003fec <_printf_i+0x28>
 8003ffe:	a101      	add	r1, pc, #4	; (adr r1, 8004004 <_printf_i+0x40>)
 8004000:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004004:	0800405d 	.word	0x0800405d
 8004008:	08004071 	.word	0x08004071
 800400c:	08003fed 	.word	0x08003fed
 8004010:	08003fed 	.word	0x08003fed
 8004014:	08003fed 	.word	0x08003fed
 8004018:	08003fed 	.word	0x08003fed
 800401c:	08004071 	.word	0x08004071
 8004020:	08003fed 	.word	0x08003fed
 8004024:	08003fed 	.word	0x08003fed
 8004028:	08003fed 	.word	0x08003fed
 800402c:	08003fed 	.word	0x08003fed
 8004030:	0800417f 	.word	0x0800417f
 8004034:	080040a1 	.word	0x080040a1
 8004038:	08004161 	.word	0x08004161
 800403c:	08003fed 	.word	0x08003fed
 8004040:	08003fed 	.word	0x08003fed
 8004044:	080041a1 	.word	0x080041a1
 8004048:	08003fed 	.word	0x08003fed
 800404c:	080040a1 	.word	0x080040a1
 8004050:	08003fed 	.word	0x08003fed
 8004054:	08003fed 	.word	0x08003fed
 8004058:	08004169 	.word	0x08004169
 800405c:	682b      	ldr	r3, [r5, #0]
 800405e:	1d1a      	adds	r2, r3, #4
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	602a      	str	r2, [r5, #0]
 8004064:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004068:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800406c:	2301      	movs	r3, #1
 800406e:	e0a4      	b.n	80041ba <_printf_i+0x1f6>
 8004070:	6820      	ldr	r0, [r4, #0]
 8004072:	6829      	ldr	r1, [r5, #0]
 8004074:	0606      	lsls	r6, r0, #24
 8004076:	f101 0304 	add.w	r3, r1, #4
 800407a:	d50a      	bpl.n	8004092 <_printf_i+0xce>
 800407c:	680e      	ldr	r6, [r1, #0]
 800407e:	602b      	str	r3, [r5, #0]
 8004080:	2e00      	cmp	r6, #0
 8004082:	da03      	bge.n	800408c <_printf_i+0xc8>
 8004084:	232d      	movs	r3, #45	; 0x2d
 8004086:	4276      	negs	r6, r6
 8004088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800408c:	230a      	movs	r3, #10
 800408e:	485e      	ldr	r0, [pc, #376]	; (8004208 <_printf_i+0x244>)
 8004090:	e019      	b.n	80040c6 <_printf_i+0x102>
 8004092:	680e      	ldr	r6, [r1, #0]
 8004094:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004098:	602b      	str	r3, [r5, #0]
 800409a:	bf18      	it	ne
 800409c:	b236      	sxthne	r6, r6
 800409e:	e7ef      	b.n	8004080 <_printf_i+0xbc>
 80040a0:	682b      	ldr	r3, [r5, #0]
 80040a2:	6820      	ldr	r0, [r4, #0]
 80040a4:	1d19      	adds	r1, r3, #4
 80040a6:	6029      	str	r1, [r5, #0]
 80040a8:	0601      	lsls	r1, r0, #24
 80040aa:	d501      	bpl.n	80040b0 <_printf_i+0xec>
 80040ac:	681e      	ldr	r6, [r3, #0]
 80040ae:	e002      	b.n	80040b6 <_printf_i+0xf2>
 80040b0:	0646      	lsls	r6, r0, #25
 80040b2:	d5fb      	bpl.n	80040ac <_printf_i+0xe8>
 80040b4:	881e      	ldrh	r6, [r3, #0]
 80040b6:	2f6f      	cmp	r7, #111	; 0x6f
 80040b8:	bf0c      	ite	eq
 80040ba:	2308      	moveq	r3, #8
 80040bc:	230a      	movne	r3, #10
 80040be:	4852      	ldr	r0, [pc, #328]	; (8004208 <_printf_i+0x244>)
 80040c0:	2100      	movs	r1, #0
 80040c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80040c6:	6865      	ldr	r5, [r4, #4]
 80040c8:	2d00      	cmp	r5, #0
 80040ca:	bfa8      	it	ge
 80040cc:	6821      	ldrge	r1, [r4, #0]
 80040ce:	60a5      	str	r5, [r4, #8]
 80040d0:	bfa4      	itt	ge
 80040d2:	f021 0104 	bicge.w	r1, r1, #4
 80040d6:	6021      	strge	r1, [r4, #0]
 80040d8:	b90e      	cbnz	r6, 80040de <_printf_i+0x11a>
 80040da:	2d00      	cmp	r5, #0
 80040dc:	d04d      	beq.n	800417a <_printf_i+0x1b6>
 80040de:	4615      	mov	r5, r2
 80040e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80040e4:	fb03 6711 	mls	r7, r3, r1, r6
 80040e8:	5dc7      	ldrb	r7, [r0, r7]
 80040ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80040ee:	4637      	mov	r7, r6
 80040f0:	42bb      	cmp	r3, r7
 80040f2:	460e      	mov	r6, r1
 80040f4:	d9f4      	bls.n	80040e0 <_printf_i+0x11c>
 80040f6:	2b08      	cmp	r3, #8
 80040f8:	d10b      	bne.n	8004112 <_printf_i+0x14e>
 80040fa:	6823      	ldr	r3, [r4, #0]
 80040fc:	07de      	lsls	r6, r3, #31
 80040fe:	d508      	bpl.n	8004112 <_printf_i+0x14e>
 8004100:	6923      	ldr	r3, [r4, #16]
 8004102:	6861      	ldr	r1, [r4, #4]
 8004104:	4299      	cmp	r1, r3
 8004106:	bfde      	ittt	le
 8004108:	2330      	movle	r3, #48	; 0x30
 800410a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800410e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004112:	1b52      	subs	r2, r2, r5
 8004114:	6122      	str	r2, [r4, #16]
 8004116:	464b      	mov	r3, r9
 8004118:	4621      	mov	r1, r4
 800411a:	4640      	mov	r0, r8
 800411c:	f8cd a000 	str.w	sl, [sp]
 8004120:	aa03      	add	r2, sp, #12
 8004122:	f7ff fedf 	bl	8003ee4 <_printf_common>
 8004126:	3001      	adds	r0, #1
 8004128:	d14c      	bne.n	80041c4 <_printf_i+0x200>
 800412a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800412e:	b004      	add	sp, #16
 8004130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004134:	4834      	ldr	r0, [pc, #208]	; (8004208 <_printf_i+0x244>)
 8004136:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800413a:	6829      	ldr	r1, [r5, #0]
 800413c:	6823      	ldr	r3, [r4, #0]
 800413e:	f851 6b04 	ldr.w	r6, [r1], #4
 8004142:	6029      	str	r1, [r5, #0]
 8004144:	061d      	lsls	r5, r3, #24
 8004146:	d514      	bpl.n	8004172 <_printf_i+0x1ae>
 8004148:	07df      	lsls	r7, r3, #31
 800414a:	bf44      	itt	mi
 800414c:	f043 0320 	orrmi.w	r3, r3, #32
 8004150:	6023      	strmi	r3, [r4, #0]
 8004152:	b91e      	cbnz	r6, 800415c <_printf_i+0x198>
 8004154:	6823      	ldr	r3, [r4, #0]
 8004156:	f023 0320 	bic.w	r3, r3, #32
 800415a:	6023      	str	r3, [r4, #0]
 800415c:	2310      	movs	r3, #16
 800415e:	e7af      	b.n	80040c0 <_printf_i+0xfc>
 8004160:	6823      	ldr	r3, [r4, #0]
 8004162:	f043 0320 	orr.w	r3, r3, #32
 8004166:	6023      	str	r3, [r4, #0]
 8004168:	2378      	movs	r3, #120	; 0x78
 800416a:	4828      	ldr	r0, [pc, #160]	; (800420c <_printf_i+0x248>)
 800416c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004170:	e7e3      	b.n	800413a <_printf_i+0x176>
 8004172:	0659      	lsls	r1, r3, #25
 8004174:	bf48      	it	mi
 8004176:	b2b6      	uxthmi	r6, r6
 8004178:	e7e6      	b.n	8004148 <_printf_i+0x184>
 800417a:	4615      	mov	r5, r2
 800417c:	e7bb      	b.n	80040f6 <_printf_i+0x132>
 800417e:	682b      	ldr	r3, [r5, #0]
 8004180:	6826      	ldr	r6, [r4, #0]
 8004182:	1d18      	adds	r0, r3, #4
 8004184:	6961      	ldr	r1, [r4, #20]
 8004186:	6028      	str	r0, [r5, #0]
 8004188:	0635      	lsls	r5, r6, #24
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	d501      	bpl.n	8004192 <_printf_i+0x1ce>
 800418e:	6019      	str	r1, [r3, #0]
 8004190:	e002      	b.n	8004198 <_printf_i+0x1d4>
 8004192:	0670      	lsls	r0, r6, #25
 8004194:	d5fb      	bpl.n	800418e <_printf_i+0x1ca>
 8004196:	8019      	strh	r1, [r3, #0]
 8004198:	2300      	movs	r3, #0
 800419a:	4615      	mov	r5, r2
 800419c:	6123      	str	r3, [r4, #16]
 800419e:	e7ba      	b.n	8004116 <_printf_i+0x152>
 80041a0:	682b      	ldr	r3, [r5, #0]
 80041a2:	2100      	movs	r1, #0
 80041a4:	1d1a      	adds	r2, r3, #4
 80041a6:	602a      	str	r2, [r5, #0]
 80041a8:	681d      	ldr	r5, [r3, #0]
 80041aa:	6862      	ldr	r2, [r4, #4]
 80041ac:	4628      	mov	r0, r5
 80041ae:	f000 ffc7 	bl	8005140 <memchr>
 80041b2:	b108      	cbz	r0, 80041b8 <_printf_i+0x1f4>
 80041b4:	1b40      	subs	r0, r0, r5
 80041b6:	6060      	str	r0, [r4, #4]
 80041b8:	6863      	ldr	r3, [r4, #4]
 80041ba:	6123      	str	r3, [r4, #16]
 80041bc:	2300      	movs	r3, #0
 80041be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80041c2:	e7a8      	b.n	8004116 <_printf_i+0x152>
 80041c4:	462a      	mov	r2, r5
 80041c6:	4649      	mov	r1, r9
 80041c8:	4640      	mov	r0, r8
 80041ca:	6923      	ldr	r3, [r4, #16]
 80041cc:	47d0      	blx	sl
 80041ce:	3001      	adds	r0, #1
 80041d0:	d0ab      	beq.n	800412a <_printf_i+0x166>
 80041d2:	6823      	ldr	r3, [r4, #0]
 80041d4:	079b      	lsls	r3, r3, #30
 80041d6:	d413      	bmi.n	8004200 <_printf_i+0x23c>
 80041d8:	68e0      	ldr	r0, [r4, #12]
 80041da:	9b03      	ldr	r3, [sp, #12]
 80041dc:	4298      	cmp	r0, r3
 80041de:	bfb8      	it	lt
 80041e0:	4618      	movlt	r0, r3
 80041e2:	e7a4      	b.n	800412e <_printf_i+0x16a>
 80041e4:	2301      	movs	r3, #1
 80041e6:	4632      	mov	r2, r6
 80041e8:	4649      	mov	r1, r9
 80041ea:	4640      	mov	r0, r8
 80041ec:	47d0      	blx	sl
 80041ee:	3001      	adds	r0, #1
 80041f0:	d09b      	beq.n	800412a <_printf_i+0x166>
 80041f2:	3501      	adds	r5, #1
 80041f4:	68e3      	ldr	r3, [r4, #12]
 80041f6:	9903      	ldr	r1, [sp, #12]
 80041f8:	1a5b      	subs	r3, r3, r1
 80041fa:	42ab      	cmp	r3, r5
 80041fc:	dcf2      	bgt.n	80041e4 <_printf_i+0x220>
 80041fe:	e7eb      	b.n	80041d8 <_printf_i+0x214>
 8004200:	2500      	movs	r5, #0
 8004202:	f104 0619 	add.w	r6, r4, #25
 8004206:	e7f5      	b.n	80041f4 <_printf_i+0x230>
 8004208:	08006426 	.word	0x08006426
 800420c:	08006437 	.word	0x08006437

08004210 <iprintf>:
 8004210:	b40f      	push	{r0, r1, r2, r3}
 8004212:	4b0a      	ldr	r3, [pc, #40]	; (800423c <iprintf+0x2c>)
 8004214:	b513      	push	{r0, r1, r4, lr}
 8004216:	681c      	ldr	r4, [r3, #0]
 8004218:	b124      	cbz	r4, 8004224 <iprintf+0x14>
 800421a:	69a3      	ldr	r3, [r4, #24]
 800421c:	b913      	cbnz	r3, 8004224 <iprintf+0x14>
 800421e:	4620      	mov	r0, r4
 8004220:	f000 fee0 	bl	8004fe4 <__sinit>
 8004224:	ab05      	add	r3, sp, #20
 8004226:	4620      	mov	r0, r4
 8004228:	9a04      	ldr	r2, [sp, #16]
 800422a:	68a1      	ldr	r1, [r4, #8]
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	f001 fc3d 	bl	8005aac <_vfiprintf_r>
 8004232:	b002      	add	sp, #8
 8004234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004238:	b004      	add	sp, #16
 800423a:	4770      	bx	lr
 800423c:	20000014 	.word	0x20000014

08004240 <quorem>:
 8004240:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	6903      	ldr	r3, [r0, #16]
 8004246:	690c      	ldr	r4, [r1, #16]
 8004248:	4607      	mov	r7, r0
 800424a:	42a3      	cmp	r3, r4
 800424c:	f2c0 8082 	blt.w	8004354 <quorem+0x114>
 8004250:	3c01      	subs	r4, #1
 8004252:	f100 0514 	add.w	r5, r0, #20
 8004256:	f101 0814 	add.w	r8, r1, #20
 800425a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800425e:	9301      	str	r3, [sp, #4]
 8004260:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004264:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004268:	3301      	adds	r3, #1
 800426a:	429a      	cmp	r2, r3
 800426c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004270:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004274:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004278:	d331      	bcc.n	80042de <quorem+0x9e>
 800427a:	f04f 0e00 	mov.w	lr, #0
 800427e:	4640      	mov	r0, r8
 8004280:	46ac      	mov	ip, r5
 8004282:	46f2      	mov	sl, lr
 8004284:	f850 2b04 	ldr.w	r2, [r0], #4
 8004288:	b293      	uxth	r3, r2
 800428a:	fb06 e303 	mla	r3, r6, r3, lr
 800428e:	0c12      	lsrs	r2, r2, #16
 8004290:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004294:	b29b      	uxth	r3, r3
 8004296:	fb06 e202 	mla	r2, r6, r2, lr
 800429a:	ebaa 0303 	sub.w	r3, sl, r3
 800429e:	f8dc a000 	ldr.w	sl, [ip]
 80042a2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80042a6:	fa1f fa8a 	uxth.w	sl, sl
 80042aa:	4453      	add	r3, sl
 80042ac:	f8dc a000 	ldr.w	sl, [ip]
 80042b0:	b292      	uxth	r2, r2
 80042b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80042b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80042c0:	4581      	cmp	r9, r0
 80042c2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80042c6:	f84c 3b04 	str.w	r3, [ip], #4
 80042ca:	d2db      	bcs.n	8004284 <quorem+0x44>
 80042cc:	f855 300b 	ldr.w	r3, [r5, fp]
 80042d0:	b92b      	cbnz	r3, 80042de <quorem+0x9e>
 80042d2:	9b01      	ldr	r3, [sp, #4]
 80042d4:	3b04      	subs	r3, #4
 80042d6:	429d      	cmp	r5, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	d32f      	bcc.n	800433c <quorem+0xfc>
 80042dc:	613c      	str	r4, [r7, #16]
 80042de:	4638      	mov	r0, r7
 80042e0:	f001 f9c8 	bl	8005674 <__mcmp>
 80042e4:	2800      	cmp	r0, #0
 80042e6:	db25      	blt.n	8004334 <quorem+0xf4>
 80042e8:	4628      	mov	r0, r5
 80042ea:	f04f 0c00 	mov.w	ip, #0
 80042ee:	3601      	adds	r6, #1
 80042f0:	f858 1b04 	ldr.w	r1, [r8], #4
 80042f4:	f8d0 e000 	ldr.w	lr, [r0]
 80042f8:	b28b      	uxth	r3, r1
 80042fa:	ebac 0303 	sub.w	r3, ip, r3
 80042fe:	fa1f f28e 	uxth.w	r2, lr
 8004302:	4413      	add	r3, r2
 8004304:	0c0a      	lsrs	r2, r1, #16
 8004306:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800430a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800430e:	b29b      	uxth	r3, r3
 8004310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004314:	45c1      	cmp	r9, r8
 8004316:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800431a:	f840 3b04 	str.w	r3, [r0], #4
 800431e:	d2e7      	bcs.n	80042f0 <quorem+0xb0>
 8004320:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004324:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004328:	b922      	cbnz	r2, 8004334 <quorem+0xf4>
 800432a:	3b04      	subs	r3, #4
 800432c:	429d      	cmp	r5, r3
 800432e:	461a      	mov	r2, r3
 8004330:	d30a      	bcc.n	8004348 <quorem+0x108>
 8004332:	613c      	str	r4, [r7, #16]
 8004334:	4630      	mov	r0, r6
 8004336:	b003      	add	sp, #12
 8004338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800433c:	6812      	ldr	r2, [r2, #0]
 800433e:	3b04      	subs	r3, #4
 8004340:	2a00      	cmp	r2, #0
 8004342:	d1cb      	bne.n	80042dc <quorem+0x9c>
 8004344:	3c01      	subs	r4, #1
 8004346:	e7c6      	b.n	80042d6 <quorem+0x96>
 8004348:	6812      	ldr	r2, [r2, #0]
 800434a:	3b04      	subs	r3, #4
 800434c:	2a00      	cmp	r2, #0
 800434e:	d1f0      	bne.n	8004332 <quorem+0xf2>
 8004350:	3c01      	subs	r4, #1
 8004352:	e7eb      	b.n	800432c <quorem+0xec>
 8004354:	2000      	movs	r0, #0
 8004356:	e7ee      	b.n	8004336 <quorem+0xf6>

08004358 <_dtoa_r>:
 8004358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435c:	4616      	mov	r6, r2
 800435e:	461f      	mov	r7, r3
 8004360:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004362:	b099      	sub	sp, #100	; 0x64
 8004364:	4605      	mov	r5, r0
 8004366:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800436a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800436e:	b974      	cbnz	r4, 800438e <_dtoa_r+0x36>
 8004370:	2010      	movs	r0, #16
 8004372:	f000 fedd 	bl	8005130 <malloc>
 8004376:	4602      	mov	r2, r0
 8004378:	6268      	str	r0, [r5, #36]	; 0x24
 800437a:	b920      	cbnz	r0, 8004386 <_dtoa_r+0x2e>
 800437c:	21ea      	movs	r1, #234	; 0xea
 800437e:	4ba8      	ldr	r3, [pc, #672]	; (8004620 <_dtoa_r+0x2c8>)
 8004380:	48a8      	ldr	r0, [pc, #672]	; (8004624 <_dtoa_r+0x2cc>)
 8004382:	f001 fde9 	bl	8005f58 <__assert_func>
 8004386:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800438a:	6004      	str	r4, [r0, #0]
 800438c:	60c4      	str	r4, [r0, #12]
 800438e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004390:	6819      	ldr	r1, [r3, #0]
 8004392:	b151      	cbz	r1, 80043aa <_dtoa_r+0x52>
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	2301      	movs	r3, #1
 8004398:	4093      	lsls	r3, r2
 800439a:	604a      	str	r2, [r1, #4]
 800439c:	608b      	str	r3, [r1, #8]
 800439e:	4628      	mov	r0, r5
 80043a0:	f000 ff2a 	bl	80051f8 <_Bfree>
 80043a4:	2200      	movs	r2, #0
 80043a6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	1e3b      	subs	r3, r7, #0
 80043ac:	bfaf      	iteee	ge
 80043ae:	2300      	movge	r3, #0
 80043b0:	2201      	movlt	r2, #1
 80043b2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80043b6:	9305      	strlt	r3, [sp, #20]
 80043b8:	bfa8      	it	ge
 80043ba:	f8c8 3000 	strge.w	r3, [r8]
 80043be:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80043c2:	4b99      	ldr	r3, [pc, #612]	; (8004628 <_dtoa_r+0x2d0>)
 80043c4:	bfb8      	it	lt
 80043c6:	f8c8 2000 	strlt.w	r2, [r8]
 80043ca:	ea33 0309 	bics.w	r3, r3, r9
 80043ce:	d119      	bne.n	8004404 <_dtoa_r+0xac>
 80043d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80043d4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80043dc:	4333      	orrs	r3, r6
 80043de:	f000 857f 	beq.w	8004ee0 <_dtoa_r+0xb88>
 80043e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80043e4:	b953      	cbnz	r3, 80043fc <_dtoa_r+0xa4>
 80043e6:	4b91      	ldr	r3, [pc, #580]	; (800462c <_dtoa_r+0x2d4>)
 80043e8:	e022      	b.n	8004430 <_dtoa_r+0xd8>
 80043ea:	4b91      	ldr	r3, [pc, #580]	; (8004630 <_dtoa_r+0x2d8>)
 80043ec:	9303      	str	r3, [sp, #12]
 80043ee:	3308      	adds	r3, #8
 80043f0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80043f2:	6013      	str	r3, [r2, #0]
 80043f4:	9803      	ldr	r0, [sp, #12]
 80043f6:	b019      	add	sp, #100	; 0x64
 80043f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043fc:	4b8b      	ldr	r3, [pc, #556]	; (800462c <_dtoa_r+0x2d4>)
 80043fe:	9303      	str	r3, [sp, #12]
 8004400:	3303      	adds	r3, #3
 8004402:	e7f5      	b.n	80043f0 <_dtoa_r+0x98>
 8004404:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004408:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800440c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004410:	2200      	movs	r2, #0
 8004412:	2300      	movs	r3, #0
 8004414:	f7fc fac8 	bl	80009a8 <__aeabi_dcmpeq>
 8004418:	4680      	mov	r8, r0
 800441a:	b158      	cbz	r0, 8004434 <_dtoa_r+0xdc>
 800441c:	2301      	movs	r3, #1
 800441e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004424:	2b00      	cmp	r3, #0
 8004426:	f000 8558 	beq.w	8004eda <_dtoa_r+0xb82>
 800442a:	4882      	ldr	r0, [pc, #520]	; (8004634 <_dtoa_r+0x2dc>)
 800442c:	6018      	str	r0, [r3, #0]
 800442e:	1e43      	subs	r3, r0, #1
 8004430:	9303      	str	r3, [sp, #12]
 8004432:	e7df      	b.n	80043f4 <_dtoa_r+0x9c>
 8004434:	ab16      	add	r3, sp, #88	; 0x58
 8004436:	9301      	str	r3, [sp, #4]
 8004438:	ab17      	add	r3, sp, #92	; 0x5c
 800443a:	9300      	str	r3, [sp, #0]
 800443c:	4628      	mov	r0, r5
 800443e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004442:	f001 f9bf 	bl	80057c4 <__d2b>
 8004446:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800444a:	4683      	mov	fp, r0
 800444c:	2c00      	cmp	r4, #0
 800444e:	d07f      	beq.n	8004550 <_dtoa_r+0x1f8>
 8004450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004454:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004456:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800445a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800445e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004462:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004466:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800446a:	2200      	movs	r2, #0
 800446c:	4b72      	ldr	r3, [pc, #456]	; (8004638 <_dtoa_r+0x2e0>)
 800446e:	f7fb fe7b 	bl	8000168 <__aeabi_dsub>
 8004472:	a365      	add	r3, pc, #404	; (adr r3, 8004608 <_dtoa_r+0x2b0>)
 8004474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004478:	f7fc f82e 	bl	80004d8 <__aeabi_dmul>
 800447c:	a364      	add	r3, pc, #400	; (adr r3, 8004610 <_dtoa_r+0x2b8>)
 800447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004482:	f7fb fe73 	bl	800016c <__adddf3>
 8004486:	4606      	mov	r6, r0
 8004488:	4620      	mov	r0, r4
 800448a:	460f      	mov	r7, r1
 800448c:	f7fb ffba 	bl	8000404 <__aeabi_i2d>
 8004490:	a361      	add	r3, pc, #388	; (adr r3, 8004618 <_dtoa_r+0x2c0>)
 8004492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004496:	f7fc f81f 	bl	80004d8 <__aeabi_dmul>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4630      	mov	r0, r6
 80044a0:	4639      	mov	r1, r7
 80044a2:	f7fb fe63 	bl	800016c <__adddf3>
 80044a6:	4606      	mov	r6, r0
 80044a8:	460f      	mov	r7, r1
 80044aa:	f7fc fac5 	bl	8000a38 <__aeabi_d2iz>
 80044ae:	2200      	movs	r2, #0
 80044b0:	4682      	mov	sl, r0
 80044b2:	2300      	movs	r3, #0
 80044b4:	4630      	mov	r0, r6
 80044b6:	4639      	mov	r1, r7
 80044b8:	f7fc fa80 	bl	80009bc <__aeabi_dcmplt>
 80044bc:	b148      	cbz	r0, 80044d2 <_dtoa_r+0x17a>
 80044be:	4650      	mov	r0, sl
 80044c0:	f7fb ffa0 	bl	8000404 <__aeabi_i2d>
 80044c4:	4632      	mov	r2, r6
 80044c6:	463b      	mov	r3, r7
 80044c8:	f7fc fa6e 	bl	80009a8 <__aeabi_dcmpeq>
 80044cc:	b908      	cbnz	r0, 80044d2 <_dtoa_r+0x17a>
 80044ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80044d2:	f1ba 0f16 	cmp.w	sl, #22
 80044d6:	d858      	bhi.n	800458a <_dtoa_r+0x232>
 80044d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80044dc:	4b57      	ldr	r3, [pc, #348]	; (800463c <_dtoa_r+0x2e4>)
 80044de:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	f7fc fa69 	bl	80009bc <__aeabi_dcmplt>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d04f      	beq.n	800458e <_dtoa_r+0x236>
 80044ee:	2300      	movs	r3, #0
 80044f0:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80044f4:	930f      	str	r3, [sp, #60]	; 0x3c
 80044f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80044f8:	1b1c      	subs	r4, r3, r4
 80044fa:	1e63      	subs	r3, r4, #1
 80044fc:	9309      	str	r3, [sp, #36]	; 0x24
 80044fe:	bf49      	itett	mi
 8004500:	f1c4 0301 	rsbmi	r3, r4, #1
 8004504:	2300      	movpl	r3, #0
 8004506:	9306      	strmi	r3, [sp, #24]
 8004508:	2300      	movmi	r3, #0
 800450a:	bf54      	ite	pl
 800450c:	9306      	strpl	r3, [sp, #24]
 800450e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004510:	f1ba 0f00 	cmp.w	sl, #0
 8004514:	db3d      	blt.n	8004592 <_dtoa_r+0x23a>
 8004516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004518:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800451c:	4453      	add	r3, sl
 800451e:	9309      	str	r3, [sp, #36]	; 0x24
 8004520:	2300      	movs	r3, #0
 8004522:	930a      	str	r3, [sp, #40]	; 0x28
 8004524:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004526:	2b09      	cmp	r3, #9
 8004528:	f200 808c 	bhi.w	8004644 <_dtoa_r+0x2ec>
 800452c:	2b05      	cmp	r3, #5
 800452e:	bfc4      	itt	gt
 8004530:	3b04      	subgt	r3, #4
 8004532:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004536:	bfc8      	it	gt
 8004538:	2400      	movgt	r4, #0
 800453a:	f1a3 0302 	sub.w	r3, r3, #2
 800453e:	bfd8      	it	le
 8004540:	2401      	movle	r4, #1
 8004542:	2b03      	cmp	r3, #3
 8004544:	f200 808a 	bhi.w	800465c <_dtoa_r+0x304>
 8004548:	e8df f003 	tbb	[pc, r3]
 800454c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004550:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004554:	441c      	add	r4, r3
 8004556:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800455a:	2b20      	cmp	r3, #32
 800455c:	bfc3      	ittte	gt
 800455e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004562:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004566:	fa09 f303 	lslgt.w	r3, r9, r3
 800456a:	f1c3 0320 	rsble	r3, r3, #32
 800456e:	bfc6      	itte	gt
 8004570:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004574:	4318      	orrgt	r0, r3
 8004576:	fa06 f003 	lslle.w	r0, r6, r3
 800457a:	f7fb ff33 	bl	80003e4 <__aeabi_ui2d>
 800457e:	2301      	movs	r3, #1
 8004580:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004584:	3c01      	subs	r4, #1
 8004586:	9313      	str	r3, [sp, #76]	; 0x4c
 8004588:	e76f      	b.n	800446a <_dtoa_r+0x112>
 800458a:	2301      	movs	r3, #1
 800458c:	e7b2      	b.n	80044f4 <_dtoa_r+0x19c>
 800458e:	900f      	str	r0, [sp, #60]	; 0x3c
 8004590:	e7b1      	b.n	80044f6 <_dtoa_r+0x19e>
 8004592:	9b06      	ldr	r3, [sp, #24]
 8004594:	eba3 030a 	sub.w	r3, r3, sl
 8004598:	9306      	str	r3, [sp, #24]
 800459a:	f1ca 0300 	rsb	r3, sl, #0
 800459e:	930a      	str	r3, [sp, #40]	; 0x28
 80045a0:	2300      	movs	r3, #0
 80045a2:	930e      	str	r3, [sp, #56]	; 0x38
 80045a4:	e7be      	b.n	8004524 <_dtoa_r+0x1cc>
 80045a6:	2300      	movs	r3, #0
 80045a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80045aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	dc58      	bgt.n	8004662 <_dtoa_r+0x30a>
 80045b0:	f04f 0901 	mov.w	r9, #1
 80045b4:	464b      	mov	r3, r9
 80045b6:	f8cd 9020 	str.w	r9, [sp, #32]
 80045ba:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80045be:	2200      	movs	r2, #0
 80045c0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80045c2:	6042      	str	r2, [r0, #4]
 80045c4:	2204      	movs	r2, #4
 80045c6:	f102 0614 	add.w	r6, r2, #20
 80045ca:	429e      	cmp	r6, r3
 80045cc:	6841      	ldr	r1, [r0, #4]
 80045ce:	d94e      	bls.n	800466e <_dtoa_r+0x316>
 80045d0:	4628      	mov	r0, r5
 80045d2:	f000 fdd1 	bl	8005178 <_Balloc>
 80045d6:	9003      	str	r0, [sp, #12]
 80045d8:	2800      	cmp	r0, #0
 80045da:	d14c      	bne.n	8004676 <_dtoa_r+0x31e>
 80045dc:	4602      	mov	r2, r0
 80045de:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80045e2:	4b17      	ldr	r3, [pc, #92]	; (8004640 <_dtoa_r+0x2e8>)
 80045e4:	e6cc      	b.n	8004380 <_dtoa_r+0x28>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e7de      	b.n	80045a8 <_dtoa_r+0x250>
 80045ea:	2300      	movs	r3, #0
 80045ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80045ee:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80045f0:	eb0a 0903 	add.w	r9, sl, r3
 80045f4:	f109 0301 	add.w	r3, r9, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	9308      	str	r3, [sp, #32]
 80045fc:	bfb8      	it	lt
 80045fe:	2301      	movlt	r3, #1
 8004600:	e7dd      	b.n	80045be <_dtoa_r+0x266>
 8004602:	2301      	movs	r3, #1
 8004604:	e7f2      	b.n	80045ec <_dtoa_r+0x294>
 8004606:	bf00      	nop
 8004608:	636f4361 	.word	0x636f4361
 800460c:	3fd287a7 	.word	0x3fd287a7
 8004610:	8b60c8b3 	.word	0x8b60c8b3
 8004614:	3fc68a28 	.word	0x3fc68a28
 8004618:	509f79fb 	.word	0x509f79fb
 800461c:	3fd34413 	.word	0x3fd34413
 8004620:	08006455 	.word	0x08006455
 8004624:	0800646c 	.word	0x0800646c
 8004628:	7ff00000 	.word	0x7ff00000
 800462c:	08006451 	.word	0x08006451
 8004630:	08006448 	.word	0x08006448
 8004634:	08006425 	.word	0x08006425
 8004638:	3ff80000 	.word	0x3ff80000
 800463c:	080065c0 	.word	0x080065c0
 8004640:	080064c7 	.word	0x080064c7
 8004644:	2401      	movs	r4, #1
 8004646:	2300      	movs	r3, #0
 8004648:	940b      	str	r4, [sp, #44]	; 0x2c
 800464a:	9322      	str	r3, [sp, #136]	; 0x88
 800464c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004650:	2200      	movs	r2, #0
 8004652:	2312      	movs	r3, #18
 8004654:	f8cd 9020 	str.w	r9, [sp, #32]
 8004658:	9223      	str	r2, [sp, #140]	; 0x8c
 800465a:	e7b0      	b.n	80045be <_dtoa_r+0x266>
 800465c:	2301      	movs	r3, #1
 800465e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004660:	e7f4      	b.n	800464c <_dtoa_r+0x2f4>
 8004662:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004666:	464b      	mov	r3, r9
 8004668:	f8cd 9020 	str.w	r9, [sp, #32]
 800466c:	e7a7      	b.n	80045be <_dtoa_r+0x266>
 800466e:	3101      	adds	r1, #1
 8004670:	6041      	str	r1, [r0, #4]
 8004672:	0052      	lsls	r2, r2, #1
 8004674:	e7a7      	b.n	80045c6 <_dtoa_r+0x26e>
 8004676:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004678:	9a03      	ldr	r2, [sp, #12]
 800467a:	601a      	str	r2, [r3, #0]
 800467c:	9b08      	ldr	r3, [sp, #32]
 800467e:	2b0e      	cmp	r3, #14
 8004680:	f200 80a8 	bhi.w	80047d4 <_dtoa_r+0x47c>
 8004684:	2c00      	cmp	r4, #0
 8004686:	f000 80a5 	beq.w	80047d4 <_dtoa_r+0x47c>
 800468a:	f1ba 0f00 	cmp.w	sl, #0
 800468e:	dd34      	ble.n	80046fa <_dtoa_r+0x3a2>
 8004690:	4a9a      	ldr	r2, [pc, #616]	; (80048fc <_dtoa_r+0x5a4>)
 8004692:	f00a 030f 	and.w	r3, sl, #15
 8004696:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800469a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800469e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80046a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80046a6:	ea4f 142a 	mov.w	r4, sl, asr #4
 80046aa:	d016      	beq.n	80046da <_dtoa_r+0x382>
 80046ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80046b0:	4b93      	ldr	r3, [pc, #588]	; (8004900 <_dtoa_r+0x5a8>)
 80046b2:	2703      	movs	r7, #3
 80046b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80046b8:	f7fc f838 	bl	800072c <__aeabi_ddiv>
 80046bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046c0:	f004 040f 	and.w	r4, r4, #15
 80046c4:	4e8e      	ldr	r6, [pc, #568]	; (8004900 <_dtoa_r+0x5a8>)
 80046c6:	b954      	cbnz	r4, 80046de <_dtoa_r+0x386>
 80046c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80046cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046d0:	f7fc f82c 	bl	800072c <__aeabi_ddiv>
 80046d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80046d8:	e029      	b.n	800472e <_dtoa_r+0x3d6>
 80046da:	2702      	movs	r7, #2
 80046dc:	e7f2      	b.n	80046c4 <_dtoa_r+0x36c>
 80046de:	07e1      	lsls	r1, r4, #31
 80046e0:	d508      	bpl.n	80046f4 <_dtoa_r+0x39c>
 80046e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80046e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80046ea:	f7fb fef5 	bl	80004d8 <__aeabi_dmul>
 80046ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80046f2:	3701      	adds	r7, #1
 80046f4:	1064      	asrs	r4, r4, #1
 80046f6:	3608      	adds	r6, #8
 80046f8:	e7e5      	b.n	80046c6 <_dtoa_r+0x36e>
 80046fa:	f000 80a5 	beq.w	8004848 <_dtoa_r+0x4f0>
 80046fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004702:	f1ca 0400 	rsb	r4, sl, #0
 8004706:	4b7d      	ldr	r3, [pc, #500]	; (80048fc <_dtoa_r+0x5a4>)
 8004708:	f004 020f 	and.w	r2, r4, #15
 800470c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fb fee0 	bl	80004d8 <__aeabi_dmul>
 8004718:	2702      	movs	r7, #2
 800471a:	2300      	movs	r3, #0
 800471c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004720:	4e77      	ldr	r6, [pc, #476]	; (8004900 <_dtoa_r+0x5a8>)
 8004722:	1124      	asrs	r4, r4, #4
 8004724:	2c00      	cmp	r4, #0
 8004726:	f040 8084 	bne.w	8004832 <_dtoa_r+0x4da>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1d2      	bne.n	80046d4 <_dtoa_r+0x37c>
 800472e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004730:	2b00      	cmp	r3, #0
 8004732:	f000 808b 	beq.w	800484c <_dtoa_r+0x4f4>
 8004736:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800473a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800473e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004742:	2200      	movs	r2, #0
 8004744:	4b6f      	ldr	r3, [pc, #444]	; (8004904 <_dtoa_r+0x5ac>)
 8004746:	f7fc f939 	bl	80009bc <__aeabi_dcmplt>
 800474a:	2800      	cmp	r0, #0
 800474c:	d07e      	beq.n	800484c <_dtoa_r+0x4f4>
 800474e:	9b08      	ldr	r3, [sp, #32]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d07b      	beq.n	800484c <_dtoa_r+0x4f4>
 8004754:	f1b9 0f00 	cmp.w	r9, #0
 8004758:	dd38      	ble.n	80047cc <_dtoa_r+0x474>
 800475a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800475e:	2200      	movs	r2, #0
 8004760:	4b69      	ldr	r3, [pc, #420]	; (8004908 <_dtoa_r+0x5b0>)
 8004762:	f7fb feb9 	bl	80004d8 <__aeabi_dmul>
 8004766:	464c      	mov	r4, r9
 8004768:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800476c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8004770:	3701      	adds	r7, #1
 8004772:	4638      	mov	r0, r7
 8004774:	f7fb fe46 	bl	8000404 <__aeabi_i2d>
 8004778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800477c:	f7fb feac 	bl	80004d8 <__aeabi_dmul>
 8004780:	2200      	movs	r2, #0
 8004782:	4b62      	ldr	r3, [pc, #392]	; (800490c <_dtoa_r+0x5b4>)
 8004784:	f7fb fcf2 	bl	800016c <__adddf3>
 8004788:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800478c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004790:	9611      	str	r6, [sp, #68]	; 0x44
 8004792:	2c00      	cmp	r4, #0
 8004794:	d15d      	bne.n	8004852 <_dtoa_r+0x4fa>
 8004796:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800479a:	2200      	movs	r2, #0
 800479c:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <_dtoa_r+0x5b8>)
 800479e:	f7fb fce3 	bl	8000168 <__aeabi_dsub>
 80047a2:	4602      	mov	r2, r0
 80047a4:	460b      	mov	r3, r1
 80047a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80047aa:	4633      	mov	r3, r6
 80047ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047ae:	f7fc f923 	bl	80009f8 <__aeabi_dcmpgt>
 80047b2:	2800      	cmp	r0, #0
 80047b4:	f040 829c 	bne.w	8004cf0 <_dtoa_r+0x998>
 80047b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80047be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80047c2:	f7fc f8fb 	bl	80009bc <__aeabi_dcmplt>
 80047c6:	2800      	cmp	r0, #0
 80047c8:	f040 8290 	bne.w	8004cec <_dtoa_r+0x994>
 80047cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80047d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80047d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f2c0 8152 	blt.w	8004a80 <_dtoa_r+0x728>
 80047dc:	f1ba 0f0e 	cmp.w	sl, #14
 80047e0:	f300 814e 	bgt.w	8004a80 <_dtoa_r+0x728>
 80047e4:	4b45      	ldr	r3, [pc, #276]	; (80048fc <_dtoa_r+0x5a4>)
 80047e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80047ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80047f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f280 80db 	bge.w	80049b0 <_dtoa_r+0x658>
 80047fa:	9b08      	ldr	r3, [sp, #32]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f300 80d7 	bgt.w	80049b0 <_dtoa_r+0x658>
 8004802:	f040 8272 	bne.w	8004cea <_dtoa_r+0x992>
 8004806:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800480a:	2200      	movs	r2, #0
 800480c:	4b40      	ldr	r3, [pc, #256]	; (8004910 <_dtoa_r+0x5b8>)
 800480e:	f7fb fe63 	bl	80004d8 <__aeabi_dmul>
 8004812:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004816:	f7fc f8e5 	bl	80009e4 <__aeabi_dcmpge>
 800481a:	9c08      	ldr	r4, [sp, #32]
 800481c:	4626      	mov	r6, r4
 800481e:	2800      	cmp	r0, #0
 8004820:	f040 8248 	bne.w	8004cb4 <_dtoa_r+0x95c>
 8004824:	2331      	movs	r3, #49	; 0x31
 8004826:	9f03      	ldr	r7, [sp, #12]
 8004828:	f10a 0a01 	add.w	sl, sl, #1
 800482c:	f807 3b01 	strb.w	r3, [r7], #1
 8004830:	e244      	b.n	8004cbc <_dtoa_r+0x964>
 8004832:	07e2      	lsls	r2, r4, #31
 8004834:	d505      	bpl.n	8004842 <_dtoa_r+0x4ea>
 8004836:	e9d6 2300 	ldrd	r2, r3, [r6]
 800483a:	f7fb fe4d 	bl	80004d8 <__aeabi_dmul>
 800483e:	2301      	movs	r3, #1
 8004840:	3701      	adds	r7, #1
 8004842:	1064      	asrs	r4, r4, #1
 8004844:	3608      	adds	r6, #8
 8004846:	e76d      	b.n	8004724 <_dtoa_r+0x3cc>
 8004848:	2702      	movs	r7, #2
 800484a:	e770      	b.n	800472e <_dtoa_r+0x3d6>
 800484c:	46d0      	mov	r8, sl
 800484e:	9c08      	ldr	r4, [sp, #32]
 8004850:	e78f      	b.n	8004772 <_dtoa_r+0x41a>
 8004852:	9903      	ldr	r1, [sp, #12]
 8004854:	4b29      	ldr	r3, [pc, #164]	; (80048fc <_dtoa_r+0x5a4>)
 8004856:	4421      	add	r1, r4
 8004858:	9112      	str	r1, [sp, #72]	; 0x48
 800485a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800485c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004860:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004864:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004868:	2900      	cmp	r1, #0
 800486a:	d055      	beq.n	8004918 <_dtoa_r+0x5c0>
 800486c:	2000      	movs	r0, #0
 800486e:	4929      	ldr	r1, [pc, #164]	; (8004914 <_dtoa_r+0x5bc>)
 8004870:	f7fb ff5c 	bl	800072c <__aeabi_ddiv>
 8004874:	463b      	mov	r3, r7
 8004876:	4632      	mov	r2, r6
 8004878:	f7fb fc76 	bl	8000168 <__aeabi_dsub>
 800487c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004880:	9f03      	ldr	r7, [sp, #12]
 8004882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004886:	f7fc f8d7 	bl	8000a38 <__aeabi_d2iz>
 800488a:	4604      	mov	r4, r0
 800488c:	f7fb fdba 	bl	8000404 <__aeabi_i2d>
 8004890:	4602      	mov	r2, r0
 8004892:	460b      	mov	r3, r1
 8004894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004898:	f7fb fc66 	bl	8000168 <__aeabi_dsub>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	3430      	adds	r4, #48	; 0x30
 80048a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80048a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048aa:	f807 4b01 	strb.w	r4, [r7], #1
 80048ae:	f7fc f885 	bl	80009bc <__aeabi_dcmplt>
 80048b2:	2800      	cmp	r0, #0
 80048b4:	d174      	bne.n	80049a0 <_dtoa_r+0x648>
 80048b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048ba:	2000      	movs	r0, #0
 80048bc:	4911      	ldr	r1, [pc, #68]	; (8004904 <_dtoa_r+0x5ac>)
 80048be:	f7fb fc53 	bl	8000168 <__aeabi_dsub>
 80048c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80048c6:	f7fc f879 	bl	80009bc <__aeabi_dcmplt>
 80048ca:	2800      	cmp	r0, #0
 80048cc:	f040 80b7 	bne.w	8004a3e <_dtoa_r+0x6e6>
 80048d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80048d2:	429f      	cmp	r7, r3
 80048d4:	f43f af7a 	beq.w	80047cc <_dtoa_r+0x474>
 80048d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80048dc:	2200      	movs	r2, #0
 80048de:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <_dtoa_r+0x5b0>)
 80048e0:	f7fb fdfa 	bl	80004d8 <__aeabi_dmul>
 80048e4:	2200      	movs	r2, #0
 80048e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80048ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80048ee:	4b06      	ldr	r3, [pc, #24]	; (8004908 <_dtoa_r+0x5b0>)
 80048f0:	f7fb fdf2 	bl	80004d8 <__aeabi_dmul>
 80048f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80048f8:	e7c3      	b.n	8004882 <_dtoa_r+0x52a>
 80048fa:	bf00      	nop
 80048fc:	080065c0 	.word	0x080065c0
 8004900:	08006598 	.word	0x08006598
 8004904:	3ff00000 	.word	0x3ff00000
 8004908:	40240000 	.word	0x40240000
 800490c:	401c0000 	.word	0x401c0000
 8004910:	40140000 	.word	0x40140000
 8004914:	3fe00000 	.word	0x3fe00000
 8004918:	4630      	mov	r0, r6
 800491a:	4639      	mov	r1, r7
 800491c:	f7fb fddc 	bl	80004d8 <__aeabi_dmul>
 8004920:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004922:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004926:	9c03      	ldr	r4, [sp, #12]
 8004928:	9314      	str	r3, [sp, #80]	; 0x50
 800492a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800492e:	f7fc f883 	bl	8000a38 <__aeabi_d2iz>
 8004932:	9015      	str	r0, [sp, #84]	; 0x54
 8004934:	f7fb fd66 	bl	8000404 <__aeabi_i2d>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004940:	f7fb fc12 	bl	8000168 <__aeabi_dsub>
 8004944:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004946:	4606      	mov	r6, r0
 8004948:	3330      	adds	r3, #48	; 0x30
 800494a:	f804 3b01 	strb.w	r3, [r4], #1
 800494e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004950:	460f      	mov	r7, r1
 8004952:	429c      	cmp	r4, r3
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	d124      	bne.n	80049a4 <_dtoa_r+0x64c>
 800495a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800495e:	4bb0      	ldr	r3, [pc, #704]	; (8004c20 <_dtoa_r+0x8c8>)
 8004960:	f7fb fc04 	bl	800016c <__adddf3>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4630      	mov	r0, r6
 800496a:	4639      	mov	r1, r7
 800496c:	f7fc f844 	bl	80009f8 <__aeabi_dcmpgt>
 8004970:	2800      	cmp	r0, #0
 8004972:	d163      	bne.n	8004a3c <_dtoa_r+0x6e4>
 8004974:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004978:	2000      	movs	r0, #0
 800497a:	49a9      	ldr	r1, [pc, #676]	; (8004c20 <_dtoa_r+0x8c8>)
 800497c:	f7fb fbf4 	bl	8000168 <__aeabi_dsub>
 8004980:	4602      	mov	r2, r0
 8004982:	460b      	mov	r3, r1
 8004984:	4630      	mov	r0, r6
 8004986:	4639      	mov	r1, r7
 8004988:	f7fc f818 	bl	80009bc <__aeabi_dcmplt>
 800498c:	2800      	cmp	r0, #0
 800498e:	f43f af1d 	beq.w	80047cc <_dtoa_r+0x474>
 8004992:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004994:	1e7b      	subs	r3, r7, #1
 8004996:	9314      	str	r3, [sp, #80]	; 0x50
 8004998:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800499c:	2b30      	cmp	r3, #48	; 0x30
 800499e:	d0f8      	beq.n	8004992 <_dtoa_r+0x63a>
 80049a0:	46c2      	mov	sl, r8
 80049a2:	e03b      	b.n	8004a1c <_dtoa_r+0x6c4>
 80049a4:	4b9f      	ldr	r3, [pc, #636]	; (8004c24 <_dtoa_r+0x8cc>)
 80049a6:	f7fb fd97 	bl	80004d8 <__aeabi_dmul>
 80049aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80049ae:	e7bc      	b.n	800492a <_dtoa_r+0x5d2>
 80049b0:	9f03      	ldr	r7, [sp, #12]
 80049b2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80049b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049ba:	4640      	mov	r0, r8
 80049bc:	4649      	mov	r1, r9
 80049be:	f7fb feb5 	bl	800072c <__aeabi_ddiv>
 80049c2:	f7fc f839 	bl	8000a38 <__aeabi_d2iz>
 80049c6:	4604      	mov	r4, r0
 80049c8:	f7fb fd1c 	bl	8000404 <__aeabi_i2d>
 80049cc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80049d0:	f7fb fd82 	bl	80004d8 <__aeabi_dmul>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4640      	mov	r0, r8
 80049da:	4649      	mov	r1, r9
 80049dc:	f7fb fbc4 	bl	8000168 <__aeabi_dsub>
 80049e0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80049e4:	f807 6b01 	strb.w	r6, [r7], #1
 80049e8:	9e03      	ldr	r6, [sp, #12]
 80049ea:	f8dd c020 	ldr.w	ip, [sp, #32]
 80049ee:	1bbe      	subs	r6, r7, r6
 80049f0:	45b4      	cmp	ip, r6
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	d136      	bne.n	8004a66 <_dtoa_r+0x70e>
 80049f8:	f7fb fbb8 	bl	800016c <__adddf3>
 80049fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a00:	4680      	mov	r8, r0
 8004a02:	4689      	mov	r9, r1
 8004a04:	f7fb fff8 	bl	80009f8 <__aeabi_dcmpgt>
 8004a08:	bb58      	cbnz	r0, 8004a62 <_dtoa_r+0x70a>
 8004a0a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004a0e:	4640      	mov	r0, r8
 8004a10:	4649      	mov	r1, r9
 8004a12:	f7fb ffc9 	bl	80009a8 <__aeabi_dcmpeq>
 8004a16:	b108      	cbz	r0, 8004a1c <_dtoa_r+0x6c4>
 8004a18:	07e1      	lsls	r1, r4, #31
 8004a1a:	d422      	bmi.n	8004a62 <_dtoa_r+0x70a>
 8004a1c:	4628      	mov	r0, r5
 8004a1e:	4659      	mov	r1, fp
 8004a20:	f000 fbea 	bl	80051f8 <_Bfree>
 8004a24:	2300      	movs	r3, #0
 8004a26:	703b      	strb	r3, [r7, #0]
 8004a28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8004a2a:	f10a 0001 	add.w	r0, sl, #1
 8004a2e:	6018      	str	r0, [r3, #0]
 8004a30:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	f43f acde 	beq.w	80043f4 <_dtoa_r+0x9c>
 8004a38:	601f      	str	r7, [r3, #0]
 8004a3a:	e4db      	b.n	80043f4 <_dtoa_r+0x9c>
 8004a3c:	4627      	mov	r7, r4
 8004a3e:	463b      	mov	r3, r7
 8004a40:	461f      	mov	r7, r3
 8004a42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a46:	2a39      	cmp	r2, #57	; 0x39
 8004a48:	d107      	bne.n	8004a5a <_dtoa_r+0x702>
 8004a4a:	9a03      	ldr	r2, [sp, #12]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d1f7      	bne.n	8004a40 <_dtoa_r+0x6e8>
 8004a50:	2230      	movs	r2, #48	; 0x30
 8004a52:	9903      	ldr	r1, [sp, #12]
 8004a54:	f108 0801 	add.w	r8, r8, #1
 8004a58:	700a      	strb	r2, [r1, #0]
 8004a5a:	781a      	ldrb	r2, [r3, #0]
 8004a5c:	3201      	adds	r2, #1
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	e79e      	b.n	80049a0 <_dtoa_r+0x648>
 8004a62:	46d0      	mov	r8, sl
 8004a64:	e7eb      	b.n	8004a3e <_dtoa_r+0x6e6>
 8004a66:	2200      	movs	r2, #0
 8004a68:	4b6e      	ldr	r3, [pc, #440]	; (8004c24 <_dtoa_r+0x8cc>)
 8004a6a:	f7fb fd35 	bl	80004d8 <__aeabi_dmul>
 8004a6e:	2200      	movs	r2, #0
 8004a70:	2300      	movs	r3, #0
 8004a72:	4680      	mov	r8, r0
 8004a74:	4689      	mov	r9, r1
 8004a76:	f7fb ff97 	bl	80009a8 <__aeabi_dcmpeq>
 8004a7a:	2800      	cmp	r0, #0
 8004a7c:	d09b      	beq.n	80049b6 <_dtoa_r+0x65e>
 8004a7e:	e7cd      	b.n	8004a1c <_dtoa_r+0x6c4>
 8004a80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	f000 80d0 	beq.w	8004c28 <_dtoa_r+0x8d0>
 8004a88:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8004a8a:	2a01      	cmp	r2, #1
 8004a8c:	f300 80ae 	bgt.w	8004bec <_dtoa_r+0x894>
 8004a90:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8004a92:	2a00      	cmp	r2, #0
 8004a94:	f000 80a6 	beq.w	8004be4 <_dtoa_r+0x88c>
 8004a98:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004a9c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004a9e:	9f06      	ldr	r7, [sp, #24]
 8004aa0:	9a06      	ldr	r2, [sp, #24]
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	441a      	add	r2, r3
 8004aa6:	9206      	str	r2, [sp, #24]
 8004aa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aaa:	4628      	mov	r0, r5
 8004aac:	441a      	add	r2, r3
 8004aae:	9209      	str	r2, [sp, #36]	; 0x24
 8004ab0:	f000 fc58 	bl	8005364 <__i2b>
 8004ab4:	4606      	mov	r6, r0
 8004ab6:	2f00      	cmp	r7, #0
 8004ab8:	dd0c      	ble.n	8004ad4 <_dtoa_r+0x77c>
 8004aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	dd09      	ble.n	8004ad4 <_dtoa_r+0x77c>
 8004ac0:	42bb      	cmp	r3, r7
 8004ac2:	bfa8      	it	ge
 8004ac4:	463b      	movge	r3, r7
 8004ac6:	9a06      	ldr	r2, [sp, #24]
 8004ac8:	1aff      	subs	r7, r7, r3
 8004aca:	1ad2      	subs	r2, r2, r3
 8004acc:	9206      	str	r2, [sp, #24]
 8004ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ad6:	b1f3      	cbz	r3, 8004b16 <_dtoa_r+0x7be>
 8004ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	f000 80a8 	beq.w	8004c30 <_dtoa_r+0x8d8>
 8004ae0:	2c00      	cmp	r4, #0
 8004ae2:	dd10      	ble.n	8004b06 <_dtoa_r+0x7ae>
 8004ae4:	4631      	mov	r1, r6
 8004ae6:	4622      	mov	r2, r4
 8004ae8:	4628      	mov	r0, r5
 8004aea:	f000 fcf9 	bl	80054e0 <__pow5mult>
 8004aee:	465a      	mov	r2, fp
 8004af0:	4601      	mov	r1, r0
 8004af2:	4606      	mov	r6, r0
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 fc4b 	bl	8005390 <__multiply>
 8004afa:	4680      	mov	r8, r0
 8004afc:	4659      	mov	r1, fp
 8004afe:	4628      	mov	r0, r5
 8004b00:	f000 fb7a 	bl	80051f8 <_Bfree>
 8004b04:	46c3      	mov	fp, r8
 8004b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b08:	1b1a      	subs	r2, r3, r4
 8004b0a:	d004      	beq.n	8004b16 <_dtoa_r+0x7be>
 8004b0c:	4659      	mov	r1, fp
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 fce6 	bl	80054e0 <__pow5mult>
 8004b14:	4683      	mov	fp, r0
 8004b16:	2101      	movs	r1, #1
 8004b18:	4628      	mov	r0, r5
 8004b1a:	f000 fc23 	bl	8005364 <__i2b>
 8004b1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004b20:	4604      	mov	r4, r0
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	f340 8086 	ble.w	8004c34 <_dtoa_r+0x8dc>
 8004b28:	461a      	mov	r2, r3
 8004b2a:	4601      	mov	r1, r0
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	f000 fcd7 	bl	80054e0 <__pow5mult>
 8004b32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004b34:	4604      	mov	r4, r0
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	dd7f      	ble.n	8004c3a <_dtoa_r+0x8e2>
 8004b3a:	f04f 0800 	mov.w	r8, #0
 8004b3e:	6923      	ldr	r3, [r4, #16]
 8004b40:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004b44:	6918      	ldr	r0, [r3, #16]
 8004b46:	f000 fbbf 	bl	80052c8 <__hi0bits>
 8004b4a:	f1c0 0020 	rsb	r0, r0, #32
 8004b4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b50:	4418      	add	r0, r3
 8004b52:	f010 001f 	ands.w	r0, r0, #31
 8004b56:	f000 8092 	beq.w	8004c7e <_dtoa_r+0x926>
 8004b5a:	f1c0 0320 	rsb	r3, r0, #32
 8004b5e:	2b04      	cmp	r3, #4
 8004b60:	f340 808a 	ble.w	8004c78 <_dtoa_r+0x920>
 8004b64:	f1c0 001c 	rsb	r0, r0, #28
 8004b68:	9b06      	ldr	r3, [sp, #24]
 8004b6a:	4407      	add	r7, r0
 8004b6c:	4403      	add	r3, r0
 8004b6e:	9306      	str	r3, [sp, #24]
 8004b70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b72:	4403      	add	r3, r0
 8004b74:	9309      	str	r3, [sp, #36]	; 0x24
 8004b76:	9b06      	ldr	r3, [sp, #24]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	dd05      	ble.n	8004b88 <_dtoa_r+0x830>
 8004b7c:	4659      	mov	r1, fp
 8004b7e:	461a      	mov	r2, r3
 8004b80:	4628      	mov	r0, r5
 8004b82:	f000 fd07 	bl	8005594 <__lshift>
 8004b86:	4683      	mov	fp, r0
 8004b88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	dd05      	ble.n	8004b9a <_dtoa_r+0x842>
 8004b8e:	4621      	mov	r1, r4
 8004b90:	461a      	mov	r2, r3
 8004b92:	4628      	mov	r0, r5
 8004b94:	f000 fcfe 	bl	8005594 <__lshift>
 8004b98:	4604      	mov	r4, r0
 8004b9a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d070      	beq.n	8004c82 <_dtoa_r+0x92a>
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4658      	mov	r0, fp
 8004ba4:	f000 fd66 	bl	8005674 <__mcmp>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	da6a      	bge.n	8004c82 <_dtoa_r+0x92a>
 8004bac:	2300      	movs	r3, #0
 8004bae:	4659      	mov	r1, fp
 8004bb0:	220a      	movs	r2, #10
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 fb42 	bl	800523c <__multadd>
 8004bb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004bba:	4683      	mov	fp, r0
 8004bbc:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f000 8194 	beq.w	8004eee <_dtoa_r+0xb96>
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	2300      	movs	r3, #0
 8004bca:	220a      	movs	r2, #10
 8004bcc:	4628      	mov	r0, r5
 8004bce:	f000 fb35 	bl	800523c <__multadd>
 8004bd2:	f1b9 0f00 	cmp.w	r9, #0
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	f300 8093 	bgt.w	8004d02 <_dtoa_r+0x9aa>
 8004bdc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	dc57      	bgt.n	8004c92 <_dtoa_r+0x93a>
 8004be2:	e08e      	b.n	8004d02 <_dtoa_r+0x9aa>
 8004be4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004be6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004bea:	e757      	b.n	8004a9c <_dtoa_r+0x744>
 8004bec:	9b08      	ldr	r3, [sp, #32]
 8004bee:	1e5c      	subs	r4, r3, #1
 8004bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf2:	42a3      	cmp	r3, r4
 8004bf4:	bfb7      	itett	lt
 8004bf6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004bf8:	1b1c      	subge	r4, r3, r4
 8004bfa:	1ae2      	sublt	r2, r4, r3
 8004bfc:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8004bfe:	bfbe      	ittt	lt
 8004c00:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004c02:	189b      	addlt	r3, r3, r2
 8004c04:	930e      	strlt	r3, [sp, #56]	; 0x38
 8004c06:	9b08      	ldr	r3, [sp, #32]
 8004c08:	bfb8      	it	lt
 8004c0a:	2400      	movlt	r4, #0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	bfbb      	ittet	lt
 8004c10:	9b06      	ldrlt	r3, [sp, #24]
 8004c12:	9a08      	ldrlt	r2, [sp, #32]
 8004c14:	9f06      	ldrge	r7, [sp, #24]
 8004c16:	1a9f      	sublt	r7, r3, r2
 8004c18:	bfac      	ite	ge
 8004c1a:	9b08      	ldrge	r3, [sp, #32]
 8004c1c:	2300      	movlt	r3, #0
 8004c1e:	e73f      	b.n	8004aa0 <_dtoa_r+0x748>
 8004c20:	3fe00000 	.word	0x3fe00000
 8004c24:	40240000 	.word	0x40240000
 8004c28:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8004c2a:	9f06      	ldr	r7, [sp, #24]
 8004c2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8004c2e:	e742      	b.n	8004ab6 <_dtoa_r+0x75e>
 8004c30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004c32:	e76b      	b.n	8004b0c <_dtoa_r+0x7b4>
 8004c34:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c36:	2b01      	cmp	r3, #1
 8004c38:	dc19      	bgt.n	8004c6e <_dtoa_r+0x916>
 8004c3a:	9b04      	ldr	r3, [sp, #16]
 8004c3c:	b9bb      	cbnz	r3, 8004c6e <_dtoa_r+0x916>
 8004c3e:	9b05      	ldr	r3, [sp, #20]
 8004c40:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c44:	b99b      	cbnz	r3, 8004c6e <_dtoa_r+0x916>
 8004c46:	9b05      	ldr	r3, [sp, #20]
 8004c48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004c4c:	0d1b      	lsrs	r3, r3, #20
 8004c4e:	051b      	lsls	r3, r3, #20
 8004c50:	b183      	cbz	r3, 8004c74 <_dtoa_r+0x91c>
 8004c52:	f04f 0801 	mov.w	r8, #1
 8004c56:	9b06      	ldr	r3, [sp, #24]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	9306      	str	r3, [sp, #24]
 8004c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c5e:	3301      	adds	r3, #1
 8004c60:	9309      	str	r3, [sp, #36]	; 0x24
 8004c62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f47f af6a 	bne.w	8004b3e <_dtoa_r+0x7e6>
 8004c6a:	2001      	movs	r0, #1
 8004c6c:	e76f      	b.n	8004b4e <_dtoa_r+0x7f6>
 8004c6e:	f04f 0800 	mov.w	r8, #0
 8004c72:	e7f6      	b.n	8004c62 <_dtoa_r+0x90a>
 8004c74:	4698      	mov	r8, r3
 8004c76:	e7f4      	b.n	8004c62 <_dtoa_r+0x90a>
 8004c78:	f43f af7d 	beq.w	8004b76 <_dtoa_r+0x81e>
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	301c      	adds	r0, #28
 8004c80:	e772      	b.n	8004b68 <_dtoa_r+0x810>
 8004c82:	9b08      	ldr	r3, [sp, #32]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	dc36      	bgt.n	8004cf6 <_dtoa_r+0x99e>
 8004c88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	dd33      	ble.n	8004cf6 <_dtoa_r+0x99e>
 8004c8e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c92:	f1b9 0f00 	cmp.w	r9, #0
 8004c96:	d10d      	bne.n	8004cb4 <_dtoa_r+0x95c>
 8004c98:	4621      	mov	r1, r4
 8004c9a:	464b      	mov	r3, r9
 8004c9c:	2205      	movs	r2, #5
 8004c9e:	4628      	mov	r0, r5
 8004ca0:	f000 facc 	bl	800523c <__multadd>
 8004ca4:	4601      	mov	r1, r0
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	4658      	mov	r0, fp
 8004caa:	f000 fce3 	bl	8005674 <__mcmp>
 8004cae:	2800      	cmp	r0, #0
 8004cb0:	f73f adb8 	bgt.w	8004824 <_dtoa_r+0x4cc>
 8004cb4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cb6:	9f03      	ldr	r7, [sp, #12]
 8004cb8:	ea6f 0a03 	mvn.w	sl, r3
 8004cbc:	f04f 0800 	mov.w	r8, #0
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	4628      	mov	r0, r5
 8004cc4:	f000 fa98 	bl	80051f8 <_Bfree>
 8004cc8:	2e00      	cmp	r6, #0
 8004cca:	f43f aea7 	beq.w	8004a1c <_dtoa_r+0x6c4>
 8004cce:	f1b8 0f00 	cmp.w	r8, #0
 8004cd2:	d005      	beq.n	8004ce0 <_dtoa_r+0x988>
 8004cd4:	45b0      	cmp	r8, r6
 8004cd6:	d003      	beq.n	8004ce0 <_dtoa_r+0x988>
 8004cd8:	4641      	mov	r1, r8
 8004cda:	4628      	mov	r0, r5
 8004cdc:	f000 fa8c 	bl	80051f8 <_Bfree>
 8004ce0:	4631      	mov	r1, r6
 8004ce2:	4628      	mov	r0, r5
 8004ce4:	f000 fa88 	bl	80051f8 <_Bfree>
 8004ce8:	e698      	b.n	8004a1c <_dtoa_r+0x6c4>
 8004cea:	2400      	movs	r4, #0
 8004cec:	4626      	mov	r6, r4
 8004cee:	e7e1      	b.n	8004cb4 <_dtoa_r+0x95c>
 8004cf0:	46c2      	mov	sl, r8
 8004cf2:	4626      	mov	r6, r4
 8004cf4:	e596      	b.n	8004824 <_dtoa_r+0x4cc>
 8004cf6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cf8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 80fd 	beq.w	8004efc <_dtoa_r+0xba4>
 8004d02:	2f00      	cmp	r7, #0
 8004d04:	dd05      	ble.n	8004d12 <_dtoa_r+0x9ba>
 8004d06:	4631      	mov	r1, r6
 8004d08:	463a      	mov	r2, r7
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f000 fc42 	bl	8005594 <__lshift>
 8004d10:	4606      	mov	r6, r0
 8004d12:	f1b8 0f00 	cmp.w	r8, #0
 8004d16:	d05c      	beq.n	8004dd2 <_dtoa_r+0xa7a>
 8004d18:	4628      	mov	r0, r5
 8004d1a:	6871      	ldr	r1, [r6, #4]
 8004d1c:	f000 fa2c 	bl	8005178 <_Balloc>
 8004d20:	4607      	mov	r7, r0
 8004d22:	b928      	cbnz	r0, 8004d30 <_dtoa_r+0x9d8>
 8004d24:	4602      	mov	r2, r0
 8004d26:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004d2a:	4b7f      	ldr	r3, [pc, #508]	; (8004f28 <_dtoa_r+0xbd0>)
 8004d2c:	f7ff bb28 	b.w	8004380 <_dtoa_r+0x28>
 8004d30:	6932      	ldr	r2, [r6, #16]
 8004d32:	f106 010c 	add.w	r1, r6, #12
 8004d36:	3202      	adds	r2, #2
 8004d38:	0092      	lsls	r2, r2, #2
 8004d3a:	300c      	adds	r0, #12
 8004d3c:	f000 fa0e 	bl	800515c <memcpy>
 8004d40:	2201      	movs	r2, #1
 8004d42:	4639      	mov	r1, r7
 8004d44:	4628      	mov	r0, r5
 8004d46:	f000 fc25 	bl	8005594 <__lshift>
 8004d4a:	46b0      	mov	r8, r6
 8004d4c:	4606      	mov	r6, r0
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	3301      	adds	r3, #1
 8004d52:	9308      	str	r3, [sp, #32]
 8004d54:	9b03      	ldr	r3, [sp, #12]
 8004d56:	444b      	add	r3, r9
 8004d58:	930a      	str	r3, [sp, #40]	; 0x28
 8004d5a:	9b04      	ldr	r3, [sp, #16]
 8004d5c:	f003 0301 	and.w	r3, r3, #1
 8004d60:	9309      	str	r3, [sp, #36]	; 0x24
 8004d62:	9b08      	ldr	r3, [sp, #32]
 8004d64:	4621      	mov	r1, r4
 8004d66:	3b01      	subs	r3, #1
 8004d68:	4658      	mov	r0, fp
 8004d6a:	9304      	str	r3, [sp, #16]
 8004d6c:	f7ff fa68 	bl	8004240 <quorem>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4641      	mov	r1, r8
 8004d74:	3330      	adds	r3, #48	; 0x30
 8004d76:	9006      	str	r0, [sp, #24]
 8004d78:	4658      	mov	r0, fp
 8004d7a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d7c:	f000 fc7a 	bl	8005674 <__mcmp>
 8004d80:	4632      	mov	r2, r6
 8004d82:	4681      	mov	r9, r0
 8004d84:	4621      	mov	r1, r4
 8004d86:	4628      	mov	r0, r5
 8004d88:	f000 fc90 	bl	80056ac <__mdiff>
 8004d8c:	68c2      	ldr	r2, [r0, #12]
 8004d8e:	4607      	mov	r7, r0
 8004d90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d92:	bb02      	cbnz	r2, 8004dd6 <_dtoa_r+0xa7e>
 8004d94:	4601      	mov	r1, r0
 8004d96:	4658      	mov	r0, fp
 8004d98:	f000 fc6c 	bl	8005674 <__mcmp>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004da0:	4639      	mov	r1, r7
 8004da2:	4628      	mov	r0, r5
 8004da4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8004da8:	f000 fa26 	bl	80051f8 <_Bfree>
 8004dac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004dae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004db0:	9f08      	ldr	r7, [sp, #32]
 8004db2:	ea43 0102 	orr.w	r1, r3, r2
 8004db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004db8:	430b      	orrs	r3, r1
 8004dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004dbc:	d10d      	bne.n	8004dda <_dtoa_r+0xa82>
 8004dbe:	2b39      	cmp	r3, #57	; 0x39
 8004dc0:	d029      	beq.n	8004e16 <_dtoa_r+0xabe>
 8004dc2:	f1b9 0f00 	cmp.w	r9, #0
 8004dc6:	dd01      	ble.n	8004dcc <_dtoa_r+0xa74>
 8004dc8:	9b06      	ldr	r3, [sp, #24]
 8004dca:	3331      	adds	r3, #49	; 0x31
 8004dcc:	9a04      	ldr	r2, [sp, #16]
 8004dce:	7013      	strb	r3, [r2, #0]
 8004dd0:	e776      	b.n	8004cc0 <_dtoa_r+0x968>
 8004dd2:	4630      	mov	r0, r6
 8004dd4:	e7b9      	b.n	8004d4a <_dtoa_r+0x9f2>
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	e7e2      	b.n	8004da0 <_dtoa_r+0xa48>
 8004dda:	f1b9 0f00 	cmp.w	r9, #0
 8004dde:	db06      	blt.n	8004dee <_dtoa_r+0xa96>
 8004de0:	9922      	ldr	r1, [sp, #136]	; 0x88
 8004de2:	ea41 0909 	orr.w	r9, r1, r9
 8004de6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004de8:	ea59 0101 	orrs.w	r1, r9, r1
 8004dec:	d120      	bne.n	8004e30 <_dtoa_r+0xad8>
 8004dee:	2a00      	cmp	r2, #0
 8004df0:	ddec      	ble.n	8004dcc <_dtoa_r+0xa74>
 8004df2:	4659      	mov	r1, fp
 8004df4:	2201      	movs	r2, #1
 8004df6:	4628      	mov	r0, r5
 8004df8:	9308      	str	r3, [sp, #32]
 8004dfa:	f000 fbcb 	bl	8005594 <__lshift>
 8004dfe:	4621      	mov	r1, r4
 8004e00:	4683      	mov	fp, r0
 8004e02:	f000 fc37 	bl	8005674 <__mcmp>
 8004e06:	2800      	cmp	r0, #0
 8004e08:	9b08      	ldr	r3, [sp, #32]
 8004e0a:	dc02      	bgt.n	8004e12 <_dtoa_r+0xaba>
 8004e0c:	d1de      	bne.n	8004dcc <_dtoa_r+0xa74>
 8004e0e:	07da      	lsls	r2, r3, #31
 8004e10:	d5dc      	bpl.n	8004dcc <_dtoa_r+0xa74>
 8004e12:	2b39      	cmp	r3, #57	; 0x39
 8004e14:	d1d8      	bne.n	8004dc8 <_dtoa_r+0xa70>
 8004e16:	2339      	movs	r3, #57	; 0x39
 8004e18:	9a04      	ldr	r2, [sp, #16]
 8004e1a:	7013      	strb	r3, [r2, #0]
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	461f      	mov	r7, r3
 8004e20:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8004e24:	3b01      	subs	r3, #1
 8004e26:	2a39      	cmp	r2, #57	; 0x39
 8004e28:	d050      	beq.n	8004ecc <_dtoa_r+0xb74>
 8004e2a:	3201      	adds	r2, #1
 8004e2c:	701a      	strb	r2, [r3, #0]
 8004e2e:	e747      	b.n	8004cc0 <_dtoa_r+0x968>
 8004e30:	2a00      	cmp	r2, #0
 8004e32:	dd03      	ble.n	8004e3c <_dtoa_r+0xae4>
 8004e34:	2b39      	cmp	r3, #57	; 0x39
 8004e36:	d0ee      	beq.n	8004e16 <_dtoa_r+0xabe>
 8004e38:	3301      	adds	r3, #1
 8004e3a:	e7c7      	b.n	8004dcc <_dtoa_r+0xa74>
 8004e3c:	9a08      	ldr	r2, [sp, #32]
 8004e3e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004e40:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004e44:	428a      	cmp	r2, r1
 8004e46:	d02a      	beq.n	8004e9e <_dtoa_r+0xb46>
 8004e48:	4659      	mov	r1, fp
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	220a      	movs	r2, #10
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f000 f9f4 	bl	800523c <__multadd>
 8004e54:	45b0      	cmp	r8, r6
 8004e56:	4683      	mov	fp, r0
 8004e58:	f04f 0300 	mov.w	r3, #0
 8004e5c:	f04f 020a 	mov.w	r2, #10
 8004e60:	4641      	mov	r1, r8
 8004e62:	4628      	mov	r0, r5
 8004e64:	d107      	bne.n	8004e76 <_dtoa_r+0xb1e>
 8004e66:	f000 f9e9 	bl	800523c <__multadd>
 8004e6a:	4680      	mov	r8, r0
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	9b08      	ldr	r3, [sp, #32]
 8004e70:	3301      	adds	r3, #1
 8004e72:	9308      	str	r3, [sp, #32]
 8004e74:	e775      	b.n	8004d62 <_dtoa_r+0xa0a>
 8004e76:	f000 f9e1 	bl	800523c <__multadd>
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4680      	mov	r8, r0
 8004e7e:	2300      	movs	r3, #0
 8004e80:	220a      	movs	r2, #10
 8004e82:	4628      	mov	r0, r5
 8004e84:	f000 f9da 	bl	800523c <__multadd>
 8004e88:	4606      	mov	r6, r0
 8004e8a:	e7f0      	b.n	8004e6e <_dtoa_r+0xb16>
 8004e8c:	f1b9 0f00 	cmp.w	r9, #0
 8004e90:	bfcc      	ite	gt
 8004e92:	464f      	movgt	r7, r9
 8004e94:	2701      	movle	r7, #1
 8004e96:	f04f 0800 	mov.w	r8, #0
 8004e9a:	9a03      	ldr	r2, [sp, #12]
 8004e9c:	4417      	add	r7, r2
 8004e9e:	4659      	mov	r1, fp
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	4628      	mov	r0, r5
 8004ea4:	9308      	str	r3, [sp, #32]
 8004ea6:	f000 fb75 	bl	8005594 <__lshift>
 8004eaa:	4621      	mov	r1, r4
 8004eac:	4683      	mov	fp, r0
 8004eae:	f000 fbe1 	bl	8005674 <__mcmp>
 8004eb2:	2800      	cmp	r0, #0
 8004eb4:	dcb2      	bgt.n	8004e1c <_dtoa_r+0xac4>
 8004eb6:	d102      	bne.n	8004ebe <_dtoa_r+0xb66>
 8004eb8:	9b08      	ldr	r3, [sp, #32]
 8004eba:	07db      	lsls	r3, r3, #31
 8004ebc:	d4ae      	bmi.n	8004e1c <_dtoa_r+0xac4>
 8004ebe:	463b      	mov	r3, r7
 8004ec0:	461f      	mov	r7, r3
 8004ec2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004ec6:	2a30      	cmp	r2, #48	; 0x30
 8004ec8:	d0fa      	beq.n	8004ec0 <_dtoa_r+0xb68>
 8004eca:	e6f9      	b.n	8004cc0 <_dtoa_r+0x968>
 8004ecc:	9a03      	ldr	r2, [sp, #12]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d1a5      	bne.n	8004e1e <_dtoa_r+0xac6>
 8004ed2:	2331      	movs	r3, #49	; 0x31
 8004ed4:	f10a 0a01 	add.w	sl, sl, #1
 8004ed8:	e779      	b.n	8004dce <_dtoa_r+0xa76>
 8004eda:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <_dtoa_r+0xbd4>)
 8004edc:	f7ff baa8 	b.w	8004430 <_dtoa_r+0xd8>
 8004ee0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f47f aa81 	bne.w	80043ea <_dtoa_r+0x92>
 8004ee8:	4b11      	ldr	r3, [pc, #68]	; (8004f30 <_dtoa_r+0xbd8>)
 8004eea:	f7ff baa1 	b.w	8004430 <_dtoa_r+0xd8>
 8004eee:	f1b9 0f00 	cmp.w	r9, #0
 8004ef2:	dc03      	bgt.n	8004efc <_dtoa_r+0xba4>
 8004ef4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	f73f aecb 	bgt.w	8004c92 <_dtoa_r+0x93a>
 8004efc:	9f03      	ldr	r7, [sp, #12]
 8004efe:	4621      	mov	r1, r4
 8004f00:	4658      	mov	r0, fp
 8004f02:	f7ff f99d 	bl	8004240 <quorem>
 8004f06:	9a03      	ldr	r2, [sp, #12]
 8004f08:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8004f0c:	f807 3b01 	strb.w	r3, [r7], #1
 8004f10:	1aba      	subs	r2, r7, r2
 8004f12:	4591      	cmp	r9, r2
 8004f14:	ddba      	ble.n	8004e8c <_dtoa_r+0xb34>
 8004f16:	4659      	mov	r1, fp
 8004f18:	2300      	movs	r3, #0
 8004f1a:	220a      	movs	r2, #10
 8004f1c:	4628      	mov	r0, r5
 8004f1e:	f000 f98d 	bl	800523c <__multadd>
 8004f22:	4683      	mov	fp, r0
 8004f24:	e7eb      	b.n	8004efe <_dtoa_r+0xba6>
 8004f26:	bf00      	nop
 8004f28:	080064c7 	.word	0x080064c7
 8004f2c:	08006424 	.word	0x08006424
 8004f30:	08006448 	.word	0x08006448

08004f34 <std>:
 8004f34:	2300      	movs	r3, #0
 8004f36:	b510      	push	{r4, lr}
 8004f38:	4604      	mov	r4, r0
 8004f3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004f3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004f42:	6083      	str	r3, [r0, #8]
 8004f44:	8181      	strh	r1, [r0, #12]
 8004f46:	6643      	str	r3, [r0, #100]	; 0x64
 8004f48:	81c2      	strh	r2, [r0, #14]
 8004f4a:	6183      	str	r3, [r0, #24]
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	2208      	movs	r2, #8
 8004f50:	305c      	adds	r0, #92	; 0x5c
 8004f52:	f7fe fcf5 	bl	8003940 <memset>
 8004f56:	4b05      	ldr	r3, [pc, #20]	; (8004f6c <std+0x38>)
 8004f58:	6224      	str	r4, [r4, #32]
 8004f5a:	6263      	str	r3, [r4, #36]	; 0x24
 8004f5c:	4b04      	ldr	r3, [pc, #16]	; (8004f70 <std+0x3c>)
 8004f5e:	62a3      	str	r3, [r4, #40]	; 0x28
 8004f60:	4b04      	ldr	r3, [pc, #16]	; (8004f74 <std+0x40>)
 8004f62:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004f64:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <std+0x44>)
 8004f66:	6323      	str	r3, [r4, #48]	; 0x30
 8004f68:	bd10      	pop	{r4, pc}
 8004f6a:	bf00      	nop
 8004f6c:	08005d2d 	.word	0x08005d2d
 8004f70:	08005d4f 	.word	0x08005d4f
 8004f74:	08005d87 	.word	0x08005d87
 8004f78:	08005dab 	.word	0x08005dab

08004f7c <_cleanup_r>:
 8004f7c:	4901      	ldr	r1, [pc, #4]	; (8004f84 <_cleanup_r+0x8>)
 8004f7e:	f000 b8af 	b.w	80050e0 <_fwalk_reent>
 8004f82:	bf00      	nop
 8004f84:	080060b9 	.word	0x080060b9

08004f88 <__sfmoreglue>:
 8004f88:	2268      	movs	r2, #104	; 0x68
 8004f8a:	b570      	push	{r4, r5, r6, lr}
 8004f8c:	1e4d      	subs	r5, r1, #1
 8004f8e:	4355      	muls	r5, r2
 8004f90:	460e      	mov	r6, r1
 8004f92:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004f96:	f000 fced 	bl	8005974 <_malloc_r>
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	b140      	cbz	r0, 8004fb0 <__sfmoreglue+0x28>
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	e9c0 1600 	strd	r1, r6, [r0]
 8004fa4:	300c      	adds	r0, #12
 8004fa6:	60a0      	str	r0, [r4, #8]
 8004fa8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004fac:	f7fe fcc8 	bl	8003940 <memset>
 8004fb0:	4620      	mov	r0, r4
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}

08004fb4 <__sfp_lock_acquire>:
 8004fb4:	4801      	ldr	r0, [pc, #4]	; (8004fbc <__sfp_lock_acquire+0x8>)
 8004fb6:	f000 b8b8 	b.w	800512a <__retarget_lock_acquire_recursive>
 8004fba:	bf00      	nop
 8004fbc:	2000034d 	.word	0x2000034d

08004fc0 <__sfp_lock_release>:
 8004fc0:	4801      	ldr	r0, [pc, #4]	; (8004fc8 <__sfp_lock_release+0x8>)
 8004fc2:	f000 b8b3 	b.w	800512c <__retarget_lock_release_recursive>
 8004fc6:	bf00      	nop
 8004fc8:	2000034d 	.word	0x2000034d

08004fcc <__sinit_lock_acquire>:
 8004fcc:	4801      	ldr	r0, [pc, #4]	; (8004fd4 <__sinit_lock_acquire+0x8>)
 8004fce:	f000 b8ac 	b.w	800512a <__retarget_lock_acquire_recursive>
 8004fd2:	bf00      	nop
 8004fd4:	2000034e 	.word	0x2000034e

08004fd8 <__sinit_lock_release>:
 8004fd8:	4801      	ldr	r0, [pc, #4]	; (8004fe0 <__sinit_lock_release+0x8>)
 8004fda:	f000 b8a7 	b.w	800512c <__retarget_lock_release_recursive>
 8004fde:	bf00      	nop
 8004fe0:	2000034e 	.word	0x2000034e

08004fe4 <__sinit>:
 8004fe4:	b510      	push	{r4, lr}
 8004fe6:	4604      	mov	r4, r0
 8004fe8:	f7ff fff0 	bl	8004fcc <__sinit_lock_acquire>
 8004fec:	69a3      	ldr	r3, [r4, #24]
 8004fee:	b11b      	cbz	r3, 8004ff8 <__sinit+0x14>
 8004ff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ff4:	f7ff bff0 	b.w	8004fd8 <__sinit_lock_release>
 8004ff8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004ffc:	6523      	str	r3, [r4, #80]	; 0x50
 8004ffe:	4b13      	ldr	r3, [pc, #76]	; (800504c <__sinit+0x68>)
 8005000:	4a13      	ldr	r2, [pc, #76]	; (8005050 <__sinit+0x6c>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	62a2      	str	r2, [r4, #40]	; 0x28
 8005006:	42a3      	cmp	r3, r4
 8005008:	bf08      	it	eq
 800500a:	2301      	moveq	r3, #1
 800500c:	4620      	mov	r0, r4
 800500e:	bf08      	it	eq
 8005010:	61a3      	streq	r3, [r4, #24]
 8005012:	f000 f81f 	bl	8005054 <__sfp>
 8005016:	6060      	str	r0, [r4, #4]
 8005018:	4620      	mov	r0, r4
 800501a:	f000 f81b 	bl	8005054 <__sfp>
 800501e:	60a0      	str	r0, [r4, #8]
 8005020:	4620      	mov	r0, r4
 8005022:	f000 f817 	bl	8005054 <__sfp>
 8005026:	2200      	movs	r2, #0
 8005028:	2104      	movs	r1, #4
 800502a:	60e0      	str	r0, [r4, #12]
 800502c:	6860      	ldr	r0, [r4, #4]
 800502e:	f7ff ff81 	bl	8004f34 <std>
 8005032:	2201      	movs	r2, #1
 8005034:	2109      	movs	r1, #9
 8005036:	68a0      	ldr	r0, [r4, #8]
 8005038:	f7ff ff7c 	bl	8004f34 <std>
 800503c:	2202      	movs	r2, #2
 800503e:	2112      	movs	r1, #18
 8005040:	68e0      	ldr	r0, [r4, #12]
 8005042:	f7ff ff77 	bl	8004f34 <std>
 8005046:	2301      	movs	r3, #1
 8005048:	61a3      	str	r3, [r4, #24]
 800504a:	e7d1      	b.n	8004ff0 <__sinit+0xc>
 800504c:	08006410 	.word	0x08006410
 8005050:	08004f7d 	.word	0x08004f7d

08005054 <__sfp>:
 8005054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005056:	4607      	mov	r7, r0
 8005058:	f7ff ffac 	bl	8004fb4 <__sfp_lock_acquire>
 800505c:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <__sfp+0x84>)
 800505e:	681e      	ldr	r6, [r3, #0]
 8005060:	69b3      	ldr	r3, [r6, #24]
 8005062:	b913      	cbnz	r3, 800506a <__sfp+0x16>
 8005064:	4630      	mov	r0, r6
 8005066:	f7ff ffbd 	bl	8004fe4 <__sinit>
 800506a:	3648      	adds	r6, #72	; 0x48
 800506c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005070:	3b01      	subs	r3, #1
 8005072:	d503      	bpl.n	800507c <__sfp+0x28>
 8005074:	6833      	ldr	r3, [r6, #0]
 8005076:	b30b      	cbz	r3, 80050bc <__sfp+0x68>
 8005078:	6836      	ldr	r6, [r6, #0]
 800507a:	e7f7      	b.n	800506c <__sfp+0x18>
 800507c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005080:	b9d5      	cbnz	r5, 80050b8 <__sfp+0x64>
 8005082:	4b16      	ldr	r3, [pc, #88]	; (80050dc <__sfp+0x88>)
 8005084:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005088:	60e3      	str	r3, [r4, #12]
 800508a:	6665      	str	r5, [r4, #100]	; 0x64
 800508c:	f000 f84c 	bl	8005128 <__retarget_lock_init_recursive>
 8005090:	f7ff ff96 	bl	8004fc0 <__sfp_lock_release>
 8005094:	2208      	movs	r2, #8
 8005096:	4629      	mov	r1, r5
 8005098:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800509c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80050a0:	6025      	str	r5, [r4, #0]
 80050a2:	61a5      	str	r5, [r4, #24]
 80050a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80050a8:	f7fe fc4a 	bl	8003940 <memset>
 80050ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80050b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80050b4:	4620      	mov	r0, r4
 80050b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050b8:	3468      	adds	r4, #104	; 0x68
 80050ba:	e7d9      	b.n	8005070 <__sfp+0x1c>
 80050bc:	2104      	movs	r1, #4
 80050be:	4638      	mov	r0, r7
 80050c0:	f7ff ff62 	bl	8004f88 <__sfmoreglue>
 80050c4:	4604      	mov	r4, r0
 80050c6:	6030      	str	r0, [r6, #0]
 80050c8:	2800      	cmp	r0, #0
 80050ca:	d1d5      	bne.n	8005078 <__sfp+0x24>
 80050cc:	f7ff ff78 	bl	8004fc0 <__sfp_lock_release>
 80050d0:	230c      	movs	r3, #12
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	e7ee      	b.n	80050b4 <__sfp+0x60>
 80050d6:	bf00      	nop
 80050d8:	08006410 	.word	0x08006410
 80050dc:	ffff0001 	.word	0xffff0001

080050e0 <_fwalk_reent>:
 80050e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050e4:	4606      	mov	r6, r0
 80050e6:	4688      	mov	r8, r1
 80050e8:	2700      	movs	r7, #0
 80050ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80050ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80050f2:	f1b9 0901 	subs.w	r9, r9, #1
 80050f6:	d505      	bpl.n	8005104 <_fwalk_reent+0x24>
 80050f8:	6824      	ldr	r4, [r4, #0]
 80050fa:	2c00      	cmp	r4, #0
 80050fc:	d1f7      	bne.n	80050ee <_fwalk_reent+0xe>
 80050fe:	4638      	mov	r0, r7
 8005100:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005104:	89ab      	ldrh	r3, [r5, #12]
 8005106:	2b01      	cmp	r3, #1
 8005108:	d907      	bls.n	800511a <_fwalk_reent+0x3a>
 800510a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800510e:	3301      	adds	r3, #1
 8005110:	d003      	beq.n	800511a <_fwalk_reent+0x3a>
 8005112:	4629      	mov	r1, r5
 8005114:	4630      	mov	r0, r6
 8005116:	47c0      	blx	r8
 8005118:	4307      	orrs	r7, r0
 800511a:	3568      	adds	r5, #104	; 0x68
 800511c:	e7e9      	b.n	80050f2 <_fwalk_reent+0x12>
	...

08005120 <_localeconv_r>:
 8005120:	4800      	ldr	r0, [pc, #0]	; (8005124 <_localeconv_r+0x4>)
 8005122:	4770      	bx	lr
 8005124:	20000168 	.word	0x20000168

08005128 <__retarget_lock_init_recursive>:
 8005128:	4770      	bx	lr

0800512a <__retarget_lock_acquire_recursive>:
 800512a:	4770      	bx	lr

0800512c <__retarget_lock_release_recursive>:
 800512c:	4770      	bx	lr
	...

08005130 <malloc>:
 8005130:	4b02      	ldr	r3, [pc, #8]	; (800513c <malloc+0xc>)
 8005132:	4601      	mov	r1, r0
 8005134:	6818      	ldr	r0, [r3, #0]
 8005136:	f000 bc1d 	b.w	8005974 <_malloc_r>
 800513a:	bf00      	nop
 800513c:	20000014 	.word	0x20000014

08005140 <memchr>:
 8005140:	4603      	mov	r3, r0
 8005142:	b510      	push	{r4, lr}
 8005144:	b2c9      	uxtb	r1, r1
 8005146:	4402      	add	r2, r0
 8005148:	4293      	cmp	r3, r2
 800514a:	4618      	mov	r0, r3
 800514c:	d101      	bne.n	8005152 <memchr+0x12>
 800514e:	2000      	movs	r0, #0
 8005150:	e003      	b.n	800515a <memchr+0x1a>
 8005152:	7804      	ldrb	r4, [r0, #0]
 8005154:	3301      	adds	r3, #1
 8005156:	428c      	cmp	r4, r1
 8005158:	d1f6      	bne.n	8005148 <memchr+0x8>
 800515a:	bd10      	pop	{r4, pc}

0800515c <memcpy>:
 800515c:	440a      	add	r2, r1
 800515e:	4291      	cmp	r1, r2
 8005160:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005164:	d100      	bne.n	8005168 <memcpy+0xc>
 8005166:	4770      	bx	lr
 8005168:	b510      	push	{r4, lr}
 800516a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800516e:	4291      	cmp	r1, r2
 8005170:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005174:	d1f9      	bne.n	800516a <memcpy+0xe>
 8005176:	bd10      	pop	{r4, pc}

08005178 <_Balloc>:
 8005178:	b570      	push	{r4, r5, r6, lr}
 800517a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800517c:	4604      	mov	r4, r0
 800517e:	460d      	mov	r5, r1
 8005180:	b976      	cbnz	r6, 80051a0 <_Balloc+0x28>
 8005182:	2010      	movs	r0, #16
 8005184:	f7ff ffd4 	bl	8005130 <malloc>
 8005188:	4602      	mov	r2, r0
 800518a:	6260      	str	r0, [r4, #36]	; 0x24
 800518c:	b920      	cbnz	r0, 8005198 <_Balloc+0x20>
 800518e:	2166      	movs	r1, #102	; 0x66
 8005190:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <_Balloc+0x78>)
 8005192:	4818      	ldr	r0, [pc, #96]	; (80051f4 <_Balloc+0x7c>)
 8005194:	f000 fee0 	bl	8005f58 <__assert_func>
 8005198:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800519c:	6006      	str	r6, [r0, #0]
 800519e:	60c6      	str	r6, [r0, #12]
 80051a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80051a2:	68f3      	ldr	r3, [r6, #12]
 80051a4:	b183      	cbz	r3, 80051c8 <_Balloc+0x50>
 80051a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80051ae:	b9b8      	cbnz	r0, 80051e0 <_Balloc+0x68>
 80051b0:	2101      	movs	r1, #1
 80051b2:	fa01 f605 	lsl.w	r6, r1, r5
 80051b6:	1d72      	adds	r2, r6, #5
 80051b8:	4620      	mov	r0, r4
 80051ba:	0092      	lsls	r2, r2, #2
 80051bc:	f000 fb5e 	bl	800587c <_calloc_r>
 80051c0:	b160      	cbz	r0, 80051dc <_Balloc+0x64>
 80051c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80051c6:	e00e      	b.n	80051e6 <_Balloc+0x6e>
 80051c8:	2221      	movs	r2, #33	; 0x21
 80051ca:	2104      	movs	r1, #4
 80051cc:	4620      	mov	r0, r4
 80051ce:	f000 fb55 	bl	800587c <_calloc_r>
 80051d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051d4:	60f0      	str	r0, [r6, #12]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e4      	bne.n	80051a6 <_Balloc+0x2e>
 80051dc:	2000      	movs	r0, #0
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	6802      	ldr	r2, [r0, #0]
 80051e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80051e6:	2300      	movs	r3, #0
 80051e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80051ec:	e7f7      	b.n	80051de <_Balloc+0x66>
 80051ee:	bf00      	nop
 80051f0:	08006455 	.word	0x08006455
 80051f4:	08006538 	.word	0x08006538

080051f8 <_Bfree>:
 80051f8:	b570      	push	{r4, r5, r6, lr}
 80051fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80051fc:	4605      	mov	r5, r0
 80051fe:	460c      	mov	r4, r1
 8005200:	b976      	cbnz	r6, 8005220 <_Bfree+0x28>
 8005202:	2010      	movs	r0, #16
 8005204:	f7ff ff94 	bl	8005130 <malloc>
 8005208:	4602      	mov	r2, r0
 800520a:	6268      	str	r0, [r5, #36]	; 0x24
 800520c:	b920      	cbnz	r0, 8005218 <_Bfree+0x20>
 800520e:	218a      	movs	r1, #138	; 0x8a
 8005210:	4b08      	ldr	r3, [pc, #32]	; (8005234 <_Bfree+0x3c>)
 8005212:	4809      	ldr	r0, [pc, #36]	; (8005238 <_Bfree+0x40>)
 8005214:	f000 fea0 	bl	8005f58 <__assert_func>
 8005218:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800521c:	6006      	str	r6, [r0, #0]
 800521e:	60c6      	str	r6, [r0, #12]
 8005220:	b13c      	cbz	r4, 8005232 <_Bfree+0x3a>
 8005222:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005224:	6862      	ldr	r2, [r4, #4]
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800522c:	6021      	str	r1, [r4, #0]
 800522e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005232:	bd70      	pop	{r4, r5, r6, pc}
 8005234:	08006455 	.word	0x08006455
 8005238:	08006538 	.word	0x08006538

0800523c <__multadd>:
 800523c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005240:	4607      	mov	r7, r0
 8005242:	460c      	mov	r4, r1
 8005244:	461e      	mov	r6, r3
 8005246:	2000      	movs	r0, #0
 8005248:	690d      	ldr	r5, [r1, #16]
 800524a:	f101 0c14 	add.w	ip, r1, #20
 800524e:	f8dc 3000 	ldr.w	r3, [ip]
 8005252:	3001      	adds	r0, #1
 8005254:	b299      	uxth	r1, r3
 8005256:	fb02 6101 	mla	r1, r2, r1, r6
 800525a:	0c1e      	lsrs	r6, r3, #16
 800525c:	0c0b      	lsrs	r3, r1, #16
 800525e:	fb02 3306 	mla	r3, r2, r6, r3
 8005262:	b289      	uxth	r1, r1
 8005264:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005268:	4285      	cmp	r5, r0
 800526a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800526e:	f84c 1b04 	str.w	r1, [ip], #4
 8005272:	dcec      	bgt.n	800524e <__multadd+0x12>
 8005274:	b30e      	cbz	r6, 80052ba <__multadd+0x7e>
 8005276:	68a3      	ldr	r3, [r4, #8]
 8005278:	42ab      	cmp	r3, r5
 800527a:	dc19      	bgt.n	80052b0 <__multadd+0x74>
 800527c:	6861      	ldr	r1, [r4, #4]
 800527e:	4638      	mov	r0, r7
 8005280:	3101      	adds	r1, #1
 8005282:	f7ff ff79 	bl	8005178 <_Balloc>
 8005286:	4680      	mov	r8, r0
 8005288:	b928      	cbnz	r0, 8005296 <__multadd+0x5a>
 800528a:	4602      	mov	r2, r0
 800528c:	21b5      	movs	r1, #181	; 0xb5
 800528e:	4b0c      	ldr	r3, [pc, #48]	; (80052c0 <__multadd+0x84>)
 8005290:	480c      	ldr	r0, [pc, #48]	; (80052c4 <__multadd+0x88>)
 8005292:	f000 fe61 	bl	8005f58 <__assert_func>
 8005296:	6922      	ldr	r2, [r4, #16]
 8005298:	f104 010c 	add.w	r1, r4, #12
 800529c:	3202      	adds	r2, #2
 800529e:	0092      	lsls	r2, r2, #2
 80052a0:	300c      	adds	r0, #12
 80052a2:	f7ff ff5b 	bl	800515c <memcpy>
 80052a6:	4621      	mov	r1, r4
 80052a8:	4638      	mov	r0, r7
 80052aa:	f7ff ffa5 	bl	80051f8 <_Bfree>
 80052ae:	4644      	mov	r4, r8
 80052b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80052b4:	3501      	adds	r5, #1
 80052b6:	615e      	str	r6, [r3, #20]
 80052b8:	6125      	str	r5, [r4, #16]
 80052ba:	4620      	mov	r0, r4
 80052bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052c0:	080064c7 	.word	0x080064c7
 80052c4:	08006538 	.word	0x08006538

080052c8 <__hi0bits>:
 80052c8:	0c02      	lsrs	r2, r0, #16
 80052ca:	0412      	lsls	r2, r2, #16
 80052cc:	4603      	mov	r3, r0
 80052ce:	b9ca      	cbnz	r2, 8005304 <__hi0bits+0x3c>
 80052d0:	0403      	lsls	r3, r0, #16
 80052d2:	2010      	movs	r0, #16
 80052d4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80052d8:	bf04      	itt	eq
 80052da:	021b      	lsleq	r3, r3, #8
 80052dc:	3008      	addeq	r0, #8
 80052de:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80052e2:	bf04      	itt	eq
 80052e4:	011b      	lsleq	r3, r3, #4
 80052e6:	3004      	addeq	r0, #4
 80052e8:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80052ec:	bf04      	itt	eq
 80052ee:	009b      	lsleq	r3, r3, #2
 80052f0:	3002      	addeq	r0, #2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	db05      	blt.n	8005302 <__hi0bits+0x3a>
 80052f6:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80052fa:	f100 0001 	add.w	r0, r0, #1
 80052fe:	bf08      	it	eq
 8005300:	2020      	moveq	r0, #32
 8005302:	4770      	bx	lr
 8005304:	2000      	movs	r0, #0
 8005306:	e7e5      	b.n	80052d4 <__hi0bits+0xc>

08005308 <__lo0bits>:
 8005308:	6803      	ldr	r3, [r0, #0]
 800530a:	4602      	mov	r2, r0
 800530c:	f013 0007 	ands.w	r0, r3, #7
 8005310:	d00b      	beq.n	800532a <__lo0bits+0x22>
 8005312:	07d9      	lsls	r1, r3, #31
 8005314:	d421      	bmi.n	800535a <__lo0bits+0x52>
 8005316:	0798      	lsls	r0, r3, #30
 8005318:	bf49      	itett	mi
 800531a:	085b      	lsrmi	r3, r3, #1
 800531c:	089b      	lsrpl	r3, r3, #2
 800531e:	2001      	movmi	r0, #1
 8005320:	6013      	strmi	r3, [r2, #0]
 8005322:	bf5c      	itt	pl
 8005324:	2002      	movpl	r0, #2
 8005326:	6013      	strpl	r3, [r2, #0]
 8005328:	4770      	bx	lr
 800532a:	b299      	uxth	r1, r3
 800532c:	b909      	cbnz	r1, 8005332 <__lo0bits+0x2a>
 800532e:	2010      	movs	r0, #16
 8005330:	0c1b      	lsrs	r3, r3, #16
 8005332:	b2d9      	uxtb	r1, r3
 8005334:	b909      	cbnz	r1, 800533a <__lo0bits+0x32>
 8005336:	3008      	adds	r0, #8
 8005338:	0a1b      	lsrs	r3, r3, #8
 800533a:	0719      	lsls	r1, r3, #28
 800533c:	bf04      	itt	eq
 800533e:	091b      	lsreq	r3, r3, #4
 8005340:	3004      	addeq	r0, #4
 8005342:	0799      	lsls	r1, r3, #30
 8005344:	bf04      	itt	eq
 8005346:	089b      	lsreq	r3, r3, #2
 8005348:	3002      	addeq	r0, #2
 800534a:	07d9      	lsls	r1, r3, #31
 800534c:	d403      	bmi.n	8005356 <__lo0bits+0x4e>
 800534e:	085b      	lsrs	r3, r3, #1
 8005350:	f100 0001 	add.w	r0, r0, #1
 8005354:	d003      	beq.n	800535e <__lo0bits+0x56>
 8005356:	6013      	str	r3, [r2, #0]
 8005358:	4770      	bx	lr
 800535a:	2000      	movs	r0, #0
 800535c:	4770      	bx	lr
 800535e:	2020      	movs	r0, #32
 8005360:	4770      	bx	lr
	...

08005364 <__i2b>:
 8005364:	b510      	push	{r4, lr}
 8005366:	460c      	mov	r4, r1
 8005368:	2101      	movs	r1, #1
 800536a:	f7ff ff05 	bl	8005178 <_Balloc>
 800536e:	4602      	mov	r2, r0
 8005370:	b928      	cbnz	r0, 800537e <__i2b+0x1a>
 8005372:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005376:	4b04      	ldr	r3, [pc, #16]	; (8005388 <__i2b+0x24>)
 8005378:	4804      	ldr	r0, [pc, #16]	; (800538c <__i2b+0x28>)
 800537a:	f000 fded 	bl	8005f58 <__assert_func>
 800537e:	2301      	movs	r3, #1
 8005380:	6144      	str	r4, [r0, #20]
 8005382:	6103      	str	r3, [r0, #16]
 8005384:	bd10      	pop	{r4, pc}
 8005386:	bf00      	nop
 8005388:	080064c7 	.word	0x080064c7
 800538c:	08006538 	.word	0x08006538

08005390 <__multiply>:
 8005390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005394:	4691      	mov	r9, r2
 8005396:	690a      	ldr	r2, [r1, #16]
 8005398:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800539c:	460c      	mov	r4, r1
 800539e:	429a      	cmp	r2, r3
 80053a0:	bfbe      	ittt	lt
 80053a2:	460b      	movlt	r3, r1
 80053a4:	464c      	movlt	r4, r9
 80053a6:	4699      	movlt	r9, r3
 80053a8:	6927      	ldr	r7, [r4, #16]
 80053aa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80053ae:	68a3      	ldr	r3, [r4, #8]
 80053b0:	6861      	ldr	r1, [r4, #4]
 80053b2:	eb07 060a 	add.w	r6, r7, sl
 80053b6:	42b3      	cmp	r3, r6
 80053b8:	b085      	sub	sp, #20
 80053ba:	bfb8      	it	lt
 80053bc:	3101      	addlt	r1, #1
 80053be:	f7ff fedb 	bl	8005178 <_Balloc>
 80053c2:	b930      	cbnz	r0, 80053d2 <__multiply+0x42>
 80053c4:	4602      	mov	r2, r0
 80053c6:	f240 115d 	movw	r1, #349	; 0x15d
 80053ca:	4b43      	ldr	r3, [pc, #268]	; (80054d8 <__multiply+0x148>)
 80053cc:	4843      	ldr	r0, [pc, #268]	; (80054dc <__multiply+0x14c>)
 80053ce:	f000 fdc3 	bl	8005f58 <__assert_func>
 80053d2:	f100 0514 	add.w	r5, r0, #20
 80053d6:	462b      	mov	r3, r5
 80053d8:	2200      	movs	r2, #0
 80053da:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80053de:	4543      	cmp	r3, r8
 80053e0:	d321      	bcc.n	8005426 <__multiply+0x96>
 80053e2:	f104 0314 	add.w	r3, r4, #20
 80053e6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80053ea:	f109 0314 	add.w	r3, r9, #20
 80053ee:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80053f2:	9202      	str	r2, [sp, #8]
 80053f4:	1b3a      	subs	r2, r7, r4
 80053f6:	3a15      	subs	r2, #21
 80053f8:	f022 0203 	bic.w	r2, r2, #3
 80053fc:	3204      	adds	r2, #4
 80053fe:	f104 0115 	add.w	r1, r4, #21
 8005402:	428f      	cmp	r7, r1
 8005404:	bf38      	it	cc
 8005406:	2204      	movcc	r2, #4
 8005408:	9201      	str	r2, [sp, #4]
 800540a:	9a02      	ldr	r2, [sp, #8]
 800540c:	9303      	str	r3, [sp, #12]
 800540e:	429a      	cmp	r2, r3
 8005410:	d80c      	bhi.n	800542c <__multiply+0x9c>
 8005412:	2e00      	cmp	r6, #0
 8005414:	dd03      	ble.n	800541e <__multiply+0x8e>
 8005416:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800541a:	2b00      	cmp	r3, #0
 800541c:	d059      	beq.n	80054d2 <__multiply+0x142>
 800541e:	6106      	str	r6, [r0, #16]
 8005420:	b005      	add	sp, #20
 8005422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005426:	f843 2b04 	str.w	r2, [r3], #4
 800542a:	e7d8      	b.n	80053de <__multiply+0x4e>
 800542c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005430:	f1ba 0f00 	cmp.w	sl, #0
 8005434:	d023      	beq.n	800547e <__multiply+0xee>
 8005436:	46a9      	mov	r9, r5
 8005438:	f04f 0c00 	mov.w	ip, #0
 800543c:	f104 0e14 	add.w	lr, r4, #20
 8005440:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005444:	f8d9 1000 	ldr.w	r1, [r9]
 8005448:	fa1f fb82 	uxth.w	fp, r2
 800544c:	b289      	uxth	r1, r1
 800544e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005452:	4461      	add	r1, ip
 8005454:	f8d9 c000 	ldr.w	ip, [r9]
 8005458:	0c12      	lsrs	r2, r2, #16
 800545a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800545e:	fb0a c202 	mla	r2, sl, r2, ip
 8005462:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005466:	b289      	uxth	r1, r1
 8005468:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800546c:	4577      	cmp	r7, lr
 800546e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005472:	f849 1b04 	str.w	r1, [r9], #4
 8005476:	d8e3      	bhi.n	8005440 <__multiply+0xb0>
 8005478:	9a01      	ldr	r2, [sp, #4]
 800547a:	f845 c002 	str.w	ip, [r5, r2]
 800547e:	9a03      	ldr	r2, [sp, #12]
 8005480:	3304      	adds	r3, #4
 8005482:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005486:	f1b9 0f00 	cmp.w	r9, #0
 800548a:	d020      	beq.n	80054ce <__multiply+0x13e>
 800548c:	46ae      	mov	lr, r5
 800548e:	f04f 0a00 	mov.w	sl, #0
 8005492:	6829      	ldr	r1, [r5, #0]
 8005494:	f104 0c14 	add.w	ip, r4, #20
 8005498:	f8bc b000 	ldrh.w	fp, [ip]
 800549c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80054a0:	b289      	uxth	r1, r1
 80054a2:	fb09 220b 	mla	r2, r9, fp, r2
 80054a6:	4492      	add	sl, r2
 80054a8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80054ac:	f84e 1b04 	str.w	r1, [lr], #4
 80054b0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80054b4:	f8be 1000 	ldrh.w	r1, [lr]
 80054b8:	0c12      	lsrs	r2, r2, #16
 80054ba:	fb09 1102 	mla	r1, r9, r2, r1
 80054be:	4567      	cmp	r7, ip
 80054c0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80054c4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80054c8:	d8e6      	bhi.n	8005498 <__multiply+0x108>
 80054ca:	9a01      	ldr	r2, [sp, #4]
 80054cc:	50a9      	str	r1, [r5, r2]
 80054ce:	3504      	adds	r5, #4
 80054d0:	e79b      	b.n	800540a <__multiply+0x7a>
 80054d2:	3e01      	subs	r6, #1
 80054d4:	e79d      	b.n	8005412 <__multiply+0x82>
 80054d6:	bf00      	nop
 80054d8:	080064c7 	.word	0x080064c7
 80054dc:	08006538 	.word	0x08006538

080054e0 <__pow5mult>:
 80054e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054e4:	4615      	mov	r5, r2
 80054e6:	f012 0203 	ands.w	r2, r2, #3
 80054ea:	4606      	mov	r6, r0
 80054ec:	460f      	mov	r7, r1
 80054ee:	d007      	beq.n	8005500 <__pow5mult+0x20>
 80054f0:	4c25      	ldr	r4, [pc, #148]	; (8005588 <__pow5mult+0xa8>)
 80054f2:	3a01      	subs	r2, #1
 80054f4:	2300      	movs	r3, #0
 80054f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80054fa:	f7ff fe9f 	bl	800523c <__multadd>
 80054fe:	4607      	mov	r7, r0
 8005500:	10ad      	asrs	r5, r5, #2
 8005502:	d03d      	beq.n	8005580 <__pow5mult+0xa0>
 8005504:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005506:	b97c      	cbnz	r4, 8005528 <__pow5mult+0x48>
 8005508:	2010      	movs	r0, #16
 800550a:	f7ff fe11 	bl	8005130 <malloc>
 800550e:	4602      	mov	r2, r0
 8005510:	6270      	str	r0, [r6, #36]	; 0x24
 8005512:	b928      	cbnz	r0, 8005520 <__pow5mult+0x40>
 8005514:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005518:	4b1c      	ldr	r3, [pc, #112]	; (800558c <__pow5mult+0xac>)
 800551a:	481d      	ldr	r0, [pc, #116]	; (8005590 <__pow5mult+0xb0>)
 800551c:	f000 fd1c 	bl	8005f58 <__assert_func>
 8005520:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005524:	6004      	str	r4, [r0, #0]
 8005526:	60c4      	str	r4, [r0, #12]
 8005528:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800552c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005530:	b94c      	cbnz	r4, 8005546 <__pow5mult+0x66>
 8005532:	f240 2171 	movw	r1, #625	; 0x271
 8005536:	4630      	mov	r0, r6
 8005538:	f7ff ff14 	bl	8005364 <__i2b>
 800553c:	2300      	movs	r3, #0
 800553e:	4604      	mov	r4, r0
 8005540:	f8c8 0008 	str.w	r0, [r8, #8]
 8005544:	6003      	str	r3, [r0, #0]
 8005546:	f04f 0900 	mov.w	r9, #0
 800554a:	07eb      	lsls	r3, r5, #31
 800554c:	d50a      	bpl.n	8005564 <__pow5mult+0x84>
 800554e:	4639      	mov	r1, r7
 8005550:	4622      	mov	r2, r4
 8005552:	4630      	mov	r0, r6
 8005554:	f7ff ff1c 	bl	8005390 <__multiply>
 8005558:	4680      	mov	r8, r0
 800555a:	4639      	mov	r1, r7
 800555c:	4630      	mov	r0, r6
 800555e:	f7ff fe4b 	bl	80051f8 <_Bfree>
 8005562:	4647      	mov	r7, r8
 8005564:	106d      	asrs	r5, r5, #1
 8005566:	d00b      	beq.n	8005580 <__pow5mult+0xa0>
 8005568:	6820      	ldr	r0, [r4, #0]
 800556a:	b938      	cbnz	r0, 800557c <__pow5mult+0x9c>
 800556c:	4622      	mov	r2, r4
 800556e:	4621      	mov	r1, r4
 8005570:	4630      	mov	r0, r6
 8005572:	f7ff ff0d 	bl	8005390 <__multiply>
 8005576:	6020      	str	r0, [r4, #0]
 8005578:	f8c0 9000 	str.w	r9, [r0]
 800557c:	4604      	mov	r4, r0
 800557e:	e7e4      	b.n	800554a <__pow5mult+0x6a>
 8005580:	4638      	mov	r0, r7
 8005582:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005586:	bf00      	nop
 8005588:	08006688 	.word	0x08006688
 800558c:	08006455 	.word	0x08006455
 8005590:	08006538 	.word	0x08006538

08005594 <__lshift>:
 8005594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005598:	460c      	mov	r4, r1
 800559a:	4607      	mov	r7, r0
 800559c:	4691      	mov	r9, r2
 800559e:	6923      	ldr	r3, [r4, #16]
 80055a0:	6849      	ldr	r1, [r1, #4]
 80055a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80055a6:	68a3      	ldr	r3, [r4, #8]
 80055a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80055ac:	f108 0601 	add.w	r6, r8, #1
 80055b0:	42b3      	cmp	r3, r6
 80055b2:	db0b      	blt.n	80055cc <__lshift+0x38>
 80055b4:	4638      	mov	r0, r7
 80055b6:	f7ff fddf 	bl	8005178 <_Balloc>
 80055ba:	4605      	mov	r5, r0
 80055bc:	b948      	cbnz	r0, 80055d2 <__lshift+0x3e>
 80055be:	4602      	mov	r2, r0
 80055c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 80055c4:	4b29      	ldr	r3, [pc, #164]	; (800566c <__lshift+0xd8>)
 80055c6:	482a      	ldr	r0, [pc, #168]	; (8005670 <__lshift+0xdc>)
 80055c8:	f000 fcc6 	bl	8005f58 <__assert_func>
 80055cc:	3101      	adds	r1, #1
 80055ce:	005b      	lsls	r3, r3, #1
 80055d0:	e7ee      	b.n	80055b0 <__lshift+0x1c>
 80055d2:	2300      	movs	r3, #0
 80055d4:	f100 0114 	add.w	r1, r0, #20
 80055d8:	f100 0210 	add.w	r2, r0, #16
 80055dc:	4618      	mov	r0, r3
 80055de:	4553      	cmp	r3, sl
 80055e0:	db37      	blt.n	8005652 <__lshift+0xbe>
 80055e2:	6920      	ldr	r0, [r4, #16]
 80055e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80055e8:	f104 0314 	add.w	r3, r4, #20
 80055ec:	f019 091f 	ands.w	r9, r9, #31
 80055f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80055f4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80055f8:	d02f      	beq.n	800565a <__lshift+0xc6>
 80055fa:	468a      	mov	sl, r1
 80055fc:	f04f 0c00 	mov.w	ip, #0
 8005600:	f1c9 0e20 	rsb	lr, r9, #32
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	fa02 f209 	lsl.w	r2, r2, r9
 800560a:	ea42 020c 	orr.w	r2, r2, ip
 800560e:	f84a 2b04 	str.w	r2, [sl], #4
 8005612:	f853 2b04 	ldr.w	r2, [r3], #4
 8005616:	4298      	cmp	r0, r3
 8005618:	fa22 fc0e 	lsr.w	ip, r2, lr
 800561c:	d8f2      	bhi.n	8005604 <__lshift+0x70>
 800561e:	1b03      	subs	r3, r0, r4
 8005620:	3b15      	subs	r3, #21
 8005622:	f023 0303 	bic.w	r3, r3, #3
 8005626:	3304      	adds	r3, #4
 8005628:	f104 0215 	add.w	r2, r4, #21
 800562c:	4290      	cmp	r0, r2
 800562e:	bf38      	it	cc
 8005630:	2304      	movcc	r3, #4
 8005632:	f841 c003 	str.w	ip, [r1, r3]
 8005636:	f1bc 0f00 	cmp.w	ip, #0
 800563a:	d001      	beq.n	8005640 <__lshift+0xac>
 800563c:	f108 0602 	add.w	r6, r8, #2
 8005640:	3e01      	subs	r6, #1
 8005642:	4638      	mov	r0, r7
 8005644:	4621      	mov	r1, r4
 8005646:	612e      	str	r6, [r5, #16]
 8005648:	f7ff fdd6 	bl	80051f8 <_Bfree>
 800564c:	4628      	mov	r0, r5
 800564e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005652:	f842 0f04 	str.w	r0, [r2, #4]!
 8005656:	3301      	adds	r3, #1
 8005658:	e7c1      	b.n	80055de <__lshift+0x4a>
 800565a:	3904      	subs	r1, #4
 800565c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005660:	4298      	cmp	r0, r3
 8005662:	f841 2f04 	str.w	r2, [r1, #4]!
 8005666:	d8f9      	bhi.n	800565c <__lshift+0xc8>
 8005668:	e7ea      	b.n	8005640 <__lshift+0xac>
 800566a:	bf00      	nop
 800566c:	080064c7 	.word	0x080064c7
 8005670:	08006538 	.word	0x08006538

08005674 <__mcmp>:
 8005674:	4603      	mov	r3, r0
 8005676:	690a      	ldr	r2, [r1, #16]
 8005678:	6900      	ldr	r0, [r0, #16]
 800567a:	b530      	push	{r4, r5, lr}
 800567c:	1a80      	subs	r0, r0, r2
 800567e:	d10d      	bne.n	800569c <__mcmp+0x28>
 8005680:	3314      	adds	r3, #20
 8005682:	3114      	adds	r1, #20
 8005684:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005688:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800568c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005690:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005694:	4295      	cmp	r5, r2
 8005696:	d002      	beq.n	800569e <__mcmp+0x2a>
 8005698:	d304      	bcc.n	80056a4 <__mcmp+0x30>
 800569a:	2001      	movs	r0, #1
 800569c:	bd30      	pop	{r4, r5, pc}
 800569e:	42a3      	cmp	r3, r4
 80056a0:	d3f4      	bcc.n	800568c <__mcmp+0x18>
 80056a2:	e7fb      	b.n	800569c <__mcmp+0x28>
 80056a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056a8:	e7f8      	b.n	800569c <__mcmp+0x28>
	...

080056ac <__mdiff>:
 80056ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056b0:	460d      	mov	r5, r1
 80056b2:	4607      	mov	r7, r0
 80056b4:	4611      	mov	r1, r2
 80056b6:	4628      	mov	r0, r5
 80056b8:	4614      	mov	r4, r2
 80056ba:	f7ff ffdb 	bl	8005674 <__mcmp>
 80056be:	1e06      	subs	r6, r0, #0
 80056c0:	d111      	bne.n	80056e6 <__mdiff+0x3a>
 80056c2:	4631      	mov	r1, r6
 80056c4:	4638      	mov	r0, r7
 80056c6:	f7ff fd57 	bl	8005178 <_Balloc>
 80056ca:	4602      	mov	r2, r0
 80056cc:	b928      	cbnz	r0, 80056da <__mdiff+0x2e>
 80056ce:	f240 2132 	movw	r1, #562	; 0x232
 80056d2:	4b3a      	ldr	r3, [pc, #232]	; (80057bc <__mdiff+0x110>)
 80056d4:	483a      	ldr	r0, [pc, #232]	; (80057c0 <__mdiff+0x114>)
 80056d6:	f000 fc3f 	bl	8005f58 <__assert_func>
 80056da:	2301      	movs	r3, #1
 80056dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80056e0:	4610      	mov	r0, r2
 80056e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056e6:	bfa4      	itt	ge
 80056e8:	4623      	movge	r3, r4
 80056ea:	462c      	movge	r4, r5
 80056ec:	4638      	mov	r0, r7
 80056ee:	6861      	ldr	r1, [r4, #4]
 80056f0:	bfa6      	itte	ge
 80056f2:	461d      	movge	r5, r3
 80056f4:	2600      	movge	r6, #0
 80056f6:	2601      	movlt	r6, #1
 80056f8:	f7ff fd3e 	bl	8005178 <_Balloc>
 80056fc:	4602      	mov	r2, r0
 80056fe:	b918      	cbnz	r0, 8005708 <__mdiff+0x5c>
 8005700:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <__mdiff+0x110>)
 8005706:	e7e5      	b.n	80056d4 <__mdiff+0x28>
 8005708:	f102 0814 	add.w	r8, r2, #20
 800570c:	46c2      	mov	sl, r8
 800570e:	f04f 0c00 	mov.w	ip, #0
 8005712:	6927      	ldr	r7, [r4, #16]
 8005714:	60c6      	str	r6, [r0, #12]
 8005716:	692e      	ldr	r6, [r5, #16]
 8005718:	f104 0014 	add.w	r0, r4, #20
 800571c:	f105 0914 	add.w	r9, r5, #20
 8005720:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005724:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005728:	3410      	adds	r4, #16
 800572a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800572e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005732:	fa1f f18b 	uxth.w	r1, fp
 8005736:	448c      	add	ip, r1
 8005738:	b299      	uxth	r1, r3
 800573a:	0c1b      	lsrs	r3, r3, #16
 800573c:	ebac 0101 	sub.w	r1, ip, r1
 8005740:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005744:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005748:	b289      	uxth	r1, r1
 800574a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800574e:	454e      	cmp	r6, r9
 8005750:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005754:	f84a 3b04 	str.w	r3, [sl], #4
 8005758:	d8e7      	bhi.n	800572a <__mdiff+0x7e>
 800575a:	1b73      	subs	r3, r6, r5
 800575c:	3b15      	subs	r3, #21
 800575e:	f023 0303 	bic.w	r3, r3, #3
 8005762:	3515      	adds	r5, #21
 8005764:	3304      	adds	r3, #4
 8005766:	42ae      	cmp	r6, r5
 8005768:	bf38      	it	cc
 800576a:	2304      	movcc	r3, #4
 800576c:	4418      	add	r0, r3
 800576e:	4443      	add	r3, r8
 8005770:	461e      	mov	r6, r3
 8005772:	4605      	mov	r5, r0
 8005774:	4575      	cmp	r5, lr
 8005776:	d30e      	bcc.n	8005796 <__mdiff+0xea>
 8005778:	f10e 0103 	add.w	r1, lr, #3
 800577c:	1a09      	subs	r1, r1, r0
 800577e:	f021 0103 	bic.w	r1, r1, #3
 8005782:	3803      	subs	r0, #3
 8005784:	4586      	cmp	lr, r0
 8005786:	bf38      	it	cc
 8005788:	2100      	movcc	r1, #0
 800578a:	4419      	add	r1, r3
 800578c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005790:	b18b      	cbz	r3, 80057b6 <__mdiff+0x10a>
 8005792:	6117      	str	r7, [r2, #16]
 8005794:	e7a4      	b.n	80056e0 <__mdiff+0x34>
 8005796:	f855 8b04 	ldr.w	r8, [r5], #4
 800579a:	fa1f f188 	uxth.w	r1, r8
 800579e:	4461      	add	r1, ip
 80057a0:	140c      	asrs	r4, r1, #16
 80057a2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80057a6:	b289      	uxth	r1, r1
 80057a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80057ac:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80057b0:	f846 1b04 	str.w	r1, [r6], #4
 80057b4:	e7de      	b.n	8005774 <__mdiff+0xc8>
 80057b6:	3f01      	subs	r7, #1
 80057b8:	e7e8      	b.n	800578c <__mdiff+0xe0>
 80057ba:	bf00      	nop
 80057bc:	080064c7 	.word	0x080064c7
 80057c0:	08006538 	.word	0x08006538

080057c4 <__d2b>:
 80057c4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80057c8:	2101      	movs	r1, #1
 80057ca:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80057ce:	4690      	mov	r8, r2
 80057d0:	461d      	mov	r5, r3
 80057d2:	f7ff fcd1 	bl	8005178 <_Balloc>
 80057d6:	4604      	mov	r4, r0
 80057d8:	b930      	cbnz	r0, 80057e8 <__d2b+0x24>
 80057da:	4602      	mov	r2, r0
 80057dc:	f240 310a 	movw	r1, #778	; 0x30a
 80057e0:	4b24      	ldr	r3, [pc, #144]	; (8005874 <__d2b+0xb0>)
 80057e2:	4825      	ldr	r0, [pc, #148]	; (8005878 <__d2b+0xb4>)
 80057e4:	f000 fbb8 	bl	8005f58 <__assert_func>
 80057e8:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80057ec:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80057f0:	bb2d      	cbnz	r5, 800583e <__d2b+0x7a>
 80057f2:	9301      	str	r3, [sp, #4]
 80057f4:	f1b8 0300 	subs.w	r3, r8, #0
 80057f8:	d026      	beq.n	8005848 <__d2b+0x84>
 80057fa:	4668      	mov	r0, sp
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	f7ff fd83 	bl	8005308 <__lo0bits>
 8005802:	9900      	ldr	r1, [sp, #0]
 8005804:	b1f0      	cbz	r0, 8005844 <__d2b+0x80>
 8005806:	9a01      	ldr	r2, [sp, #4]
 8005808:	f1c0 0320 	rsb	r3, r0, #32
 800580c:	fa02 f303 	lsl.w	r3, r2, r3
 8005810:	430b      	orrs	r3, r1
 8005812:	40c2      	lsrs	r2, r0
 8005814:	6163      	str	r3, [r4, #20]
 8005816:	9201      	str	r2, [sp, #4]
 8005818:	9b01      	ldr	r3, [sp, #4]
 800581a:	2b00      	cmp	r3, #0
 800581c:	bf14      	ite	ne
 800581e:	2102      	movne	r1, #2
 8005820:	2101      	moveq	r1, #1
 8005822:	61a3      	str	r3, [r4, #24]
 8005824:	6121      	str	r1, [r4, #16]
 8005826:	b1c5      	cbz	r5, 800585a <__d2b+0x96>
 8005828:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800582c:	4405      	add	r5, r0
 800582e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005832:	603d      	str	r5, [r7, #0]
 8005834:	6030      	str	r0, [r6, #0]
 8005836:	4620      	mov	r0, r4
 8005838:	b002      	add	sp, #8
 800583a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800583e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005842:	e7d6      	b.n	80057f2 <__d2b+0x2e>
 8005844:	6161      	str	r1, [r4, #20]
 8005846:	e7e7      	b.n	8005818 <__d2b+0x54>
 8005848:	a801      	add	r0, sp, #4
 800584a:	f7ff fd5d 	bl	8005308 <__lo0bits>
 800584e:	2101      	movs	r1, #1
 8005850:	9b01      	ldr	r3, [sp, #4]
 8005852:	6121      	str	r1, [r4, #16]
 8005854:	6163      	str	r3, [r4, #20]
 8005856:	3020      	adds	r0, #32
 8005858:	e7e5      	b.n	8005826 <__d2b+0x62>
 800585a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800585e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005862:	6038      	str	r0, [r7, #0]
 8005864:	6918      	ldr	r0, [r3, #16]
 8005866:	f7ff fd2f 	bl	80052c8 <__hi0bits>
 800586a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800586e:	6031      	str	r1, [r6, #0]
 8005870:	e7e1      	b.n	8005836 <__d2b+0x72>
 8005872:	bf00      	nop
 8005874:	080064c7 	.word	0x080064c7
 8005878:	08006538 	.word	0x08006538

0800587c <_calloc_r>:
 800587c:	b570      	push	{r4, r5, r6, lr}
 800587e:	fba1 5402 	umull	r5, r4, r1, r2
 8005882:	b934      	cbnz	r4, 8005892 <_calloc_r+0x16>
 8005884:	4629      	mov	r1, r5
 8005886:	f000 f875 	bl	8005974 <_malloc_r>
 800588a:	4606      	mov	r6, r0
 800588c:	b928      	cbnz	r0, 800589a <_calloc_r+0x1e>
 800588e:	4630      	mov	r0, r6
 8005890:	bd70      	pop	{r4, r5, r6, pc}
 8005892:	220c      	movs	r2, #12
 8005894:	2600      	movs	r6, #0
 8005896:	6002      	str	r2, [r0, #0]
 8005898:	e7f9      	b.n	800588e <_calloc_r+0x12>
 800589a:	462a      	mov	r2, r5
 800589c:	4621      	mov	r1, r4
 800589e:	f7fe f84f 	bl	8003940 <memset>
 80058a2:	e7f4      	b.n	800588e <_calloc_r+0x12>

080058a4 <_free_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4605      	mov	r5, r0
 80058a8:	2900      	cmp	r1, #0
 80058aa:	d040      	beq.n	800592e <_free_r+0x8a>
 80058ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058b0:	1f0c      	subs	r4, r1, #4
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	bfb8      	it	lt
 80058b6:	18e4      	addlt	r4, r4, r3
 80058b8:	f000 fcd6 	bl	8006268 <__malloc_lock>
 80058bc:	4a1c      	ldr	r2, [pc, #112]	; (8005930 <_free_r+0x8c>)
 80058be:	6813      	ldr	r3, [r2, #0]
 80058c0:	b933      	cbnz	r3, 80058d0 <_free_r+0x2c>
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	6014      	str	r4, [r2, #0]
 80058c6:	4628      	mov	r0, r5
 80058c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80058cc:	f000 bcd2 	b.w	8006274 <__malloc_unlock>
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d908      	bls.n	80058e6 <_free_r+0x42>
 80058d4:	6820      	ldr	r0, [r4, #0]
 80058d6:	1821      	adds	r1, r4, r0
 80058d8:	428b      	cmp	r3, r1
 80058da:	bf01      	itttt	eq
 80058dc:	6819      	ldreq	r1, [r3, #0]
 80058de:	685b      	ldreq	r3, [r3, #4]
 80058e0:	1809      	addeq	r1, r1, r0
 80058e2:	6021      	streq	r1, [r4, #0]
 80058e4:	e7ed      	b.n	80058c2 <_free_r+0x1e>
 80058e6:	461a      	mov	r2, r3
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	b10b      	cbz	r3, 80058f0 <_free_r+0x4c>
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	d9fa      	bls.n	80058e6 <_free_r+0x42>
 80058f0:	6811      	ldr	r1, [r2, #0]
 80058f2:	1850      	adds	r0, r2, r1
 80058f4:	42a0      	cmp	r0, r4
 80058f6:	d10b      	bne.n	8005910 <_free_r+0x6c>
 80058f8:	6820      	ldr	r0, [r4, #0]
 80058fa:	4401      	add	r1, r0
 80058fc:	1850      	adds	r0, r2, r1
 80058fe:	4283      	cmp	r3, r0
 8005900:	6011      	str	r1, [r2, #0]
 8005902:	d1e0      	bne.n	80058c6 <_free_r+0x22>
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	4401      	add	r1, r0
 800590a:	6011      	str	r1, [r2, #0]
 800590c:	6053      	str	r3, [r2, #4]
 800590e:	e7da      	b.n	80058c6 <_free_r+0x22>
 8005910:	d902      	bls.n	8005918 <_free_r+0x74>
 8005912:	230c      	movs	r3, #12
 8005914:	602b      	str	r3, [r5, #0]
 8005916:	e7d6      	b.n	80058c6 <_free_r+0x22>
 8005918:	6820      	ldr	r0, [r4, #0]
 800591a:	1821      	adds	r1, r4, r0
 800591c:	428b      	cmp	r3, r1
 800591e:	bf01      	itttt	eq
 8005920:	6819      	ldreq	r1, [r3, #0]
 8005922:	685b      	ldreq	r3, [r3, #4]
 8005924:	1809      	addeq	r1, r1, r0
 8005926:	6021      	streq	r1, [r4, #0]
 8005928:	6063      	str	r3, [r4, #4]
 800592a:	6054      	str	r4, [r2, #4]
 800592c:	e7cb      	b.n	80058c6 <_free_r+0x22>
 800592e:	bd38      	pop	{r3, r4, r5, pc}
 8005930:	20000350 	.word	0x20000350

08005934 <sbrk_aligned>:
 8005934:	b570      	push	{r4, r5, r6, lr}
 8005936:	4e0e      	ldr	r6, [pc, #56]	; (8005970 <sbrk_aligned+0x3c>)
 8005938:	460c      	mov	r4, r1
 800593a:	6831      	ldr	r1, [r6, #0]
 800593c:	4605      	mov	r5, r0
 800593e:	b911      	cbnz	r1, 8005946 <sbrk_aligned+0x12>
 8005940:	f000 f9e4 	bl	8005d0c <_sbrk_r>
 8005944:	6030      	str	r0, [r6, #0]
 8005946:	4621      	mov	r1, r4
 8005948:	4628      	mov	r0, r5
 800594a:	f000 f9df 	bl	8005d0c <_sbrk_r>
 800594e:	1c43      	adds	r3, r0, #1
 8005950:	d00a      	beq.n	8005968 <sbrk_aligned+0x34>
 8005952:	1cc4      	adds	r4, r0, #3
 8005954:	f024 0403 	bic.w	r4, r4, #3
 8005958:	42a0      	cmp	r0, r4
 800595a:	d007      	beq.n	800596c <sbrk_aligned+0x38>
 800595c:	1a21      	subs	r1, r4, r0
 800595e:	4628      	mov	r0, r5
 8005960:	f000 f9d4 	bl	8005d0c <_sbrk_r>
 8005964:	3001      	adds	r0, #1
 8005966:	d101      	bne.n	800596c <sbrk_aligned+0x38>
 8005968:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800596c:	4620      	mov	r0, r4
 800596e:	bd70      	pop	{r4, r5, r6, pc}
 8005970:	20000354 	.word	0x20000354

08005974 <_malloc_r>:
 8005974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005978:	1ccd      	adds	r5, r1, #3
 800597a:	f025 0503 	bic.w	r5, r5, #3
 800597e:	3508      	adds	r5, #8
 8005980:	2d0c      	cmp	r5, #12
 8005982:	bf38      	it	cc
 8005984:	250c      	movcc	r5, #12
 8005986:	2d00      	cmp	r5, #0
 8005988:	4607      	mov	r7, r0
 800598a:	db01      	blt.n	8005990 <_malloc_r+0x1c>
 800598c:	42a9      	cmp	r1, r5
 800598e:	d905      	bls.n	800599c <_malloc_r+0x28>
 8005990:	230c      	movs	r3, #12
 8005992:	2600      	movs	r6, #0
 8005994:	603b      	str	r3, [r7, #0]
 8005996:	4630      	mov	r0, r6
 8005998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800599c:	4e2e      	ldr	r6, [pc, #184]	; (8005a58 <_malloc_r+0xe4>)
 800599e:	f000 fc63 	bl	8006268 <__malloc_lock>
 80059a2:	6833      	ldr	r3, [r6, #0]
 80059a4:	461c      	mov	r4, r3
 80059a6:	bb34      	cbnz	r4, 80059f6 <_malloc_r+0x82>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4638      	mov	r0, r7
 80059ac:	f7ff ffc2 	bl	8005934 <sbrk_aligned>
 80059b0:	1c43      	adds	r3, r0, #1
 80059b2:	4604      	mov	r4, r0
 80059b4:	d14d      	bne.n	8005a52 <_malloc_r+0xde>
 80059b6:	6834      	ldr	r4, [r6, #0]
 80059b8:	4626      	mov	r6, r4
 80059ba:	2e00      	cmp	r6, #0
 80059bc:	d140      	bne.n	8005a40 <_malloc_r+0xcc>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	4631      	mov	r1, r6
 80059c2:	4638      	mov	r0, r7
 80059c4:	eb04 0803 	add.w	r8, r4, r3
 80059c8:	f000 f9a0 	bl	8005d0c <_sbrk_r>
 80059cc:	4580      	cmp	r8, r0
 80059ce:	d13a      	bne.n	8005a46 <_malloc_r+0xd2>
 80059d0:	6821      	ldr	r1, [r4, #0]
 80059d2:	3503      	adds	r5, #3
 80059d4:	1a6d      	subs	r5, r5, r1
 80059d6:	f025 0503 	bic.w	r5, r5, #3
 80059da:	3508      	adds	r5, #8
 80059dc:	2d0c      	cmp	r5, #12
 80059de:	bf38      	it	cc
 80059e0:	250c      	movcc	r5, #12
 80059e2:	4638      	mov	r0, r7
 80059e4:	4629      	mov	r1, r5
 80059e6:	f7ff ffa5 	bl	8005934 <sbrk_aligned>
 80059ea:	3001      	adds	r0, #1
 80059ec:	d02b      	beq.n	8005a46 <_malloc_r+0xd2>
 80059ee:	6823      	ldr	r3, [r4, #0]
 80059f0:	442b      	add	r3, r5
 80059f2:	6023      	str	r3, [r4, #0]
 80059f4:	e00e      	b.n	8005a14 <_malloc_r+0xa0>
 80059f6:	6822      	ldr	r2, [r4, #0]
 80059f8:	1b52      	subs	r2, r2, r5
 80059fa:	d41e      	bmi.n	8005a3a <_malloc_r+0xc6>
 80059fc:	2a0b      	cmp	r2, #11
 80059fe:	d916      	bls.n	8005a2e <_malloc_r+0xba>
 8005a00:	1961      	adds	r1, r4, r5
 8005a02:	42a3      	cmp	r3, r4
 8005a04:	6025      	str	r5, [r4, #0]
 8005a06:	bf18      	it	ne
 8005a08:	6059      	strne	r1, [r3, #4]
 8005a0a:	6863      	ldr	r3, [r4, #4]
 8005a0c:	bf08      	it	eq
 8005a0e:	6031      	streq	r1, [r6, #0]
 8005a10:	5162      	str	r2, [r4, r5]
 8005a12:	604b      	str	r3, [r1, #4]
 8005a14:	4638      	mov	r0, r7
 8005a16:	f104 060b 	add.w	r6, r4, #11
 8005a1a:	f000 fc2b 	bl	8006274 <__malloc_unlock>
 8005a1e:	f026 0607 	bic.w	r6, r6, #7
 8005a22:	1d23      	adds	r3, r4, #4
 8005a24:	1af2      	subs	r2, r6, r3
 8005a26:	d0b6      	beq.n	8005996 <_malloc_r+0x22>
 8005a28:	1b9b      	subs	r3, r3, r6
 8005a2a:	50a3      	str	r3, [r4, r2]
 8005a2c:	e7b3      	b.n	8005996 <_malloc_r+0x22>
 8005a2e:	6862      	ldr	r2, [r4, #4]
 8005a30:	42a3      	cmp	r3, r4
 8005a32:	bf0c      	ite	eq
 8005a34:	6032      	streq	r2, [r6, #0]
 8005a36:	605a      	strne	r2, [r3, #4]
 8005a38:	e7ec      	b.n	8005a14 <_malloc_r+0xa0>
 8005a3a:	4623      	mov	r3, r4
 8005a3c:	6864      	ldr	r4, [r4, #4]
 8005a3e:	e7b2      	b.n	80059a6 <_malloc_r+0x32>
 8005a40:	4634      	mov	r4, r6
 8005a42:	6876      	ldr	r6, [r6, #4]
 8005a44:	e7b9      	b.n	80059ba <_malloc_r+0x46>
 8005a46:	230c      	movs	r3, #12
 8005a48:	4638      	mov	r0, r7
 8005a4a:	603b      	str	r3, [r7, #0]
 8005a4c:	f000 fc12 	bl	8006274 <__malloc_unlock>
 8005a50:	e7a1      	b.n	8005996 <_malloc_r+0x22>
 8005a52:	6025      	str	r5, [r4, #0]
 8005a54:	e7de      	b.n	8005a14 <_malloc_r+0xa0>
 8005a56:	bf00      	nop
 8005a58:	20000350 	.word	0x20000350

08005a5c <__sfputc_r>:
 8005a5c:	6893      	ldr	r3, [r2, #8]
 8005a5e:	b410      	push	{r4}
 8005a60:	3b01      	subs	r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	6093      	str	r3, [r2, #8]
 8005a66:	da07      	bge.n	8005a78 <__sfputc_r+0x1c>
 8005a68:	6994      	ldr	r4, [r2, #24]
 8005a6a:	42a3      	cmp	r3, r4
 8005a6c:	db01      	blt.n	8005a72 <__sfputc_r+0x16>
 8005a6e:	290a      	cmp	r1, #10
 8005a70:	d102      	bne.n	8005a78 <__sfputc_r+0x1c>
 8005a72:	bc10      	pop	{r4}
 8005a74:	f000 b99e 	b.w	8005db4 <__swbuf_r>
 8005a78:	6813      	ldr	r3, [r2, #0]
 8005a7a:	1c58      	adds	r0, r3, #1
 8005a7c:	6010      	str	r0, [r2, #0]
 8005a7e:	7019      	strb	r1, [r3, #0]
 8005a80:	4608      	mov	r0, r1
 8005a82:	bc10      	pop	{r4}
 8005a84:	4770      	bx	lr

08005a86 <__sfputs_r>:
 8005a86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a88:	4606      	mov	r6, r0
 8005a8a:	460f      	mov	r7, r1
 8005a8c:	4614      	mov	r4, r2
 8005a8e:	18d5      	adds	r5, r2, r3
 8005a90:	42ac      	cmp	r4, r5
 8005a92:	d101      	bne.n	8005a98 <__sfputs_r+0x12>
 8005a94:	2000      	movs	r0, #0
 8005a96:	e007      	b.n	8005aa8 <__sfputs_r+0x22>
 8005a98:	463a      	mov	r2, r7
 8005a9a:	4630      	mov	r0, r6
 8005a9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005aa0:	f7ff ffdc 	bl	8005a5c <__sfputc_r>
 8005aa4:	1c43      	adds	r3, r0, #1
 8005aa6:	d1f3      	bne.n	8005a90 <__sfputs_r+0xa>
 8005aa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005aac <_vfiprintf_r>:
 8005aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	4614      	mov	r4, r2
 8005ab4:	4698      	mov	r8, r3
 8005ab6:	4606      	mov	r6, r0
 8005ab8:	b09d      	sub	sp, #116	; 0x74
 8005aba:	b118      	cbz	r0, 8005ac4 <_vfiprintf_r+0x18>
 8005abc:	6983      	ldr	r3, [r0, #24]
 8005abe:	b90b      	cbnz	r3, 8005ac4 <_vfiprintf_r+0x18>
 8005ac0:	f7ff fa90 	bl	8004fe4 <__sinit>
 8005ac4:	4b89      	ldr	r3, [pc, #548]	; (8005cec <_vfiprintf_r+0x240>)
 8005ac6:	429d      	cmp	r5, r3
 8005ac8:	d11b      	bne.n	8005b02 <_vfiprintf_r+0x56>
 8005aca:	6875      	ldr	r5, [r6, #4]
 8005acc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ace:	07d9      	lsls	r1, r3, #31
 8005ad0:	d405      	bmi.n	8005ade <_vfiprintf_r+0x32>
 8005ad2:	89ab      	ldrh	r3, [r5, #12]
 8005ad4:	059a      	lsls	r2, r3, #22
 8005ad6:	d402      	bmi.n	8005ade <_vfiprintf_r+0x32>
 8005ad8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ada:	f7ff fb26 	bl	800512a <__retarget_lock_acquire_recursive>
 8005ade:	89ab      	ldrh	r3, [r5, #12]
 8005ae0:	071b      	lsls	r3, r3, #28
 8005ae2:	d501      	bpl.n	8005ae8 <_vfiprintf_r+0x3c>
 8005ae4:	692b      	ldr	r3, [r5, #16]
 8005ae6:	b9eb      	cbnz	r3, 8005b24 <_vfiprintf_r+0x78>
 8005ae8:	4629      	mov	r1, r5
 8005aea:	4630      	mov	r0, r6
 8005aec:	f000 f9c6 	bl	8005e7c <__swsetup_r>
 8005af0:	b1c0      	cbz	r0, 8005b24 <_vfiprintf_r+0x78>
 8005af2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005af4:	07dc      	lsls	r4, r3, #31
 8005af6:	d50e      	bpl.n	8005b16 <_vfiprintf_r+0x6a>
 8005af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005afc:	b01d      	add	sp, #116	; 0x74
 8005afe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b02:	4b7b      	ldr	r3, [pc, #492]	; (8005cf0 <_vfiprintf_r+0x244>)
 8005b04:	429d      	cmp	r5, r3
 8005b06:	d101      	bne.n	8005b0c <_vfiprintf_r+0x60>
 8005b08:	68b5      	ldr	r5, [r6, #8]
 8005b0a:	e7df      	b.n	8005acc <_vfiprintf_r+0x20>
 8005b0c:	4b79      	ldr	r3, [pc, #484]	; (8005cf4 <_vfiprintf_r+0x248>)
 8005b0e:	429d      	cmp	r5, r3
 8005b10:	bf08      	it	eq
 8005b12:	68f5      	ldreq	r5, [r6, #12]
 8005b14:	e7da      	b.n	8005acc <_vfiprintf_r+0x20>
 8005b16:	89ab      	ldrh	r3, [r5, #12]
 8005b18:	0598      	lsls	r0, r3, #22
 8005b1a:	d4ed      	bmi.n	8005af8 <_vfiprintf_r+0x4c>
 8005b1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b1e:	f7ff fb05 	bl	800512c <__retarget_lock_release_recursive>
 8005b22:	e7e9      	b.n	8005af8 <_vfiprintf_r+0x4c>
 8005b24:	2300      	movs	r3, #0
 8005b26:	9309      	str	r3, [sp, #36]	; 0x24
 8005b28:	2320      	movs	r3, #32
 8005b2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b2e:	2330      	movs	r3, #48	; 0x30
 8005b30:	f04f 0901 	mov.w	r9, #1
 8005b34:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b38:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8005cf8 <_vfiprintf_r+0x24c>
 8005b3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b40:	4623      	mov	r3, r4
 8005b42:	469a      	mov	sl, r3
 8005b44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b48:	b10a      	cbz	r2, 8005b4e <_vfiprintf_r+0xa2>
 8005b4a:	2a25      	cmp	r2, #37	; 0x25
 8005b4c:	d1f9      	bne.n	8005b42 <_vfiprintf_r+0x96>
 8005b4e:	ebba 0b04 	subs.w	fp, sl, r4
 8005b52:	d00b      	beq.n	8005b6c <_vfiprintf_r+0xc0>
 8005b54:	465b      	mov	r3, fp
 8005b56:	4622      	mov	r2, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	4630      	mov	r0, r6
 8005b5c:	f7ff ff93 	bl	8005a86 <__sfputs_r>
 8005b60:	3001      	adds	r0, #1
 8005b62:	f000 80aa 	beq.w	8005cba <_vfiprintf_r+0x20e>
 8005b66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b68:	445a      	add	r2, fp
 8005b6a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80a2 	beq.w	8005cba <_vfiprintf_r+0x20e>
 8005b76:	2300      	movs	r3, #0
 8005b78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b80:	f10a 0a01 	add.w	sl, sl, #1
 8005b84:	9304      	str	r3, [sp, #16]
 8005b86:	9307      	str	r3, [sp, #28]
 8005b88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b8c:	931a      	str	r3, [sp, #104]	; 0x68
 8005b8e:	4654      	mov	r4, sl
 8005b90:	2205      	movs	r2, #5
 8005b92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b96:	4858      	ldr	r0, [pc, #352]	; (8005cf8 <_vfiprintf_r+0x24c>)
 8005b98:	f7ff fad2 	bl	8005140 <memchr>
 8005b9c:	9a04      	ldr	r2, [sp, #16]
 8005b9e:	b9d8      	cbnz	r0, 8005bd8 <_vfiprintf_r+0x12c>
 8005ba0:	06d1      	lsls	r1, r2, #27
 8005ba2:	bf44      	itt	mi
 8005ba4:	2320      	movmi	r3, #32
 8005ba6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005baa:	0713      	lsls	r3, r2, #28
 8005bac:	bf44      	itt	mi
 8005bae:	232b      	movmi	r3, #43	; 0x2b
 8005bb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bb4:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb8:	2b2a      	cmp	r3, #42	; 0x2a
 8005bba:	d015      	beq.n	8005be8 <_vfiprintf_r+0x13c>
 8005bbc:	4654      	mov	r4, sl
 8005bbe:	2000      	movs	r0, #0
 8005bc0:	f04f 0c0a 	mov.w	ip, #10
 8005bc4:	9a07      	ldr	r2, [sp, #28]
 8005bc6:	4621      	mov	r1, r4
 8005bc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bcc:	3b30      	subs	r3, #48	; 0x30
 8005bce:	2b09      	cmp	r3, #9
 8005bd0:	d94e      	bls.n	8005c70 <_vfiprintf_r+0x1c4>
 8005bd2:	b1b0      	cbz	r0, 8005c02 <_vfiprintf_r+0x156>
 8005bd4:	9207      	str	r2, [sp, #28]
 8005bd6:	e014      	b.n	8005c02 <_vfiprintf_r+0x156>
 8005bd8:	eba0 0308 	sub.w	r3, r0, r8
 8005bdc:	fa09 f303 	lsl.w	r3, r9, r3
 8005be0:	4313      	orrs	r3, r2
 8005be2:	46a2      	mov	sl, r4
 8005be4:	9304      	str	r3, [sp, #16]
 8005be6:	e7d2      	b.n	8005b8e <_vfiprintf_r+0xe2>
 8005be8:	9b03      	ldr	r3, [sp, #12]
 8005bea:	1d19      	adds	r1, r3, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	9103      	str	r1, [sp, #12]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	bfbb      	ittet	lt
 8005bf4:	425b      	neglt	r3, r3
 8005bf6:	f042 0202 	orrlt.w	r2, r2, #2
 8005bfa:	9307      	strge	r3, [sp, #28]
 8005bfc:	9307      	strlt	r3, [sp, #28]
 8005bfe:	bfb8      	it	lt
 8005c00:	9204      	strlt	r2, [sp, #16]
 8005c02:	7823      	ldrb	r3, [r4, #0]
 8005c04:	2b2e      	cmp	r3, #46	; 0x2e
 8005c06:	d10c      	bne.n	8005c22 <_vfiprintf_r+0x176>
 8005c08:	7863      	ldrb	r3, [r4, #1]
 8005c0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0c:	d135      	bne.n	8005c7a <_vfiprintf_r+0x1ce>
 8005c0e:	9b03      	ldr	r3, [sp, #12]
 8005c10:	3402      	adds	r4, #2
 8005c12:	1d1a      	adds	r2, r3, #4
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	9203      	str	r2, [sp, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	bfb8      	it	lt
 8005c1c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005c20:	9305      	str	r3, [sp, #20]
 8005c22:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8005cfc <_vfiprintf_r+0x250>
 8005c26:	2203      	movs	r2, #3
 8005c28:	4650      	mov	r0, sl
 8005c2a:	7821      	ldrb	r1, [r4, #0]
 8005c2c:	f7ff fa88 	bl	8005140 <memchr>
 8005c30:	b140      	cbz	r0, 8005c44 <_vfiprintf_r+0x198>
 8005c32:	2340      	movs	r3, #64	; 0x40
 8005c34:	eba0 000a 	sub.w	r0, r0, sl
 8005c38:	fa03 f000 	lsl.w	r0, r3, r0
 8005c3c:	9b04      	ldr	r3, [sp, #16]
 8005c3e:	3401      	adds	r4, #1
 8005c40:	4303      	orrs	r3, r0
 8005c42:	9304      	str	r3, [sp, #16]
 8005c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c48:	2206      	movs	r2, #6
 8005c4a:	482d      	ldr	r0, [pc, #180]	; (8005d00 <_vfiprintf_r+0x254>)
 8005c4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c50:	f7ff fa76 	bl	8005140 <memchr>
 8005c54:	2800      	cmp	r0, #0
 8005c56:	d03f      	beq.n	8005cd8 <_vfiprintf_r+0x22c>
 8005c58:	4b2a      	ldr	r3, [pc, #168]	; (8005d04 <_vfiprintf_r+0x258>)
 8005c5a:	bb1b      	cbnz	r3, 8005ca4 <_vfiprintf_r+0x1f8>
 8005c5c:	9b03      	ldr	r3, [sp, #12]
 8005c5e:	3307      	adds	r3, #7
 8005c60:	f023 0307 	bic.w	r3, r3, #7
 8005c64:	3308      	adds	r3, #8
 8005c66:	9303      	str	r3, [sp, #12]
 8005c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c6a:	443b      	add	r3, r7
 8005c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6e:	e767      	b.n	8005b40 <_vfiprintf_r+0x94>
 8005c70:	460c      	mov	r4, r1
 8005c72:	2001      	movs	r0, #1
 8005c74:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c78:	e7a5      	b.n	8005bc6 <_vfiprintf_r+0x11a>
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f04f 0c0a 	mov.w	ip, #10
 8005c80:	4619      	mov	r1, r3
 8005c82:	3401      	adds	r4, #1
 8005c84:	9305      	str	r3, [sp, #20]
 8005c86:	4620      	mov	r0, r4
 8005c88:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c8c:	3a30      	subs	r2, #48	; 0x30
 8005c8e:	2a09      	cmp	r2, #9
 8005c90:	d903      	bls.n	8005c9a <_vfiprintf_r+0x1ee>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d0c5      	beq.n	8005c22 <_vfiprintf_r+0x176>
 8005c96:	9105      	str	r1, [sp, #20]
 8005c98:	e7c3      	b.n	8005c22 <_vfiprintf_r+0x176>
 8005c9a:	4604      	mov	r4, r0
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ca2:	e7f0      	b.n	8005c86 <_vfiprintf_r+0x1da>
 8005ca4:	ab03      	add	r3, sp, #12
 8005ca6:	9300      	str	r3, [sp, #0]
 8005ca8:	462a      	mov	r2, r5
 8005caa:	4630      	mov	r0, r6
 8005cac:	4b16      	ldr	r3, [pc, #88]	; (8005d08 <_vfiprintf_r+0x25c>)
 8005cae:	a904      	add	r1, sp, #16
 8005cb0:	f7fd feec 	bl	8003a8c <_printf_float>
 8005cb4:	4607      	mov	r7, r0
 8005cb6:	1c78      	adds	r0, r7, #1
 8005cb8:	d1d6      	bne.n	8005c68 <_vfiprintf_r+0x1bc>
 8005cba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005cbc:	07d9      	lsls	r1, r3, #31
 8005cbe:	d405      	bmi.n	8005ccc <_vfiprintf_r+0x220>
 8005cc0:	89ab      	ldrh	r3, [r5, #12]
 8005cc2:	059a      	lsls	r2, r3, #22
 8005cc4:	d402      	bmi.n	8005ccc <_vfiprintf_r+0x220>
 8005cc6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005cc8:	f7ff fa30 	bl	800512c <__retarget_lock_release_recursive>
 8005ccc:	89ab      	ldrh	r3, [r5, #12]
 8005cce:	065b      	lsls	r3, r3, #25
 8005cd0:	f53f af12 	bmi.w	8005af8 <_vfiprintf_r+0x4c>
 8005cd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cd6:	e711      	b.n	8005afc <_vfiprintf_r+0x50>
 8005cd8:	ab03      	add	r3, sp, #12
 8005cda:	9300      	str	r3, [sp, #0]
 8005cdc:	462a      	mov	r2, r5
 8005cde:	4630      	mov	r0, r6
 8005ce0:	4b09      	ldr	r3, [pc, #36]	; (8005d08 <_vfiprintf_r+0x25c>)
 8005ce2:	a904      	add	r1, sp, #16
 8005ce4:	f7fe f96e 	bl	8003fc4 <_printf_i>
 8005ce8:	e7e4      	b.n	8005cb4 <_vfiprintf_r+0x208>
 8005cea:	bf00      	nop
 8005cec:	080064f8 	.word	0x080064f8
 8005cf0:	08006518 	.word	0x08006518
 8005cf4:	080064d8 	.word	0x080064d8
 8005cf8:	08006694 	.word	0x08006694
 8005cfc:	0800669a 	.word	0x0800669a
 8005d00:	0800669e 	.word	0x0800669e
 8005d04:	08003a8d 	.word	0x08003a8d
 8005d08:	08005a87 	.word	0x08005a87

08005d0c <_sbrk_r>:
 8005d0c:	b538      	push	{r3, r4, r5, lr}
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4d05      	ldr	r5, [pc, #20]	; (8005d28 <_sbrk_r+0x1c>)
 8005d12:	4604      	mov	r4, r0
 8005d14:	4608      	mov	r0, r1
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	f7fb fb0c 	bl	8001334 <_sbrk>
 8005d1c:	1c43      	adds	r3, r0, #1
 8005d1e:	d102      	bne.n	8005d26 <_sbrk_r+0x1a>
 8005d20:	682b      	ldr	r3, [r5, #0]
 8005d22:	b103      	cbz	r3, 8005d26 <_sbrk_r+0x1a>
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	bd38      	pop	{r3, r4, r5, pc}
 8005d28:	20000358 	.word	0x20000358

08005d2c <__sread>:
 8005d2c:	b510      	push	{r4, lr}
 8005d2e:	460c      	mov	r4, r1
 8005d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d34:	f000 faa4 	bl	8006280 <_read_r>
 8005d38:	2800      	cmp	r0, #0
 8005d3a:	bfab      	itete	ge
 8005d3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d3e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d40:	181b      	addge	r3, r3, r0
 8005d42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d46:	bfac      	ite	ge
 8005d48:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d4a:	81a3      	strhlt	r3, [r4, #12]
 8005d4c:	bd10      	pop	{r4, pc}

08005d4e <__swrite>:
 8005d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d52:	461f      	mov	r7, r3
 8005d54:	898b      	ldrh	r3, [r1, #12]
 8005d56:	4605      	mov	r5, r0
 8005d58:	05db      	lsls	r3, r3, #23
 8005d5a:	460c      	mov	r4, r1
 8005d5c:	4616      	mov	r6, r2
 8005d5e:	d505      	bpl.n	8005d6c <__swrite+0x1e>
 8005d60:	2302      	movs	r3, #2
 8005d62:	2200      	movs	r2, #0
 8005d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d68:	f000 f9f4 	bl	8006154 <_lseek_r>
 8005d6c:	89a3      	ldrh	r3, [r4, #12]
 8005d6e:	4632      	mov	r2, r6
 8005d70:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d74:	81a3      	strh	r3, [r4, #12]
 8005d76:	4628      	mov	r0, r5
 8005d78:	463b      	mov	r3, r7
 8005d7a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d82:	f000 b869 	b.w	8005e58 <_write_r>

08005d86 <__sseek>:
 8005d86:	b510      	push	{r4, lr}
 8005d88:	460c      	mov	r4, r1
 8005d8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d8e:	f000 f9e1 	bl	8006154 <_lseek_r>
 8005d92:	1c43      	adds	r3, r0, #1
 8005d94:	89a3      	ldrh	r3, [r4, #12]
 8005d96:	bf15      	itete	ne
 8005d98:	6560      	strne	r0, [r4, #84]	; 0x54
 8005d9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005d9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005da2:	81a3      	strheq	r3, [r4, #12]
 8005da4:	bf18      	it	ne
 8005da6:	81a3      	strhne	r3, [r4, #12]
 8005da8:	bd10      	pop	{r4, pc}

08005daa <__sclose>:
 8005daa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dae:	f000 b8f1 	b.w	8005f94 <_close_r>
	...

08005db4 <__swbuf_r>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	460e      	mov	r6, r1
 8005db8:	4614      	mov	r4, r2
 8005dba:	4605      	mov	r5, r0
 8005dbc:	b118      	cbz	r0, 8005dc6 <__swbuf_r+0x12>
 8005dbe:	6983      	ldr	r3, [r0, #24]
 8005dc0:	b90b      	cbnz	r3, 8005dc6 <__swbuf_r+0x12>
 8005dc2:	f7ff f90f 	bl	8004fe4 <__sinit>
 8005dc6:	4b21      	ldr	r3, [pc, #132]	; (8005e4c <__swbuf_r+0x98>)
 8005dc8:	429c      	cmp	r4, r3
 8005dca:	d12b      	bne.n	8005e24 <__swbuf_r+0x70>
 8005dcc:	686c      	ldr	r4, [r5, #4]
 8005dce:	69a3      	ldr	r3, [r4, #24]
 8005dd0:	60a3      	str	r3, [r4, #8]
 8005dd2:	89a3      	ldrh	r3, [r4, #12]
 8005dd4:	071a      	lsls	r2, r3, #28
 8005dd6:	d52f      	bpl.n	8005e38 <__swbuf_r+0x84>
 8005dd8:	6923      	ldr	r3, [r4, #16]
 8005dda:	b36b      	cbz	r3, 8005e38 <__swbuf_r+0x84>
 8005ddc:	6923      	ldr	r3, [r4, #16]
 8005dde:	6820      	ldr	r0, [r4, #0]
 8005de0:	b2f6      	uxtb	r6, r6
 8005de2:	1ac0      	subs	r0, r0, r3
 8005de4:	6963      	ldr	r3, [r4, #20]
 8005de6:	4637      	mov	r7, r6
 8005de8:	4283      	cmp	r3, r0
 8005dea:	dc04      	bgt.n	8005df6 <__swbuf_r+0x42>
 8005dec:	4621      	mov	r1, r4
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 f962 	bl	80060b8 <_fflush_r>
 8005df4:	bb30      	cbnz	r0, 8005e44 <__swbuf_r+0x90>
 8005df6:	68a3      	ldr	r3, [r4, #8]
 8005df8:	3001      	adds	r0, #1
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	60a3      	str	r3, [r4, #8]
 8005dfe:	6823      	ldr	r3, [r4, #0]
 8005e00:	1c5a      	adds	r2, r3, #1
 8005e02:	6022      	str	r2, [r4, #0]
 8005e04:	701e      	strb	r6, [r3, #0]
 8005e06:	6963      	ldr	r3, [r4, #20]
 8005e08:	4283      	cmp	r3, r0
 8005e0a:	d004      	beq.n	8005e16 <__swbuf_r+0x62>
 8005e0c:	89a3      	ldrh	r3, [r4, #12]
 8005e0e:	07db      	lsls	r3, r3, #31
 8005e10:	d506      	bpl.n	8005e20 <__swbuf_r+0x6c>
 8005e12:	2e0a      	cmp	r6, #10
 8005e14:	d104      	bne.n	8005e20 <__swbuf_r+0x6c>
 8005e16:	4621      	mov	r1, r4
 8005e18:	4628      	mov	r0, r5
 8005e1a:	f000 f94d 	bl	80060b8 <_fflush_r>
 8005e1e:	b988      	cbnz	r0, 8005e44 <__swbuf_r+0x90>
 8005e20:	4638      	mov	r0, r7
 8005e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e24:	4b0a      	ldr	r3, [pc, #40]	; (8005e50 <__swbuf_r+0x9c>)
 8005e26:	429c      	cmp	r4, r3
 8005e28:	d101      	bne.n	8005e2e <__swbuf_r+0x7a>
 8005e2a:	68ac      	ldr	r4, [r5, #8]
 8005e2c:	e7cf      	b.n	8005dce <__swbuf_r+0x1a>
 8005e2e:	4b09      	ldr	r3, [pc, #36]	; (8005e54 <__swbuf_r+0xa0>)
 8005e30:	429c      	cmp	r4, r3
 8005e32:	bf08      	it	eq
 8005e34:	68ec      	ldreq	r4, [r5, #12]
 8005e36:	e7ca      	b.n	8005dce <__swbuf_r+0x1a>
 8005e38:	4621      	mov	r1, r4
 8005e3a:	4628      	mov	r0, r5
 8005e3c:	f000 f81e 	bl	8005e7c <__swsetup_r>
 8005e40:	2800      	cmp	r0, #0
 8005e42:	d0cb      	beq.n	8005ddc <__swbuf_r+0x28>
 8005e44:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005e48:	e7ea      	b.n	8005e20 <__swbuf_r+0x6c>
 8005e4a:	bf00      	nop
 8005e4c:	080064f8 	.word	0x080064f8
 8005e50:	08006518 	.word	0x08006518
 8005e54:	080064d8 	.word	0x080064d8

08005e58 <_write_r>:
 8005e58:	b538      	push	{r3, r4, r5, lr}
 8005e5a:	4604      	mov	r4, r0
 8005e5c:	4608      	mov	r0, r1
 8005e5e:	4611      	mov	r1, r2
 8005e60:	2200      	movs	r2, #0
 8005e62:	4d05      	ldr	r5, [pc, #20]	; (8005e78 <_write_r+0x20>)
 8005e64:	602a      	str	r2, [r5, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	f7fa fe0e 	bl	8000a88 <_write>
 8005e6c:	1c43      	adds	r3, r0, #1
 8005e6e:	d102      	bne.n	8005e76 <_write_r+0x1e>
 8005e70:	682b      	ldr	r3, [r5, #0]
 8005e72:	b103      	cbz	r3, 8005e76 <_write_r+0x1e>
 8005e74:	6023      	str	r3, [r4, #0]
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	20000358 	.word	0x20000358

08005e7c <__swsetup_r>:
 8005e7c:	4b32      	ldr	r3, [pc, #200]	; (8005f48 <__swsetup_r+0xcc>)
 8005e7e:	b570      	push	{r4, r5, r6, lr}
 8005e80:	681d      	ldr	r5, [r3, #0]
 8005e82:	4606      	mov	r6, r0
 8005e84:	460c      	mov	r4, r1
 8005e86:	b125      	cbz	r5, 8005e92 <__swsetup_r+0x16>
 8005e88:	69ab      	ldr	r3, [r5, #24]
 8005e8a:	b913      	cbnz	r3, 8005e92 <__swsetup_r+0x16>
 8005e8c:	4628      	mov	r0, r5
 8005e8e:	f7ff f8a9 	bl	8004fe4 <__sinit>
 8005e92:	4b2e      	ldr	r3, [pc, #184]	; (8005f4c <__swsetup_r+0xd0>)
 8005e94:	429c      	cmp	r4, r3
 8005e96:	d10f      	bne.n	8005eb8 <__swsetup_r+0x3c>
 8005e98:	686c      	ldr	r4, [r5, #4]
 8005e9a:	89a3      	ldrh	r3, [r4, #12]
 8005e9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ea0:	0719      	lsls	r1, r3, #28
 8005ea2:	d42c      	bmi.n	8005efe <__swsetup_r+0x82>
 8005ea4:	06dd      	lsls	r5, r3, #27
 8005ea6:	d411      	bmi.n	8005ecc <__swsetup_r+0x50>
 8005ea8:	2309      	movs	r3, #9
 8005eaa:	6033      	str	r3, [r6, #0]
 8005eac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005eb4:	81a3      	strh	r3, [r4, #12]
 8005eb6:	e03e      	b.n	8005f36 <__swsetup_r+0xba>
 8005eb8:	4b25      	ldr	r3, [pc, #148]	; (8005f50 <__swsetup_r+0xd4>)
 8005eba:	429c      	cmp	r4, r3
 8005ebc:	d101      	bne.n	8005ec2 <__swsetup_r+0x46>
 8005ebe:	68ac      	ldr	r4, [r5, #8]
 8005ec0:	e7eb      	b.n	8005e9a <__swsetup_r+0x1e>
 8005ec2:	4b24      	ldr	r3, [pc, #144]	; (8005f54 <__swsetup_r+0xd8>)
 8005ec4:	429c      	cmp	r4, r3
 8005ec6:	bf08      	it	eq
 8005ec8:	68ec      	ldreq	r4, [r5, #12]
 8005eca:	e7e6      	b.n	8005e9a <__swsetup_r+0x1e>
 8005ecc:	0758      	lsls	r0, r3, #29
 8005ece:	d512      	bpl.n	8005ef6 <__swsetup_r+0x7a>
 8005ed0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005ed2:	b141      	cbz	r1, 8005ee6 <__swsetup_r+0x6a>
 8005ed4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005ed8:	4299      	cmp	r1, r3
 8005eda:	d002      	beq.n	8005ee2 <__swsetup_r+0x66>
 8005edc:	4630      	mov	r0, r6
 8005ede:	f7ff fce1 	bl	80058a4 <_free_r>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	6363      	str	r3, [r4, #52]	; 0x34
 8005ee6:	89a3      	ldrh	r3, [r4, #12]
 8005ee8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005eec:	81a3      	strh	r3, [r4, #12]
 8005eee:	2300      	movs	r3, #0
 8005ef0:	6063      	str	r3, [r4, #4]
 8005ef2:	6923      	ldr	r3, [r4, #16]
 8005ef4:	6023      	str	r3, [r4, #0]
 8005ef6:	89a3      	ldrh	r3, [r4, #12]
 8005ef8:	f043 0308 	orr.w	r3, r3, #8
 8005efc:	81a3      	strh	r3, [r4, #12]
 8005efe:	6923      	ldr	r3, [r4, #16]
 8005f00:	b94b      	cbnz	r3, 8005f16 <__swsetup_r+0x9a>
 8005f02:	89a3      	ldrh	r3, [r4, #12]
 8005f04:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f0c:	d003      	beq.n	8005f16 <__swsetup_r+0x9a>
 8005f0e:	4621      	mov	r1, r4
 8005f10:	4630      	mov	r0, r6
 8005f12:	f000 f957 	bl	80061c4 <__smakebuf_r>
 8005f16:	89a0      	ldrh	r0, [r4, #12]
 8005f18:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f1c:	f010 0301 	ands.w	r3, r0, #1
 8005f20:	d00a      	beq.n	8005f38 <__swsetup_r+0xbc>
 8005f22:	2300      	movs	r3, #0
 8005f24:	60a3      	str	r3, [r4, #8]
 8005f26:	6963      	ldr	r3, [r4, #20]
 8005f28:	425b      	negs	r3, r3
 8005f2a:	61a3      	str	r3, [r4, #24]
 8005f2c:	6923      	ldr	r3, [r4, #16]
 8005f2e:	b943      	cbnz	r3, 8005f42 <__swsetup_r+0xc6>
 8005f30:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005f34:	d1ba      	bne.n	8005eac <__swsetup_r+0x30>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	0781      	lsls	r1, r0, #30
 8005f3a:	bf58      	it	pl
 8005f3c:	6963      	ldrpl	r3, [r4, #20]
 8005f3e:	60a3      	str	r3, [r4, #8]
 8005f40:	e7f4      	b.n	8005f2c <__swsetup_r+0xb0>
 8005f42:	2000      	movs	r0, #0
 8005f44:	e7f7      	b.n	8005f36 <__swsetup_r+0xba>
 8005f46:	bf00      	nop
 8005f48:	20000014 	.word	0x20000014
 8005f4c:	080064f8 	.word	0x080064f8
 8005f50:	08006518 	.word	0x08006518
 8005f54:	080064d8 	.word	0x080064d8

08005f58 <__assert_func>:
 8005f58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005f5a:	4614      	mov	r4, r2
 8005f5c:	461a      	mov	r2, r3
 8005f5e:	4b09      	ldr	r3, [pc, #36]	; (8005f84 <__assert_func+0x2c>)
 8005f60:	4605      	mov	r5, r0
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68d8      	ldr	r0, [r3, #12]
 8005f66:	b14c      	cbz	r4, 8005f7c <__assert_func+0x24>
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <__assert_func+0x30>)
 8005f6a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005f6e:	9100      	str	r1, [sp, #0]
 8005f70:	462b      	mov	r3, r5
 8005f72:	4906      	ldr	r1, [pc, #24]	; (8005f8c <__assert_func+0x34>)
 8005f74:	f000 f8dc 	bl	8006130 <fiprintf>
 8005f78:	f000 f9a1 	bl	80062be <abort>
 8005f7c:	4b04      	ldr	r3, [pc, #16]	; (8005f90 <__assert_func+0x38>)
 8005f7e:	461c      	mov	r4, r3
 8005f80:	e7f3      	b.n	8005f6a <__assert_func+0x12>
 8005f82:	bf00      	nop
 8005f84:	20000014 	.word	0x20000014
 8005f88:	080066a5 	.word	0x080066a5
 8005f8c:	080066b2 	.word	0x080066b2
 8005f90:	080066e0 	.word	0x080066e0

08005f94 <_close_r>:
 8005f94:	b538      	push	{r3, r4, r5, lr}
 8005f96:	2300      	movs	r3, #0
 8005f98:	4d05      	ldr	r5, [pc, #20]	; (8005fb0 <_close_r+0x1c>)
 8005f9a:	4604      	mov	r4, r0
 8005f9c:	4608      	mov	r0, r1
 8005f9e:	602b      	str	r3, [r5, #0]
 8005fa0:	f7fb f998 	bl	80012d4 <_close>
 8005fa4:	1c43      	adds	r3, r0, #1
 8005fa6:	d102      	bne.n	8005fae <_close_r+0x1a>
 8005fa8:	682b      	ldr	r3, [r5, #0]
 8005faa:	b103      	cbz	r3, 8005fae <_close_r+0x1a>
 8005fac:	6023      	str	r3, [r4, #0]
 8005fae:	bd38      	pop	{r3, r4, r5, pc}
 8005fb0:	20000358 	.word	0x20000358

08005fb4 <__sflush_r>:
 8005fb4:	898a      	ldrh	r2, [r1, #12]
 8005fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fb8:	4605      	mov	r5, r0
 8005fba:	0710      	lsls	r0, r2, #28
 8005fbc:	460c      	mov	r4, r1
 8005fbe:	d457      	bmi.n	8006070 <__sflush_r+0xbc>
 8005fc0:	684b      	ldr	r3, [r1, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	dc04      	bgt.n	8005fd0 <__sflush_r+0x1c>
 8005fc6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	dc01      	bgt.n	8005fd0 <__sflush_r+0x1c>
 8005fcc:	2000      	movs	r0, #0
 8005fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fd0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fd2:	2e00      	cmp	r6, #0
 8005fd4:	d0fa      	beq.n	8005fcc <__sflush_r+0x18>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fdc:	682f      	ldr	r7, [r5, #0]
 8005fde:	602b      	str	r3, [r5, #0]
 8005fe0:	d032      	beq.n	8006048 <__sflush_r+0x94>
 8005fe2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fe4:	89a3      	ldrh	r3, [r4, #12]
 8005fe6:	075a      	lsls	r2, r3, #29
 8005fe8:	d505      	bpl.n	8005ff6 <__sflush_r+0x42>
 8005fea:	6863      	ldr	r3, [r4, #4]
 8005fec:	1ac0      	subs	r0, r0, r3
 8005fee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005ff0:	b10b      	cbz	r3, 8005ff6 <__sflush_r+0x42>
 8005ff2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005ff4:	1ac0      	subs	r0, r0, r3
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005ffc:	4628      	mov	r0, r5
 8005ffe:	6a21      	ldr	r1, [r4, #32]
 8006000:	47b0      	blx	r6
 8006002:	1c43      	adds	r3, r0, #1
 8006004:	89a3      	ldrh	r3, [r4, #12]
 8006006:	d106      	bne.n	8006016 <__sflush_r+0x62>
 8006008:	6829      	ldr	r1, [r5, #0]
 800600a:	291d      	cmp	r1, #29
 800600c:	d82c      	bhi.n	8006068 <__sflush_r+0xb4>
 800600e:	4a29      	ldr	r2, [pc, #164]	; (80060b4 <__sflush_r+0x100>)
 8006010:	40ca      	lsrs	r2, r1
 8006012:	07d6      	lsls	r6, r2, #31
 8006014:	d528      	bpl.n	8006068 <__sflush_r+0xb4>
 8006016:	2200      	movs	r2, #0
 8006018:	6062      	str	r2, [r4, #4]
 800601a:	6922      	ldr	r2, [r4, #16]
 800601c:	04d9      	lsls	r1, r3, #19
 800601e:	6022      	str	r2, [r4, #0]
 8006020:	d504      	bpl.n	800602c <__sflush_r+0x78>
 8006022:	1c42      	adds	r2, r0, #1
 8006024:	d101      	bne.n	800602a <__sflush_r+0x76>
 8006026:	682b      	ldr	r3, [r5, #0]
 8006028:	b903      	cbnz	r3, 800602c <__sflush_r+0x78>
 800602a:	6560      	str	r0, [r4, #84]	; 0x54
 800602c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800602e:	602f      	str	r7, [r5, #0]
 8006030:	2900      	cmp	r1, #0
 8006032:	d0cb      	beq.n	8005fcc <__sflush_r+0x18>
 8006034:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006038:	4299      	cmp	r1, r3
 800603a:	d002      	beq.n	8006042 <__sflush_r+0x8e>
 800603c:	4628      	mov	r0, r5
 800603e:	f7ff fc31 	bl	80058a4 <_free_r>
 8006042:	2000      	movs	r0, #0
 8006044:	6360      	str	r0, [r4, #52]	; 0x34
 8006046:	e7c2      	b.n	8005fce <__sflush_r+0x1a>
 8006048:	6a21      	ldr	r1, [r4, #32]
 800604a:	2301      	movs	r3, #1
 800604c:	4628      	mov	r0, r5
 800604e:	47b0      	blx	r6
 8006050:	1c41      	adds	r1, r0, #1
 8006052:	d1c7      	bne.n	8005fe4 <__sflush_r+0x30>
 8006054:	682b      	ldr	r3, [r5, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d0c4      	beq.n	8005fe4 <__sflush_r+0x30>
 800605a:	2b1d      	cmp	r3, #29
 800605c:	d001      	beq.n	8006062 <__sflush_r+0xae>
 800605e:	2b16      	cmp	r3, #22
 8006060:	d101      	bne.n	8006066 <__sflush_r+0xb2>
 8006062:	602f      	str	r7, [r5, #0]
 8006064:	e7b2      	b.n	8005fcc <__sflush_r+0x18>
 8006066:	89a3      	ldrh	r3, [r4, #12]
 8006068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800606c:	81a3      	strh	r3, [r4, #12]
 800606e:	e7ae      	b.n	8005fce <__sflush_r+0x1a>
 8006070:	690f      	ldr	r7, [r1, #16]
 8006072:	2f00      	cmp	r7, #0
 8006074:	d0aa      	beq.n	8005fcc <__sflush_r+0x18>
 8006076:	0793      	lsls	r3, r2, #30
 8006078:	bf18      	it	ne
 800607a:	2300      	movne	r3, #0
 800607c:	680e      	ldr	r6, [r1, #0]
 800607e:	bf08      	it	eq
 8006080:	694b      	ldreq	r3, [r1, #20]
 8006082:	1bf6      	subs	r6, r6, r7
 8006084:	600f      	str	r7, [r1, #0]
 8006086:	608b      	str	r3, [r1, #8]
 8006088:	2e00      	cmp	r6, #0
 800608a:	dd9f      	ble.n	8005fcc <__sflush_r+0x18>
 800608c:	4633      	mov	r3, r6
 800608e:	463a      	mov	r2, r7
 8006090:	4628      	mov	r0, r5
 8006092:	6a21      	ldr	r1, [r4, #32]
 8006094:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006098:	47e0      	blx	ip
 800609a:	2800      	cmp	r0, #0
 800609c:	dc06      	bgt.n	80060ac <__sflush_r+0xf8>
 800609e:	89a3      	ldrh	r3, [r4, #12]
 80060a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060a8:	81a3      	strh	r3, [r4, #12]
 80060aa:	e790      	b.n	8005fce <__sflush_r+0x1a>
 80060ac:	4407      	add	r7, r0
 80060ae:	1a36      	subs	r6, r6, r0
 80060b0:	e7ea      	b.n	8006088 <__sflush_r+0xd4>
 80060b2:	bf00      	nop
 80060b4:	20400001 	.word	0x20400001

080060b8 <_fflush_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	690b      	ldr	r3, [r1, #16]
 80060bc:	4605      	mov	r5, r0
 80060be:	460c      	mov	r4, r1
 80060c0:	b913      	cbnz	r3, 80060c8 <_fflush_r+0x10>
 80060c2:	2500      	movs	r5, #0
 80060c4:	4628      	mov	r0, r5
 80060c6:	bd38      	pop	{r3, r4, r5, pc}
 80060c8:	b118      	cbz	r0, 80060d2 <_fflush_r+0x1a>
 80060ca:	6983      	ldr	r3, [r0, #24]
 80060cc:	b90b      	cbnz	r3, 80060d2 <_fflush_r+0x1a>
 80060ce:	f7fe ff89 	bl	8004fe4 <__sinit>
 80060d2:	4b14      	ldr	r3, [pc, #80]	; (8006124 <_fflush_r+0x6c>)
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d11b      	bne.n	8006110 <_fflush_r+0x58>
 80060d8:	686c      	ldr	r4, [r5, #4]
 80060da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0ef      	beq.n	80060c2 <_fflush_r+0xa>
 80060e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060e4:	07d0      	lsls	r0, r2, #31
 80060e6:	d404      	bmi.n	80060f2 <_fflush_r+0x3a>
 80060e8:	0599      	lsls	r1, r3, #22
 80060ea:	d402      	bmi.n	80060f2 <_fflush_r+0x3a>
 80060ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060ee:	f7ff f81c 	bl	800512a <__retarget_lock_acquire_recursive>
 80060f2:	4628      	mov	r0, r5
 80060f4:	4621      	mov	r1, r4
 80060f6:	f7ff ff5d 	bl	8005fb4 <__sflush_r>
 80060fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060fc:	4605      	mov	r5, r0
 80060fe:	07da      	lsls	r2, r3, #31
 8006100:	d4e0      	bmi.n	80060c4 <_fflush_r+0xc>
 8006102:	89a3      	ldrh	r3, [r4, #12]
 8006104:	059b      	lsls	r3, r3, #22
 8006106:	d4dd      	bmi.n	80060c4 <_fflush_r+0xc>
 8006108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800610a:	f7ff f80f 	bl	800512c <__retarget_lock_release_recursive>
 800610e:	e7d9      	b.n	80060c4 <_fflush_r+0xc>
 8006110:	4b05      	ldr	r3, [pc, #20]	; (8006128 <_fflush_r+0x70>)
 8006112:	429c      	cmp	r4, r3
 8006114:	d101      	bne.n	800611a <_fflush_r+0x62>
 8006116:	68ac      	ldr	r4, [r5, #8]
 8006118:	e7df      	b.n	80060da <_fflush_r+0x22>
 800611a:	4b04      	ldr	r3, [pc, #16]	; (800612c <_fflush_r+0x74>)
 800611c:	429c      	cmp	r4, r3
 800611e:	bf08      	it	eq
 8006120:	68ec      	ldreq	r4, [r5, #12]
 8006122:	e7da      	b.n	80060da <_fflush_r+0x22>
 8006124:	080064f8 	.word	0x080064f8
 8006128:	08006518 	.word	0x08006518
 800612c:	080064d8 	.word	0x080064d8

08006130 <fiprintf>:
 8006130:	b40e      	push	{r1, r2, r3}
 8006132:	b503      	push	{r0, r1, lr}
 8006134:	4601      	mov	r1, r0
 8006136:	ab03      	add	r3, sp, #12
 8006138:	4805      	ldr	r0, [pc, #20]	; (8006150 <fiprintf+0x20>)
 800613a:	f853 2b04 	ldr.w	r2, [r3], #4
 800613e:	6800      	ldr	r0, [r0, #0]
 8006140:	9301      	str	r3, [sp, #4]
 8006142:	f7ff fcb3 	bl	8005aac <_vfiprintf_r>
 8006146:	b002      	add	sp, #8
 8006148:	f85d eb04 	ldr.w	lr, [sp], #4
 800614c:	b003      	add	sp, #12
 800614e:	4770      	bx	lr
 8006150:	20000014 	.word	0x20000014

08006154 <_lseek_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4604      	mov	r4, r0
 8006158:	4608      	mov	r0, r1
 800615a:	4611      	mov	r1, r2
 800615c:	2200      	movs	r2, #0
 800615e:	4d05      	ldr	r5, [pc, #20]	; (8006174 <_lseek_r+0x20>)
 8006160:	602a      	str	r2, [r5, #0]
 8006162:	461a      	mov	r2, r3
 8006164:	f7fb f8da 	bl	800131c <_lseek>
 8006168:	1c43      	adds	r3, r0, #1
 800616a:	d102      	bne.n	8006172 <_lseek_r+0x1e>
 800616c:	682b      	ldr	r3, [r5, #0]
 800616e:	b103      	cbz	r3, 8006172 <_lseek_r+0x1e>
 8006170:	6023      	str	r3, [r4, #0]
 8006172:	bd38      	pop	{r3, r4, r5, pc}
 8006174:	20000358 	.word	0x20000358

08006178 <__swhatbuf_r>:
 8006178:	b570      	push	{r4, r5, r6, lr}
 800617a:	460e      	mov	r6, r1
 800617c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006180:	4614      	mov	r4, r2
 8006182:	2900      	cmp	r1, #0
 8006184:	461d      	mov	r5, r3
 8006186:	b096      	sub	sp, #88	; 0x58
 8006188:	da08      	bge.n	800619c <__swhatbuf_r+0x24>
 800618a:	2200      	movs	r2, #0
 800618c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006190:	602a      	str	r2, [r5, #0]
 8006192:	061a      	lsls	r2, r3, #24
 8006194:	d410      	bmi.n	80061b8 <__swhatbuf_r+0x40>
 8006196:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800619a:	e00e      	b.n	80061ba <__swhatbuf_r+0x42>
 800619c:	466a      	mov	r2, sp
 800619e:	f000 f895 	bl	80062cc <_fstat_r>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	dbf1      	blt.n	800618a <__swhatbuf_r+0x12>
 80061a6:	9a01      	ldr	r2, [sp, #4]
 80061a8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80061ac:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80061b0:	425a      	negs	r2, r3
 80061b2:	415a      	adcs	r2, r3
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	e7ee      	b.n	8006196 <__swhatbuf_r+0x1e>
 80061b8:	2340      	movs	r3, #64	; 0x40
 80061ba:	2000      	movs	r0, #0
 80061bc:	6023      	str	r3, [r4, #0]
 80061be:	b016      	add	sp, #88	; 0x58
 80061c0:	bd70      	pop	{r4, r5, r6, pc}
	...

080061c4 <__smakebuf_r>:
 80061c4:	898b      	ldrh	r3, [r1, #12]
 80061c6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80061c8:	079d      	lsls	r5, r3, #30
 80061ca:	4606      	mov	r6, r0
 80061cc:	460c      	mov	r4, r1
 80061ce:	d507      	bpl.n	80061e0 <__smakebuf_r+0x1c>
 80061d0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	6123      	str	r3, [r4, #16]
 80061d8:	2301      	movs	r3, #1
 80061da:	6163      	str	r3, [r4, #20]
 80061dc:	b002      	add	sp, #8
 80061de:	bd70      	pop	{r4, r5, r6, pc}
 80061e0:	466a      	mov	r2, sp
 80061e2:	ab01      	add	r3, sp, #4
 80061e4:	f7ff ffc8 	bl	8006178 <__swhatbuf_r>
 80061e8:	9900      	ldr	r1, [sp, #0]
 80061ea:	4605      	mov	r5, r0
 80061ec:	4630      	mov	r0, r6
 80061ee:	f7ff fbc1 	bl	8005974 <_malloc_r>
 80061f2:	b948      	cbnz	r0, 8006208 <__smakebuf_r+0x44>
 80061f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061f8:	059a      	lsls	r2, r3, #22
 80061fa:	d4ef      	bmi.n	80061dc <__smakebuf_r+0x18>
 80061fc:	f023 0303 	bic.w	r3, r3, #3
 8006200:	f043 0302 	orr.w	r3, r3, #2
 8006204:	81a3      	strh	r3, [r4, #12]
 8006206:	e7e3      	b.n	80061d0 <__smakebuf_r+0xc>
 8006208:	4b0d      	ldr	r3, [pc, #52]	; (8006240 <__smakebuf_r+0x7c>)
 800620a:	62b3      	str	r3, [r6, #40]	; 0x28
 800620c:	89a3      	ldrh	r3, [r4, #12]
 800620e:	6020      	str	r0, [r4, #0]
 8006210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006214:	81a3      	strh	r3, [r4, #12]
 8006216:	9b00      	ldr	r3, [sp, #0]
 8006218:	6120      	str	r0, [r4, #16]
 800621a:	6163      	str	r3, [r4, #20]
 800621c:	9b01      	ldr	r3, [sp, #4]
 800621e:	b15b      	cbz	r3, 8006238 <__smakebuf_r+0x74>
 8006220:	4630      	mov	r0, r6
 8006222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006226:	f000 f863 	bl	80062f0 <_isatty_r>
 800622a:	b128      	cbz	r0, 8006238 <__smakebuf_r+0x74>
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	f023 0303 	bic.w	r3, r3, #3
 8006232:	f043 0301 	orr.w	r3, r3, #1
 8006236:	81a3      	strh	r3, [r4, #12]
 8006238:	89a0      	ldrh	r0, [r4, #12]
 800623a:	4305      	orrs	r5, r0
 800623c:	81a5      	strh	r5, [r4, #12]
 800623e:	e7cd      	b.n	80061dc <__smakebuf_r+0x18>
 8006240:	08004f7d 	.word	0x08004f7d

08006244 <__ascii_mbtowc>:
 8006244:	b082      	sub	sp, #8
 8006246:	b901      	cbnz	r1, 800624a <__ascii_mbtowc+0x6>
 8006248:	a901      	add	r1, sp, #4
 800624a:	b142      	cbz	r2, 800625e <__ascii_mbtowc+0x1a>
 800624c:	b14b      	cbz	r3, 8006262 <__ascii_mbtowc+0x1e>
 800624e:	7813      	ldrb	r3, [r2, #0]
 8006250:	600b      	str	r3, [r1, #0]
 8006252:	7812      	ldrb	r2, [r2, #0]
 8006254:	1e10      	subs	r0, r2, #0
 8006256:	bf18      	it	ne
 8006258:	2001      	movne	r0, #1
 800625a:	b002      	add	sp, #8
 800625c:	4770      	bx	lr
 800625e:	4610      	mov	r0, r2
 8006260:	e7fb      	b.n	800625a <__ascii_mbtowc+0x16>
 8006262:	f06f 0001 	mvn.w	r0, #1
 8006266:	e7f8      	b.n	800625a <__ascii_mbtowc+0x16>

08006268 <__malloc_lock>:
 8006268:	4801      	ldr	r0, [pc, #4]	; (8006270 <__malloc_lock+0x8>)
 800626a:	f7fe bf5e 	b.w	800512a <__retarget_lock_acquire_recursive>
 800626e:	bf00      	nop
 8006270:	2000034c 	.word	0x2000034c

08006274 <__malloc_unlock>:
 8006274:	4801      	ldr	r0, [pc, #4]	; (800627c <__malloc_unlock+0x8>)
 8006276:	f7fe bf59 	b.w	800512c <__retarget_lock_release_recursive>
 800627a:	bf00      	nop
 800627c:	2000034c 	.word	0x2000034c

08006280 <_read_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4604      	mov	r4, r0
 8006284:	4608      	mov	r0, r1
 8006286:	4611      	mov	r1, r2
 8006288:	2200      	movs	r2, #0
 800628a:	4d05      	ldr	r5, [pc, #20]	; (80062a0 <_read_r+0x20>)
 800628c:	602a      	str	r2, [r5, #0]
 800628e:	461a      	mov	r2, r3
 8006290:	f7fb f803 	bl	800129a <_read>
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	d102      	bne.n	800629e <_read_r+0x1e>
 8006298:	682b      	ldr	r3, [r5, #0]
 800629a:	b103      	cbz	r3, 800629e <_read_r+0x1e>
 800629c:	6023      	str	r3, [r4, #0]
 800629e:	bd38      	pop	{r3, r4, r5, pc}
 80062a0:	20000358 	.word	0x20000358

080062a4 <__ascii_wctomb>:
 80062a4:	4603      	mov	r3, r0
 80062a6:	4608      	mov	r0, r1
 80062a8:	b141      	cbz	r1, 80062bc <__ascii_wctomb+0x18>
 80062aa:	2aff      	cmp	r2, #255	; 0xff
 80062ac:	d904      	bls.n	80062b8 <__ascii_wctomb+0x14>
 80062ae:	228a      	movs	r2, #138	; 0x8a
 80062b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062b4:	601a      	str	r2, [r3, #0]
 80062b6:	4770      	bx	lr
 80062b8:	2001      	movs	r0, #1
 80062ba:	700a      	strb	r2, [r1, #0]
 80062bc:	4770      	bx	lr

080062be <abort>:
 80062be:	2006      	movs	r0, #6
 80062c0:	b508      	push	{r3, lr}
 80062c2:	f000 f84d 	bl	8006360 <raise>
 80062c6:	2001      	movs	r0, #1
 80062c8:	f7fa ffdd 	bl	8001286 <_exit>

080062cc <_fstat_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	2300      	movs	r3, #0
 80062d0:	4d06      	ldr	r5, [pc, #24]	; (80062ec <_fstat_r+0x20>)
 80062d2:	4604      	mov	r4, r0
 80062d4:	4608      	mov	r0, r1
 80062d6:	4611      	mov	r1, r2
 80062d8:	602b      	str	r3, [r5, #0]
 80062da:	f7fb f806 	bl	80012ea <_fstat>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d102      	bne.n	80062e8 <_fstat_r+0x1c>
 80062e2:	682b      	ldr	r3, [r5, #0]
 80062e4:	b103      	cbz	r3, 80062e8 <_fstat_r+0x1c>
 80062e6:	6023      	str	r3, [r4, #0]
 80062e8:	bd38      	pop	{r3, r4, r5, pc}
 80062ea:	bf00      	nop
 80062ec:	20000358 	.word	0x20000358

080062f0 <_isatty_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	2300      	movs	r3, #0
 80062f4:	4d05      	ldr	r5, [pc, #20]	; (800630c <_isatty_r+0x1c>)
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	602b      	str	r3, [r5, #0]
 80062fc:	f7fb f804 	bl	8001308 <_isatty>
 8006300:	1c43      	adds	r3, r0, #1
 8006302:	d102      	bne.n	800630a <_isatty_r+0x1a>
 8006304:	682b      	ldr	r3, [r5, #0]
 8006306:	b103      	cbz	r3, 800630a <_isatty_r+0x1a>
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	bd38      	pop	{r3, r4, r5, pc}
 800630c:	20000358 	.word	0x20000358

08006310 <_raise_r>:
 8006310:	291f      	cmp	r1, #31
 8006312:	b538      	push	{r3, r4, r5, lr}
 8006314:	4604      	mov	r4, r0
 8006316:	460d      	mov	r5, r1
 8006318:	d904      	bls.n	8006324 <_raise_r+0x14>
 800631a:	2316      	movs	r3, #22
 800631c:	6003      	str	r3, [r0, #0]
 800631e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006322:	bd38      	pop	{r3, r4, r5, pc}
 8006324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006326:	b112      	cbz	r2, 800632e <_raise_r+0x1e>
 8006328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800632c:	b94b      	cbnz	r3, 8006342 <_raise_r+0x32>
 800632e:	4620      	mov	r0, r4
 8006330:	f000 f830 	bl	8006394 <_getpid_r>
 8006334:	462a      	mov	r2, r5
 8006336:	4601      	mov	r1, r0
 8006338:	4620      	mov	r0, r4
 800633a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800633e:	f000 b817 	b.w	8006370 <_kill_r>
 8006342:	2b01      	cmp	r3, #1
 8006344:	d00a      	beq.n	800635c <_raise_r+0x4c>
 8006346:	1c59      	adds	r1, r3, #1
 8006348:	d103      	bne.n	8006352 <_raise_r+0x42>
 800634a:	2316      	movs	r3, #22
 800634c:	6003      	str	r3, [r0, #0]
 800634e:	2001      	movs	r0, #1
 8006350:	e7e7      	b.n	8006322 <_raise_r+0x12>
 8006352:	2400      	movs	r4, #0
 8006354:	4628      	mov	r0, r5
 8006356:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800635a:	4798      	blx	r3
 800635c:	2000      	movs	r0, #0
 800635e:	e7e0      	b.n	8006322 <_raise_r+0x12>

08006360 <raise>:
 8006360:	4b02      	ldr	r3, [pc, #8]	; (800636c <raise+0xc>)
 8006362:	4601      	mov	r1, r0
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	f7ff bfd3 	b.w	8006310 <_raise_r>
 800636a:	bf00      	nop
 800636c:	20000014 	.word	0x20000014

08006370 <_kill_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	2300      	movs	r3, #0
 8006374:	4d06      	ldr	r5, [pc, #24]	; (8006390 <_kill_r+0x20>)
 8006376:	4604      	mov	r4, r0
 8006378:	4608      	mov	r0, r1
 800637a:	4611      	mov	r1, r2
 800637c:	602b      	str	r3, [r5, #0]
 800637e:	f7fa ff72 	bl	8001266 <_kill>
 8006382:	1c43      	adds	r3, r0, #1
 8006384:	d102      	bne.n	800638c <_kill_r+0x1c>
 8006386:	682b      	ldr	r3, [r5, #0]
 8006388:	b103      	cbz	r3, 800638c <_kill_r+0x1c>
 800638a:	6023      	str	r3, [r4, #0]
 800638c:	bd38      	pop	{r3, r4, r5, pc}
 800638e:	bf00      	nop
 8006390:	20000358 	.word	0x20000358

08006394 <_getpid_r>:
 8006394:	f7fa bf60 	b.w	8001258 <_getpid>

08006398 <_init>:
 8006398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800639a:	bf00      	nop
 800639c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800639e:	bc08      	pop	{r3}
 80063a0:	469e      	mov	lr, r3
 80063a2:	4770      	bx	lr

080063a4 <_fini>:
 80063a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063a6:	bf00      	nop
 80063a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063aa:	bc08      	pop	{r3}
 80063ac:	469e      	mov	lr, r3
 80063ae:	4770      	bx	lr
