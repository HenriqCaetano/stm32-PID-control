
motorControl-f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006bd0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006ce0  08006ce0  00016ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070ec  080070ec  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  080070ec  080070ec  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080070ec  080070ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070f0  080070f0  000170f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080070f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001e0  080072d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080072d4  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca43  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c62  00000000  00000000  0002cc4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0002e8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002f538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001878a  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d1ef  00000000  00000000  00048892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbbc  00000000  00000000  00055a81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e163d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000461c  00000000  00000000  000e1690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08006cc8 	.word	0x08006cc8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08006cc8 	.word	0x08006cc8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
//for data transmission using FTDI, requires USART 1 enabled
int _write(int fd, char* ptr, int len) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	b29a      	uxth	r2, r3
 8001080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <_write+0x28>)
 8001088:	f002 ff47 	bl	8003f1a <HAL_UART_Transmit>
    return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002d4 	.word	0x200002d4

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 fe13 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f841 	bl	800112c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f000 fa05 	bl	80014b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 80010ae:	f000 f921 	bl	80012f4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80010b2:	f000 f9d7 	bl	8001464 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010b6:	f000 f981 	bl	80013bc <MX_TIM4_Init>
  MX_TIM1_Init();
 80010ba:	f000 f87d 	bl	80011b8 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //starts PWM timer
 80010be:	210c      	movs	r1, #12
 80010c0:	4812      	ldr	r0, [pc, #72]	; (800110c <main+0x70>)
 80010c2:	f001 fe19 	bl	8002cf8 <HAL_TIM_PWM_Start>
  //dutyCycle = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4); //initializes dutyCycle
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //start timer in encoder mode
 80010c6:	213c      	movs	r1, #60	; 0x3c
 80010c8:	4811      	ldr	r0, [pc, #68]	; (8001110 <main+0x74>)
 80010ca:	f001 ff59 	bl	8002f80 <HAL_TIM_Encoder_Start>

  //TODO: ajuste dos parâmetros do PID
  pidInit(&controller, MIN_PWM, MAX_PWM, KP, KI, KD);
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80010de:	4a0d      	ldr	r2, [pc, #52]	; (8001114 <main+0x78>)
 80010e0:	490d      	ldr	r1, [pc, #52]	; (8001118 <main+0x7c>)
 80010e2:	480e      	ldr	r0, [pc, #56]	; (800111c <main+0x80>)
 80010e4:	f000 fb5f 	bl	80017a6 <pidInit>

  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, GPIO_PIN_SET); //enable ON (required)
 80010e8:	2201      	movs	r2, #1
 80010ea:	2108      	movs	r1, #8
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <main+0x84>)
 80010ee:	f001 f8e1 	bl	80022b4 <HAL_GPIO_WritePin>
  motorStop(); //motor initially stopped
 80010f2:	f000 fb43 	bl	800177c <motorStop>

//  HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_RESET);

  htim1.Instance->CCR4 = 0;
 80010f6:	4b05      	ldr	r3, [pc, #20]	; (800110c <main+0x70>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
  TIM4->CNT = 0;
 80010fe:	4b09      	ldr	r3, [pc, #36]	; (8001124 <main+0x88>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24


  HAL_TIM_Base_Start_IT(&htim2); //starts interrupt timer
 8001104:	4808      	ldr	r0, [pc, #32]	; (8001128 <main+0x8c>)
 8001106:	f001 fd4d 	bl	8002ba4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800110a:	e7fe      	b.n	800110a <main+0x6e>
 800110c:	200001fc 	.word	0x200001fc
 8001110:	2000028c 	.word	0x2000028c
 8001114:	42c80000 	.word	0x42c80000
 8001118:	c2c80000 	.word	0xc2c80000
 800111c:	20000338 	.word	0x20000338
 8001120:	40010800 	.word	0x40010800
 8001124:	40000800 	.word	0x40000800
 8001128:	20000244 	.word	0x20000244

0800112c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b090      	sub	sp, #64	; 0x40
 8001130:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001132:	f107 0318 	add.w	r3, r7, #24
 8001136:	2228      	movs	r2, #40	; 0x28
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f003 f896 	bl	800426c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001140:	1d3b      	adds	r3, r7, #4
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	605a      	str	r2, [r3, #4]
 8001148:	609a      	str	r2, [r3, #8]
 800114a:	60da      	str	r2, [r3, #12]
 800114c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800114e:	2301      	movs	r3, #1
 8001150:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001152:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001156:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800115c:	2301      	movs	r3, #1
 800115e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001160:	2302      	movs	r3, #2
 8001162:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001164:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001168:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800116a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800116e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001170:	f107 0318 	add.w	r3, r7, #24
 8001174:	4618      	mov	r0, r3
 8001176:	f001 f8b5 	bl	80022e4 <HAL_RCC_OscConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001180:	f000 fb0c 	bl	800179c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001184:	230f      	movs	r3, #15
 8001186:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001188:	2302      	movs	r3, #2
 800118a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001190:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2102      	movs	r1, #2
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 fb22 	bl	80027e8 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011aa:	f000 faf7 	bl	800179c <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3740      	adds	r7, #64	; 0x40
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b096      	sub	sp, #88	; 0x58
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011be:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011c2:	2200      	movs	r2, #0
 80011c4:	601a      	str	r2, [r3, #0]
 80011c6:	605a      	str	r2, [r3, #4]
 80011c8:	609a      	str	r2, [r3, #8]
 80011ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
 80011e4:	611a      	str	r2, [r3, #16]
 80011e6:	615a      	str	r2, [r3, #20]
 80011e8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	2220      	movs	r2, #32
 80011ee:	2100      	movs	r1, #0
 80011f0:	4618      	mov	r0, r3
 80011f2:	f003 f83b 	bl	800426c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011f6:	4b3d      	ldr	r3, [pc, #244]	; (80012ec <MX_TIM1_Init+0x134>)
 80011f8:	4a3d      	ldr	r2, [pc, #244]	; (80012f0 <MX_TIM1_Init+0x138>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 80011fc:	4b3b      	ldr	r3, [pc, #236]	; (80012ec <MX_TIM1_Init+0x134>)
 80011fe:	2209      	movs	r2, #9
 8001200:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b3a      	ldr	r3, [pc, #232]	; (80012ec <MX_TIM1_Init+0x134>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 699;
 8001208:	4b38      	ldr	r3, [pc, #224]	; (80012ec <MX_TIM1_Init+0x134>)
 800120a:	f240 22bb 	movw	r2, #699	; 0x2bb
 800120e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b36      	ldr	r3, [pc, #216]	; (80012ec <MX_TIM1_Init+0x134>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001216:	4b35      	ldr	r3, [pc, #212]	; (80012ec <MX_TIM1_Init+0x134>)
 8001218:	2200      	movs	r2, #0
 800121a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800121c:	4b33      	ldr	r3, [pc, #204]	; (80012ec <MX_TIM1_Init+0x134>)
 800121e:	2280      	movs	r2, #128	; 0x80
 8001220:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001222:	4832      	ldr	r0, [pc, #200]	; (80012ec <MX_TIM1_Init+0x134>)
 8001224:	f001 fc6e 	bl	8002b04 <HAL_TIM_Base_Init>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800122e:	f000 fab5 	bl	800179c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001236:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001238:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800123c:	4619      	mov	r1, r3
 800123e:	482b      	ldr	r0, [pc, #172]	; (80012ec <MX_TIM1_Init+0x134>)
 8001240:	f002 f8f6 	bl	8003430 <HAL_TIM_ConfigClockSource>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800124a:	f000 faa7 	bl	800179c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800124e:	4827      	ldr	r0, [pc, #156]	; (80012ec <MX_TIM1_Init+0x134>)
 8001250:	f001 fcfa 	bl	8002c48 <HAL_TIM_PWM_Init>
 8001254:	4603      	mov	r3, r0
 8001256:	2b00      	cmp	r3, #0
 8001258:	d001      	beq.n	800125e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800125a:	f000 fa9f 	bl	800179c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800125e:	2300      	movs	r3, #0
 8001260:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001262:	2300      	movs	r3, #0
 8001264:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001266:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800126a:	4619      	mov	r1, r3
 800126c:	481f      	ldr	r0, [pc, #124]	; (80012ec <MX_TIM1_Init+0x134>)
 800126e:	f002 fd43 	bl	8003cf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001278:	f000 fa90 	bl	800179c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127c:	2360      	movs	r3, #96	; 0x60
 800127e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001298:	220c      	movs	r2, #12
 800129a:	4619      	mov	r1, r3
 800129c:	4813      	ldr	r0, [pc, #76]	; (80012ec <MX_TIM1_Init+0x134>)
 800129e:	f002 f805 	bl	80032ac <HAL_TIM_PWM_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80012a8:	f000 fa78 	bl	800179c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012b4:	2300      	movs	r3, #0
 80012b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4807      	ldr	r0, [pc, #28]	; (80012ec <MX_TIM1_Init+0x134>)
 80012d0:	f002 fd70 	bl	8003db4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80012da:	f000 fa5f 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012de:	4803      	ldr	r0, [pc, #12]	; (80012ec <MX_TIM1_Init+0x134>)
 80012e0:	f000 fb72 	bl	80019c8 <HAL_TIM_MspPostInit>

}
 80012e4:	bf00      	nop
 80012e6:	3758      	adds	r7, #88	; 0x58
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200001fc 	.word	0x200001fc
 80012f0:	40012c00 	.word	0x40012c00

080012f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b08c      	sub	sp, #48	; 0x30
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012fa:	f107 0320 	add.w	r3, r7, #32
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	605a      	str	r2, [r3, #4]
 8001304:	609a      	str	r2, [r3, #8]
 8001306:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <MX_TIM2_Init+0xc4>)
 8001322:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001326:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 8001328:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_TIM2_Init+0xc4>)
 800132a:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 800132e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001330:	4b21      	ldr	r3, [pc, #132]	; (80013b8 <MX_TIM2_Init+0xc4>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_TIM2_Init+0xc4>)
 8001338:	f44f 7248 	mov.w	r2, #800	; 0x320
 800133c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800133e:	4b1e      	ldr	r3, [pc, #120]	; (80013b8 <MX_TIM2_Init+0xc4>)
 8001340:	2200      	movs	r2, #0
 8001342:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001344:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_TIM2_Init+0xc4>)
 8001346:	2280      	movs	r2, #128	; 0x80
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134a:	481b      	ldr	r0, [pc, #108]	; (80013b8 <MX_TIM2_Init+0xc4>)
 800134c:	f001 fbda 	bl	8002b04 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001356:	f000 fa21 	bl	800179c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135e:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	4619      	mov	r1, r3
 8001366:	4814      	ldr	r0, [pc, #80]	; (80013b8 <MX_TIM2_Init+0xc4>)
 8001368:	f002 f862 	bl	8003430 <HAL_TIM_ConfigClockSource>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001372:	f000 fa13 	bl	800179c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800137a:	2300      	movs	r3, #0
 800137c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	4619      	mov	r1, r3
 8001384:	480c      	ldr	r0, [pc, #48]	; (80013b8 <MX_TIM2_Init+0xc4>)
 8001386:	f002 f91a 	bl	80035be <HAL_TIM_SlaveConfigSynchro>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001390:	f000 fa04 	bl	800179c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001398:	2300      	movs	r3, #0
 800139a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_TIM2_Init+0xc4>)
 80013a2:	f002 fca9 	bl	8003cf8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80013ac:	f000 f9f6 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3730      	adds	r7, #48	; 0x30
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000244 	.word	0x20000244

080013bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08c      	sub	sp, #48	; 0x30
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013c2:	f107 030c 	add.w	r3, r7, #12
 80013c6:	2224      	movs	r2, #36	; 0x24
 80013c8:	2100      	movs	r1, #0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 ff4e 	bl	800426c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80013d8:	4b20      	ldr	r3, [pc, #128]	; (800145c <MX_TIM4_Init+0xa0>)
 80013da:	4a21      	ldr	r2, [pc, #132]	; (8001460 <MX_TIM4_Init+0xa4>)
 80013dc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80013de:	4b1f      	ldr	r3, [pc, #124]	; (800145c <MX_TIM4_Init+0xa0>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <MX_TIM4_Init+0xa0>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80013ea:	4b1c      	ldr	r3, [pc, #112]	; (800145c <MX_TIM4_Init+0xa0>)
 80013ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	; (800145c <MX_TIM4_Init+0xa0>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f8:	4b18      	ldr	r3, [pc, #96]	; (800145c <MX_TIM4_Init+0xa0>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013fe:	2301      	movs	r3, #1
 8001400:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001406:	2301      	movs	r3, #1
 8001408:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800140a:	2300      	movs	r3, #0
 800140c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001412:	2300      	movs	r3, #0
 8001414:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001416:	2301      	movs	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	4619      	mov	r1, r3
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <MX_TIM4_Init+0xa0>)
 800142a:	f001 fd07 	bl	8002e3c <HAL_TIM_Encoder_Init>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001434:	f000 f9b2 	bl	800179c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001440:	1d3b      	adds	r3, r7, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4805      	ldr	r0, [pc, #20]	; (800145c <MX_TIM4_Init+0xa0>)
 8001446:	f002 fc57 	bl	8003cf8 <HAL_TIMEx_MasterConfigSynchronization>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001450:	f000 f9a4 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001454:	bf00      	nop
 8001456:	3730      	adds	r7, #48	; 0x30
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000028c 	.word	0x2000028c
 8001460:	40000800 	.word	0x40000800

08001464 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <MX_USART1_UART_Init+0x50>)
 800146c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001474:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	; (80014b0 <MX_USART1_UART_Init+0x4c>)
 800149c:	f002 fced 	bl	8003e7a <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014a6:	f000 f979 	bl	800179c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200002d4 	.word	0x200002d4
 80014b4:	40013800 	.word	0x40013800

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b088      	sub	sp, #32
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0310 	add.w	r3, r7, #16
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014cc:	4b1d      	ldr	r3, [pc, #116]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014ce:	699b      	ldr	r3, [r3, #24]
 80014d0:	4a1c      	ldr	r2, [pc, #112]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014d2:	f043 0320 	orr.w	r3, r3, #32
 80014d6:	6193      	str	r3, [r2, #24]
 80014d8:	4b1a      	ldr	r3, [pc, #104]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014da:	699b      	ldr	r3, [r3, #24]
 80014dc:	f003 0320 	and.w	r3, r3, #32
 80014e0:	60fb      	str	r3, [r7, #12]
 80014e2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014e6:	699b      	ldr	r3, [r3, #24]
 80014e8:	4a16      	ldr	r2, [pc, #88]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014ea:	f043 0304 	orr.w	r3, r3, #4
 80014ee:	6193      	str	r3, [r2, #24]
 80014f0:	4b14      	ldr	r3, [pc, #80]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014f2:	699b      	ldr	r3, [r3, #24]
 80014f4:	f003 0304 	and.w	r3, r3, #4
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <MX_GPIO_Init+0x8c>)
 80014fe:	699b      	ldr	r3, [r3, #24]
 8001500:	4a10      	ldr	r2, [pc, #64]	; (8001544 <MX_GPIO_Init+0x8c>)
 8001502:	f043 0308 	orr.w	r3, r3, #8
 8001506:	6193      	str	r3, [r2, #24]
 8001508:	4b0e      	ldr	r3, [pc, #56]	; (8001544 <MX_GPIO_Init+0x8c>)
 800150a:	699b      	ldr	r3, [r3, #24]
 800150c:	f003 0308 	and.w	r3, r3, #8
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|IN_A_Pin|IN_B_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	2138      	movs	r1, #56	; 0x38
 8001518:	480b      	ldr	r0, [pc, #44]	; (8001548 <MX_GPIO_Init+0x90>)
 800151a:	f000 fecb 	bl	80022b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin IN_A_Pin IN_B_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|IN_A_Pin|IN_B_Pin;
 800151e:	2338      	movs	r3, #56	; 0x38
 8001520:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2302      	movs	r3, #2
 800152c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	f107 0310 	add.w	r3, r7, #16
 8001532:	4619      	mov	r1, r3
 8001534:	4804      	ldr	r0, [pc, #16]	; (8001548 <MX_GPIO_Init+0x90>)
 8001536:	f000 fd39 	bl	8001fac <HAL_GPIO_Init>

}
 800153a:	bf00      	nop
 800153c:	3720      	adds	r7, #32
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	40010800 	.word	0x40010800

0800154c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//central control function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 800154c:	b5b0      	push	{r4, r5, r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af02      	add	r7, sp, #8
 8001552:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a67      	ldr	r2, [pc, #412]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001558:	4293      	cmp	r3, r2
 800155a:	f040 80c7 	bne.w	80016ec <HAL_TIM_PeriodElapsedCallback+0x1a0>
		 * PASSAR VELOCIDADE ATUAL E ALVO PARA A FUNÇÃO DE CÁLCULO DE PID
		 * PASSAR O RESULTADO PARA O TIMER DE PWM
		 * VERIFICAR RESULTADOS
		 * */

		currentTick = HAL_GetTick();
 800155e:	f000 fc0d 	bl	8001d7c <HAL_GetTick>
 8001562:	4603      	mov	r3, r0
 8001564:	4a64      	ldr	r2, [pc, #400]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001566:	6013      	str	r3, [r2, #0]
		//setPoint in PWM becomes encoder pulses
		//pulsesSetPoint = -(setPoint-127) * (float)HIGH_LEVEL_INPUT_TO_PWM_PERCENTAGE * MOTOR_MAX_PULSES; //high-level input to pulses (0-127)
		//pulsesSetPoint = (setPoint - 129) * (float)HIGH_LEVEL_INPUT_TO_PWM_PERCENTAGE * MOTOR_MAX_PULSES; //high-level input to pulses (129-255)

		if(pulsesSetPoint > 0){
 8001568:	4b64      	ldr	r3, [pc, #400]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f04f 0100 	mov.w	r1, #0
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff fd53 	bl	800101c <__aeabi_fcmpgt>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d002      	beq.n	8001582 <HAL_TIM_PeriodElapsedCallback+0x36>
			motorClockWise();
 800157c:	f000 f8de 	bl	800173c <motorClockWise>
 8001580:	e00e      	b.n	80015a0 <HAL_TIM_PeriodElapsedCallback+0x54>
		}
		else if(pulsesSetPoint < 0){
 8001582:	4b5e      	ldr	r3, [pc, #376]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f04f 0100 	mov.w	r1, #0
 800158a:	4618      	mov	r0, r3
 800158c:	f7ff fd28 	bl	8000fe0 <__aeabi_fcmplt>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <HAL_TIM_PeriodElapsedCallback+0x50>
			motorAntiClockWise(); //TODO: analisar comportamento para velocidades no sentido anti-horário (negativas)
 8001596:	f000 f8e1 	bl	800175c <motorAntiClockWise>
 800159a:	e001      	b.n	80015a0 <HAL_TIM_PeriodElapsedCallback+0x54>
		}
		else motorStop();
 800159c:	f000 f8ee 	bl	800177c <motorStop>

		currentStep = TIM4->CNT;
 80015a0:	4b57      	ldr	r3, [pc, #348]	; (8001700 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 80015a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a4:	4a57      	ldr	r2, [pc, #348]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015a6:	6013      	str	r3, [r2, #0]

		//current speed in pulses
		deltaSteps = currentStep - lastStep;
 80015a8:	4b56      	ldr	r3, [pc, #344]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	4a56      	ldr	r2, [pc, #344]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80015b4:	6013      	str	r3, [r2, #0]
		if(currentTick - lastTick != 0){ //evitar divisoes estranhas
 80015b6:	4b50      	ldr	r3, [pc, #320]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b55      	ldr	r3, [pc, #340]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	f000 808c 	beq.w	80016dc <HAL_TIM_PeriodElapsedCallback+0x190>

			speedInPulses = ((float)deltaSteps / (float)(currentTick - lastTick)) * 1000; //multiplies by 1000 for ms to s
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fb13 	bl	8000bf4 <__aeabi_ui2f>
 80015ce:	4604      	mov	r4, r0
 80015d0:	4b49      	ldr	r3, [pc, #292]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	4b4e      	ldr	r3, [pc, #312]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fb0a 	bl	8000bf4 <__aeabi_ui2f>
 80015e0:	4603      	mov	r3, r0
 80015e2:	4619      	mov	r1, r3
 80015e4:	4620      	mov	r0, r4
 80015e6:	f7ff fc11 	bl	8000e0c <__aeabi_fdiv>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4949      	ldr	r1, [pc, #292]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff fb58 	bl	8000ca4 <__aeabi_fmul>
 80015f4:	4603      	mov	r3, r0
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80015fa:	601a      	str	r2, [r3, #0]
			pastTime += (float)(currentTick - lastTick) / 1000; //tempo decorrido em segundos
 80015fc:	4b3e      	ldr	r3, [pc, #248]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b43      	ldr	r3, [pc, #268]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff faf4 	bl	8000bf4 <__aeabi_ui2f>
 800160c:	4603      	mov	r3, r0
 800160e:	4941      	ldr	r1, [pc, #260]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fbfb 	bl	8000e0c <__aeabi_fdiv>
 8001616:	4603      	mov	r3, r0
 8001618:	461a      	mov	r2, r3
 800161a:	4b40      	ldr	r3, [pc, #256]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4619      	mov	r1, r3
 8001620:	4610      	mov	r0, r2
 8001622:	f7ff fa37 	bl	8000a94 <__addsf3>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b3c      	ldr	r3, [pc, #240]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800162c:	601a      	str	r2, [r3, #0]

			if(pastTime > 20){ //espera 20 segundos antes de mudar o controle
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	493b      	ldr	r1, [pc, #236]	; (8001720 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fcf1 	bl	800101c <__aeabi_fcmpgt>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d002      	beq.n	8001646 <HAL_TIM_PeriodElapsedCallback+0xfa>
				pulsesSetPoint = 877.5681;
 8001640:	4b2e      	ldr	r3, [pc, #184]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001642:	4a38      	ldr	r2, [pc, #224]	; (8001724 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001644:	601a      	str	r2, [r3, #0]
			}

			duty += computePwmValue(pulsesSetPoint, speedInPulses, &controller);
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a33      	ldr	r2, [pc, #204]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800164c:	6811      	ldr	r1, [r2, #0]
 800164e:	4a36      	ldr	r2, [pc, #216]	; (8001728 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f8c3 	bl	80017dc <computePwmValue>
 8001656:	4602      	mov	r2, r0
 8001658:	4b34      	ldr	r3, [pc, #208]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4619      	mov	r1, r3
 800165e:	4610      	mov	r0, r2
 8001660:	f7ff fa18 	bl	8000a94 <__addsf3>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b30      	ldr	r3, [pc, #192]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800166a:	601a      	str	r2, [r3, #0]
			if(duty > 699){
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	492f      	ldr	r1, [pc, #188]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fcd2 	bl	800101c <__aeabi_fcmpgt>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d003      	beq.n	8001686 <HAL_TIM_PeriodElapsedCallback+0x13a>
				duty = 699;
 800167e:	4b2b      	ldr	r3, [pc, #172]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001680:	4a2b      	ldr	r2, [pc, #172]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	e00d      	b.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x156>
			}
			else if(duty < 0){
 8001686:	4b29      	ldr	r3, [pc, #164]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff fca6 	bl	8000fe0 <__aeabi_fcmplt>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d003      	beq.n	80016a2 <HAL_TIM_PeriodElapsedCallback+0x156>
				duty = 0;
 800169a:	4b24      	ldr	r3, [pc, #144]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 800169c:	f04f 0200 	mov.w	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
			}
			//atualização no PWM
			//CCR EM 699 -> DUTY CYCLE 100%
			//CCR EM 0 -> DUTY CYCLE 0%
			TIM1->CCR4 = duty;
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4c23      	ldr	r4, [pc, #140]	; (8001734 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7ff fcc1 	bl	8001030 <__aeabi_f2uiz>
 80016ae:	4603      	mov	r3, r0
 80016b0:	6423      	str	r3, [r4, #64]	; 0x40

//			printf("PWM: %ld dutyCycle: %f\r\n", TIM1->CCR4, duty);
			printf("%f %f\n", speedInPulses, pastTime); //formatted for python script (graphic)
 80016b2:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7fe feb6 	bl	8000428 <__aeabi_f2d>
 80016bc:	4604      	mov	r4, r0
 80016be:	460d      	mov	r5, r1
 80016c0:	4b16      	ldr	r3, [pc, #88]	; (800171c <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe feaf 	bl	8000428 <__aeabi_f2d>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	e9cd 2300 	strd	r2, r3, [sp]
 80016d2:	4622      	mov	r2, r4
 80016d4:	462b      	mov	r3, r5
 80016d6:	4818      	ldr	r0, [pc, #96]	; (8001738 <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 80016d8:	f003 fa30 	bl	8004b3c <iprintf>

		}
		//updates for next interruption
		lastStep = currentStep;
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a09      	ldr	r2, [pc, #36]	; (8001708 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80016e2:	6013      	str	r3, [r2, #0]
		lastTick = currentTick;
 80016e4:	4b04      	ldr	r3, [pc, #16]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a09      	ldr	r2, [pc, #36]	; (8001710 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80016ea:	6013      	str	r3, [r2, #0]
	}
}
 80016ec:	bf00      	nop
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bdb0      	pop	{r4, r5, r7, pc}
 80016f4:	20000244 	.word	0x20000244
 80016f8:	20000330 	.word	0x20000330
 80016fc:	20000000 	.word	0x20000000
 8001700:	40000800 	.word	0x40000800
 8001704:	2000031c 	.word	0x2000031c
 8001708:	20000320 	.word	0x20000320
 800170c:	20000324 	.word	0x20000324
 8001710:	20000334 	.word	0x20000334
 8001714:	447a0000 	.word	0x447a0000
 8001718:	20000328 	.word	0x20000328
 800171c:	2000032c 	.word	0x2000032c
 8001720:	41a00000 	.word	0x41a00000
 8001724:	445b645c 	.word	0x445b645c
 8001728:	20000338 	.word	0x20000338
 800172c:	20000354 	.word	0x20000354
 8001730:	442ec000 	.word	0x442ec000
 8001734:	40012c00 	.word	0x40012c00
 8001738:	08006ce0 	.word	0x08006ce0

0800173c <motorClockWise>:

/**
 * IN A: ON
 * IN B: OFF
 * */
void motorClockWise(){
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	2110      	movs	r1, #16
 8001744:	4804      	ldr	r0, [pc, #16]	; (8001758 <motorClockWise+0x1c>)
 8001746:	f000 fdb5 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2120      	movs	r1, #32
 800174e:	4802      	ldr	r0, [pc, #8]	; (8001758 <motorClockWise+0x1c>)
 8001750:	f000 fdb0 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40010800 	.word	0x40010800

0800175c <motorAntiClockWise>:

/**
 * IN A: OFF
 * IN B: ON
 * */
void motorAntiClockWise(){
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_RESET);
 8001760:	2200      	movs	r2, #0
 8001762:	2110      	movs	r1, #16
 8001764:	4804      	ldr	r0, [pc, #16]	; (8001778 <motorAntiClockWise+0x1c>)
 8001766:	f000 fda5 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2120      	movs	r1, #32
 800176e:	4802      	ldr	r0, [pc, #8]	; (8001778 <motorAntiClockWise+0x1c>)
 8001770:	f000 fda0 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8001774:	bf00      	nop
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40010800 	.word	0x40010800

0800177c <motorStop>:
/**
 * IN A: OFF
 * IN B: OFF
 * */
//brakes to GND
void motorStop(){
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	2110      	movs	r1, #16
 8001784:	4804      	ldr	r0, [pc, #16]	; (8001798 <motorStop+0x1c>)
 8001786:	f000 fd95 	bl	80022b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_RESET);
 800178a:	2200      	movs	r2, #0
 800178c:	2120      	movs	r1, #32
 800178e:	4802      	ldr	r0, [pc, #8]	; (8001798 <motorStop+0x1c>)
 8001790:	f000 fd90 	bl	80022b4 <HAL_GPIO_WritePin>
}
 8001794:	bf00      	nop
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40010800 	.word	0x40010800

0800179c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017a0:	b672      	cpsid	i
}
 80017a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <Error_Handler+0x8>

080017a6 <pidInit>:

#include <stdio.h>

//the min and max values should consider the duty cycle %
//example: if the minValue is 10% duty cycle, the minimalPwm must be a value that reflects it
void pidInit(Pid* p, float minimalPwm, float maximumPwm, float kp, float ki, float kd){
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
 80017b2:	603b      	str	r3, [r7, #0]
    p->max = maximumPwm;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	60da      	str	r2, [r3, #12]
    p->min = minimalPwm;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	68ba      	ldr	r2, [r7, #8]
 80017be:	611a      	str	r2, [r3, #16]
    p->kp = kp;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	683a      	ldr	r2, [r7, #0]
 80017c4:	601a      	str	r2, [r3, #0]
    p->ki = ki;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	605a      	str	r2, [r3, #4]
    p->kd = kd;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	609a      	str	r2, [r3, #8]
}
 80017d2:	bf00      	nop
 80017d4:	3714      	adds	r7, #20
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <computePwmValue>:
/// @brief given current and target speds, computes PWM increment
/// @param setPoint target speed in encoder pulses
/// @param feedBackValue current speeed in encoder pulses
/// @param p PID controller
/// @return increment to PWM
float computePwmValue(float setPoint, float feedBackValue, Pid* p){
 80017dc:	b590      	push	{r4, r7, lr}
 80017de:	b087      	sub	sp, #28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
    float pastError = p->error;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	695b      	ldr	r3, [r3, #20]
 80017ec:	613b      	str	r3, [r7, #16]
    p->error = setPoint - feedBackValue; //get current error
 80017ee:	68b9      	ldr	r1, [r7, #8]
 80017f0:	68f8      	ldr	r0, [r7, #12]
 80017f2:	f7ff f94d 	bl	8000a90 <__aeabi_fsub>
 80017f6:	4603      	mov	r3, r0
 80017f8:	461a      	mov	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	615a      	str	r2, [r3, #20]
    p->integralValue += p->error; //update integralError
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	699a      	ldr	r2, [r3, #24]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	695b      	ldr	r3, [r3, #20]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f7ff f943 	bl	8000a94 <__addsf3>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	619a      	str	r2, [r3, #24]

    float result = 0;
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
    //calculate pwm output
    result = p->kp * p->error; + p->ki * p->integralValue + p->kd * (pastError - p->error);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	695b      	ldr	r3, [r3, #20]
 8001824:	4619      	mov	r1, r3
 8001826:	4610      	mov	r0, r2
 8001828:	f7ff fa3c 	bl	8000ca4 <__aeabi_fmul>
 800182c:	4603      	mov	r3, r0
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	4619      	mov	r1, r3
 800183a:	4610      	mov	r0, r2
 800183c:	f7ff fa32 	bl	8000ca4 <__aeabi_fmul>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689c      	ldr	r4, [r3, #8]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	4619      	mov	r1, r3
 800184a:	6938      	ldr	r0, [r7, #16]
 800184c:	f7ff f920 	bl	8000a90 <__aeabi_fsub>
 8001850:	4603      	mov	r3, r0
 8001852:	4619      	mov	r1, r3
 8001854:	4620      	mov	r0, r4
 8001856:	f7ff fa25 	bl	8000ca4 <__aeabi_fmul>

    //deals with limit values
    if(result > p->max) result = p->max;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	4619      	mov	r1, r3
 8001860:	6978      	ldr	r0, [r7, #20]
 8001862:	f7ff fbdb 	bl	800101c <__aeabi_fcmpgt>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d003      	beq.n	8001874 <computePwmValue+0x98>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	617b      	str	r3, [r7, #20]
 8001872:	e00b      	b.n	800188c <computePwmValue+0xb0>
    else if(result < p->min) result = p->min;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	4619      	mov	r1, r3
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff fbb0 	bl	8000fe0 <__aeabi_fcmplt>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d002      	beq.n	800188c <computePwmValue+0xb0>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	617b      	str	r3, [r7, #20]

    //printf("%f\r\n", result);
    return result;
 800188c:	697b      	ldr	r3, [r7, #20]

}
 800188e:	4618      	mov	r0, r3
 8001890:	371c      	adds	r7, #28
 8001892:	46bd      	mov	sp, r7
 8001894:	bd90      	pop	{r4, r7, pc}
	...

08001898 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800189e:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_MspInit+0x40>)
 80018a0:	699b      	ldr	r3, [r3, #24]
 80018a2:	4a0d      	ldr	r2, [pc, #52]	; (80018d8 <HAL_MspInit+0x40>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	6193      	str	r3, [r2, #24]
 80018aa:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_MspInit+0x40>)
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018b6:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_MspInit+0x40>)
 80018b8:	69db      	ldr	r3, [r3, #28]
 80018ba:	4a07      	ldr	r2, [pc, #28]	; (80018d8 <HAL_MspInit+0x40>)
 80018bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018c0:	61d3      	str	r3, [r2, #28]
 80018c2:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <HAL_MspInit+0x40>)
 80018c4:	69db      	ldr	r3, [r3, #28]
 80018c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ca:	603b      	str	r3, [r7, #0]
 80018cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000

080018dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a16      	ldr	r2, [pc, #88]	; (8001944 <HAL_TIM_Base_MspInit+0x68>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d10c      	bne.n	8001908 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_TIM_Base_MspInit+0x6c>)
 80018f0:	699b      	ldr	r3, [r3, #24]
 80018f2:	4a15      	ldr	r2, [pc, #84]	; (8001948 <HAL_TIM_Base_MspInit+0x6c>)
 80018f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018f8:	6193      	str	r3, [r2, #24]
 80018fa:	4b13      	ldr	r3, [pc, #76]	; (8001948 <HAL_TIM_Base_MspInit+0x6c>)
 80018fc:	699b      	ldr	r3, [r3, #24]
 80018fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001906:	e018      	b.n	800193a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001910:	d113      	bne.n	800193a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001912:	4b0d      	ldr	r3, [pc, #52]	; (8001948 <HAL_TIM_Base_MspInit+0x6c>)
 8001914:	69db      	ldr	r3, [r3, #28]
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <HAL_TIM_Base_MspInit+0x6c>)
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	61d3      	str	r3, [r2, #28]
 800191e:	4b0a      	ldr	r3, [pc, #40]	; (8001948 <HAL_TIM_Base_MspInit+0x6c>)
 8001920:	69db      	ldr	r3, [r3, #28]
 8001922:	f003 0301 	and.w	r3, r3, #1
 8001926:	60bb      	str	r3, [r7, #8]
 8001928:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	2100      	movs	r1, #0
 800192e:	201c      	movs	r0, #28
 8001930:	f000 fb05 	bl	8001f3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001934:	201c      	movs	r0, #28
 8001936:	f000 fb1e 	bl	8001f76 <HAL_NVIC_EnableIRQ>
}
 800193a:	bf00      	nop
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40012c00 	.word	0x40012c00
 8001948:	40021000 	.word	0x40021000

0800194c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0310 	add.w	r3, r7, #16
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a15      	ldr	r2, [pc, #84]	; (80019bc <HAL_TIM_Encoder_MspInit+0x70>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d123      	bne.n	80019b4 <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_TIM_Encoder_MspInit+0x74>)
 800196e:	69db      	ldr	r3, [r3, #28]
 8001970:	4a13      	ldr	r2, [pc, #76]	; (80019c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8001972:	f043 0304 	orr.w	r3, r3, #4
 8001976:	61d3      	str	r3, [r2, #28]
 8001978:	4b11      	ldr	r3, [pc, #68]	; (80019c0 <HAL_TIM_Encoder_MspInit+0x74>)
 800197a:	69db      	ldr	r3, [r3, #28]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001984:	4b0e      	ldr	r3, [pc, #56]	; (80019c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	4a0d      	ldr	r2, [pc, #52]	; (80019c0 <HAL_TIM_Encoder_MspInit+0x74>)
 800198a:	f043 0308 	orr.w	r3, r3, #8
 800198e:	6193      	str	r3, [r2, #24]
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_TIM_Encoder_MspInit+0x74>)
 8001992:	699b      	ldr	r3, [r3, #24]
 8001994:	f003 0308 	and.w	r3, r3, #8
 8001998:	60bb      	str	r3, [r7, #8]
 800199a:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800199c:	23c0      	movs	r3, #192	; 0xc0
 800199e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019a0:	2300      	movs	r3, #0
 80019a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a4:	2300      	movs	r3, #0
 80019a6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	4619      	mov	r1, r3
 80019ae:	4805      	ldr	r0, [pc, #20]	; (80019c4 <HAL_TIM_Encoder_MspInit+0x78>)
 80019b0:	f000 fafc 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40000800 	.word	0x40000800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	40010c00 	.word	0x40010c00

080019c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2200      	movs	r2, #0
 80019d6:	601a      	str	r2, [r3, #0]
 80019d8:	605a      	str	r2, [r3, #4]
 80019da:	609a      	str	r2, [r3, #8]
 80019dc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <HAL_TIM_MspPostInit+0x5c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d118      	bne.n	8001a1a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_TIM_MspPostInit+0x60>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	4a0e      	ldr	r2, [pc, #56]	; (8001a28 <HAL_TIM_MspPostInit+0x60>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	6193      	str	r3, [r2, #24]
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <HAL_TIM_MspPostInit+0x60>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	60fb      	str	r3, [r7, #12]
 80019fe:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0e:	f107 0310 	add.w	r3, r7, #16
 8001a12:	4619      	mov	r1, r3
 8001a14:	4805      	ldr	r0, [pc, #20]	; (8001a2c <HAL_TIM_MspPostInit+0x64>)
 8001a16:	f000 fac9 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a1a:	bf00      	nop
 8001a1c:	3720      	adds	r7, #32
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40012c00 	.word	0x40012c00
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40010800 	.word	0x40010800

08001a30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b088      	sub	sp, #32
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
 8001a42:	609a      	str	r2, [r3, #8]
 8001a44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_UART_MspInit+0x8c>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d131      	bne.n	8001ab4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a50:	4b1b      	ldr	r3, [pc, #108]	; (8001ac0 <HAL_UART_MspInit+0x90>)
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	4a1a      	ldr	r2, [pc, #104]	; (8001ac0 <HAL_UART_MspInit+0x90>)
 8001a56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a5a:	6193      	str	r3, [r2, #24]
 8001a5c:	4b18      	ldr	r3, [pc, #96]	; (8001ac0 <HAL_UART_MspInit+0x90>)
 8001a5e:	699b      	ldr	r3, [r3, #24]
 8001a60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a68:	4b15      	ldr	r3, [pc, #84]	; (8001ac0 <HAL_UART_MspInit+0x90>)
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <HAL_UART_MspInit+0x90>)
 8001a6e:	f043 0304 	orr.w	r3, r3, #4
 8001a72:	6193      	str	r3, [r2, #24]
 8001a74:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_UART_MspInit+0x90>)
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	60bb      	str	r3, [r7, #8]
 8001a7e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a86:	2302      	movs	r3, #2
 8001a88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8e:	f107 0310 	add.w	r3, r7, #16
 8001a92:	4619      	mov	r1, r3
 8001a94:	480b      	ldr	r0, [pc, #44]	; (8001ac4 <HAL_UART_MspInit+0x94>)
 8001a96:	f000 fa89 	bl	8001fac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a9e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa8:	f107 0310 	add.w	r3, r7, #16
 8001aac:	4619      	mov	r1, r3
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <HAL_UART_MspInit+0x94>)
 8001ab0:	f000 fa7c 	bl	8001fac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ab4:	bf00      	nop
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40013800 	.word	0x40013800
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40010800 	.word	0x40010800

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bc80      	pop	{r7}
 8001af0:	4770      	bx	lr

08001af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr

08001afe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bc80      	pop	{r7}
 8001b08:	4770      	bx	lr

08001b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b0e:	f000 f923 	bl	8001d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b12:	bf00      	nop
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b1c:	4802      	ldr	r0, [pc, #8]	; (8001b28 <TIM2_IRQHandler+0x10>)
 8001b1e:	f001 fabd 	bl	800309c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000244 	.word	0x20000244

08001b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
	return 1;
 8001b30:	2301      	movs	r3, #1
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr

08001b3a <_kill>:

int _kill(int pid, int sig)
{
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b44:	f002 fb68 	bl	8004218 <__errno>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2216      	movs	r2, #22
 8001b4c:	601a      	str	r2, [r3, #0]
	return -1;
 8001b4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3708      	adds	r7, #8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}

08001b5a <_exit>:

void _exit (int status)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b082      	sub	sp, #8
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b62:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffe7 	bl	8001b3a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b6c:	e7fe      	b.n	8001b6c <_exit+0x12>

08001b6e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	60f8      	str	r0, [r7, #12]
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
 8001b7e:	e00a      	b.n	8001b96 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b80:	f3af 8000 	nop.w
 8001b84:	4601      	mov	r1, r0
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	1c5a      	adds	r2, r3, #1
 8001b8a:	60ba      	str	r2, [r7, #8]
 8001b8c:	b2ca      	uxtb	r2, r1
 8001b8e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	3301      	adds	r3, #1
 8001b94:	617b      	str	r3, [r7, #20]
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	dbf0      	blt.n	8001b80 <_read+0x12>
	}

return len;
 8001b9e:	687b      	ldr	r3, [r7, #4]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	return -1;
 8001bb0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bc80      	pop	{r7}
 8001bbc:	4770      	bx	lr

08001bbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bce:	605a      	str	r2, [r3, #4]
	return 0;
 8001bd0:	2300      	movs	r3, #0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <_isatty>:

int _isatty(int file)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
	return 1;
 8001be4:	2301      	movs	r3, #1
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b085      	sub	sp, #20
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
	return 0;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3714      	adds	r7, #20
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b086      	sub	sp, #24
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <_sbrk+0x5c>)
 8001c12:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <_sbrk+0x60>)
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c1c:	4b13      	ldr	r3, [pc, #76]	; (8001c6c <_sbrk+0x64>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c24:	4b11      	ldr	r3, [pc, #68]	; (8001c6c <_sbrk+0x64>)
 8001c26:	4a12      	ldr	r2, [pc, #72]	; (8001c70 <_sbrk+0x68>)
 8001c28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c2a:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <_sbrk+0x64>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4413      	add	r3, r2
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d207      	bcs.n	8001c48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c38:	f002 faee 	bl	8004218 <__errno>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c46:	e009      	b.n	8001c5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c48:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <_sbrk+0x64>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c4e:	4b07      	ldr	r3, [pc, #28]	; (8001c6c <_sbrk+0x64>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <_sbrk+0x64>)
 8001c58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	20005000 	.word	0x20005000
 8001c68:	00000400 	.word	0x00000400
 8001c6c:	20000358 	.word	0x20000358
 8001c70:	20000370 	.word	0x20000370

08001c74 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bc80      	pop	{r7}
 8001c7e:	4770      	bx	lr

08001c80 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c80:	f7ff fff8 	bl	8001c74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c84:	480b      	ldr	r0, [pc, #44]	; (8001cb4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c86:	490c      	ldr	r1, [pc, #48]	; (8001cb8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c88:	4a0c      	ldr	r2, [pc, #48]	; (8001cbc <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c8c:	e002      	b.n	8001c94 <LoopCopyDataInit>

08001c8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c92:	3304      	adds	r3, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c98:	d3f9      	bcc.n	8001c8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9a:	4a09      	ldr	r2, [pc, #36]	; (8001cc0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c9c:	4c09      	ldr	r4, [pc, #36]	; (8001cc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca0:	e001      	b.n	8001ca6 <LoopFillZerobss>

08001ca2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca4:	3204      	adds	r2, #4

08001ca6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ca6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ca8:	d3fb      	bcc.n	8001ca2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001caa:	f002 fabb 	bl	8004224 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001cae:	f7ff f9f5 	bl	800109c <main>
  bx lr
 8001cb2:	4770      	bx	lr
  ldr r0, =_sdata
 8001cb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cb8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001cbc:	080070f4 	.word	0x080070f4
  ldr r2, =_sbss
 8001cc0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001cc4:	20000370 	.word	0x20000370

08001cc8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC1_2_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cd0:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_Init+0x28>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a07      	ldr	r2, [pc, #28]	; (8001cf4 <HAL_Init+0x28>)
 8001cd6:	f043 0310 	orr.w	r3, r3, #16
 8001cda:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cdc:	2003      	movs	r0, #3
 8001cde:	f000 f923 	bl	8001f28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ce2:	200f      	movs	r0, #15
 8001ce4:	f000 f808 	bl	8001cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ce8:	f7ff fdd6 	bl	8001898 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40022000 	.word	0x40022000

08001cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <HAL_InitTick+0x54>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_InitTick+0x58>)
 8001d06:	781b      	ldrb	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f93b 	bl	8001f92 <HAL_SYSTICK_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e00e      	b.n	8001d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2b0f      	cmp	r3, #15
 8001d2a:	d80a      	bhi.n	8001d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	6879      	ldr	r1, [r7, #4]
 8001d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001d34:	f000 f903 	bl	8001f3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d38:	4a06      	ldr	r2, [pc, #24]	; (8001d54 <HAL_InitTick+0x5c>)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e000      	b.n	8001d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3708      	adds	r7, #8
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20000004 	.word	0x20000004
 8001d50:	2000000c 	.word	0x2000000c
 8001d54:	20000008 	.word	0x20000008

08001d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <HAL_IncTick+0x1c>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	461a      	mov	r2, r3
 8001d62:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <HAL_IncTick+0x20>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4413      	add	r3, r2
 8001d68:	4a03      	ldr	r2, [pc, #12]	; (8001d78 <HAL_IncTick+0x20>)
 8001d6a:	6013      	str	r3, [r2, #0]
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bc80      	pop	{r7}
 8001d72:	4770      	bx	lr
 8001d74:	2000000c 	.word	0x2000000c
 8001d78:	2000035c 	.word	0x2000035c

08001d7c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d80:	4b02      	ldr	r3, [pc, #8]	; (8001d8c <HAL_GetTick+0x10>)
 8001d82:	681b      	ldr	r3, [r3, #0]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr
 8001d8c:	2000035c 	.word	0x2000035c

08001d90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d90:	b480      	push	{r7}
 8001d92:	b085      	sub	sp, #20
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f003 0307 	and.w	r3, r3, #7
 8001d9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da0:	4b0c      	ldr	r3, [pc, #48]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001da2:	68db      	ldr	r3, [r3, #12]
 8001da4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dac:	4013      	ands	r3, r2
 8001dae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db4:	68bb      	ldr	r3, [r7, #8]
 8001db6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc2:	4a04      	ldr	r2, [pc, #16]	; (8001dd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	60d3      	str	r3, [r2, #12]
}
 8001dc8:	bf00      	nop
 8001dca:	3714      	adds	r7, #20
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bc80      	pop	{r7}
 8001dd0:	4770      	bx	lr
 8001dd2:	bf00      	nop
 8001dd4:	e000ed00 	.word	0xe000ed00

08001dd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ddc:	4b04      	ldr	r3, [pc, #16]	; (8001df0 <__NVIC_GetPriorityGrouping+0x18>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	0a1b      	lsrs	r3, r3, #8
 8001de2:	f003 0307 	and.w	r3, r3, #7
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bc80      	pop	{r7}
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	e000ed00 	.word	0xe000ed00

08001df4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b083      	sub	sp, #12
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	db0b      	blt.n	8001e1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e06:	79fb      	ldrb	r3, [r7, #7]
 8001e08:	f003 021f 	and.w	r2, r3, #31
 8001e0c:	4906      	ldr	r1, [pc, #24]	; (8001e28 <__NVIC_EnableIRQ+0x34>)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	095b      	lsrs	r3, r3, #5
 8001e14:	2001      	movs	r0, #1
 8001e16:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e1e:	bf00      	nop
 8001e20:	370c      	adds	r7, #12
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bc80      	pop	{r7}
 8001e26:	4770      	bx	lr
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bc80      	pop	{r7}
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bc80      	pop	{r7}
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3b01      	subs	r3, #1
 8001ef0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef4:	d301      	bcc.n	8001efa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e00f      	b.n	8001f1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <SysTick_Config+0x40>)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f02:	210f      	movs	r1, #15
 8001f04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f08:	f7ff ff90 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <SysTick_Config+0x40>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f12:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <SysTick_Config+0x40>)
 8001f14:	2207      	movs	r2, #7
 8001f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	e000e010 	.word	0xe000e010

08001f28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f30:	6878      	ldr	r0, [r7, #4]
 8001f32:	f7ff ff2d 	bl	8001d90 <__NVIC_SetPriorityGrouping>
}
 8001f36:	bf00      	nop
 8001f38:	3708      	adds	r7, #8
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b086      	sub	sp, #24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4603      	mov	r3, r0
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
 8001f4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff42 	bl	8001dd8 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff90 	bl	8001e80 <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5f 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff35 	bl	8001df4 <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa2 	bl	8001ee4 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
	...

08001fac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b08b      	sub	sp, #44	; 0x2c
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fbe:	e169      	b.n	8002294 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	69fa      	ldr	r2, [r7, #28]
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	f040 8158 	bne.w	800228e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	4a9a      	ldr	r2, [pc, #616]	; (800224c <HAL_GPIO_Init+0x2a0>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d05e      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8001fe8:	4a98      	ldr	r2, [pc, #608]	; (800224c <HAL_GPIO_Init+0x2a0>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d875      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8001fee:	4a98      	ldr	r2, [pc, #608]	; (8002250 <HAL_GPIO_Init+0x2a4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d058      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8001ff4:	4a96      	ldr	r2, [pc, #600]	; (8002250 <HAL_GPIO_Init+0x2a4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d86f      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8001ffa:	4a96      	ldr	r2, [pc, #600]	; (8002254 <HAL_GPIO_Init+0x2a8>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d052      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8002000:	4a94      	ldr	r2, [pc, #592]	; (8002254 <HAL_GPIO_Init+0x2a8>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d869      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8002006:	4a94      	ldr	r2, [pc, #592]	; (8002258 <HAL_GPIO_Init+0x2ac>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d04c      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 800200c:	4a92      	ldr	r2, [pc, #584]	; (8002258 <HAL_GPIO_Init+0x2ac>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d863      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8002012:	4a92      	ldr	r2, [pc, #584]	; (800225c <HAL_GPIO_Init+0x2b0>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d046      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
 8002018:	4a90      	ldr	r2, [pc, #576]	; (800225c <HAL_GPIO_Init+0x2b0>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d85d      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 800201e:	2b12      	cmp	r3, #18
 8002020:	d82a      	bhi.n	8002078 <HAL_GPIO_Init+0xcc>
 8002022:	2b12      	cmp	r3, #18
 8002024:	d859      	bhi.n	80020da <HAL_GPIO_Init+0x12e>
 8002026:	a201      	add	r2, pc, #4	; (adr r2, 800202c <HAL_GPIO_Init+0x80>)
 8002028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800202c:	080020a7 	.word	0x080020a7
 8002030:	08002081 	.word	0x08002081
 8002034:	08002093 	.word	0x08002093
 8002038:	080020d5 	.word	0x080020d5
 800203c:	080020db 	.word	0x080020db
 8002040:	080020db 	.word	0x080020db
 8002044:	080020db 	.word	0x080020db
 8002048:	080020db 	.word	0x080020db
 800204c:	080020db 	.word	0x080020db
 8002050:	080020db 	.word	0x080020db
 8002054:	080020db 	.word	0x080020db
 8002058:	080020db 	.word	0x080020db
 800205c:	080020db 	.word	0x080020db
 8002060:	080020db 	.word	0x080020db
 8002064:	080020db 	.word	0x080020db
 8002068:	080020db 	.word	0x080020db
 800206c:	080020db 	.word	0x080020db
 8002070:	08002089 	.word	0x08002089
 8002074:	0800209d 	.word	0x0800209d
 8002078:	4a79      	ldr	r2, [pc, #484]	; (8002260 <HAL_GPIO_Init+0x2b4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d013      	beq.n	80020a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800207e:	e02c      	b.n	80020da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e029      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	3304      	adds	r3, #4
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e024      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
 8002096:	3308      	adds	r3, #8
 8002098:	623b      	str	r3, [r7, #32]
          break;
 800209a:	e01f      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	330c      	adds	r3, #12
 80020a2:	623b      	str	r3, [r7, #32]
          break;
 80020a4:	e01a      	b.n	80020dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d102      	bne.n	80020b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80020ae:	2304      	movs	r3, #4
 80020b0:	623b      	str	r3, [r7, #32]
          break;
 80020b2:	e013      	b.n	80020dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d105      	bne.n	80020c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020bc:	2308      	movs	r3, #8
 80020be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69fa      	ldr	r2, [r7, #28]
 80020c4:	611a      	str	r2, [r3, #16]
          break;
 80020c6:	e009      	b.n	80020dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020c8:	2308      	movs	r3, #8
 80020ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	69fa      	ldr	r2, [r7, #28]
 80020d0:	615a      	str	r2, [r3, #20]
          break;
 80020d2:	e003      	b.n	80020dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020d4:	2300      	movs	r3, #0
 80020d6:	623b      	str	r3, [r7, #32]
          break;
 80020d8:	e000      	b.n	80020dc <HAL_GPIO_Init+0x130>
          break;
 80020da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	2bff      	cmp	r3, #255	; 0xff
 80020e0:	d801      	bhi.n	80020e6 <HAL_GPIO_Init+0x13a>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	e001      	b.n	80020ea <HAL_GPIO_Init+0x13e>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2bff      	cmp	r3, #255	; 0xff
 80020f0:	d802      	bhi.n	80020f8 <HAL_GPIO_Init+0x14c>
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	009b      	lsls	r3, r3, #2
 80020f6:	e002      	b.n	80020fe <HAL_GPIO_Init+0x152>
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	3b08      	subs	r3, #8
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	210f      	movs	r1, #15
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	401a      	ands	r2, r3
 8002110:	6a39      	ldr	r1, [r7, #32]
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	431a      	orrs	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002126:	2b00      	cmp	r3, #0
 8002128:	f000 80b1 	beq.w	800228e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800212c:	4b4d      	ldr	r3, [pc, #308]	; (8002264 <HAL_GPIO_Init+0x2b8>)
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	4a4c      	ldr	r2, [pc, #304]	; (8002264 <HAL_GPIO_Init+0x2b8>)
 8002132:	f043 0301 	orr.w	r3, r3, #1
 8002136:	6193      	str	r3, [r2, #24]
 8002138:	4b4a      	ldr	r3, [pc, #296]	; (8002264 <HAL_GPIO_Init+0x2b8>)
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002144:	4a48      	ldr	r2, [pc, #288]	; (8002268 <HAL_GPIO_Init+0x2bc>)
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	220f      	movs	r2, #15
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	68fa      	ldr	r2, [r7, #12]
 8002164:	4013      	ands	r3, r2
 8002166:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a40      	ldr	r2, [pc, #256]	; (800226c <HAL_GPIO_Init+0x2c0>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d013      	beq.n	8002198 <HAL_GPIO_Init+0x1ec>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3f      	ldr	r2, [pc, #252]	; (8002270 <HAL_GPIO_Init+0x2c4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d00d      	beq.n	8002194 <HAL_GPIO_Init+0x1e8>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3e      	ldr	r2, [pc, #248]	; (8002274 <HAL_GPIO_Init+0x2c8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d007      	beq.n	8002190 <HAL_GPIO_Init+0x1e4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3d      	ldr	r2, [pc, #244]	; (8002278 <HAL_GPIO_Init+0x2cc>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d101      	bne.n	800218c <HAL_GPIO_Init+0x1e0>
 8002188:	2303      	movs	r3, #3
 800218a:	e006      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 800218c:	2304      	movs	r3, #4
 800218e:	e004      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002190:	2302      	movs	r3, #2
 8002192:	e002      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002194:	2301      	movs	r3, #1
 8002196:	e000      	b.n	800219a <HAL_GPIO_Init+0x1ee>
 8002198:	2300      	movs	r3, #0
 800219a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800219c:	f002 0203 	and.w	r2, r2, #3
 80021a0:	0092      	lsls	r2, r2, #2
 80021a2:	4093      	lsls	r3, r2
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021aa:	492f      	ldr	r1, [pc, #188]	; (8002268 <HAL_GPIO_Init+0x2bc>)
 80021ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ae:	089b      	lsrs	r3, r3, #2
 80021b0:	3302      	adds	r3, #2
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021c4:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_GPIO_Init+0x2d0>)
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	492c      	ldr	r1, [pc, #176]	; (800227c <HAL_GPIO_Init+0x2d0>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	608b      	str	r3, [r1, #8]
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021d2:	4b2a      	ldr	r3, [pc, #168]	; (800227c <HAL_GPIO_Init+0x2d0>)
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	43db      	mvns	r3, r3
 80021da:	4928      	ldr	r1, [pc, #160]	; (800227c <HAL_GPIO_Init+0x2d0>)
 80021dc:	4013      	ands	r3, r2
 80021de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d006      	beq.n	80021fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021ec:	4b23      	ldr	r3, [pc, #140]	; (800227c <HAL_GPIO_Init+0x2d0>)
 80021ee:	68da      	ldr	r2, [r3, #12]
 80021f0:	4922      	ldr	r1, [pc, #136]	; (800227c <HAL_GPIO_Init+0x2d0>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	60cb      	str	r3, [r1, #12]
 80021f8:	e006      	b.n	8002208 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021fa:	4b20      	ldr	r3, [pc, #128]	; (800227c <HAL_GPIO_Init+0x2d0>)
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	43db      	mvns	r3, r3
 8002202:	491e      	ldr	r1, [pc, #120]	; (800227c <HAL_GPIO_Init+0x2d0>)
 8002204:	4013      	ands	r3, r2
 8002206:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d006      	beq.n	8002222 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002214:	4b19      	ldr	r3, [pc, #100]	; (800227c <HAL_GPIO_Init+0x2d0>)
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4918      	ldr	r1, [pc, #96]	; (800227c <HAL_GPIO_Init+0x2d0>)
 800221a:	69bb      	ldr	r3, [r7, #24]
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]
 8002220:	e006      	b.n	8002230 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002222:	4b16      	ldr	r3, [pc, #88]	; (800227c <HAL_GPIO_Init+0x2d0>)
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	43db      	mvns	r3, r3
 800222a:	4914      	ldr	r1, [pc, #80]	; (800227c <HAL_GPIO_Init+0x2d0>)
 800222c:	4013      	ands	r3, r2
 800222e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d021      	beq.n	8002280 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <HAL_GPIO_Init+0x2d0>)
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	490e      	ldr	r1, [pc, #56]	; (800227c <HAL_GPIO_Init+0x2d0>)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]
 8002248:	e021      	b.n	800228e <HAL_GPIO_Init+0x2e2>
 800224a:	bf00      	nop
 800224c:	10320000 	.word	0x10320000
 8002250:	10310000 	.word	0x10310000
 8002254:	10220000 	.word	0x10220000
 8002258:	10210000 	.word	0x10210000
 800225c:	10120000 	.word	0x10120000
 8002260:	10110000 	.word	0x10110000
 8002264:	40021000 	.word	0x40021000
 8002268:	40010000 	.word	0x40010000
 800226c:	40010800 	.word	0x40010800
 8002270:	40010c00 	.word	0x40010c00
 8002274:	40011000 	.word	0x40011000
 8002278:	40011400 	.word	0x40011400
 800227c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_GPIO_Init+0x304>)
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	69bb      	ldr	r3, [r7, #24]
 8002286:	43db      	mvns	r3, r3
 8002288:	4909      	ldr	r1, [pc, #36]	; (80022b0 <HAL_GPIO_Init+0x304>)
 800228a:	4013      	ands	r3, r2
 800228c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	3301      	adds	r3, #1
 8002292:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	fa22 f303 	lsr.w	r3, r2, r3
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f47f ae8e 	bne.w	8001fc0 <HAL_GPIO_Init+0x14>
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	372c      	adds	r7, #44	; 0x2c
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	40010400 	.word	0x40010400

080022b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	460b      	mov	r3, r1
 80022be:	807b      	strh	r3, [r7, #2]
 80022c0:	4613      	mov	r3, r2
 80022c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022c4:	787b      	ldrb	r3, [r7, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d003      	beq.n	80022d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022ca:	887a      	ldrh	r2, [r7, #2]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022d0:	e003      	b.n	80022da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	041a      	lsls	r2, r3, #16
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	611a      	str	r2, [r3, #16]
}
 80022da:	bf00      	nop
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	bc80      	pop	{r7}
 80022e2:	4770      	bx	lr

080022e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e272      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 0301 	and.w	r3, r3, #1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	f000 8087 	beq.w	8002412 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002304:	4b92      	ldr	r3, [pc, #584]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f003 030c 	and.w	r3, r3, #12
 800230c:	2b04      	cmp	r3, #4
 800230e:	d00c      	beq.n	800232a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002310:	4b8f      	ldr	r3, [pc, #572]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	2b08      	cmp	r3, #8
 800231a:	d112      	bne.n	8002342 <HAL_RCC_OscConfig+0x5e>
 800231c:	4b8c      	ldr	r3, [pc, #560]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d10b      	bne.n	8002342 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800232a:	4b89      	ldr	r3, [pc, #548]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d06c      	beq.n	8002410 <HAL_RCC_OscConfig+0x12c>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d168      	bne.n	8002410 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e24c      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x76>
 800234c:	4b80      	ldr	r3, [pc, #512]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a7f      	ldr	r2, [pc, #508]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002356:	6013      	str	r3, [r2, #0]
 8002358:	e02e      	b.n	80023b8 <HAL_RCC_OscConfig+0xd4>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x98>
 8002362:	4b7b      	ldr	r3, [pc, #492]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a7a      	ldr	r2, [pc, #488]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002368:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800236c:	6013      	str	r3, [r2, #0]
 800236e:	4b78      	ldr	r3, [pc, #480]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a77      	ldr	r2, [pc, #476]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002374:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e01d      	b.n	80023b8 <HAL_RCC_OscConfig+0xd4>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002384:	d10c      	bne.n	80023a0 <HAL_RCC_OscConfig+0xbc>
 8002386:	4b72      	ldr	r3, [pc, #456]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a71      	ldr	r2, [pc, #452]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800238c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002390:	6013      	str	r3, [r2, #0]
 8002392:	4b6f      	ldr	r3, [pc, #444]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a6e      	ldr	r2, [pc, #440]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239c:	6013      	str	r3, [r2, #0]
 800239e:	e00b      	b.n	80023b8 <HAL_RCC_OscConfig+0xd4>
 80023a0:	4b6b      	ldr	r3, [pc, #428]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a6a      	ldr	r2, [pc, #424]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023aa:	6013      	str	r3, [r2, #0]
 80023ac:	4b68      	ldr	r3, [pc, #416]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a67      	ldr	r2, [pc, #412]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d013      	beq.n	80023e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c0:	f7ff fcdc 	bl	8001d7c <HAL_GetTick>
 80023c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023c8:	f7ff fcd8 	bl	8001d7c <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e200      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023da:	4b5d      	ldr	r3, [pc, #372]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCC_OscConfig+0xe4>
 80023e6:	e014      	b.n	8002412 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7ff fcc8 	bl	8001d7c <HAL_GetTick>
 80023ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	e008      	b.n	8002402 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023f0:	f7ff fcc4 	bl	8001d7c <HAL_GetTick>
 80023f4:	4602      	mov	r2, r0
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	1ad3      	subs	r3, r2, r3
 80023fa:	2b64      	cmp	r3, #100	; 0x64
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e1ec      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002402:	4b53      	ldr	r3, [pc, #332]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f0      	bne.n	80023f0 <HAL_RCC_OscConfig+0x10c>
 800240e:	e000      	b.n	8002412 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d063      	beq.n	80024e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800241e:	4b4c      	ldr	r3, [pc, #304]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	f003 030c 	and.w	r3, r3, #12
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	f003 030c 	and.w	r3, r3, #12
 8002432:	2b08      	cmp	r3, #8
 8002434:	d11c      	bne.n	8002470 <HAL_RCC_OscConfig+0x18c>
 8002436:	4b46      	ldr	r3, [pc, #280]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d116      	bne.n	8002470 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002442:	4b43      	ldr	r3, [pc, #268]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <HAL_RCC_OscConfig+0x176>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d001      	beq.n	800245a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e1c0      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800245a:	4b3d      	ldr	r3, [pc, #244]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4939      	ldr	r1, [pc, #228]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800246a:	4313      	orrs	r3, r2
 800246c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800246e:	e03a      	b.n	80024e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	691b      	ldr	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d020      	beq.n	80024ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7ff fc7d 	bl	8001d7c <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002486:	f7ff fc79 	bl	8001d7c <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e1a1      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002498:	4b2d      	ldr	r3, [pc, #180]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a4:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	695b      	ldr	r3, [r3, #20]
 80024b0:	00db      	lsls	r3, r3, #3
 80024b2:	4927      	ldr	r1, [pc, #156]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	600b      	str	r3, [r1, #0]
 80024b8:	e015      	b.n	80024e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ba:	4b26      	ldr	r3, [pc, #152]	; (8002554 <HAL_RCC_OscConfig+0x270>)
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024c0:	f7ff fc5c 	bl	8001d7c <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024c8:	f7ff fc58 	bl	8001d7c <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e180      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024da:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d1f0      	bne.n	80024c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0308 	and.w	r3, r3, #8
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d03a      	beq.n	8002568 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d019      	beq.n	800252e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <HAL_RCC_OscConfig+0x274>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002500:	f7ff fc3c 	bl	8001d7c <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002508:	f7ff fc38 	bl	8001d7c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b02      	cmp	r3, #2
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e160      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800251a:	4b0d      	ldr	r3, [pc, #52]	; (8002550 <HAL_RCC_OscConfig+0x26c>)
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	f003 0302 	and.w	r3, r3, #2
 8002522:	2b00      	cmp	r3, #0
 8002524:	d0f0      	beq.n	8002508 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002526:	2001      	movs	r0, #1
 8002528:	f000 face 	bl	8002ac8 <RCC_Delay>
 800252c:	e01c      	b.n	8002568 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800252e:	4b0a      	ldr	r3, [pc, #40]	; (8002558 <HAL_RCC_OscConfig+0x274>)
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002534:	f7ff fc22 	bl	8001d7c <HAL_GetTick>
 8002538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253a:	e00f      	b.n	800255c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800253c:	f7ff fc1e 	bl	8001d7c <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	2b02      	cmp	r3, #2
 8002548:	d908      	bls.n	800255c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800254a:	2303      	movs	r3, #3
 800254c:	e146      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	42420000 	.word	0x42420000
 8002558:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	4b92      	ldr	r3, [pc, #584]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800255e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1e9      	bne.n	800253c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	f000 80a6 	beq.w	80026c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800257a:	4b8b      	ldr	r3, [pc, #556]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800257c:	69db      	ldr	r3, [r3, #28]
 800257e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d10d      	bne.n	80025a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002586:	4b88      	ldr	r3, [pc, #544]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a87      	ldr	r2, [pc, #540]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800258c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]
 8002592:	4b85      	ldr	r3, [pc, #532]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800259a:	60bb      	str	r3, [r7, #8]
 800259c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800259e:	2301      	movs	r3, #1
 80025a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a2:	4b82      	ldr	r3, [pc, #520]	; (80027ac <HAL_RCC_OscConfig+0x4c8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d118      	bne.n	80025e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ae:	4b7f      	ldr	r3, [pc, #508]	; (80027ac <HAL_RCC_OscConfig+0x4c8>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a7e      	ldr	r2, [pc, #504]	; (80027ac <HAL_RCC_OscConfig+0x4c8>)
 80025b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025ba:	f7ff fbdf 	bl	8001d7c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025c2:	f7ff fbdb 	bl	8001d7c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b64      	cmp	r3, #100	; 0x64
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e103      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025d4:	4b75      	ldr	r3, [pc, #468]	; (80027ac <HAL_RCC_OscConfig+0x4c8>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	68db      	ldr	r3, [r3, #12]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d106      	bne.n	80025f6 <HAL_RCC_OscConfig+0x312>
 80025e8:	4b6f      	ldr	r3, [pc, #444]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4a6e      	ldr	r2, [pc, #440]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6213      	str	r3, [r2, #32]
 80025f4:	e02d      	b.n	8002652 <HAL_RCC_OscConfig+0x36e>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10c      	bne.n	8002618 <HAL_RCC_OscConfig+0x334>
 80025fe:	4b6a      	ldr	r3, [pc, #424]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002600:	6a1b      	ldr	r3, [r3, #32]
 8002602:	4a69      	ldr	r2, [pc, #420]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	6213      	str	r3, [r2, #32]
 800260a:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800260c:	6a1b      	ldr	r3, [r3, #32]
 800260e:	4a66      	ldr	r2, [pc, #408]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002610:	f023 0304 	bic.w	r3, r3, #4
 8002614:	6213      	str	r3, [r2, #32]
 8002616:	e01c      	b.n	8002652 <HAL_RCC_OscConfig+0x36e>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d10c      	bne.n	800263a <HAL_RCC_OscConfig+0x356>
 8002620:	4b61      	ldr	r3, [pc, #388]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4a60      	ldr	r2, [pc, #384]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	4b5e      	ldr	r3, [pc, #376]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4a5d      	ldr	r2, [pc, #372]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002632:	f043 0301 	orr.w	r3, r3, #1
 8002636:	6213      	str	r3, [r2, #32]
 8002638:	e00b      	b.n	8002652 <HAL_RCC_OscConfig+0x36e>
 800263a:	4b5b      	ldr	r3, [pc, #364]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800263c:	6a1b      	ldr	r3, [r3, #32]
 800263e:	4a5a      	ldr	r2, [pc, #360]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6213      	str	r3, [r2, #32]
 8002646:	4b58      	ldr	r3, [pc, #352]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	4a57      	ldr	r2, [pc, #348]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	f023 0304 	bic.w	r3, r3, #4
 8002650:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d015      	beq.n	8002686 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265a:	f7ff fb8f 	bl	8001d7c <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002660:	e00a      	b.n	8002678 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002662:	f7ff fb8b 	bl	8001d7c <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002670:	4293      	cmp	r3, r2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e0b1      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002678:	4b4b      	ldr	r3, [pc, #300]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0ee      	beq.n	8002662 <HAL_RCC_OscConfig+0x37e>
 8002684:	e014      	b.n	80026b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002686:	f7ff fb79 	bl	8001d7c <HAL_GetTick>
 800268a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800268c:	e00a      	b.n	80026a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800268e:	f7ff fb75 	bl	8001d7c <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	f241 3288 	movw	r2, #5000	; 0x1388
 800269c:	4293      	cmp	r3, r2
 800269e:	d901      	bls.n	80026a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e09b      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a4:	4b40      	ldr	r3, [pc, #256]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	f003 0302 	and.w	r3, r3, #2
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1ee      	bne.n	800268e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026b0:	7dfb      	ldrb	r3, [r7, #23]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d105      	bne.n	80026c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b6:	4b3c      	ldr	r3, [pc, #240]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4a3b      	ldr	r2, [pc, #236]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 80026bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	69db      	ldr	r3, [r3, #28]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	f000 8087 	beq.w	80027da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026cc:	4b36      	ldr	r3, [pc, #216]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d061      	beq.n	800279c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69db      	ldr	r3, [r3, #28]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d146      	bne.n	800276e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e0:	4b33      	ldr	r3, [pc, #204]	; (80027b0 <HAL_RCC_OscConfig+0x4cc>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e6:	f7ff fb49 	bl	8001d7c <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7ff fb45 	bl	8001d7c <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e06d      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002700:	4b29      	ldr	r3, [pc, #164]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002714:	d108      	bne.n	8002728 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	4921      	ldr	r1, [pc, #132]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	4313      	orrs	r3, r2
 8002726:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002728:	4b1f      	ldr	r3, [pc, #124]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a19      	ldr	r1, [r3, #32]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	430b      	orrs	r3, r1
 800273a:	491b      	ldr	r1, [pc, #108]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <HAL_RCC_OscConfig+0x4cc>)
 8002742:	2201      	movs	r2, #1
 8002744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002746:	f7ff fb19 	bl	8001d7c <HAL_GetTick>
 800274a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800274e:	f7ff fb15 	bl	8001d7c <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b02      	cmp	r3, #2
 800275a:	d901      	bls.n	8002760 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e03d      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d0f0      	beq.n	800274e <HAL_RCC_OscConfig+0x46a>
 800276c:	e035      	b.n	80027da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_RCC_OscConfig+0x4cc>)
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002774:	f7ff fb02 	bl	8001d7c <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277c:	f7ff fafe 	bl	8001d7c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e026      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_RCC_OscConfig+0x4c4>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1f0      	bne.n	800277c <HAL_RCC_OscConfig+0x498>
 800279a:	e01e      	b.n	80027da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69db      	ldr	r3, [r3, #28]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d107      	bne.n	80027b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e019      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
 80027a8:	40021000 	.word	0x40021000
 80027ac:	40007000 	.word	0x40007000
 80027b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80027b4:	4b0b      	ldr	r3, [pc, #44]	; (80027e4 <HAL_RCC_OscConfig+0x500>)
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6a1b      	ldr	r3, [r3, #32]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d106      	bne.n	80027d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000

080027e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d101      	bne.n	80027fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0d0      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027fc:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	429a      	cmp	r2, r3
 8002808:	d910      	bls.n	800282c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280a:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f023 0207 	bic.w	r2, r3, #7
 8002812:	4965      	ldr	r1, [pc, #404]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	4313      	orrs	r3, r2
 8002818:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281a:	4b63      	ldr	r3, [pc, #396]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	429a      	cmp	r2, r3
 8002826:	d001      	beq.n	800282c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e0b8      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f003 0302 	and.w	r3, r3, #2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d020      	beq.n	800287a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0304 	and.w	r3, r3, #4
 8002840:	2b00      	cmp	r3, #0
 8002842:	d005      	beq.n	8002850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002844:	4b59      	ldr	r3, [pc, #356]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	4a58      	ldr	r2, [pc, #352]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800284e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b00      	cmp	r3, #0
 800285a:	d005      	beq.n	8002868 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800285c:	4b53      	ldr	r3, [pc, #332]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a52      	ldr	r2, [pc, #328]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002862:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002866:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	494d      	ldr	r1, [pc, #308]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002876:	4313      	orrs	r3, r2
 8002878:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d040      	beq.n	8002908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	2b01      	cmp	r3, #1
 800288c:	d107      	bne.n	800289e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800288e:	4b47      	ldr	r3, [pc, #284]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d115      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e07f      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	2b02      	cmp	r3, #2
 80028a4:	d107      	bne.n	80028b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028a6:	4b41      	ldr	r3, [pc, #260]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e073      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028b6:	4b3d      	ldr	r3, [pc, #244]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0302 	and.w	r3, r3, #2
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d101      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06b      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028c6:	4b39      	ldr	r3, [pc, #228]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f023 0203 	bic.w	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	4936      	ldr	r1, [pc, #216]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028d8:	f7ff fa50 	bl	8001d7c <HAL_GetTick>
 80028dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7ff fa4c 	bl	8001d7c <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e053      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028f6:	4b2d      	ldr	r3, [pc, #180]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 020c 	and.w	r2, r3, #12
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	429a      	cmp	r2, r3
 8002906:	d1eb      	bne.n	80028e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d210      	bcs.n	8002938 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b24      	ldr	r3, [pc, #144]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 0207 	bic.w	r2, r3, #7
 800291e:	4922      	ldr	r1, [pc, #136]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b20      	ldr	r3, [pc, #128]	; (80029a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e032      	b.n	800299e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d008      	beq.n	8002956 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4b19      	ldr	r3, [pc, #100]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	4916      	ldr	r1, [pc, #88]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d009      	beq.n	8002976 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002962:	4b12      	ldr	r3, [pc, #72]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	691b      	ldr	r3, [r3, #16]
 800296e:	00db      	lsls	r3, r3, #3
 8002970:	490e      	ldr	r1, [pc, #56]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 8002972:	4313      	orrs	r3, r2
 8002974:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002976:	f000 f821 	bl	80029bc <HAL_RCC_GetSysClockFreq>
 800297a:	4602      	mov	r2, r0
 800297c:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_RCC_ClockConfig+0x1c4>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	091b      	lsrs	r3, r3, #4
 8002982:	f003 030f 	and.w	r3, r3, #15
 8002986:	490a      	ldr	r1, [pc, #40]	; (80029b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002988:	5ccb      	ldrb	r3, [r1, r3]
 800298a:	fa22 f303 	lsr.w	r3, r2, r3
 800298e:	4a09      	ldr	r2, [pc, #36]	; (80029b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002992:	4b09      	ldr	r3, [pc, #36]	; (80029b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4618      	mov	r0, r3
 8002998:	f7ff f9ae 	bl	8001cf8 <HAL_InitTick>

  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40022000 	.word	0x40022000
 80029ac:	40021000 	.word	0x40021000
 80029b0:	08006ce8 	.word	0x08006ce8
 80029b4:	20000004 	.word	0x20000004
 80029b8:	20000008 	.word	0x20000008

080029bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	60fb      	str	r3, [r7, #12]
 80029c6:	2300      	movs	r3, #0
 80029c8:	60bb      	str	r3, [r7, #8]
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
 80029ce:	2300      	movs	r3, #0
 80029d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029d6:	4b1e      	ldr	r3, [pc, #120]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x94>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 030c 	and.w	r3, r3, #12
 80029e2:	2b04      	cmp	r3, #4
 80029e4:	d002      	beq.n	80029ec <HAL_RCC_GetSysClockFreq+0x30>
 80029e6:	2b08      	cmp	r3, #8
 80029e8:	d003      	beq.n	80029f2 <HAL_RCC_GetSysClockFreq+0x36>
 80029ea:	e027      	b.n	8002a3c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029ec:	4b19      	ldr	r3, [pc, #100]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ee:	613b      	str	r3, [r7, #16]
      break;
 80029f0:	e027      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	0c9b      	lsrs	r3, r3, #18
 80029f6:	f003 030f 	and.w	r3, r3, #15
 80029fa:	4a17      	ldr	r2, [pc, #92]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029fc:	5cd3      	ldrb	r3, [r2, r3]
 80029fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d010      	beq.n	8002a2c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_RCC_GetSysClockFreq+0x94>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	0c5b      	lsrs	r3, r3, #17
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	4a11      	ldr	r2, [pc, #68]	; (8002a5c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a16:	5cd3      	ldrb	r3, [r2, r3]
 8002a18:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a1e:	fb03 f202 	mul.w	r2, r3, r2
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a28:	617b      	str	r3, [r7, #20]
 8002a2a:	e004      	b.n	8002a36 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	4a0c      	ldr	r2, [pc, #48]	; (8002a60 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a30:	fb02 f303 	mul.w	r3, r2, r3
 8002a34:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	613b      	str	r3, [r7, #16]
      break;
 8002a3a:	e002      	b.n	8002a42 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a3e:	613b      	str	r3, [r7, #16]
      break;
 8002a40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a42:	693b      	ldr	r3, [r7, #16]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	371c      	adds	r7, #28
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bc80      	pop	{r7}
 8002a4c:	4770      	bx	lr
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000
 8002a54:	007a1200 	.word	0x007a1200
 8002a58:	08006d00 	.word	0x08006d00
 8002a5c:	08006d10 	.word	0x08006d10
 8002a60:	003d0900 	.word	0x003d0900

08002a64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a68:	4b02      	ldr	r3, [pc, #8]	; (8002a74 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr
 8002a74:	20000004 	.word	0x20000004

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a7c:	f7ff fff2 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	0a1b      	lsrs	r3, r3, #8
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40021000 	.word	0x40021000
 8002a9c:	08006cf8 	.word	0x08006cf8

08002aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002aa4:	f7ff ffde 	bl	8002a64 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	0adb      	lsrs	r3, r3, #11
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4903      	ldr	r1, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	08006cf8 	.word	0x08006cf8

08002ac8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ad0:	4b0a      	ldr	r3, [pc, #40]	; (8002afc <RCC_Delay+0x34>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0a      	ldr	r2, [pc, #40]	; (8002b00 <RCC_Delay+0x38>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	0a5b      	lsrs	r3, r3, #9
 8002adc:	687a      	ldr	r2, [r7, #4]
 8002ade:	fb02 f303 	mul.w	r3, r2, r3
 8002ae2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ae4:	bf00      	nop
  }
  while (Delay --);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1e5a      	subs	r2, r3, #1
 8002aea:	60fa      	str	r2, [r7, #12]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1f9      	bne.n	8002ae4 <RCC_Delay+0x1c>
}
 8002af0:	bf00      	nop
 8002af2:	bf00      	nop
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	20000004 	.word	0x20000004
 8002b00:	10624dd3 	.word	0x10624dd3

08002b04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e041      	b.n	8002b9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d106      	bne.n	8002b30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fe fed6 	bl	80018dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2202      	movs	r2, #2
 8002b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681a      	ldr	r2, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	3304      	adds	r3, #4
 8002b40:	4619      	mov	r1, r3
 8002b42:	4610      	mov	r0, r2
 8002b44:	f000 fda2 	bl	800368c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
	...

08002ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b085      	sub	sp, #20
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d001      	beq.n	8002bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e03a      	b.n	8002c32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f042 0201 	orr.w	r2, r2, #1
 8002bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a18      	ldr	r2, [pc, #96]	; (8002c3c <HAL_TIM_Base_Start_IT+0x98>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d00e      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x58>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be6:	d009      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x58>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <HAL_TIM_Base_Start_IT+0x9c>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d004      	beq.n	8002bfc <HAL_TIM_Base_Start_IT+0x58>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a13      	ldr	r2, [pc, #76]	; (8002c44 <HAL_TIM_Base_Start_IT+0xa0>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d111      	bne.n	8002c20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b06      	cmp	r3, #6
 8002c0c:	d010      	beq.n	8002c30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f042 0201 	orr.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1e:	e007      	b.n	8002c30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 0201 	orr.w	r2, r2, #1
 8002c2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3714      	adds	r7, #20
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr
 8002c3c:	40012c00 	.word	0x40012c00
 8002c40:	40000400 	.word	0x40000400
 8002c44:	40000800 	.word	0x40000800

08002c48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e041      	b.n	8002cde <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d106      	bne.n	8002c74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f000 f839 	bl	8002ce6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3304      	adds	r3, #4
 8002c84:	4619      	mov	r1, r3
 8002c86:	4610      	mov	r0, r2
 8002c88:	f000 fd00 	bl	800368c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002cee:	bf00      	nop
 8002cf0:	370c      	adds	r7, #12
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d109      	bne.n	8002d1c <HAL_TIM_PWM_Start+0x24>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e022      	b.n	8002d62 <HAL_TIM_PWM_Start+0x6a>
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	2b04      	cmp	r3, #4
 8002d20:	d109      	bne.n	8002d36 <HAL_TIM_PWM_Start+0x3e>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e015      	b.n	8002d62 <HAL_TIM_PWM_Start+0x6a>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d109      	bne.n	8002d50 <HAL_TIM_PWM_Start+0x58>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	bf14      	ite	ne
 8002d48:	2301      	movne	r3, #1
 8002d4a:	2300      	moveq	r3, #0
 8002d4c:	b2db      	uxtb	r3, r3
 8002d4e:	e008      	b.n	8002d62 <HAL_TIM_PWM_Start+0x6a>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	bf14      	ite	ne
 8002d5c:	2301      	movne	r3, #1
 8002d5e:	2300      	moveq	r3, #0
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e05e      	b.n	8002e28 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d104      	bne.n	8002d7a <HAL_TIM_PWM_Start+0x82>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2202      	movs	r2, #2
 8002d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d78:	e013      	b.n	8002da2 <HAL_TIM_PWM_Start+0xaa>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	2b04      	cmp	r3, #4
 8002d7e:	d104      	bne.n	8002d8a <HAL_TIM_PWM_Start+0x92>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d88:	e00b      	b.n	8002da2 <HAL_TIM_PWM_Start+0xaa>
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d104      	bne.n	8002d9a <HAL_TIM_PWM_Start+0xa2>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2202      	movs	r2, #2
 8002d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d98:	e003      	b.n	8002da2 <HAL_TIM_PWM_Start+0xaa>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2202      	movs	r2, #2
 8002d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2201      	movs	r2, #1
 8002da8:	6839      	ldr	r1, [r7, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 ff7f 	bl	8003cae <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a1e      	ldr	r2, [pc, #120]	; (8002e30 <HAL_TIM_PWM_Start+0x138>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d107      	bne.n	8002dca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a18      	ldr	r2, [pc, #96]	; (8002e30 <HAL_TIM_PWM_Start+0x138>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d00e      	beq.n	8002df2 <HAL_TIM_PWM_Start+0xfa>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ddc:	d009      	beq.n	8002df2 <HAL_TIM_PWM_Start+0xfa>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a14      	ldr	r2, [pc, #80]	; (8002e34 <HAL_TIM_PWM_Start+0x13c>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d004      	beq.n	8002df2 <HAL_TIM_PWM_Start+0xfa>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a12      	ldr	r2, [pc, #72]	; (8002e38 <HAL_TIM_PWM_Start+0x140>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d111      	bne.n	8002e16 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b06      	cmp	r3, #6
 8002e02:	d010      	beq.n	8002e26 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 0201 	orr.w	r2, r2, #1
 8002e12:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e14:	e007      	b.n	8002e26 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f042 0201 	orr.w	r2, r2, #1
 8002e24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3710      	adds	r7, #16
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40012c00 	.word	0x40012c00
 8002e34:	40000400 	.word	0x40000400
 8002e38:	40000800 	.word	0x40000800

08002e3c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b086      	sub	sp, #24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e093      	b.n	8002f78 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d106      	bne.n	8002e6a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f7fe fd71 	bl	800194c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2202      	movs	r2, #2
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6812      	ldr	r2, [r2, #0]
 8002e7c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e80:	f023 0307 	bic.w	r3, r3, #7
 8002e84:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	3304      	adds	r3, #4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4610      	mov	r0, r2
 8002e92:	f000 fbfb 	bl	800368c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	699b      	ldr	r3, [r3, #24]
 8002ea4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6a1b      	ldr	r3, [r3, #32]
 8002eac:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebe:	f023 0303 	bic.w	r3, r3, #3
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	699b      	ldr	r3, [r3, #24]
 8002ecc:	021b      	lsls	r3, r3, #8
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	693a      	ldr	r2, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002edc:	f023 030c 	bic.w	r3, r3, #12
 8002ee0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ee8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	68da      	ldr	r2, [r3, #12]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	69db      	ldr	r3, [r3, #28]
 8002ef6:	021b      	lsls	r3, r3, #8
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	693a      	ldr	r2, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	011a      	lsls	r2, r3, #4
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	031b      	lsls	r3, r3, #12
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002f1a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	4313      	orrs	r3, r2
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	697a      	ldr	r2, [r7, #20]
 8002f34:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	68fa      	ldr	r2, [r7, #12]
 8002f44:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2201      	movs	r2, #1
 8002f72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3718      	adds	r7, #24
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
 8002f88:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f90:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002f98:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002fa0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002fa8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d110      	bne.n	8002fd2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fb0:	7bfb      	ldrb	r3, [r7, #15]
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d102      	bne.n	8002fbc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fb6:	7b7b      	ldrb	r3, [r7, #13]
 8002fb8:	2b01      	cmp	r3, #1
 8002fba:	d001      	beq.n	8002fc0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e069      	b.n	8003094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2202      	movs	r2, #2
 8002fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd0:	e031      	b.n	8003036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d110      	bne.n	8002ffa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002fd8:	7bbb      	ldrb	r3, [r7, #14]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d102      	bne.n	8002fe4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002fde:	7b3b      	ldrb	r3, [r7, #12]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d001      	beq.n	8002fe8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e055      	b.n	8003094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2202      	movs	r2, #2
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ff8:	e01d      	b.n	8003036 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d108      	bne.n	8003012 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003000:	7bbb      	ldrb	r3, [r7, #14]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d105      	bne.n	8003012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003006:	7b7b      	ldrb	r3, [r7, #13]
 8003008:	2b01      	cmp	r3, #1
 800300a:	d102      	bne.n	8003012 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800300c:	7b3b      	ldrb	r3, [r7, #12]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d001      	beq.n	8003016 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e03e      	b.n	8003094 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2202      	movs	r2, #2
 800301a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2202      	movs	r2, #2
 800302a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2202      	movs	r2, #2
 8003032:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_TIM_Encoder_Start+0xc4>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b04      	cmp	r3, #4
 8003040:	d008      	beq.n	8003054 <HAL_TIM_Encoder_Start+0xd4>
 8003042:	e00f      	b.n	8003064 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2201      	movs	r2, #1
 800304a:	2100      	movs	r1, #0
 800304c:	4618      	mov	r0, r3
 800304e:	f000 fe2e 	bl	8003cae <TIM_CCxChannelCmd>
      break;
 8003052:	e016      	b.n	8003082 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2201      	movs	r2, #1
 800305a:	2104      	movs	r1, #4
 800305c:	4618      	mov	r0, r3
 800305e:	f000 fe26 	bl	8003cae <TIM_CCxChannelCmd>
      break;
 8003062:	e00e      	b.n	8003082 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2201      	movs	r2, #1
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fe1e 	bl	8003cae <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2201      	movs	r2, #1
 8003078:	2104      	movs	r1, #4
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fe17 	bl	8003cae <TIM_CCxChannelCmd>
      break;
 8003080:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3710      	adds	r7, #16
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	691b      	ldr	r3, [r3, #16]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d122      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68db      	ldr	r3, [r3, #12]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d11b      	bne.n	80030f8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f06f 0202 	mvn.w	r2, #2
 80030c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2201      	movs	r2, #1
 80030ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0303 	and.w	r3, r3, #3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 fab8 	bl	8003654 <HAL_TIM_IC_CaptureCallback>
 80030e4:	e005      	b.n	80030f2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 faab 	bl	8003642 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 faba 	bl	8003666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2200      	movs	r2, #0
 80030f6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	2b04      	cmp	r3, #4
 8003104:	d122      	bne.n	800314c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f003 0304 	and.w	r3, r3, #4
 8003110:	2b04      	cmp	r3, #4
 8003112:	d11b      	bne.n	800314c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0204 	mvn.w	r2, #4
 800311c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2202      	movs	r2, #2
 8003122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	699b      	ldr	r3, [r3, #24]
 800312a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 fa8e 	bl	8003654 <HAL_TIM_IC_CaptureCallback>
 8003138:	e005      	b.n	8003146 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa81 	bl	8003642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003140:	6878      	ldr	r0, [r7, #4]
 8003142:	f000 fa90 	bl	8003666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b08      	cmp	r3, #8
 8003158:	d122      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	f003 0308 	and.w	r3, r3, #8
 8003164:	2b08      	cmp	r3, #8
 8003166:	d11b      	bne.n	80031a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0208 	mvn.w	r2, #8
 8003170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2204      	movs	r2, #4
 8003176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	69db      	ldr	r3, [r3, #28]
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d003      	beq.n	800318e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 fa64 	bl	8003654 <HAL_TIM_IC_CaptureCallback>
 800318c:	e005      	b.n	800319a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fa57 	bl	8003642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 fa66 	bl	8003666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	691b      	ldr	r3, [r3, #16]
 80031a6:	f003 0310 	and.w	r3, r3, #16
 80031aa:	2b10      	cmp	r3, #16
 80031ac:	d122      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	f003 0310 	and.w	r3, r3, #16
 80031b8:	2b10      	cmp	r3, #16
 80031ba:	d11b      	bne.n	80031f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f06f 0210 	mvn.w	r2, #16
 80031c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2208      	movs	r2, #8
 80031ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 fa3a 	bl	8003654 <HAL_TIM_IC_CaptureCallback>
 80031e0:	e005      	b.n	80031ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 fa2d 	bl	8003642 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 fa3c 	bl	8003666 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	691b      	ldr	r3, [r3, #16]
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d10e      	bne.n	8003220 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b01      	cmp	r3, #1
 800320e:	d107      	bne.n	8003220 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0201 	mvn.w	r2, #1
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe f996 	bl	800154c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	691b      	ldr	r3, [r3, #16]
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	2b80      	cmp	r3, #128	; 0x80
 800322c:	d10e      	bne.n	800324c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003238:	2b80      	cmp	r3, #128	; 0x80
 800323a:	d107      	bne.n	800324c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fe0e 	bl	8003e68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d10e      	bne.n	8003278 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003264:	2b40      	cmp	r3, #64	; 0x40
 8003266:	d107      	bne.n	8003278 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003270:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f000 fa00 	bl	8003678 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d10e      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	f003 0320 	and.w	r3, r3, #32
 8003290:	2b20      	cmp	r3, #32
 8003292:	d107      	bne.n	80032a4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f06f 0220 	mvn.w	r2, #32
 800329c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f000 fdd9 	bl	8003e56 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032a4:	bf00      	nop
 80032a6:	3708      	adds	r7, #8
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	60f8      	str	r0, [r7, #12]
 80032b4:	60b9      	str	r1, [r7, #8]
 80032b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032b8:	2300      	movs	r3, #0
 80032ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d101      	bne.n	80032ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0ae      	b.n	8003428 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b0c      	cmp	r3, #12
 80032d6:	f200 809f 	bhi.w	8003418 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80032da:	a201      	add	r2, pc, #4	; (adr r2, 80032e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80032dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032e0:	08003315 	.word	0x08003315
 80032e4:	08003419 	.word	0x08003419
 80032e8:	08003419 	.word	0x08003419
 80032ec:	08003419 	.word	0x08003419
 80032f0:	08003355 	.word	0x08003355
 80032f4:	08003419 	.word	0x08003419
 80032f8:	08003419 	.word	0x08003419
 80032fc:	08003419 	.word	0x08003419
 8003300:	08003397 	.word	0x08003397
 8003304:	08003419 	.word	0x08003419
 8003308:	08003419 	.word	0x08003419
 800330c:	08003419 	.word	0x08003419
 8003310:	080033d7 	.word	0x080033d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fa18 	bl	8003750 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0208 	orr.w	r2, r2, #8
 800332e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	699a      	ldr	r2, [r3, #24]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f022 0204 	bic.w	r2, r2, #4
 800333e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6999      	ldr	r1, [r3, #24]
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	430a      	orrs	r2, r1
 8003350:	619a      	str	r2, [r3, #24]
      break;
 8003352:	e064      	b.n	800341e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	4618      	mov	r0, r3
 800335c:	f000 fa5e 	bl	800381c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699a      	ldr	r2, [r3, #24]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800336e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	699a      	ldr	r2, [r3, #24]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800337e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6999      	ldr	r1, [r3, #24]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	691b      	ldr	r3, [r3, #16]
 800338a:	021a      	lsls	r2, r3, #8
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	619a      	str	r2, [r3, #24]
      break;
 8003394:	e043      	b.n	800341e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68b9      	ldr	r1, [r7, #8]
 800339c:	4618      	mov	r0, r3
 800339e:	f000 faa7 	bl	80038f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69da      	ldr	r2, [r3, #28]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0208 	orr.w	r2, r2, #8
 80033b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	69da      	ldr	r2, [r3, #28]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f022 0204 	bic.w	r2, r2, #4
 80033c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69d9      	ldr	r1, [r3, #28]
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	61da      	str	r2, [r3, #28]
      break;
 80033d4:	e023      	b.n	800341e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	4618      	mov	r0, r3
 80033de:	f000 faf1 	bl	80039c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	69da      	ldr	r2, [r3, #28]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	69da      	ldr	r2, [r3, #28]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003400:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	69d9      	ldr	r1, [r3, #28]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	691b      	ldr	r3, [r3, #16]
 800340c:	021a      	lsls	r2, r3, #8
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	61da      	str	r2, [r3, #28]
      break;
 8003416:	e002      	b.n	800341e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	75fb      	strb	r3, [r7, #23]
      break;
 800341c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003426:	7dfb      	ldrb	r3, [r7, #23]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3718      	adds	r7, #24
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_TIM_ConfigClockSource+0x1c>
 8003448:	2302      	movs	r3, #2
 800344a:	e0b4      	b.n	80035b6 <HAL_TIM_ConfigClockSource+0x186>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2202      	movs	r2, #2
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800346a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003472:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68ba      	ldr	r2, [r7, #8]
 800347a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003484:	d03e      	beq.n	8003504 <HAL_TIM_ConfigClockSource+0xd4>
 8003486:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800348a:	f200 8087 	bhi.w	800359c <HAL_TIM_ConfigClockSource+0x16c>
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003492:	f000 8086 	beq.w	80035a2 <HAL_TIM_ConfigClockSource+0x172>
 8003496:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800349a:	d87f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 800349c:	2b70      	cmp	r3, #112	; 0x70
 800349e:	d01a      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0xa6>
 80034a0:	2b70      	cmp	r3, #112	; 0x70
 80034a2:	d87b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034a4:	2b60      	cmp	r3, #96	; 0x60
 80034a6:	d050      	beq.n	800354a <HAL_TIM_ConfigClockSource+0x11a>
 80034a8:	2b60      	cmp	r3, #96	; 0x60
 80034aa:	d877      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034ac:	2b50      	cmp	r3, #80	; 0x50
 80034ae:	d03c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0xfa>
 80034b0:	2b50      	cmp	r3, #80	; 0x50
 80034b2:	d873      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034b4:	2b40      	cmp	r3, #64	; 0x40
 80034b6:	d058      	beq.n	800356a <HAL_TIM_ConfigClockSource+0x13a>
 80034b8:	2b40      	cmp	r3, #64	; 0x40
 80034ba:	d86f      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034bc:	2b30      	cmp	r3, #48	; 0x30
 80034be:	d064      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15a>
 80034c0:	2b30      	cmp	r3, #48	; 0x30
 80034c2:	d86b      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d060      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15a>
 80034c8:	2b20      	cmp	r3, #32
 80034ca:	d867      	bhi.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d05c      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15a>
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d05a      	beq.n	800358a <HAL_TIM_ConfigClockSource+0x15a>
 80034d4:	e062      	b.n	800359c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6899      	ldr	r1, [r3, #8]
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f000 fbc3 	bl	8003c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80034f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	609a      	str	r2, [r3, #8]
      break;
 8003502:	e04f      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6818      	ldr	r0, [r3, #0]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	6899      	ldr	r1, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685a      	ldr	r2, [r3, #4]
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f000 fbac 	bl	8003c70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	689a      	ldr	r2, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003526:	609a      	str	r2, [r3, #8]
      break;
 8003528:	e03c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6818      	ldr	r0, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	6859      	ldr	r1, [r3, #4]
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	461a      	mov	r2, r3
 8003538:	f000 fb23 	bl	8003b82 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2150      	movs	r1, #80	; 0x50
 8003542:	4618      	mov	r0, r3
 8003544:	f000 fb7a 	bl	8003c3c <TIM_ITRx_SetConfig>
      break;
 8003548:	e02c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6818      	ldr	r0, [r3, #0]
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	6859      	ldr	r1, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	68db      	ldr	r3, [r3, #12]
 8003556:	461a      	mov	r2, r3
 8003558:	f000 fb41 	bl	8003bde <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2160      	movs	r1, #96	; 0x60
 8003562:	4618      	mov	r0, r3
 8003564:	f000 fb6a 	bl	8003c3c <TIM_ITRx_SetConfig>
      break;
 8003568:	e01c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6818      	ldr	r0, [r3, #0]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	461a      	mov	r2, r3
 8003578:	f000 fb03 	bl	8003b82 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	2140      	movs	r1, #64	; 0x40
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fb5a 	bl	8003c3c <TIM_ITRx_SetConfig>
      break;
 8003588:	e00c      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4619      	mov	r1, r3
 8003594:	4610      	mov	r0, r2
 8003596:	f000 fb51 	bl	8003c3c <TIM_ITRx_SetConfig>
      break;
 800359a:	e003      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	73fb      	strb	r3, [r7, #15]
      break;
 80035a0:	e000      	b.n	80035a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80035a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80035b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b082      	sub	sp, #8
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
 80035c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_TIM_SlaveConfigSynchro+0x18>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e031      	b.n	800363a <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035e6:	6839      	ldr	r1, [r7, #0]
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 fa39 	bl	8003a60 <TIM_SlaveTimer_SetConfig>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d009      	beq.n	8003608 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e018      	b.n	800363a <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003616:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68da      	ldr	r2, [r3, #12]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003626:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003638:	2300      	movs	r3, #0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	bc80      	pop	{r7}
 8003652:	4770      	bx	lr

08003654 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003654:	b480      	push	{r7}
 8003656:	b083      	sub	sp, #12
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800365c:	bf00      	nop
 800365e:	370c      	adds	r7, #12
 8003660:	46bd      	mov	sp, r7
 8003662:	bc80      	pop	{r7}
 8003664:	4770      	bx	lr

08003666 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003666:	b480      	push	{r7}
 8003668:	b083      	sub	sp, #12
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800366e:	bf00      	nop
 8003670:	370c      	adds	r7, #12
 8003672:	46bd      	mov	sp, r7
 8003674:	bc80      	pop	{r7}
 8003676:	4770      	bx	lr

08003678 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003680:	bf00      	nop
 8003682:	370c      	adds	r7, #12
 8003684:	46bd      	mov	sp, r7
 8003686:	bc80      	pop	{r7}
 8003688:	4770      	bx	lr
	...

0800368c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a29      	ldr	r2, [pc, #164]	; (8003744 <TIM_Base_SetConfig+0xb8>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d00b      	beq.n	80036bc <TIM_Base_SetConfig+0x30>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036aa:	d007      	beq.n	80036bc <TIM_Base_SetConfig+0x30>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a26      	ldr	r2, [pc, #152]	; (8003748 <TIM_Base_SetConfig+0xbc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d003      	beq.n	80036bc <TIM_Base_SetConfig+0x30>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4a25      	ldr	r2, [pc, #148]	; (800374c <TIM_Base_SetConfig+0xc0>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	d108      	bne.n	80036ce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	68fa      	ldr	r2, [r7, #12]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1c      	ldr	r2, [pc, #112]	; (8003744 <TIM_Base_SetConfig+0xb8>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00b      	beq.n	80036ee <TIM_Base_SetConfig+0x62>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036dc:	d007      	beq.n	80036ee <TIM_Base_SetConfig+0x62>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a19      	ldr	r2, [pc, #100]	; (8003748 <TIM_Base_SetConfig+0xbc>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <TIM_Base_SetConfig+0x62>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a18      	ldr	r2, [pc, #96]	; (800374c <TIM_Base_SetConfig+0xc0>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d108      	bne.n	8003700 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a07      	ldr	r2, [pc, #28]	; (8003744 <TIM_Base_SetConfig+0xb8>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d103      	bne.n	8003734 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	615a      	str	r2, [r3, #20]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	bc80      	pop	{r7}
 8003742:	4770      	bx	lr
 8003744:	40012c00 	.word	0x40012c00
 8003748:	40000400 	.word	0x40000400
 800374c:	40000800 	.word	0x40000800

08003750 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f023 0201 	bic.w	r2, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0303 	bic.w	r3, r3, #3
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f023 0302 	bic.w	r3, r3, #2
 8003798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	4313      	orrs	r3, r2
 80037a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a1c      	ldr	r2, [pc, #112]	; (8003818 <TIM_OC1_SetConfig+0xc8>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d10c      	bne.n	80037c6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f023 0308 	bic.w	r3, r3, #8
 80037b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4313      	orrs	r3, r2
 80037bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f023 0304 	bic.w	r3, r3, #4
 80037c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	4a13      	ldr	r2, [pc, #76]	; (8003818 <TIM_OC1_SetConfig+0xc8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d111      	bne.n	80037f2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	695b      	ldr	r3, [r3, #20]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	693a      	ldr	r2, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	685a      	ldr	r2, [r3, #4]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	621a      	str	r2, [r3, #32]
}
 800380c:	bf00      	nop
 800380e:	371c      	adds	r7, #28
 8003810:	46bd      	mov	sp, r7
 8003812:	bc80      	pop	{r7}
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	40012c00 	.word	0x40012c00

0800381c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f023 0210 	bic.w	r2, r3, #16
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	021b      	lsls	r3, r3, #8
 800385a:	68fa      	ldr	r2, [r7, #12]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f023 0320 	bic.w	r3, r3, #32
 8003866:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	011b      	lsls	r3, r3, #4
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	4313      	orrs	r3, r2
 8003872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a1d      	ldr	r2, [pc, #116]	; (80038ec <TIM_OC2_SetConfig+0xd0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d10d      	bne.n	8003898 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003882:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	4313      	orrs	r3, r2
 800388e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003896:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a14      	ldr	r2, [pc, #80]	; (80038ec <TIM_OC2_SetConfig+0xd0>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d113      	bne.n	80038c8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038a0:	693b      	ldr	r3, [r7, #16]
 80038a2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038a6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038ae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	695b      	ldr	r3, [r3, #20]
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	693a      	ldr	r2, [r7, #16]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	693a      	ldr	r2, [r7, #16]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68fa      	ldr	r2, [r7, #12]
 80038d2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685a      	ldr	r2, [r3, #4]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	621a      	str	r2, [r3, #32]
}
 80038e2:	bf00      	nop
 80038e4:	371c      	adds	r7, #28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bc80      	pop	{r7}
 80038ea:	4770      	bx	lr
 80038ec:	40012c00 	.word	0x40012c00

080038f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800391e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0303 	bic.w	r3, r3, #3
 8003926:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003938:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4313      	orrs	r3, r2
 8003944:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <TIM_OC3_SetConfig+0xd0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d10d      	bne.n	800396a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003954:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	021b      	lsls	r3, r3, #8
 800395c:	697a      	ldr	r2, [r7, #20]
 800395e:	4313      	orrs	r3, r2
 8003960:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003968:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a14      	ldr	r2, [pc, #80]	; (80039c0 <TIM_OC3_SetConfig+0xd0>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d113      	bne.n	800399a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	699b      	ldr	r3, [r3, #24]
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4313      	orrs	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	685a      	ldr	r2, [r3, #4]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	697a      	ldr	r2, [r7, #20]
 80039b2:	621a      	str	r2, [r3, #32]
}
 80039b4:	bf00      	nop
 80039b6:	371c      	adds	r7, #28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bc80      	pop	{r7}
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	40012c00 	.word	0x40012c00

080039c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	021b      	lsls	r3, r3, #8
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689b      	ldr	r3, [r3, #8]
 8003a14:	031b      	lsls	r3, r3, #12
 8003a16:	693a      	ldr	r2, [r7, #16]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	; (8003a5c <TIM_OC4_SetConfig+0x98>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d109      	bne.n	8003a38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	695b      	ldr	r3, [r3, #20]
 8003a30:	019b      	lsls	r3, r3, #6
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	68fa      	ldr	r2, [r7, #12]
 8003a42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00

08003a60 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a7c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f023 0307 	bic.w	r3, r3, #7
 8003a8e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	693a      	ldr	r2, [r7, #16]
 8003aa0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	2b70      	cmp	r3, #112	; 0x70
 8003aa8:	d01a      	beq.n	8003ae0 <TIM_SlaveTimer_SetConfig+0x80>
 8003aaa:	2b70      	cmp	r3, #112	; 0x70
 8003aac:	d860      	bhi.n	8003b70 <TIM_SlaveTimer_SetConfig+0x110>
 8003aae:	2b60      	cmp	r3, #96	; 0x60
 8003ab0:	d054      	beq.n	8003b5c <TIM_SlaveTimer_SetConfig+0xfc>
 8003ab2:	2b60      	cmp	r3, #96	; 0x60
 8003ab4:	d85c      	bhi.n	8003b70 <TIM_SlaveTimer_SetConfig+0x110>
 8003ab6:	2b50      	cmp	r3, #80	; 0x50
 8003ab8:	d046      	beq.n	8003b48 <TIM_SlaveTimer_SetConfig+0xe8>
 8003aba:	2b50      	cmp	r3, #80	; 0x50
 8003abc:	d858      	bhi.n	8003b70 <TIM_SlaveTimer_SetConfig+0x110>
 8003abe:	2b40      	cmp	r3, #64	; 0x40
 8003ac0:	d019      	beq.n	8003af6 <TIM_SlaveTimer_SetConfig+0x96>
 8003ac2:	2b40      	cmp	r3, #64	; 0x40
 8003ac4:	d854      	bhi.n	8003b70 <TIM_SlaveTimer_SetConfig+0x110>
 8003ac6:	2b30      	cmp	r3, #48	; 0x30
 8003ac8:	d055      	beq.n	8003b76 <TIM_SlaveTimer_SetConfig+0x116>
 8003aca:	2b30      	cmp	r3, #48	; 0x30
 8003acc:	d850      	bhi.n	8003b70 <TIM_SlaveTimer_SetConfig+0x110>
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	d051      	beq.n	8003b76 <TIM_SlaveTimer_SetConfig+0x116>
 8003ad2:	2b20      	cmp	r3, #32
 8003ad4:	d84c      	bhi.n	8003b70 <TIM_SlaveTimer_SetConfig+0x110>
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d04d      	beq.n	8003b76 <TIM_SlaveTimer_SetConfig+0x116>
 8003ada:	2b10      	cmp	r3, #16
 8003adc:	d04b      	beq.n	8003b76 <TIM_SlaveTimer_SetConfig+0x116>
 8003ade:	e047      	b.n	8003b70 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6818      	ldr	r0, [r3, #0]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	68d9      	ldr	r1, [r3, #12]
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f000 f8be 	bl	8003c70 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003af4:	e040      	b.n	8003b78 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b05      	cmp	r3, #5
 8003afc:	d101      	bne.n	8003b02 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e03b      	b.n	8003b7a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6a1a      	ldr	r2, [r3, #32]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f022 0201 	bic.w	r2, r2, #1
 8003b18:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b28:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	68ba      	ldr	r2, [r7, #8]
 8003b32:	4313      	orrs	r3, r2
 8003b34:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68fa      	ldr	r2, [r7, #12]
 8003b44:	621a      	str	r2, [r3, #32]
      break;
 8003b46:	e017      	b.n	8003b78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6818      	ldr	r0, [r3, #0]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	6899      	ldr	r1, [r3, #8]
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	461a      	mov	r2, r3
 8003b56:	f000 f814 	bl	8003b82 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003b5a:	e00d      	b.n	8003b78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6818      	ldr	r0, [r3, #0]
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	691b      	ldr	r3, [r3, #16]
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f000 f838 	bl	8003bde <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003b6e:	e003      	b.n	8003b78 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	75fb      	strb	r3, [r7, #23]
      break;
 8003b74:	e000      	b.n	8003b78 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003b76:	bf00      	nop
  }

  return status;
 8003b78:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b087      	sub	sp, #28
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	60f8      	str	r0, [r7, #12]
 8003b8a:	60b9      	str	r1, [r7, #8]
 8003b8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	f023 0201 	bic.w	r2, r3, #1
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f023 030a 	bic.w	r3, r3, #10
 8003bbe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	693a      	ldr	r2, [r7, #16]
 8003bcc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	697a      	ldr	r2, [r7, #20]
 8003bd2:	621a      	str	r2, [r3, #32]
}
 8003bd4:	bf00      	nop
 8003bd6:	371c      	adds	r7, #28
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b087      	sub	sp, #28
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	60f8      	str	r0, [r7, #12]
 8003be6:	60b9      	str	r1, [r7, #8]
 8003be8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	6a1b      	ldr	r3, [r3, #32]
 8003bee:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6a1b      	ldr	r3, [r3, #32]
 8003bf4:	f023 0210 	bic.w	r2, r3, #16
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c08:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	031b      	lsls	r3, r3, #12
 8003c0e:	693a      	ldr	r2, [r7, #16]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c1a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	621a      	str	r2, [r3, #32]
}
 8003c32:	bf00      	nop
 8003c34:	371c      	adds	r7, #28
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr

08003c3c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
 8003c44:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c52:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c54:	683a      	ldr	r2, [r7, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	f043 0307 	orr.w	r3, r3, #7
 8003c5e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	609a      	str	r2, [r3, #8]
}
 8003c66:	bf00      	nop
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bc80      	pop	{r7}
 8003c6e:	4770      	bx	lr

08003c70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	607a      	str	r2, [r7, #4]
 8003c7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	021a      	lsls	r2, r3, #8
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	697a      	ldr	r2, [r7, #20]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	609a      	str	r2, [r3, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	371c      	adds	r7, #28
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bc80      	pop	{r7}
 8003cac:	4770      	bx	lr

08003cae <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cae:	b480      	push	{r7}
 8003cb0:	b087      	sub	sp, #28
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6a1a      	ldr	r2, [r3, #32]
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	401a      	ands	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6a1a      	ldr	r2, [r3, #32]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	f003 031f 	and.w	r3, r3, #31
 8003ce0:	6879      	ldr	r1, [r7, #4]
 8003ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ce6:	431a      	orrs	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	621a      	str	r2, [r3, #32]
}
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bc80      	pop	{r7}
 8003cf4:	4770      	bx	lr
	...

08003cf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b085      	sub	sp, #20
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d08:	2b01      	cmp	r3, #1
 8003d0a:	d101      	bne.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d0c:	2302      	movs	r3, #2
 8003d0e:	e046      	b.n	8003d9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	68fa      	ldr	r2, [r7, #12]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a16      	ldr	r2, [pc, #88]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d00e      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5c:	d009      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a12      	ldr	r2, [pc, #72]	; (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d004      	beq.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d10c      	bne.n	8003d8c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	68ba      	ldr	r2, [r7, #8]
 8003d80:	4313      	orrs	r3, r2
 8003d82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68ba      	ldr	r2, [r7, #8]
 8003d8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bc80      	pop	{r7}
 8003da6:	4770      	bx	lr
 8003da8:	40012c00 	.word	0x40012c00
 8003dac:	40000400 	.word	0x40000400
 8003db0:	40000800 	.word	0x40000800

08003db4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e03d      	b.n	8003e4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	68db      	ldr	r3, [r3, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2200      	movs	r2, #0
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3714      	adds	r7, #20
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bc80      	pop	{r7}
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bc80      	pop	{r7}
 8003e66:	4770      	bx	lr

08003e68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b082      	sub	sp, #8
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d101      	bne.n	8003e8c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	e042      	b.n	8003f12 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d106      	bne.n	8003ea6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7fd fdc5 	bl	8001a30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2224      	movs	r2, #36	; 0x24
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68da      	ldr	r2, [r3, #12]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ebc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f91c 	bl	80040fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	691a      	ldr	r2, [r3, #16]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ed2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695a      	ldr	r2, [r3, #20]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ee2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	68da      	ldr	r2, [r3, #12]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ef2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b08a      	sub	sp, #40	; 0x28
 8003f1e:	af02      	add	r7, sp, #8
 8003f20:	60f8      	str	r0, [r7, #12]
 8003f22:	60b9      	str	r1, [r7, #8]
 8003f24:	603b      	str	r3, [r7, #0]
 8003f26:	4613      	mov	r3, r2
 8003f28:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f34:	b2db      	uxtb	r3, r3
 8003f36:	2b20      	cmp	r3, #32
 8003f38:	d16d      	bne.n	8004016 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <HAL_UART_Transmit+0x2c>
 8003f40:	88fb      	ldrh	r3, [r7, #6]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e066      	b.n	8004018 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2221      	movs	r2, #33	; 0x21
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f58:	f7fd ff10 	bl	8001d7c <HAL_GetTick>
 8003f5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	88fa      	ldrh	r2, [r7, #6]
 8003f62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	88fa      	ldrh	r2, [r7, #6]
 8003f68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f72:	d108      	bne.n	8003f86 <HAL_UART_Transmit+0x6c>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d104      	bne.n	8003f86 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	61bb      	str	r3, [r7, #24]
 8003f84:	e003      	b.n	8003f8e <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f8e:	e02a      	b.n	8003fe6 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	9300      	str	r3, [sp, #0]
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	2200      	movs	r2, #0
 8003f98:	2180      	movs	r1, #128	; 0x80
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 f840 	bl	8004020 <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e036      	b.n	8004018 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	881b      	ldrh	r3, [r3, #0]
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003fbe:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	3302      	adds	r3, #2
 8003fc4:	61bb      	str	r3, [r7, #24]
 8003fc6:	e007      	b.n	8003fd8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003fc8:	69fb      	ldr	r3, [r7, #28]
 8003fca:	781a      	ldrb	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	3301      	adds	r3, #1
 8003fd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	3b01      	subs	r3, #1
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003fea:	b29b      	uxth	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1cf      	bne.n	8003f90 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	9300      	str	r3, [sp, #0]
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2140      	movs	r1, #64	; 0x40
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f810 	bl	8004020 <UART_WaitOnFlagUntilTimeout>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e006      	b.n	8004018 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	e000      	b.n	8004018 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004016:	2302      	movs	r3, #2
  }
}
 8004018:	4618      	mov	r0, r3
 800401a:	3720      	adds	r7, #32
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b090      	sub	sp, #64	; 0x40
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	603b      	str	r3, [r7, #0]
 800402c:	4613      	mov	r3, r2
 800402e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004030:	e050      	b.n	80040d4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004038:	d04c      	beq.n	80040d4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800403a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403c:	2b00      	cmp	r3, #0
 800403e:	d007      	beq.n	8004050 <UART_WaitOnFlagUntilTimeout+0x30>
 8004040:	f7fd fe9c 	bl	8001d7c <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800404c:	429a      	cmp	r2, r3
 800404e:	d241      	bcs.n	80040d4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800405a:	e853 3f00 	ldrex	r3, [r3]
 800405e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004062:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004066:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	330c      	adds	r3, #12
 800406e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004070:	637a      	str	r2, [r7, #52]	; 0x34
 8004072:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004074:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004076:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004078:	e841 2300 	strex	r3, r2, [r1]
 800407c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800407e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004080:	2b00      	cmp	r3, #0
 8004082:	d1e5      	bne.n	8004050 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3314      	adds	r3, #20
 800408a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	613b      	str	r3, [r7, #16]
   return(result);
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	63bb      	str	r3, [r7, #56]	; 0x38
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	3314      	adds	r3, #20
 80040a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80040a4:	623a      	str	r2, [r7, #32]
 80040a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a8:	69f9      	ldr	r1, [r7, #28]
 80040aa:	6a3a      	ldr	r2, [r7, #32]
 80040ac:	e841 2300 	strex	r3, r2, [r1]
 80040b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80040b2:	69bb      	ldr	r3, [r7, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d1e5      	bne.n	8004084 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2220      	movs	r2, #32
 80040bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e00f      	b.n	80040f4 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4013      	ands	r3, r2
 80040de:	68ba      	ldr	r2, [r7, #8]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	bf0c      	ite	eq
 80040e4:	2301      	moveq	r3, #1
 80040e6:	2300      	movne	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	461a      	mov	r2, r3
 80040ec:	79fb      	ldrb	r3, [r7, #7]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d09f      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	3740      	adds	r7, #64	; 0x40
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	430a      	orrs	r2, r1
 8004118:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	689a      	ldr	r2, [r3, #8]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	695b      	ldr	r3, [r3, #20]
 8004128:	4313      	orrs	r3, r2
 800412a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004136:	f023 030c 	bic.w	r3, r3, #12
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	6812      	ldr	r2, [r2, #0]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	430b      	orrs	r3, r1
 8004142:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a2c      	ldr	r2, [pc, #176]	; (8004210 <UART_SetConfig+0x114>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d103      	bne.n	800416c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004164:	f7fe fc9c 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	e002      	b.n	8004172 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800416c:	f7fe fc84 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8004170:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	4613      	mov	r3, r2
 8004176:	009b      	lsls	r3, r3, #2
 8004178:	4413      	add	r3, r2
 800417a:	009a      	lsls	r2, r3, #2
 800417c:	441a      	add	r2, r3
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	fbb2 f3f3 	udiv	r3, r2, r3
 8004188:	4a22      	ldr	r2, [pc, #136]	; (8004214 <UART_SetConfig+0x118>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	095b      	lsrs	r3, r3, #5
 8004190:	0119      	lsls	r1, r3, #4
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4613      	mov	r3, r2
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	4413      	add	r3, r2
 800419a:	009a      	lsls	r2, r3, #2
 800419c:	441a      	add	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80041a8:	4b1a      	ldr	r3, [pc, #104]	; (8004214 <UART_SetConfig+0x118>)
 80041aa:	fba3 0302 	umull	r0, r3, r3, r2
 80041ae:	095b      	lsrs	r3, r3, #5
 80041b0:	2064      	movs	r0, #100	; 0x64
 80041b2:	fb00 f303 	mul.w	r3, r0, r3
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	3332      	adds	r3, #50	; 0x32
 80041bc:	4a15      	ldr	r2, [pc, #84]	; (8004214 <UART_SetConfig+0x118>)
 80041be:	fba2 2303 	umull	r2, r3, r2, r3
 80041c2:	095b      	lsrs	r3, r3, #5
 80041c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80041c8:	4419      	add	r1, r3
 80041ca:	68fa      	ldr	r2, [r7, #12]
 80041cc:	4613      	mov	r3, r2
 80041ce:	009b      	lsls	r3, r3, #2
 80041d0:	4413      	add	r3, r2
 80041d2:	009a      	lsls	r2, r3, #2
 80041d4:	441a      	add	r2, r3
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <UART_SetConfig+0x118>)
 80041e2:	fba3 0302 	umull	r0, r3, r3, r2
 80041e6:	095b      	lsrs	r3, r3, #5
 80041e8:	2064      	movs	r0, #100	; 0x64
 80041ea:	fb00 f303 	mul.w	r3, r0, r3
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	3332      	adds	r3, #50	; 0x32
 80041f4:	4a07      	ldr	r2, [pc, #28]	; (8004214 <UART_SetConfig+0x118>)
 80041f6:	fba2 2303 	umull	r2, r3, r2, r3
 80041fa:	095b      	lsrs	r3, r3, #5
 80041fc:	f003 020f 	and.w	r2, r3, #15
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	440a      	add	r2, r1
 8004206:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40013800 	.word	0x40013800
 8004214:	51eb851f 	.word	0x51eb851f

08004218 <__errno>:
 8004218:	4b01      	ldr	r3, [pc, #4]	; (8004220 <__errno+0x8>)
 800421a:	6818      	ldr	r0, [r3, #0]
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000010 	.word	0x20000010

08004224 <__libc_init_array>:
 8004224:	b570      	push	{r4, r5, r6, lr}
 8004226:	2600      	movs	r6, #0
 8004228:	4d0c      	ldr	r5, [pc, #48]	; (800425c <__libc_init_array+0x38>)
 800422a:	4c0d      	ldr	r4, [pc, #52]	; (8004260 <__libc_init_array+0x3c>)
 800422c:	1b64      	subs	r4, r4, r5
 800422e:	10a4      	asrs	r4, r4, #2
 8004230:	42a6      	cmp	r6, r4
 8004232:	d109      	bne.n	8004248 <__libc_init_array+0x24>
 8004234:	f002 fd48 	bl	8006cc8 <_init>
 8004238:	2600      	movs	r6, #0
 800423a:	4d0a      	ldr	r5, [pc, #40]	; (8004264 <__libc_init_array+0x40>)
 800423c:	4c0a      	ldr	r4, [pc, #40]	; (8004268 <__libc_init_array+0x44>)
 800423e:	1b64      	subs	r4, r4, r5
 8004240:	10a4      	asrs	r4, r4, #2
 8004242:	42a6      	cmp	r6, r4
 8004244:	d105      	bne.n	8004252 <__libc_init_array+0x2e>
 8004246:	bd70      	pop	{r4, r5, r6, pc}
 8004248:	f855 3b04 	ldr.w	r3, [r5], #4
 800424c:	4798      	blx	r3
 800424e:	3601      	adds	r6, #1
 8004250:	e7ee      	b.n	8004230 <__libc_init_array+0xc>
 8004252:	f855 3b04 	ldr.w	r3, [r5], #4
 8004256:	4798      	blx	r3
 8004258:	3601      	adds	r6, #1
 800425a:	e7f2      	b.n	8004242 <__libc_init_array+0x1e>
 800425c:	080070ec 	.word	0x080070ec
 8004260:	080070ec 	.word	0x080070ec
 8004264:	080070ec 	.word	0x080070ec
 8004268:	080070f0 	.word	0x080070f0

0800426c <memset>:
 800426c:	4603      	mov	r3, r0
 800426e:	4402      	add	r2, r0
 8004270:	4293      	cmp	r3, r2
 8004272:	d100      	bne.n	8004276 <memset+0xa>
 8004274:	4770      	bx	lr
 8004276:	f803 1b01 	strb.w	r1, [r3], #1
 800427a:	e7f9      	b.n	8004270 <memset+0x4>

0800427c <__cvt>:
 800427c:	2b00      	cmp	r3, #0
 800427e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004282:	461f      	mov	r7, r3
 8004284:	bfbb      	ittet	lt
 8004286:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800428a:	461f      	movlt	r7, r3
 800428c:	2300      	movge	r3, #0
 800428e:	232d      	movlt	r3, #45	; 0x2d
 8004290:	b088      	sub	sp, #32
 8004292:	4614      	mov	r4, r2
 8004294:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004296:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004298:	7013      	strb	r3, [r2, #0]
 800429a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800429c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80042a0:	f023 0820 	bic.w	r8, r3, #32
 80042a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042a8:	d005      	beq.n	80042b6 <__cvt+0x3a>
 80042aa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80042ae:	d100      	bne.n	80042b2 <__cvt+0x36>
 80042b0:	3501      	adds	r5, #1
 80042b2:	2302      	movs	r3, #2
 80042b4:	e000      	b.n	80042b8 <__cvt+0x3c>
 80042b6:	2303      	movs	r3, #3
 80042b8:	aa07      	add	r2, sp, #28
 80042ba:	9204      	str	r2, [sp, #16]
 80042bc:	aa06      	add	r2, sp, #24
 80042be:	e9cd a202 	strd	sl, r2, [sp, #8]
 80042c2:	e9cd 3500 	strd	r3, r5, [sp]
 80042c6:	4622      	mov	r2, r4
 80042c8:	463b      	mov	r3, r7
 80042ca:	f000 fcdd 	bl	8004c88 <_dtoa_r>
 80042ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80042d2:	4606      	mov	r6, r0
 80042d4:	d102      	bne.n	80042dc <__cvt+0x60>
 80042d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042d8:	07db      	lsls	r3, r3, #31
 80042da:	d522      	bpl.n	8004322 <__cvt+0xa6>
 80042dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80042e0:	eb06 0905 	add.w	r9, r6, r5
 80042e4:	d110      	bne.n	8004308 <__cvt+0x8c>
 80042e6:	7833      	ldrb	r3, [r6, #0]
 80042e8:	2b30      	cmp	r3, #48	; 0x30
 80042ea:	d10a      	bne.n	8004302 <__cvt+0x86>
 80042ec:	2200      	movs	r2, #0
 80042ee:	2300      	movs	r3, #0
 80042f0:	4620      	mov	r0, r4
 80042f2:	4639      	mov	r1, r7
 80042f4:	f7fc fb58 	bl	80009a8 <__aeabi_dcmpeq>
 80042f8:	b918      	cbnz	r0, 8004302 <__cvt+0x86>
 80042fa:	f1c5 0501 	rsb	r5, r5, #1
 80042fe:	f8ca 5000 	str.w	r5, [sl]
 8004302:	f8da 3000 	ldr.w	r3, [sl]
 8004306:	4499      	add	r9, r3
 8004308:	2200      	movs	r2, #0
 800430a:	2300      	movs	r3, #0
 800430c:	4620      	mov	r0, r4
 800430e:	4639      	mov	r1, r7
 8004310:	f7fc fb4a 	bl	80009a8 <__aeabi_dcmpeq>
 8004314:	b108      	cbz	r0, 800431a <__cvt+0x9e>
 8004316:	f8cd 901c 	str.w	r9, [sp, #28]
 800431a:	2230      	movs	r2, #48	; 0x30
 800431c:	9b07      	ldr	r3, [sp, #28]
 800431e:	454b      	cmp	r3, r9
 8004320:	d307      	bcc.n	8004332 <__cvt+0xb6>
 8004322:	4630      	mov	r0, r6
 8004324:	9b07      	ldr	r3, [sp, #28]
 8004326:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004328:	1b9b      	subs	r3, r3, r6
 800432a:	6013      	str	r3, [r2, #0]
 800432c:	b008      	add	sp, #32
 800432e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004332:	1c59      	adds	r1, r3, #1
 8004334:	9107      	str	r1, [sp, #28]
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	e7f0      	b.n	800431c <__cvt+0xa0>

0800433a <__exponent>:
 800433a:	4603      	mov	r3, r0
 800433c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800433e:	2900      	cmp	r1, #0
 8004340:	f803 2b02 	strb.w	r2, [r3], #2
 8004344:	bfb6      	itet	lt
 8004346:	222d      	movlt	r2, #45	; 0x2d
 8004348:	222b      	movge	r2, #43	; 0x2b
 800434a:	4249      	neglt	r1, r1
 800434c:	2909      	cmp	r1, #9
 800434e:	7042      	strb	r2, [r0, #1]
 8004350:	dd2b      	ble.n	80043aa <__exponent+0x70>
 8004352:	f10d 0407 	add.w	r4, sp, #7
 8004356:	46a4      	mov	ip, r4
 8004358:	270a      	movs	r7, #10
 800435a:	fb91 f6f7 	sdiv	r6, r1, r7
 800435e:	460a      	mov	r2, r1
 8004360:	46a6      	mov	lr, r4
 8004362:	fb07 1516 	mls	r5, r7, r6, r1
 8004366:	2a63      	cmp	r2, #99	; 0x63
 8004368:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800436c:	4631      	mov	r1, r6
 800436e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004372:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004376:	dcf0      	bgt.n	800435a <__exponent+0x20>
 8004378:	3130      	adds	r1, #48	; 0x30
 800437a:	f1ae 0502 	sub.w	r5, lr, #2
 800437e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004382:	4629      	mov	r1, r5
 8004384:	1c44      	adds	r4, r0, #1
 8004386:	4561      	cmp	r1, ip
 8004388:	d30a      	bcc.n	80043a0 <__exponent+0x66>
 800438a:	f10d 0209 	add.w	r2, sp, #9
 800438e:	eba2 020e 	sub.w	r2, r2, lr
 8004392:	4565      	cmp	r5, ip
 8004394:	bf88      	it	hi
 8004396:	2200      	movhi	r2, #0
 8004398:	4413      	add	r3, r2
 800439a:	1a18      	subs	r0, r3, r0
 800439c:	b003      	add	sp, #12
 800439e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043a4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80043a8:	e7ed      	b.n	8004386 <__exponent+0x4c>
 80043aa:	2330      	movs	r3, #48	; 0x30
 80043ac:	3130      	adds	r1, #48	; 0x30
 80043ae:	7083      	strb	r3, [r0, #2]
 80043b0:	70c1      	strb	r1, [r0, #3]
 80043b2:	1d03      	adds	r3, r0, #4
 80043b4:	e7f1      	b.n	800439a <__exponent+0x60>
	...

080043b8 <_printf_float>:
 80043b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043bc:	b091      	sub	sp, #68	; 0x44
 80043be:	460c      	mov	r4, r1
 80043c0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80043c4:	4616      	mov	r6, r2
 80043c6:	461f      	mov	r7, r3
 80043c8:	4605      	mov	r5, r0
 80043ca:	f001 fb41 	bl	8005a50 <_localeconv_r>
 80043ce:	6803      	ldr	r3, [r0, #0]
 80043d0:	4618      	mov	r0, r3
 80043d2:	9309      	str	r3, [sp, #36]	; 0x24
 80043d4:	f7fb febc 	bl	8000150 <strlen>
 80043d8:	2300      	movs	r3, #0
 80043da:	930e      	str	r3, [sp, #56]	; 0x38
 80043dc:	f8d8 3000 	ldr.w	r3, [r8]
 80043e0:	900a      	str	r0, [sp, #40]	; 0x28
 80043e2:	3307      	adds	r3, #7
 80043e4:	f023 0307 	bic.w	r3, r3, #7
 80043e8:	f103 0208 	add.w	r2, r3, #8
 80043ec:	f894 9018 	ldrb.w	r9, [r4, #24]
 80043f0:	f8d4 b000 	ldr.w	fp, [r4]
 80043f4:	f8c8 2000 	str.w	r2, [r8]
 80043f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004400:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004404:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004408:	930b      	str	r3, [sp, #44]	; 0x2c
 800440a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800440e:	4640      	mov	r0, r8
 8004410:	4b9c      	ldr	r3, [pc, #624]	; (8004684 <_printf_float+0x2cc>)
 8004412:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004414:	f7fc fafa 	bl	8000a0c <__aeabi_dcmpun>
 8004418:	bb70      	cbnz	r0, 8004478 <_printf_float+0xc0>
 800441a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800441e:	4640      	mov	r0, r8
 8004420:	4b98      	ldr	r3, [pc, #608]	; (8004684 <_printf_float+0x2cc>)
 8004422:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004424:	f7fc fad4 	bl	80009d0 <__aeabi_dcmple>
 8004428:	bb30      	cbnz	r0, 8004478 <_printf_float+0xc0>
 800442a:	2200      	movs	r2, #0
 800442c:	2300      	movs	r3, #0
 800442e:	4640      	mov	r0, r8
 8004430:	4651      	mov	r1, sl
 8004432:	f7fc fac3 	bl	80009bc <__aeabi_dcmplt>
 8004436:	b110      	cbz	r0, 800443e <_printf_float+0x86>
 8004438:	232d      	movs	r3, #45	; 0x2d
 800443a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800443e:	4b92      	ldr	r3, [pc, #584]	; (8004688 <_printf_float+0x2d0>)
 8004440:	4892      	ldr	r0, [pc, #584]	; (800468c <_printf_float+0x2d4>)
 8004442:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004446:	bf94      	ite	ls
 8004448:	4698      	movls	r8, r3
 800444a:	4680      	movhi	r8, r0
 800444c:	2303      	movs	r3, #3
 800444e:	f04f 0a00 	mov.w	sl, #0
 8004452:	6123      	str	r3, [r4, #16]
 8004454:	f02b 0304 	bic.w	r3, fp, #4
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	4633      	mov	r3, r6
 800445c:	4621      	mov	r1, r4
 800445e:	4628      	mov	r0, r5
 8004460:	9700      	str	r7, [sp, #0]
 8004462:	aa0f      	add	r2, sp, #60	; 0x3c
 8004464:	f000 f9d4 	bl	8004810 <_printf_common>
 8004468:	3001      	adds	r0, #1
 800446a:	f040 8090 	bne.w	800458e <_printf_float+0x1d6>
 800446e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004472:	b011      	add	sp, #68	; 0x44
 8004474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004478:	4642      	mov	r2, r8
 800447a:	4653      	mov	r3, sl
 800447c:	4640      	mov	r0, r8
 800447e:	4651      	mov	r1, sl
 8004480:	f7fc fac4 	bl	8000a0c <__aeabi_dcmpun>
 8004484:	b148      	cbz	r0, 800449a <_printf_float+0xe2>
 8004486:	f1ba 0f00 	cmp.w	sl, #0
 800448a:	bfb8      	it	lt
 800448c:	232d      	movlt	r3, #45	; 0x2d
 800448e:	4880      	ldr	r0, [pc, #512]	; (8004690 <_printf_float+0x2d8>)
 8004490:	bfb8      	it	lt
 8004492:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004496:	4b7f      	ldr	r3, [pc, #508]	; (8004694 <_printf_float+0x2dc>)
 8004498:	e7d3      	b.n	8004442 <_printf_float+0x8a>
 800449a:	6863      	ldr	r3, [r4, #4]
 800449c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	d142      	bne.n	800452a <_printf_float+0x172>
 80044a4:	2306      	movs	r3, #6
 80044a6:	6063      	str	r3, [r4, #4]
 80044a8:	2200      	movs	r2, #0
 80044aa:	9206      	str	r2, [sp, #24]
 80044ac:	aa0e      	add	r2, sp, #56	; 0x38
 80044ae:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80044b2:	aa0d      	add	r2, sp, #52	; 0x34
 80044b4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80044b8:	9203      	str	r2, [sp, #12]
 80044ba:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80044be:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80044c2:	6023      	str	r3, [r4, #0]
 80044c4:	6863      	ldr	r3, [r4, #4]
 80044c6:	4642      	mov	r2, r8
 80044c8:	9300      	str	r3, [sp, #0]
 80044ca:	4628      	mov	r0, r5
 80044cc:	4653      	mov	r3, sl
 80044ce:	910b      	str	r1, [sp, #44]	; 0x2c
 80044d0:	f7ff fed4 	bl	800427c <__cvt>
 80044d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044d6:	4680      	mov	r8, r0
 80044d8:	2947      	cmp	r1, #71	; 0x47
 80044da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044dc:	d108      	bne.n	80044f0 <_printf_float+0x138>
 80044de:	1cc8      	adds	r0, r1, #3
 80044e0:	db02      	blt.n	80044e8 <_printf_float+0x130>
 80044e2:	6863      	ldr	r3, [r4, #4]
 80044e4:	4299      	cmp	r1, r3
 80044e6:	dd40      	ble.n	800456a <_printf_float+0x1b2>
 80044e8:	f1a9 0902 	sub.w	r9, r9, #2
 80044ec:	fa5f f989 	uxtb.w	r9, r9
 80044f0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80044f4:	d81f      	bhi.n	8004536 <_printf_float+0x17e>
 80044f6:	464a      	mov	r2, r9
 80044f8:	3901      	subs	r1, #1
 80044fa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80044fe:	910d      	str	r1, [sp, #52]	; 0x34
 8004500:	f7ff ff1b 	bl	800433a <__exponent>
 8004504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004506:	4682      	mov	sl, r0
 8004508:	1813      	adds	r3, r2, r0
 800450a:	2a01      	cmp	r2, #1
 800450c:	6123      	str	r3, [r4, #16]
 800450e:	dc02      	bgt.n	8004516 <_printf_float+0x15e>
 8004510:	6822      	ldr	r2, [r4, #0]
 8004512:	07d2      	lsls	r2, r2, #31
 8004514:	d501      	bpl.n	800451a <_printf_float+0x162>
 8004516:	3301      	adds	r3, #1
 8004518:	6123      	str	r3, [r4, #16]
 800451a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800451e:	2b00      	cmp	r3, #0
 8004520:	d09b      	beq.n	800445a <_printf_float+0xa2>
 8004522:	232d      	movs	r3, #45	; 0x2d
 8004524:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004528:	e797      	b.n	800445a <_printf_float+0xa2>
 800452a:	2947      	cmp	r1, #71	; 0x47
 800452c:	d1bc      	bne.n	80044a8 <_printf_float+0xf0>
 800452e:	2b00      	cmp	r3, #0
 8004530:	d1ba      	bne.n	80044a8 <_printf_float+0xf0>
 8004532:	2301      	movs	r3, #1
 8004534:	e7b7      	b.n	80044a6 <_printf_float+0xee>
 8004536:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800453a:	d118      	bne.n	800456e <_printf_float+0x1b6>
 800453c:	2900      	cmp	r1, #0
 800453e:	6863      	ldr	r3, [r4, #4]
 8004540:	dd0b      	ble.n	800455a <_printf_float+0x1a2>
 8004542:	6121      	str	r1, [r4, #16]
 8004544:	b913      	cbnz	r3, 800454c <_printf_float+0x194>
 8004546:	6822      	ldr	r2, [r4, #0]
 8004548:	07d0      	lsls	r0, r2, #31
 800454a:	d502      	bpl.n	8004552 <_printf_float+0x19a>
 800454c:	3301      	adds	r3, #1
 800454e:	440b      	add	r3, r1
 8004550:	6123      	str	r3, [r4, #16]
 8004552:	f04f 0a00 	mov.w	sl, #0
 8004556:	65a1      	str	r1, [r4, #88]	; 0x58
 8004558:	e7df      	b.n	800451a <_printf_float+0x162>
 800455a:	b913      	cbnz	r3, 8004562 <_printf_float+0x1aa>
 800455c:	6822      	ldr	r2, [r4, #0]
 800455e:	07d2      	lsls	r2, r2, #31
 8004560:	d501      	bpl.n	8004566 <_printf_float+0x1ae>
 8004562:	3302      	adds	r3, #2
 8004564:	e7f4      	b.n	8004550 <_printf_float+0x198>
 8004566:	2301      	movs	r3, #1
 8004568:	e7f2      	b.n	8004550 <_printf_float+0x198>
 800456a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800456e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004570:	4299      	cmp	r1, r3
 8004572:	db05      	blt.n	8004580 <_printf_float+0x1c8>
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	6121      	str	r1, [r4, #16]
 8004578:	07d8      	lsls	r0, r3, #31
 800457a:	d5ea      	bpl.n	8004552 <_printf_float+0x19a>
 800457c:	1c4b      	adds	r3, r1, #1
 800457e:	e7e7      	b.n	8004550 <_printf_float+0x198>
 8004580:	2900      	cmp	r1, #0
 8004582:	bfcc      	ite	gt
 8004584:	2201      	movgt	r2, #1
 8004586:	f1c1 0202 	rsble	r2, r1, #2
 800458a:	4413      	add	r3, r2
 800458c:	e7e0      	b.n	8004550 <_printf_float+0x198>
 800458e:	6823      	ldr	r3, [r4, #0]
 8004590:	055a      	lsls	r2, r3, #21
 8004592:	d407      	bmi.n	80045a4 <_printf_float+0x1ec>
 8004594:	6923      	ldr	r3, [r4, #16]
 8004596:	4642      	mov	r2, r8
 8004598:	4631      	mov	r1, r6
 800459a:	4628      	mov	r0, r5
 800459c:	47b8      	blx	r7
 800459e:	3001      	adds	r0, #1
 80045a0:	d12b      	bne.n	80045fa <_printf_float+0x242>
 80045a2:	e764      	b.n	800446e <_printf_float+0xb6>
 80045a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80045a8:	f240 80dd 	bls.w	8004766 <_printf_float+0x3ae>
 80045ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045b0:	2200      	movs	r2, #0
 80045b2:	2300      	movs	r3, #0
 80045b4:	f7fc f9f8 	bl	80009a8 <__aeabi_dcmpeq>
 80045b8:	2800      	cmp	r0, #0
 80045ba:	d033      	beq.n	8004624 <_printf_float+0x26c>
 80045bc:	2301      	movs	r3, #1
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	4a35      	ldr	r2, [pc, #212]	; (8004698 <_printf_float+0x2e0>)
 80045c4:	47b8      	blx	r7
 80045c6:	3001      	adds	r0, #1
 80045c8:	f43f af51 	beq.w	800446e <_printf_float+0xb6>
 80045cc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80045d0:	429a      	cmp	r2, r3
 80045d2:	db02      	blt.n	80045da <_printf_float+0x222>
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	07d8      	lsls	r0, r3, #31
 80045d8:	d50f      	bpl.n	80045fa <_printf_float+0x242>
 80045da:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045de:	4631      	mov	r1, r6
 80045e0:	4628      	mov	r0, r5
 80045e2:	47b8      	blx	r7
 80045e4:	3001      	adds	r0, #1
 80045e6:	f43f af42 	beq.w	800446e <_printf_float+0xb6>
 80045ea:	f04f 0800 	mov.w	r8, #0
 80045ee:	f104 091a 	add.w	r9, r4, #26
 80045f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045f4:	3b01      	subs	r3, #1
 80045f6:	4543      	cmp	r3, r8
 80045f8:	dc09      	bgt.n	800460e <_printf_float+0x256>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	079b      	lsls	r3, r3, #30
 80045fe:	f100 8102 	bmi.w	8004806 <_printf_float+0x44e>
 8004602:	68e0      	ldr	r0, [r4, #12]
 8004604:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004606:	4298      	cmp	r0, r3
 8004608:	bfb8      	it	lt
 800460a:	4618      	movlt	r0, r3
 800460c:	e731      	b.n	8004472 <_printf_float+0xba>
 800460e:	2301      	movs	r3, #1
 8004610:	464a      	mov	r2, r9
 8004612:	4631      	mov	r1, r6
 8004614:	4628      	mov	r0, r5
 8004616:	47b8      	blx	r7
 8004618:	3001      	adds	r0, #1
 800461a:	f43f af28 	beq.w	800446e <_printf_float+0xb6>
 800461e:	f108 0801 	add.w	r8, r8, #1
 8004622:	e7e6      	b.n	80045f2 <_printf_float+0x23a>
 8004624:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004626:	2b00      	cmp	r3, #0
 8004628:	dc38      	bgt.n	800469c <_printf_float+0x2e4>
 800462a:	2301      	movs	r3, #1
 800462c:	4631      	mov	r1, r6
 800462e:	4628      	mov	r0, r5
 8004630:	4a19      	ldr	r2, [pc, #100]	; (8004698 <_printf_float+0x2e0>)
 8004632:	47b8      	blx	r7
 8004634:	3001      	adds	r0, #1
 8004636:	f43f af1a 	beq.w	800446e <_printf_float+0xb6>
 800463a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800463e:	4313      	orrs	r3, r2
 8004640:	d102      	bne.n	8004648 <_printf_float+0x290>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	07d9      	lsls	r1, r3, #31
 8004646:	d5d8      	bpl.n	80045fa <_printf_float+0x242>
 8004648:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800464c:	4631      	mov	r1, r6
 800464e:	4628      	mov	r0, r5
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f af0b 	beq.w	800446e <_printf_float+0xb6>
 8004658:	f04f 0900 	mov.w	r9, #0
 800465c:	f104 0a1a 	add.w	sl, r4, #26
 8004660:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004662:	425b      	negs	r3, r3
 8004664:	454b      	cmp	r3, r9
 8004666:	dc01      	bgt.n	800466c <_printf_float+0x2b4>
 8004668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800466a:	e794      	b.n	8004596 <_printf_float+0x1de>
 800466c:	2301      	movs	r3, #1
 800466e:	4652      	mov	r2, sl
 8004670:	4631      	mov	r1, r6
 8004672:	4628      	mov	r0, r5
 8004674:	47b8      	blx	r7
 8004676:	3001      	adds	r0, #1
 8004678:	f43f aef9 	beq.w	800446e <_printf_float+0xb6>
 800467c:	f109 0901 	add.w	r9, r9, #1
 8004680:	e7ee      	b.n	8004660 <_printf_float+0x2a8>
 8004682:	bf00      	nop
 8004684:	7fefffff 	.word	0x7fefffff
 8004688:	08006d18 	.word	0x08006d18
 800468c:	08006d1c 	.word	0x08006d1c
 8004690:	08006d24 	.word	0x08006d24
 8004694:	08006d20 	.word	0x08006d20
 8004698:	08006d28 	.word	0x08006d28
 800469c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800469e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80046a0:	429a      	cmp	r2, r3
 80046a2:	bfa8      	it	ge
 80046a4:	461a      	movge	r2, r3
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	4691      	mov	r9, r2
 80046aa:	dc37      	bgt.n	800471c <_printf_float+0x364>
 80046ac:	f04f 0b00 	mov.w	fp, #0
 80046b0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046b4:	f104 021a 	add.w	r2, r4, #26
 80046b8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80046bc:	ebaa 0309 	sub.w	r3, sl, r9
 80046c0:	455b      	cmp	r3, fp
 80046c2:	dc33      	bgt.n	800472c <_printf_float+0x374>
 80046c4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046c8:	429a      	cmp	r2, r3
 80046ca:	db3b      	blt.n	8004744 <_printf_float+0x38c>
 80046cc:	6823      	ldr	r3, [r4, #0]
 80046ce:	07da      	lsls	r2, r3, #31
 80046d0:	d438      	bmi.n	8004744 <_printf_float+0x38c>
 80046d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046d4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80046d6:	eba3 020a 	sub.w	r2, r3, sl
 80046da:	eba3 0901 	sub.w	r9, r3, r1
 80046de:	4591      	cmp	r9, r2
 80046e0:	bfa8      	it	ge
 80046e2:	4691      	movge	r9, r2
 80046e4:	f1b9 0f00 	cmp.w	r9, #0
 80046e8:	dc34      	bgt.n	8004754 <_printf_float+0x39c>
 80046ea:	f04f 0800 	mov.w	r8, #0
 80046ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80046f2:	f104 0a1a 	add.w	sl, r4, #26
 80046f6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	eba3 0309 	sub.w	r3, r3, r9
 8004700:	4543      	cmp	r3, r8
 8004702:	f77f af7a 	ble.w	80045fa <_printf_float+0x242>
 8004706:	2301      	movs	r3, #1
 8004708:	4652      	mov	r2, sl
 800470a:	4631      	mov	r1, r6
 800470c:	4628      	mov	r0, r5
 800470e:	47b8      	blx	r7
 8004710:	3001      	adds	r0, #1
 8004712:	f43f aeac 	beq.w	800446e <_printf_float+0xb6>
 8004716:	f108 0801 	add.w	r8, r8, #1
 800471a:	e7ec      	b.n	80046f6 <_printf_float+0x33e>
 800471c:	4613      	mov	r3, r2
 800471e:	4631      	mov	r1, r6
 8004720:	4642      	mov	r2, r8
 8004722:	4628      	mov	r0, r5
 8004724:	47b8      	blx	r7
 8004726:	3001      	adds	r0, #1
 8004728:	d1c0      	bne.n	80046ac <_printf_float+0x2f4>
 800472a:	e6a0      	b.n	800446e <_printf_float+0xb6>
 800472c:	2301      	movs	r3, #1
 800472e:	4631      	mov	r1, r6
 8004730:	4628      	mov	r0, r5
 8004732:	920b      	str	r2, [sp, #44]	; 0x2c
 8004734:	47b8      	blx	r7
 8004736:	3001      	adds	r0, #1
 8004738:	f43f ae99 	beq.w	800446e <_printf_float+0xb6>
 800473c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800473e:	f10b 0b01 	add.w	fp, fp, #1
 8004742:	e7b9      	b.n	80046b8 <_printf_float+0x300>
 8004744:	4631      	mov	r1, r6
 8004746:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800474a:	4628      	mov	r0, r5
 800474c:	47b8      	blx	r7
 800474e:	3001      	adds	r0, #1
 8004750:	d1bf      	bne.n	80046d2 <_printf_float+0x31a>
 8004752:	e68c      	b.n	800446e <_printf_float+0xb6>
 8004754:	464b      	mov	r3, r9
 8004756:	4631      	mov	r1, r6
 8004758:	4628      	mov	r0, r5
 800475a:	eb08 020a 	add.w	r2, r8, sl
 800475e:	47b8      	blx	r7
 8004760:	3001      	adds	r0, #1
 8004762:	d1c2      	bne.n	80046ea <_printf_float+0x332>
 8004764:	e683      	b.n	800446e <_printf_float+0xb6>
 8004766:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004768:	2a01      	cmp	r2, #1
 800476a:	dc01      	bgt.n	8004770 <_printf_float+0x3b8>
 800476c:	07db      	lsls	r3, r3, #31
 800476e:	d537      	bpl.n	80047e0 <_printf_float+0x428>
 8004770:	2301      	movs	r3, #1
 8004772:	4642      	mov	r2, r8
 8004774:	4631      	mov	r1, r6
 8004776:	4628      	mov	r0, r5
 8004778:	47b8      	blx	r7
 800477a:	3001      	adds	r0, #1
 800477c:	f43f ae77 	beq.w	800446e <_printf_float+0xb6>
 8004780:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004784:	4631      	mov	r1, r6
 8004786:	4628      	mov	r0, r5
 8004788:	47b8      	blx	r7
 800478a:	3001      	adds	r0, #1
 800478c:	f43f ae6f 	beq.w	800446e <_printf_float+0xb6>
 8004790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004794:	2200      	movs	r2, #0
 8004796:	2300      	movs	r3, #0
 8004798:	f7fc f906 	bl	80009a8 <__aeabi_dcmpeq>
 800479c:	b9d8      	cbnz	r0, 80047d6 <_printf_float+0x41e>
 800479e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047a0:	f108 0201 	add.w	r2, r8, #1
 80047a4:	3b01      	subs	r3, #1
 80047a6:	4631      	mov	r1, r6
 80047a8:	4628      	mov	r0, r5
 80047aa:	47b8      	blx	r7
 80047ac:	3001      	adds	r0, #1
 80047ae:	d10e      	bne.n	80047ce <_printf_float+0x416>
 80047b0:	e65d      	b.n	800446e <_printf_float+0xb6>
 80047b2:	2301      	movs	r3, #1
 80047b4:	464a      	mov	r2, r9
 80047b6:	4631      	mov	r1, r6
 80047b8:	4628      	mov	r0, r5
 80047ba:	47b8      	blx	r7
 80047bc:	3001      	adds	r0, #1
 80047be:	f43f ae56 	beq.w	800446e <_printf_float+0xb6>
 80047c2:	f108 0801 	add.w	r8, r8, #1
 80047c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047c8:	3b01      	subs	r3, #1
 80047ca:	4543      	cmp	r3, r8
 80047cc:	dcf1      	bgt.n	80047b2 <_printf_float+0x3fa>
 80047ce:	4653      	mov	r3, sl
 80047d0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80047d4:	e6e0      	b.n	8004598 <_printf_float+0x1e0>
 80047d6:	f04f 0800 	mov.w	r8, #0
 80047da:	f104 091a 	add.w	r9, r4, #26
 80047de:	e7f2      	b.n	80047c6 <_printf_float+0x40e>
 80047e0:	2301      	movs	r3, #1
 80047e2:	4642      	mov	r2, r8
 80047e4:	e7df      	b.n	80047a6 <_printf_float+0x3ee>
 80047e6:	2301      	movs	r3, #1
 80047e8:	464a      	mov	r2, r9
 80047ea:	4631      	mov	r1, r6
 80047ec:	4628      	mov	r0, r5
 80047ee:	47b8      	blx	r7
 80047f0:	3001      	adds	r0, #1
 80047f2:	f43f ae3c 	beq.w	800446e <_printf_float+0xb6>
 80047f6:	f108 0801 	add.w	r8, r8, #1
 80047fa:	68e3      	ldr	r3, [r4, #12]
 80047fc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80047fe:	1a5b      	subs	r3, r3, r1
 8004800:	4543      	cmp	r3, r8
 8004802:	dcf0      	bgt.n	80047e6 <_printf_float+0x42e>
 8004804:	e6fd      	b.n	8004602 <_printf_float+0x24a>
 8004806:	f04f 0800 	mov.w	r8, #0
 800480a:	f104 0919 	add.w	r9, r4, #25
 800480e:	e7f4      	b.n	80047fa <_printf_float+0x442>

08004810 <_printf_common>:
 8004810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004814:	4616      	mov	r6, r2
 8004816:	4699      	mov	r9, r3
 8004818:	688a      	ldr	r2, [r1, #8]
 800481a:	690b      	ldr	r3, [r1, #16]
 800481c:	4607      	mov	r7, r0
 800481e:	4293      	cmp	r3, r2
 8004820:	bfb8      	it	lt
 8004822:	4613      	movlt	r3, r2
 8004824:	6033      	str	r3, [r6, #0]
 8004826:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800482a:	460c      	mov	r4, r1
 800482c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004830:	b10a      	cbz	r2, 8004836 <_printf_common+0x26>
 8004832:	3301      	adds	r3, #1
 8004834:	6033      	str	r3, [r6, #0]
 8004836:	6823      	ldr	r3, [r4, #0]
 8004838:	0699      	lsls	r1, r3, #26
 800483a:	bf42      	ittt	mi
 800483c:	6833      	ldrmi	r3, [r6, #0]
 800483e:	3302      	addmi	r3, #2
 8004840:	6033      	strmi	r3, [r6, #0]
 8004842:	6825      	ldr	r5, [r4, #0]
 8004844:	f015 0506 	ands.w	r5, r5, #6
 8004848:	d106      	bne.n	8004858 <_printf_common+0x48>
 800484a:	f104 0a19 	add.w	sl, r4, #25
 800484e:	68e3      	ldr	r3, [r4, #12]
 8004850:	6832      	ldr	r2, [r6, #0]
 8004852:	1a9b      	subs	r3, r3, r2
 8004854:	42ab      	cmp	r3, r5
 8004856:	dc28      	bgt.n	80048aa <_printf_common+0x9a>
 8004858:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800485c:	1e13      	subs	r3, r2, #0
 800485e:	6822      	ldr	r2, [r4, #0]
 8004860:	bf18      	it	ne
 8004862:	2301      	movne	r3, #1
 8004864:	0692      	lsls	r2, r2, #26
 8004866:	d42d      	bmi.n	80048c4 <_printf_common+0xb4>
 8004868:	4649      	mov	r1, r9
 800486a:	4638      	mov	r0, r7
 800486c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004870:	47c0      	blx	r8
 8004872:	3001      	adds	r0, #1
 8004874:	d020      	beq.n	80048b8 <_printf_common+0xa8>
 8004876:	6823      	ldr	r3, [r4, #0]
 8004878:	68e5      	ldr	r5, [r4, #12]
 800487a:	f003 0306 	and.w	r3, r3, #6
 800487e:	2b04      	cmp	r3, #4
 8004880:	bf18      	it	ne
 8004882:	2500      	movne	r5, #0
 8004884:	6832      	ldr	r2, [r6, #0]
 8004886:	f04f 0600 	mov.w	r6, #0
 800488a:	68a3      	ldr	r3, [r4, #8]
 800488c:	bf08      	it	eq
 800488e:	1aad      	subeq	r5, r5, r2
 8004890:	6922      	ldr	r2, [r4, #16]
 8004892:	bf08      	it	eq
 8004894:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004898:	4293      	cmp	r3, r2
 800489a:	bfc4      	itt	gt
 800489c:	1a9b      	subgt	r3, r3, r2
 800489e:	18ed      	addgt	r5, r5, r3
 80048a0:	341a      	adds	r4, #26
 80048a2:	42b5      	cmp	r5, r6
 80048a4:	d11a      	bne.n	80048dc <_printf_common+0xcc>
 80048a6:	2000      	movs	r0, #0
 80048a8:	e008      	b.n	80048bc <_printf_common+0xac>
 80048aa:	2301      	movs	r3, #1
 80048ac:	4652      	mov	r2, sl
 80048ae:	4649      	mov	r1, r9
 80048b0:	4638      	mov	r0, r7
 80048b2:	47c0      	blx	r8
 80048b4:	3001      	adds	r0, #1
 80048b6:	d103      	bne.n	80048c0 <_printf_common+0xb0>
 80048b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048c0:	3501      	adds	r5, #1
 80048c2:	e7c4      	b.n	800484e <_printf_common+0x3e>
 80048c4:	2030      	movs	r0, #48	; 0x30
 80048c6:	18e1      	adds	r1, r4, r3
 80048c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048d2:	4422      	add	r2, r4
 80048d4:	3302      	adds	r3, #2
 80048d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048da:	e7c5      	b.n	8004868 <_printf_common+0x58>
 80048dc:	2301      	movs	r3, #1
 80048de:	4622      	mov	r2, r4
 80048e0:	4649      	mov	r1, r9
 80048e2:	4638      	mov	r0, r7
 80048e4:	47c0      	blx	r8
 80048e6:	3001      	adds	r0, #1
 80048e8:	d0e6      	beq.n	80048b8 <_printf_common+0xa8>
 80048ea:	3601      	adds	r6, #1
 80048ec:	e7d9      	b.n	80048a2 <_printf_common+0x92>
	...

080048f0 <_printf_i>:
 80048f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f4:	7e0f      	ldrb	r7, [r1, #24]
 80048f6:	4691      	mov	r9, r2
 80048f8:	2f78      	cmp	r7, #120	; 0x78
 80048fa:	4680      	mov	r8, r0
 80048fc:	460c      	mov	r4, r1
 80048fe:	469a      	mov	sl, r3
 8004900:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004902:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004906:	d807      	bhi.n	8004918 <_printf_i+0x28>
 8004908:	2f62      	cmp	r7, #98	; 0x62
 800490a:	d80a      	bhi.n	8004922 <_printf_i+0x32>
 800490c:	2f00      	cmp	r7, #0
 800490e:	f000 80d9 	beq.w	8004ac4 <_printf_i+0x1d4>
 8004912:	2f58      	cmp	r7, #88	; 0x58
 8004914:	f000 80a4 	beq.w	8004a60 <_printf_i+0x170>
 8004918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800491c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004920:	e03a      	b.n	8004998 <_printf_i+0xa8>
 8004922:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004926:	2b15      	cmp	r3, #21
 8004928:	d8f6      	bhi.n	8004918 <_printf_i+0x28>
 800492a:	a101      	add	r1, pc, #4	; (adr r1, 8004930 <_printf_i+0x40>)
 800492c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004930:	08004989 	.word	0x08004989
 8004934:	0800499d 	.word	0x0800499d
 8004938:	08004919 	.word	0x08004919
 800493c:	08004919 	.word	0x08004919
 8004940:	08004919 	.word	0x08004919
 8004944:	08004919 	.word	0x08004919
 8004948:	0800499d 	.word	0x0800499d
 800494c:	08004919 	.word	0x08004919
 8004950:	08004919 	.word	0x08004919
 8004954:	08004919 	.word	0x08004919
 8004958:	08004919 	.word	0x08004919
 800495c:	08004aab 	.word	0x08004aab
 8004960:	080049cd 	.word	0x080049cd
 8004964:	08004a8d 	.word	0x08004a8d
 8004968:	08004919 	.word	0x08004919
 800496c:	08004919 	.word	0x08004919
 8004970:	08004acd 	.word	0x08004acd
 8004974:	08004919 	.word	0x08004919
 8004978:	080049cd 	.word	0x080049cd
 800497c:	08004919 	.word	0x08004919
 8004980:	08004919 	.word	0x08004919
 8004984:	08004a95 	.word	0x08004a95
 8004988:	682b      	ldr	r3, [r5, #0]
 800498a:	1d1a      	adds	r2, r3, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	602a      	str	r2, [r5, #0]
 8004990:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004994:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004998:	2301      	movs	r3, #1
 800499a:	e0a4      	b.n	8004ae6 <_printf_i+0x1f6>
 800499c:	6820      	ldr	r0, [r4, #0]
 800499e:	6829      	ldr	r1, [r5, #0]
 80049a0:	0606      	lsls	r6, r0, #24
 80049a2:	f101 0304 	add.w	r3, r1, #4
 80049a6:	d50a      	bpl.n	80049be <_printf_i+0xce>
 80049a8:	680e      	ldr	r6, [r1, #0]
 80049aa:	602b      	str	r3, [r5, #0]
 80049ac:	2e00      	cmp	r6, #0
 80049ae:	da03      	bge.n	80049b8 <_printf_i+0xc8>
 80049b0:	232d      	movs	r3, #45	; 0x2d
 80049b2:	4276      	negs	r6, r6
 80049b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049b8:	230a      	movs	r3, #10
 80049ba:	485e      	ldr	r0, [pc, #376]	; (8004b34 <_printf_i+0x244>)
 80049bc:	e019      	b.n	80049f2 <_printf_i+0x102>
 80049be:	680e      	ldr	r6, [r1, #0]
 80049c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049c4:	602b      	str	r3, [r5, #0]
 80049c6:	bf18      	it	ne
 80049c8:	b236      	sxthne	r6, r6
 80049ca:	e7ef      	b.n	80049ac <_printf_i+0xbc>
 80049cc:	682b      	ldr	r3, [r5, #0]
 80049ce:	6820      	ldr	r0, [r4, #0]
 80049d0:	1d19      	adds	r1, r3, #4
 80049d2:	6029      	str	r1, [r5, #0]
 80049d4:	0601      	lsls	r1, r0, #24
 80049d6:	d501      	bpl.n	80049dc <_printf_i+0xec>
 80049d8:	681e      	ldr	r6, [r3, #0]
 80049da:	e002      	b.n	80049e2 <_printf_i+0xf2>
 80049dc:	0646      	lsls	r6, r0, #25
 80049de:	d5fb      	bpl.n	80049d8 <_printf_i+0xe8>
 80049e0:	881e      	ldrh	r6, [r3, #0]
 80049e2:	2f6f      	cmp	r7, #111	; 0x6f
 80049e4:	bf0c      	ite	eq
 80049e6:	2308      	moveq	r3, #8
 80049e8:	230a      	movne	r3, #10
 80049ea:	4852      	ldr	r0, [pc, #328]	; (8004b34 <_printf_i+0x244>)
 80049ec:	2100      	movs	r1, #0
 80049ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80049f2:	6865      	ldr	r5, [r4, #4]
 80049f4:	2d00      	cmp	r5, #0
 80049f6:	bfa8      	it	ge
 80049f8:	6821      	ldrge	r1, [r4, #0]
 80049fa:	60a5      	str	r5, [r4, #8]
 80049fc:	bfa4      	itt	ge
 80049fe:	f021 0104 	bicge.w	r1, r1, #4
 8004a02:	6021      	strge	r1, [r4, #0]
 8004a04:	b90e      	cbnz	r6, 8004a0a <_printf_i+0x11a>
 8004a06:	2d00      	cmp	r5, #0
 8004a08:	d04d      	beq.n	8004aa6 <_printf_i+0x1b6>
 8004a0a:	4615      	mov	r5, r2
 8004a0c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a10:	fb03 6711 	mls	r7, r3, r1, r6
 8004a14:	5dc7      	ldrb	r7, [r0, r7]
 8004a16:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a1a:	4637      	mov	r7, r6
 8004a1c:	42bb      	cmp	r3, r7
 8004a1e:	460e      	mov	r6, r1
 8004a20:	d9f4      	bls.n	8004a0c <_printf_i+0x11c>
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d10b      	bne.n	8004a3e <_printf_i+0x14e>
 8004a26:	6823      	ldr	r3, [r4, #0]
 8004a28:	07de      	lsls	r6, r3, #31
 8004a2a:	d508      	bpl.n	8004a3e <_printf_i+0x14e>
 8004a2c:	6923      	ldr	r3, [r4, #16]
 8004a2e:	6861      	ldr	r1, [r4, #4]
 8004a30:	4299      	cmp	r1, r3
 8004a32:	bfde      	ittt	le
 8004a34:	2330      	movle	r3, #48	; 0x30
 8004a36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a3a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004a3e:	1b52      	subs	r2, r2, r5
 8004a40:	6122      	str	r2, [r4, #16]
 8004a42:	464b      	mov	r3, r9
 8004a44:	4621      	mov	r1, r4
 8004a46:	4640      	mov	r0, r8
 8004a48:	f8cd a000 	str.w	sl, [sp]
 8004a4c:	aa03      	add	r2, sp, #12
 8004a4e:	f7ff fedf 	bl	8004810 <_printf_common>
 8004a52:	3001      	adds	r0, #1
 8004a54:	d14c      	bne.n	8004af0 <_printf_i+0x200>
 8004a56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004a5a:	b004      	add	sp, #16
 8004a5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a60:	4834      	ldr	r0, [pc, #208]	; (8004b34 <_printf_i+0x244>)
 8004a62:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a66:	6829      	ldr	r1, [r5, #0]
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a6e:	6029      	str	r1, [r5, #0]
 8004a70:	061d      	lsls	r5, r3, #24
 8004a72:	d514      	bpl.n	8004a9e <_printf_i+0x1ae>
 8004a74:	07df      	lsls	r7, r3, #31
 8004a76:	bf44      	itt	mi
 8004a78:	f043 0320 	orrmi.w	r3, r3, #32
 8004a7c:	6023      	strmi	r3, [r4, #0]
 8004a7e:	b91e      	cbnz	r6, 8004a88 <_printf_i+0x198>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	f023 0320 	bic.w	r3, r3, #32
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	2310      	movs	r3, #16
 8004a8a:	e7af      	b.n	80049ec <_printf_i+0xfc>
 8004a8c:	6823      	ldr	r3, [r4, #0]
 8004a8e:	f043 0320 	orr.w	r3, r3, #32
 8004a92:	6023      	str	r3, [r4, #0]
 8004a94:	2378      	movs	r3, #120	; 0x78
 8004a96:	4828      	ldr	r0, [pc, #160]	; (8004b38 <_printf_i+0x248>)
 8004a98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a9c:	e7e3      	b.n	8004a66 <_printf_i+0x176>
 8004a9e:	0659      	lsls	r1, r3, #25
 8004aa0:	bf48      	it	mi
 8004aa2:	b2b6      	uxthmi	r6, r6
 8004aa4:	e7e6      	b.n	8004a74 <_printf_i+0x184>
 8004aa6:	4615      	mov	r5, r2
 8004aa8:	e7bb      	b.n	8004a22 <_printf_i+0x132>
 8004aaa:	682b      	ldr	r3, [r5, #0]
 8004aac:	6826      	ldr	r6, [r4, #0]
 8004aae:	1d18      	adds	r0, r3, #4
 8004ab0:	6961      	ldr	r1, [r4, #20]
 8004ab2:	6028      	str	r0, [r5, #0]
 8004ab4:	0635      	lsls	r5, r6, #24
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	d501      	bpl.n	8004abe <_printf_i+0x1ce>
 8004aba:	6019      	str	r1, [r3, #0]
 8004abc:	e002      	b.n	8004ac4 <_printf_i+0x1d4>
 8004abe:	0670      	lsls	r0, r6, #25
 8004ac0:	d5fb      	bpl.n	8004aba <_printf_i+0x1ca>
 8004ac2:	8019      	strh	r1, [r3, #0]
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	4615      	mov	r5, r2
 8004ac8:	6123      	str	r3, [r4, #16]
 8004aca:	e7ba      	b.n	8004a42 <_printf_i+0x152>
 8004acc:	682b      	ldr	r3, [r5, #0]
 8004ace:	2100      	movs	r1, #0
 8004ad0:	1d1a      	adds	r2, r3, #4
 8004ad2:	602a      	str	r2, [r5, #0]
 8004ad4:	681d      	ldr	r5, [r3, #0]
 8004ad6:	6862      	ldr	r2, [r4, #4]
 8004ad8:	4628      	mov	r0, r5
 8004ada:	f000 ffc9 	bl	8005a70 <memchr>
 8004ade:	b108      	cbz	r0, 8004ae4 <_printf_i+0x1f4>
 8004ae0:	1b40      	subs	r0, r0, r5
 8004ae2:	6060      	str	r0, [r4, #4]
 8004ae4:	6863      	ldr	r3, [r4, #4]
 8004ae6:	6123      	str	r3, [r4, #16]
 8004ae8:	2300      	movs	r3, #0
 8004aea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004aee:	e7a8      	b.n	8004a42 <_printf_i+0x152>
 8004af0:	462a      	mov	r2, r5
 8004af2:	4649      	mov	r1, r9
 8004af4:	4640      	mov	r0, r8
 8004af6:	6923      	ldr	r3, [r4, #16]
 8004af8:	47d0      	blx	sl
 8004afa:	3001      	adds	r0, #1
 8004afc:	d0ab      	beq.n	8004a56 <_printf_i+0x166>
 8004afe:	6823      	ldr	r3, [r4, #0]
 8004b00:	079b      	lsls	r3, r3, #30
 8004b02:	d413      	bmi.n	8004b2c <_printf_i+0x23c>
 8004b04:	68e0      	ldr	r0, [r4, #12]
 8004b06:	9b03      	ldr	r3, [sp, #12]
 8004b08:	4298      	cmp	r0, r3
 8004b0a:	bfb8      	it	lt
 8004b0c:	4618      	movlt	r0, r3
 8004b0e:	e7a4      	b.n	8004a5a <_printf_i+0x16a>
 8004b10:	2301      	movs	r3, #1
 8004b12:	4632      	mov	r2, r6
 8004b14:	4649      	mov	r1, r9
 8004b16:	4640      	mov	r0, r8
 8004b18:	47d0      	blx	sl
 8004b1a:	3001      	adds	r0, #1
 8004b1c:	d09b      	beq.n	8004a56 <_printf_i+0x166>
 8004b1e:	3501      	adds	r5, #1
 8004b20:	68e3      	ldr	r3, [r4, #12]
 8004b22:	9903      	ldr	r1, [sp, #12]
 8004b24:	1a5b      	subs	r3, r3, r1
 8004b26:	42ab      	cmp	r3, r5
 8004b28:	dcf2      	bgt.n	8004b10 <_printf_i+0x220>
 8004b2a:	e7eb      	b.n	8004b04 <_printf_i+0x214>
 8004b2c:	2500      	movs	r5, #0
 8004b2e:	f104 0619 	add.w	r6, r4, #25
 8004b32:	e7f5      	b.n	8004b20 <_printf_i+0x230>
 8004b34:	08006d2a 	.word	0x08006d2a
 8004b38:	08006d3b 	.word	0x08006d3b

08004b3c <iprintf>:
 8004b3c:	b40f      	push	{r0, r1, r2, r3}
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <iprintf+0x2c>)
 8004b40:	b513      	push	{r0, r1, r4, lr}
 8004b42:	681c      	ldr	r4, [r3, #0]
 8004b44:	b124      	cbz	r4, 8004b50 <iprintf+0x14>
 8004b46:	69a3      	ldr	r3, [r4, #24]
 8004b48:	b913      	cbnz	r3, 8004b50 <iprintf+0x14>
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	f000 fee2 	bl	8005914 <__sinit>
 8004b50:	ab05      	add	r3, sp, #20
 8004b52:	4620      	mov	r0, r4
 8004b54:	9a04      	ldr	r2, [sp, #16]
 8004b56:	68a1      	ldr	r1, [r4, #8]
 8004b58:	9301      	str	r3, [sp, #4]
 8004b5a:	f001 fc3f 	bl	80063dc <_vfiprintf_r>
 8004b5e:	b002      	add	sp, #8
 8004b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b64:	b004      	add	sp, #16
 8004b66:	4770      	bx	lr
 8004b68:	20000010 	.word	0x20000010

08004b6c <quorem>:
 8004b6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b70:	6903      	ldr	r3, [r0, #16]
 8004b72:	690c      	ldr	r4, [r1, #16]
 8004b74:	4607      	mov	r7, r0
 8004b76:	42a3      	cmp	r3, r4
 8004b78:	f2c0 8082 	blt.w	8004c80 <quorem+0x114>
 8004b7c:	3c01      	subs	r4, #1
 8004b7e:	f100 0514 	add.w	r5, r0, #20
 8004b82:	f101 0814 	add.w	r8, r1, #20
 8004b86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004b90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b94:	3301      	adds	r3, #1
 8004b96:	429a      	cmp	r2, r3
 8004b98:	fbb2 f6f3 	udiv	r6, r2, r3
 8004b9c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ba0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ba4:	d331      	bcc.n	8004c0a <quorem+0x9e>
 8004ba6:	f04f 0e00 	mov.w	lr, #0
 8004baa:	4640      	mov	r0, r8
 8004bac:	46ac      	mov	ip, r5
 8004bae:	46f2      	mov	sl, lr
 8004bb0:	f850 2b04 	ldr.w	r2, [r0], #4
 8004bb4:	b293      	uxth	r3, r2
 8004bb6:	fb06 e303 	mla	r3, r6, r3, lr
 8004bba:	0c12      	lsrs	r2, r2, #16
 8004bbc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	fb06 e202 	mla	r2, r6, r2, lr
 8004bc6:	ebaa 0303 	sub.w	r3, sl, r3
 8004bca:	f8dc a000 	ldr.w	sl, [ip]
 8004bce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004bd2:	fa1f fa8a 	uxth.w	sl, sl
 8004bd6:	4453      	add	r3, sl
 8004bd8:	f8dc a000 	ldr.w	sl, [ip]
 8004bdc:	b292      	uxth	r2, r2
 8004bde:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004be2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004bec:	4581      	cmp	r9, r0
 8004bee:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004bf2:	f84c 3b04 	str.w	r3, [ip], #4
 8004bf6:	d2db      	bcs.n	8004bb0 <quorem+0x44>
 8004bf8:	f855 300b 	ldr.w	r3, [r5, fp]
 8004bfc:	b92b      	cbnz	r3, 8004c0a <quorem+0x9e>
 8004bfe:	9b01      	ldr	r3, [sp, #4]
 8004c00:	3b04      	subs	r3, #4
 8004c02:	429d      	cmp	r5, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	d32f      	bcc.n	8004c68 <quorem+0xfc>
 8004c08:	613c      	str	r4, [r7, #16]
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	f001 f9ca 	bl	8005fa4 <__mcmp>
 8004c10:	2800      	cmp	r0, #0
 8004c12:	db25      	blt.n	8004c60 <quorem+0xf4>
 8004c14:	4628      	mov	r0, r5
 8004c16:	f04f 0c00 	mov.w	ip, #0
 8004c1a:	3601      	adds	r6, #1
 8004c1c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004c20:	f8d0 e000 	ldr.w	lr, [r0]
 8004c24:	b28b      	uxth	r3, r1
 8004c26:	ebac 0303 	sub.w	r3, ip, r3
 8004c2a:	fa1f f28e 	uxth.w	r2, lr
 8004c2e:	4413      	add	r3, r2
 8004c30:	0c0a      	lsrs	r2, r1, #16
 8004c32:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004c36:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004c3a:	b29b      	uxth	r3, r3
 8004c3c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004c40:	45c1      	cmp	r9, r8
 8004c42:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004c46:	f840 3b04 	str.w	r3, [r0], #4
 8004c4a:	d2e7      	bcs.n	8004c1c <quorem+0xb0>
 8004c4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004c50:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c54:	b922      	cbnz	r2, 8004c60 <quorem+0xf4>
 8004c56:	3b04      	subs	r3, #4
 8004c58:	429d      	cmp	r5, r3
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	d30a      	bcc.n	8004c74 <quorem+0x108>
 8004c5e:	613c      	str	r4, [r7, #16]
 8004c60:	4630      	mov	r0, r6
 8004c62:	b003      	add	sp, #12
 8004c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c68:	6812      	ldr	r2, [r2, #0]
 8004c6a:	3b04      	subs	r3, #4
 8004c6c:	2a00      	cmp	r2, #0
 8004c6e:	d1cb      	bne.n	8004c08 <quorem+0x9c>
 8004c70:	3c01      	subs	r4, #1
 8004c72:	e7c6      	b.n	8004c02 <quorem+0x96>
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	3b04      	subs	r3, #4
 8004c78:	2a00      	cmp	r2, #0
 8004c7a:	d1f0      	bne.n	8004c5e <quorem+0xf2>
 8004c7c:	3c01      	subs	r4, #1
 8004c7e:	e7eb      	b.n	8004c58 <quorem+0xec>
 8004c80:	2000      	movs	r0, #0
 8004c82:	e7ee      	b.n	8004c62 <quorem+0xf6>
 8004c84:	0000      	movs	r0, r0
	...

08004c88 <_dtoa_r>:
 8004c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c8c:	4616      	mov	r6, r2
 8004c8e:	461f      	mov	r7, r3
 8004c90:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004c92:	b099      	sub	sp, #100	; 0x64
 8004c94:	4605      	mov	r5, r0
 8004c96:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c9a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004c9e:	b974      	cbnz	r4, 8004cbe <_dtoa_r+0x36>
 8004ca0:	2010      	movs	r0, #16
 8004ca2:	f000 fedd 	bl	8005a60 <malloc>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	6268      	str	r0, [r5, #36]	; 0x24
 8004caa:	b920      	cbnz	r0, 8004cb6 <_dtoa_r+0x2e>
 8004cac:	21ea      	movs	r1, #234	; 0xea
 8004cae:	4ba8      	ldr	r3, [pc, #672]	; (8004f50 <_dtoa_r+0x2c8>)
 8004cb0:	48a8      	ldr	r0, [pc, #672]	; (8004f54 <_dtoa_r+0x2cc>)
 8004cb2:	f001 fde9 	bl	8006888 <__assert_func>
 8004cb6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004cba:	6004      	str	r4, [r0, #0]
 8004cbc:	60c4      	str	r4, [r0, #12]
 8004cbe:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cc0:	6819      	ldr	r1, [r3, #0]
 8004cc2:	b151      	cbz	r1, 8004cda <_dtoa_r+0x52>
 8004cc4:	685a      	ldr	r2, [r3, #4]
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	4093      	lsls	r3, r2
 8004cca:	604a      	str	r2, [r1, #4]
 8004ccc:	608b      	str	r3, [r1, #8]
 8004cce:	4628      	mov	r0, r5
 8004cd0:	f000 ff2a 	bl	8005b28 <_Bfree>
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	1e3b      	subs	r3, r7, #0
 8004cdc:	bfaf      	iteee	ge
 8004cde:	2300      	movge	r3, #0
 8004ce0:	2201      	movlt	r2, #1
 8004ce2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ce6:	9305      	strlt	r3, [sp, #20]
 8004ce8:	bfa8      	it	ge
 8004cea:	f8c8 3000 	strge.w	r3, [r8]
 8004cee:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004cf2:	4b99      	ldr	r3, [pc, #612]	; (8004f58 <_dtoa_r+0x2d0>)
 8004cf4:	bfb8      	it	lt
 8004cf6:	f8c8 2000 	strlt.w	r2, [r8]
 8004cfa:	ea33 0309 	bics.w	r3, r3, r9
 8004cfe:	d119      	bne.n	8004d34 <_dtoa_r+0xac>
 8004d00:	f242 730f 	movw	r3, #9999	; 0x270f
 8004d04:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004d0c:	4333      	orrs	r3, r6
 8004d0e:	f000 857f 	beq.w	8005810 <_dtoa_r+0xb88>
 8004d12:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d14:	b953      	cbnz	r3, 8004d2c <_dtoa_r+0xa4>
 8004d16:	4b91      	ldr	r3, [pc, #580]	; (8004f5c <_dtoa_r+0x2d4>)
 8004d18:	e022      	b.n	8004d60 <_dtoa_r+0xd8>
 8004d1a:	4b91      	ldr	r3, [pc, #580]	; (8004f60 <_dtoa_r+0x2d8>)
 8004d1c:	9303      	str	r3, [sp, #12]
 8004d1e:	3308      	adds	r3, #8
 8004d20:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004d22:	6013      	str	r3, [r2, #0]
 8004d24:	9803      	ldr	r0, [sp, #12]
 8004d26:	b019      	add	sp, #100	; 0x64
 8004d28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d2c:	4b8b      	ldr	r3, [pc, #556]	; (8004f5c <_dtoa_r+0x2d4>)
 8004d2e:	9303      	str	r3, [sp, #12]
 8004d30:	3303      	adds	r3, #3
 8004d32:	e7f5      	b.n	8004d20 <_dtoa_r+0x98>
 8004d34:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004d38:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004d3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d40:	2200      	movs	r2, #0
 8004d42:	2300      	movs	r3, #0
 8004d44:	f7fb fe30 	bl	80009a8 <__aeabi_dcmpeq>
 8004d48:	4680      	mov	r8, r0
 8004d4a:	b158      	cbz	r0, 8004d64 <_dtoa_r+0xdc>
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 8558 	beq.w	800580a <_dtoa_r+0xb82>
 8004d5a:	4882      	ldr	r0, [pc, #520]	; (8004f64 <_dtoa_r+0x2dc>)
 8004d5c:	6018      	str	r0, [r3, #0]
 8004d5e:	1e43      	subs	r3, r0, #1
 8004d60:	9303      	str	r3, [sp, #12]
 8004d62:	e7df      	b.n	8004d24 <_dtoa_r+0x9c>
 8004d64:	ab16      	add	r3, sp, #88	; 0x58
 8004d66:	9301      	str	r3, [sp, #4]
 8004d68:	ab17      	add	r3, sp, #92	; 0x5c
 8004d6a:	9300      	str	r3, [sp, #0]
 8004d6c:	4628      	mov	r0, r5
 8004d6e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d72:	f001 f9bf 	bl	80060f4 <__d2b>
 8004d76:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004d7a:	4683      	mov	fp, r0
 8004d7c:	2c00      	cmp	r4, #0
 8004d7e:	d07f      	beq.n	8004e80 <_dtoa_r+0x1f8>
 8004d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d86:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d8a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d8e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004d92:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004d96:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	4b72      	ldr	r3, [pc, #456]	; (8004f68 <_dtoa_r+0x2e0>)
 8004d9e:	f7fb f9e3 	bl	8000168 <__aeabi_dsub>
 8004da2:	a365      	add	r3, pc, #404	; (adr r3, 8004f38 <_dtoa_r+0x2b0>)
 8004da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da8:	f7fb fb96 	bl	80004d8 <__aeabi_dmul>
 8004dac:	a364      	add	r3, pc, #400	; (adr r3, 8004f40 <_dtoa_r+0x2b8>)
 8004dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db2:	f7fb f9db 	bl	800016c <__adddf3>
 8004db6:	4606      	mov	r6, r0
 8004db8:	4620      	mov	r0, r4
 8004dba:	460f      	mov	r7, r1
 8004dbc:	f7fb fb22 	bl	8000404 <__aeabi_i2d>
 8004dc0:	a361      	add	r3, pc, #388	; (adr r3, 8004f48 <_dtoa_r+0x2c0>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb fb87 	bl	80004d8 <__aeabi_dmul>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4630      	mov	r0, r6
 8004dd0:	4639      	mov	r1, r7
 8004dd2:	f7fb f9cb 	bl	800016c <__adddf3>
 8004dd6:	4606      	mov	r6, r0
 8004dd8:	460f      	mov	r7, r1
 8004dda:	f7fb fe2d 	bl	8000a38 <__aeabi_d2iz>
 8004dde:	2200      	movs	r2, #0
 8004de0:	4682      	mov	sl, r0
 8004de2:	2300      	movs	r3, #0
 8004de4:	4630      	mov	r0, r6
 8004de6:	4639      	mov	r1, r7
 8004de8:	f7fb fde8 	bl	80009bc <__aeabi_dcmplt>
 8004dec:	b148      	cbz	r0, 8004e02 <_dtoa_r+0x17a>
 8004dee:	4650      	mov	r0, sl
 8004df0:	f7fb fb08 	bl	8000404 <__aeabi_i2d>
 8004df4:	4632      	mov	r2, r6
 8004df6:	463b      	mov	r3, r7
 8004df8:	f7fb fdd6 	bl	80009a8 <__aeabi_dcmpeq>
 8004dfc:	b908      	cbnz	r0, 8004e02 <_dtoa_r+0x17a>
 8004dfe:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e02:	f1ba 0f16 	cmp.w	sl, #22
 8004e06:	d858      	bhi.n	8004eba <_dtoa_r+0x232>
 8004e08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e0c:	4b57      	ldr	r3, [pc, #348]	; (8004f6c <_dtoa_r+0x2e4>)
 8004e0e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f7fb fdd1 	bl	80009bc <__aeabi_dcmplt>
 8004e1a:	2800      	cmp	r0, #0
 8004e1c:	d04f      	beq.n	8004ebe <_dtoa_r+0x236>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004e24:	930f      	str	r3, [sp, #60]	; 0x3c
 8004e26:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004e28:	1b1c      	subs	r4, r3, r4
 8004e2a:	1e63      	subs	r3, r4, #1
 8004e2c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e2e:	bf49      	itett	mi
 8004e30:	f1c4 0301 	rsbmi	r3, r4, #1
 8004e34:	2300      	movpl	r3, #0
 8004e36:	9306      	strmi	r3, [sp, #24]
 8004e38:	2300      	movmi	r3, #0
 8004e3a:	bf54      	ite	pl
 8004e3c:	9306      	strpl	r3, [sp, #24]
 8004e3e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004e40:	f1ba 0f00 	cmp.w	sl, #0
 8004e44:	db3d      	blt.n	8004ec2 <_dtoa_r+0x23a>
 8004e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e48:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004e4c:	4453      	add	r3, sl
 8004e4e:	9309      	str	r3, [sp, #36]	; 0x24
 8004e50:	2300      	movs	r3, #0
 8004e52:	930a      	str	r3, [sp, #40]	; 0x28
 8004e54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e56:	2b09      	cmp	r3, #9
 8004e58:	f200 808c 	bhi.w	8004f74 <_dtoa_r+0x2ec>
 8004e5c:	2b05      	cmp	r3, #5
 8004e5e:	bfc4      	itt	gt
 8004e60:	3b04      	subgt	r3, #4
 8004e62:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004e64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004e66:	bfc8      	it	gt
 8004e68:	2400      	movgt	r4, #0
 8004e6a:	f1a3 0302 	sub.w	r3, r3, #2
 8004e6e:	bfd8      	it	le
 8004e70:	2401      	movle	r4, #1
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	f200 808a 	bhi.w	8004f8c <_dtoa_r+0x304>
 8004e78:	e8df f003 	tbb	[pc, r3]
 8004e7c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004e80:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004e84:	441c      	add	r4, r3
 8004e86:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	bfc3      	ittte	gt
 8004e8e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004e92:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004e96:	fa09 f303 	lslgt.w	r3, r9, r3
 8004e9a:	f1c3 0320 	rsble	r3, r3, #32
 8004e9e:	bfc6      	itte	gt
 8004ea0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004ea4:	4318      	orrgt	r0, r3
 8004ea6:	fa06 f003 	lslle.w	r0, r6, r3
 8004eaa:	f7fb fa9b 	bl	80003e4 <__aeabi_ui2d>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004eb4:	3c01      	subs	r4, #1
 8004eb6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004eb8:	e76f      	b.n	8004d9a <_dtoa_r+0x112>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	e7b2      	b.n	8004e24 <_dtoa_r+0x19c>
 8004ebe:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ec0:	e7b1      	b.n	8004e26 <_dtoa_r+0x19e>
 8004ec2:	9b06      	ldr	r3, [sp, #24]
 8004ec4:	eba3 030a 	sub.w	r3, r3, sl
 8004ec8:	9306      	str	r3, [sp, #24]
 8004eca:	f1ca 0300 	rsb	r3, sl, #0
 8004ece:	930a      	str	r3, [sp, #40]	; 0x28
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ed4:	e7be      	b.n	8004e54 <_dtoa_r+0x1cc>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004eda:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	dc58      	bgt.n	8004f92 <_dtoa_r+0x30a>
 8004ee0:	f04f 0901 	mov.w	r9, #1
 8004ee4:	464b      	mov	r3, r9
 8004ee6:	f8cd 9020 	str.w	r9, [sp, #32]
 8004eea:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004eee:	2200      	movs	r2, #0
 8004ef0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004ef2:	6042      	str	r2, [r0, #4]
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	f102 0614 	add.w	r6, r2, #20
 8004efa:	429e      	cmp	r6, r3
 8004efc:	6841      	ldr	r1, [r0, #4]
 8004efe:	d94e      	bls.n	8004f9e <_dtoa_r+0x316>
 8004f00:	4628      	mov	r0, r5
 8004f02:	f000 fdd1 	bl	8005aa8 <_Balloc>
 8004f06:	9003      	str	r0, [sp, #12]
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d14c      	bne.n	8004fa6 <_dtoa_r+0x31e>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004f12:	4b17      	ldr	r3, [pc, #92]	; (8004f70 <_dtoa_r+0x2e8>)
 8004f14:	e6cc      	b.n	8004cb0 <_dtoa_r+0x28>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e7de      	b.n	8004ed8 <_dtoa_r+0x250>
 8004f1a:	2300      	movs	r3, #0
 8004f1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f1e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f20:	eb0a 0903 	add.w	r9, sl, r3
 8004f24:	f109 0301 	add.w	r3, r9, #1
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	9308      	str	r3, [sp, #32]
 8004f2c:	bfb8      	it	lt
 8004f2e:	2301      	movlt	r3, #1
 8004f30:	e7dd      	b.n	8004eee <_dtoa_r+0x266>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e7f2      	b.n	8004f1c <_dtoa_r+0x294>
 8004f36:	bf00      	nop
 8004f38:	636f4361 	.word	0x636f4361
 8004f3c:	3fd287a7 	.word	0x3fd287a7
 8004f40:	8b60c8b3 	.word	0x8b60c8b3
 8004f44:	3fc68a28 	.word	0x3fc68a28
 8004f48:	509f79fb 	.word	0x509f79fb
 8004f4c:	3fd34413 	.word	0x3fd34413
 8004f50:	08006d59 	.word	0x08006d59
 8004f54:	08006d70 	.word	0x08006d70
 8004f58:	7ff00000 	.word	0x7ff00000
 8004f5c:	08006d55 	.word	0x08006d55
 8004f60:	08006d4c 	.word	0x08006d4c
 8004f64:	08006d29 	.word	0x08006d29
 8004f68:	3ff80000 	.word	0x3ff80000
 8004f6c:	08006ec0 	.word	0x08006ec0
 8004f70:	08006dcb 	.word	0x08006dcb
 8004f74:	2401      	movs	r4, #1
 8004f76:	2300      	movs	r3, #0
 8004f78:	940b      	str	r4, [sp, #44]	; 0x2c
 8004f7a:	9322      	str	r3, [sp, #136]	; 0x88
 8004f7c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004f80:	2200      	movs	r2, #0
 8004f82:	2312      	movs	r3, #18
 8004f84:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f88:	9223      	str	r2, [sp, #140]	; 0x8c
 8004f8a:	e7b0      	b.n	8004eee <_dtoa_r+0x266>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f90:	e7f4      	b.n	8004f7c <_dtoa_r+0x2f4>
 8004f92:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004f96:	464b      	mov	r3, r9
 8004f98:	f8cd 9020 	str.w	r9, [sp, #32]
 8004f9c:	e7a7      	b.n	8004eee <_dtoa_r+0x266>
 8004f9e:	3101      	adds	r1, #1
 8004fa0:	6041      	str	r1, [r0, #4]
 8004fa2:	0052      	lsls	r2, r2, #1
 8004fa4:	e7a7      	b.n	8004ef6 <_dtoa_r+0x26e>
 8004fa6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fa8:	9a03      	ldr	r2, [sp, #12]
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	9b08      	ldr	r3, [sp, #32]
 8004fae:	2b0e      	cmp	r3, #14
 8004fb0:	f200 80a8 	bhi.w	8005104 <_dtoa_r+0x47c>
 8004fb4:	2c00      	cmp	r4, #0
 8004fb6:	f000 80a5 	beq.w	8005104 <_dtoa_r+0x47c>
 8004fba:	f1ba 0f00 	cmp.w	sl, #0
 8004fbe:	dd34      	ble.n	800502a <_dtoa_r+0x3a2>
 8004fc0:	4a9a      	ldr	r2, [pc, #616]	; (800522c <_dtoa_r+0x5a4>)
 8004fc2:	f00a 030f 	and.w	r3, sl, #15
 8004fc6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004fca:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004fce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fd2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004fd6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004fda:	d016      	beq.n	800500a <_dtoa_r+0x382>
 8004fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004fe0:	4b93      	ldr	r3, [pc, #588]	; (8005230 <_dtoa_r+0x5a8>)
 8004fe2:	2703      	movs	r7, #3
 8004fe4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004fe8:	f7fb fba0 	bl	800072c <__aeabi_ddiv>
 8004fec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ff0:	f004 040f 	and.w	r4, r4, #15
 8004ff4:	4e8e      	ldr	r6, [pc, #568]	; (8005230 <_dtoa_r+0x5a8>)
 8004ff6:	b954      	cbnz	r4, 800500e <_dtoa_r+0x386>
 8004ff8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ffc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005000:	f7fb fb94 	bl	800072c <__aeabi_ddiv>
 8005004:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005008:	e029      	b.n	800505e <_dtoa_r+0x3d6>
 800500a:	2702      	movs	r7, #2
 800500c:	e7f2      	b.n	8004ff4 <_dtoa_r+0x36c>
 800500e:	07e1      	lsls	r1, r4, #31
 8005010:	d508      	bpl.n	8005024 <_dtoa_r+0x39c>
 8005012:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005016:	e9d6 2300 	ldrd	r2, r3, [r6]
 800501a:	f7fb fa5d 	bl	80004d8 <__aeabi_dmul>
 800501e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005022:	3701      	adds	r7, #1
 8005024:	1064      	asrs	r4, r4, #1
 8005026:	3608      	adds	r6, #8
 8005028:	e7e5      	b.n	8004ff6 <_dtoa_r+0x36e>
 800502a:	f000 80a5 	beq.w	8005178 <_dtoa_r+0x4f0>
 800502e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005032:	f1ca 0400 	rsb	r4, sl, #0
 8005036:	4b7d      	ldr	r3, [pc, #500]	; (800522c <_dtoa_r+0x5a4>)
 8005038:	f004 020f 	and.w	r2, r4, #15
 800503c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005044:	f7fb fa48 	bl	80004d8 <__aeabi_dmul>
 8005048:	2702      	movs	r7, #2
 800504a:	2300      	movs	r3, #0
 800504c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005050:	4e77      	ldr	r6, [pc, #476]	; (8005230 <_dtoa_r+0x5a8>)
 8005052:	1124      	asrs	r4, r4, #4
 8005054:	2c00      	cmp	r4, #0
 8005056:	f040 8084 	bne.w	8005162 <_dtoa_r+0x4da>
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1d2      	bne.n	8005004 <_dtoa_r+0x37c>
 800505e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005060:	2b00      	cmp	r3, #0
 8005062:	f000 808b 	beq.w	800517c <_dtoa_r+0x4f4>
 8005066:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800506a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800506e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005072:	2200      	movs	r2, #0
 8005074:	4b6f      	ldr	r3, [pc, #444]	; (8005234 <_dtoa_r+0x5ac>)
 8005076:	f7fb fca1 	bl	80009bc <__aeabi_dcmplt>
 800507a:	2800      	cmp	r0, #0
 800507c:	d07e      	beq.n	800517c <_dtoa_r+0x4f4>
 800507e:	9b08      	ldr	r3, [sp, #32]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d07b      	beq.n	800517c <_dtoa_r+0x4f4>
 8005084:	f1b9 0f00 	cmp.w	r9, #0
 8005088:	dd38      	ble.n	80050fc <_dtoa_r+0x474>
 800508a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800508e:	2200      	movs	r2, #0
 8005090:	4b69      	ldr	r3, [pc, #420]	; (8005238 <_dtoa_r+0x5b0>)
 8005092:	f7fb fa21 	bl	80004d8 <__aeabi_dmul>
 8005096:	464c      	mov	r4, r9
 8005098:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800509c:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80050a0:	3701      	adds	r7, #1
 80050a2:	4638      	mov	r0, r7
 80050a4:	f7fb f9ae 	bl	8000404 <__aeabi_i2d>
 80050a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050ac:	f7fb fa14 	bl	80004d8 <__aeabi_dmul>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b62      	ldr	r3, [pc, #392]	; (800523c <_dtoa_r+0x5b4>)
 80050b4:	f7fb f85a 	bl	800016c <__adddf3>
 80050b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80050bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050c0:	9611      	str	r6, [sp, #68]	; 0x44
 80050c2:	2c00      	cmp	r4, #0
 80050c4:	d15d      	bne.n	8005182 <_dtoa_r+0x4fa>
 80050c6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ca:	2200      	movs	r2, #0
 80050cc:	4b5c      	ldr	r3, [pc, #368]	; (8005240 <_dtoa_r+0x5b8>)
 80050ce:	f7fb f84b 	bl	8000168 <__aeabi_dsub>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050da:	4633      	mov	r3, r6
 80050dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050de:	f7fb fc8b 	bl	80009f8 <__aeabi_dcmpgt>
 80050e2:	2800      	cmp	r0, #0
 80050e4:	f040 829c 	bne.w	8005620 <_dtoa_r+0x998>
 80050e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80050ee:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80050f2:	f7fb fc63 	bl	80009bc <__aeabi_dcmplt>
 80050f6:	2800      	cmp	r0, #0
 80050f8:	f040 8290 	bne.w	800561c <_dtoa_r+0x994>
 80050fc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005100:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005104:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005106:	2b00      	cmp	r3, #0
 8005108:	f2c0 8152 	blt.w	80053b0 <_dtoa_r+0x728>
 800510c:	f1ba 0f0e 	cmp.w	sl, #14
 8005110:	f300 814e 	bgt.w	80053b0 <_dtoa_r+0x728>
 8005114:	4b45      	ldr	r3, [pc, #276]	; (800522c <_dtoa_r+0x5a4>)
 8005116:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800511a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800511e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005122:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005124:	2b00      	cmp	r3, #0
 8005126:	f280 80db 	bge.w	80052e0 <_dtoa_r+0x658>
 800512a:	9b08      	ldr	r3, [sp, #32]
 800512c:	2b00      	cmp	r3, #0
 800512e:	f300 80d7 	bgt.w	80052e0 <_dtoa_r+0x658>
 8005132:	f040 8272 	bne.w	800561a <_dtoa_r+0x992>
 8005136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800513a:	2200      	movs	r2, #0
 800513c:	4b40      	ldr	r3, [pc, #256]	; (8005240 <_dtoa_r+0x5b8>)
 800513e:	f7fb f9cb 	bl	80004d8 <__aeabi_dmul>
 8005142:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005146:	f7fb fc4d 	bl	80009e4 <__aeabi_dcmpge>
 800514a:	9c08      	ldr	r4, [sp, #32]
 800514c:	4626      	mov	r6, r4
 800514e:	2800      	cmp	r0, #0
 8005150:	f040 8248 	bne.w	80055e4 <_dtoa_r+0x95c>
 8005154:	2331      	movs	r3, #49	; 0x31
 8005156:	9f03      	ldr	r7, [sp, #12]
 8005158:	f10a 0a01 	add.w	sl, sl, #1
 800515c:	f807 3b01 	strb.w	r3, [r7], #1
 8005160:	e244      	b.n	80055ec <_dtoa_r+0x964>
 8005162:	07e2      	lsls	r2, r4, #31
 8005164:	d505      	bpl.n	8005172 <_dtoa_r+0x4ea>
 8005166:	e9d6 2300 	ldrd	r2, r3, [r6]
 800516a:	f7fb f9b5 	bl	80004d8 <__aeabi_dmul>
 800516e:	2301      	movs	r3, #1
 8005170:	3701      	adds	r7, #1
 8005172:	1064      	asrs	r4, r4, #1
 8005174:	3608      	adds	r6, #8
 8005176:	e76d      	b.n	8005054 <_dtoa_r+0x3cc>
 8005178:	2702      	movs	r7, #2
 800517a:	e770      	b.n	800505e <_dtoa_r+0x3d6>
 800517c:	46d0      	mov	r8, sl
 800517e:	9c08      	ldr	r4, [sp, #32]
 8005180:	e78f      	b.n	80050a2 <_dtoa_r+0x41a>
 8005182:	9903      	ldr	r1, [sp, #12]
 8005184:	4b29      	ldr	r3, [pc, #164]	; (800522c <_dtoa_r+0x5a4>)
 8005186:	4421      	add	r1, r4
 8005188:	9112      	str	r1, [sp, #72]	; 0x48
 800518a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800518c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005190:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005194:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005198:	2900      	cmp	r1, #0
 800519a:	d055      	beq.n	8005248 <_dtoa_r+0x5c0>
 800519c:	2000      	movs	r0, #0
 800519e:	4929      	ldr	r1, [pc, #164]	; (8005244 <_dtoa_r+0x5bc>)
 80051a0:	f7fb fac4 	bl	800072c <__aeabi_ddiv>
 80051a4:	463b      	mov	r3, r7
 80051a6:	4632      	mov	r2, r6
 80051a8:	f7fa ffde 	bl	8000168 <__aeabi_dsub>
 80051ac:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051b0:	9f03      	ldr	r7, [sp, #12]
 80051b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051b6:	f7fb fc3f 	bl	8000a38 <__aeabi_d2iz>
 80051ba:	4604      	mov	r4, r0
 80051bc:	f7fb f922 	bl	8000404 <__aeabi_i2d>
 80051c0:	4602      	mov	r2, r0
 80051c2:	460b      	mov	r3, r1
 80051c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051c8:	f7fa ffce 	bl	8000168 <__aeabi_dsub>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	3430      	adds	r4, #48	; 0x30
 80051d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051da:	f807 4b01 	strb.w	r4, [r7], #1
 80051de:	f7fb fbed 	bl	80009bc <__aeabi_dcmplt>
 80051e2:	2800      	cmp	r0, #0
 80051e4:	d174      	bne.n	80052d0 <_dtoa_r+0x648>
 80051e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ea:	2000      	movs	r0, #0
 80051ec:	4911      	ldr	r1, [pc, #68]	; (8005234 <_dtoa_r+0x5ac>)
 80051ee:	f7fa ffbb 	bl	8000168 <__aeabi_dsub>
 80051f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80051f6:	f7fb fbe1 	bl	80009bc <__aeabi_dcmplt>
 80051fa:	2800      	cmp	r0, #0
 80051fc:	f040 80b7 	bne.w	800536e <_dtoa_r+0x6e6>
 8005200:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005202:	429f      	cmp	r7, r3
 8005204:	f43f af7a 	beq.w	80050fc <_dtoa_r+0x474>
 8005208:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800520c:	2200      	movs	r2, #0
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <_dtoa_r+0x5b0>)
 8005210:	f7fb f962 	bl	80004d8 <__aeabi_dmul>
 8005214:	2200      	movs	r2, #0
 8005216:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800521a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800521e:	4b06      	ldr	r3, [pc, #24]	; (8005238 <_dtoa_r+0x5b0>)
 8005220:	f7fb f95a 	bl	80004d8 <__aeabi_dmul>
 8005224:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005228:	e7c3      	b.n	80051b2 <_dtoa_r+0x52a>
 800522a:	bf00      	nop
 800522c:	08006ec0 	.word	0x08006ec0
 8005230:	08006e98 	.word	0x08006e98
 8005234:	3ff00000 	.word	0x3ff00000
 8005238:	40240000 	.word	0x40240000
 800523c:	401c0000 	.word	0x401c0000
 8005240:	40140000 	.word	0x40140000
 8005244:	3fe00000 	.word	0x3fe00000
 8005248:	4630      	mov	r0, r6
 800524a:	4639      	mov	r1, r7
 800524c:	f7fb f944 	bl	80004d8 <__aeabi_dmul>
 8005250:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005252:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005256:	9c03      	ldr	r4, [sp, #12]
 8005258:	9314      	str	r3, [sp, #80]	; 0x50
 800525a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800525e:	f7fb fbeb 	bl	8000a38 <__aeabi_d2iz>
 8005262:	9015      	str	r0, [sp, #84]	; 0x54
 8005264:	f7fb f8ce 	bl	8000404 <__aeabi_i2d>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005270:	f7fa ff7a 	bl	8000168 <__aeabi_dsub>
 8005274:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005276:	4606      	mov	r6, r0
 8005278:	3330      	adds	r3, #48	; 0x30
 800527a:	f804 3b01 	strb.w	r3, [r4], #1
 800527e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005280:	460f      	mov	r7, r1
 8005282:	429c      	cmp	r4, r3
 8005284:	f04f 0200 	mov.w	r2, #0
 8005288:	d124      	bne.n	80052d4 <_dtoa_r+0x64c>
 800528a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800528e:	4bb0      	ldr	r3, [pc, #704]	; (8005550 <_dtoa_r+0x8c8>)
 8005290:	f7fa ff6c 	bl	800016c <__adddf3>
 8005294:	4602      	mov	r2, r0
 8005296:	460b      	mov	r3, r1
 8005298:	4630      	mov	r0, r6
 800529a:	4639      	mov	r1, r7
 800529c:	f7fb fbac 	bl	80009f8 <__aeabi_dcmpgt>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d163      	bne.n	800536c <_dtoa_r+0x6e4>
 80052a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052a8:	2000      	movs	r0, #0
 80052aa:	49a9      	ldr	r1, [pc, #676]	; (8005550 <_dtoa_r+0x8c8>)
 80052ac:	f7fa ff5c 	bl	8000168 <__aeabi_dsub>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4630      	mov	r0, r6
 80052b6:	4639      	mov	r1, r7
 80052b8:	f7fb fb80 	bl	80009bc <__aeabi_dcmplt>
 80052bc:	2800      	cmp	r0, #0
 80052be:	f43f af1d 	beq.w	80050fc <_dtoa_r+0x474>
 80052c2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80052c4:	1e7b      	subs	r3, r7, #1
 80052c6:	9314      	str	r3, [sp, #80]	; 0x50
 80052c8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80052cc:	2b30      	cmp	r3, #48	; 0x30
 80052ce:	d0f8      	beq.n	80052c2 <_dtoa_r+0x63a>
 80052d0:	46c2      	mov	sl, r8
 80052d2:	e03b      	b.n	800534c <_dtoa_r+0x6c4>
 80052d4:	4b9f      	ldr	r3, [pc, #636]	; (8005554 <_dtoa_r+0x8cc>)
 80052d6:	f7fb f8ff 	bl	80004d8 <__aeabi_dmul>
 80052da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80052de:	e7bc      	b.n	800525a <_dtoa_r+0x5d2>
 80052e0:	9f03      	ldr	r7, [sp, #12]
 80052e2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80052e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ea:	4640      	mov	r0, r8
 80052ec:	4649      	mov	r1, r9
 80052ee:	f7fb fa1d 	bl	800072c <__aeabi_ddiv>
 80052f2:	f7fb fba1 	bl	8000a38 <__aeabi_d2iz>
 80052f6:	4604      	mov	r4, r0
 80052f8:	f7fb f884 	bl	8000404 <__aeabi_i2d>
 80052fc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005300:	f7fb f8ea 	bl	80004d8 <__aeabi_dmul>
 8005304:	4602      	mov	r2, r0
 8005306:	460b      	mov	r3, r1
 8005308:	4640      	mov	r0, r8
 800530a:	4649      	mov	r1, r9
 800530c:	f7fa ff2c 	bl	8000168 <__aeabi_dsub>
 8005310:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005314:	f807 6b01 	strb.w	r6, [r7], #1
 8005318:	9e03      	ldr	r6, [sp, #12]
 800531a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800531e:	1bbe      	subs	r6, r7, r6
 8005320:	45b4      	cmp	ip, r6
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	d136      	bne.n	8005396 <_dtoa_r+0x70e>
 8005328:	f7fa ff20 	bl	800016c <__adddf3>
 800532c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005330:	4680      	mov	r8, r0
 8005332:	4689      	mov	r9, r1
 8005334:	f7fb fb60 	bl	80009f8 <__aeabi_dcmpgt>
 8005338:	bb58      	cbnz	r0, 8005392 <_dtoa_r+0x70a>
 800533a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800533e:	4640      	mov	r0, r8
 8005340:	4649      	mov	r1, r9
 8005342:	f7fb fb31 	bl	80009a8 <__aeabi_dcmpeq>
 8005346:	b108      	cbz	r0, 800534c <_dtoa_r+0x6c4>
 8005348:	07e1      	lsls	r1, r4, #31
 800534a:	d422      	bmi.n	8005392 <_dtoa_r+0x70a>
 800534c:	4628      	mov	r0, r5
 800534e:	4659      	mov	r1, fp
 8005350:	f000 fbea 	bl	8005b28 <_Bfree>
 8005354:	2300      	movs	r3, #0
 8005356:	703b      	strb	r3, [r7, #0]
 8005358:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800535a:	f10a 0001 	add.w	r0, sl, #1
 800535e:	6018      	str	r0, [r3, #0]
 8005360:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005362:	2b00      	cmp	r3, #0
 8005364:	f43f acde 	beq.w	8004d24 <_dtoa_r+0x9c>
 8005368:	601f      	str	r7, [r3, #0]
 800536a:	e4db      	b.n	8004d24 <_dtoa_r+0x9c>
 800536c:	4627      	mov	r7, r4
 800536e:	463b      	mov	r3, r7
 8005370:	461f      	mov	r7, r3
 8005372:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005376:	2a39      	cmp	r2, #57	; 0x39
 8005378:	d107      	bne.n	800538a <_dtoa_r+0x702>
 800537a:	9a03      	ldr	r2, [sp, #12]
 800537c:	429a      	cmp	r2, r3
 800537e:	d1f7      	bne.n	8005370 <_dtoa_r+0x6e8>
 8005380:	2230      	movs	r2, #48	; 0x30
 8005382:	9903      	ldr	r1, [sp, #12]
 8005384:	f108 0801 	add.w	r8, r8, #1
 8005388:	700a      	strb	r2, [r1, #0]
 800538a:	781a      	ldrb	r2, [r3, #0]
 800538c:	3201      	adds	r2, #1
 800538e:	701a      	strb	r2, [r3, #0]
 8005390:	e79e      	b.n	80052d0 <_dtoa_r+0x648>
 8005392:	46d0      	mov	r8, sl
 8005394:	e7eb      	b.n	800536e <_dtoa_r+0x6e6>
 8005396:	2200      	movs	r2, #0
 8005398:	4b6e      	ldr	r3, [pc, #440]	; (8005554 <_dtoa_r+0x8cc>)
 800539a:	f7fb f89d 	bl	80004d8 <__aeabi_dmul>
 800539e:	2200      	movs	r2, #0
 80053a0:	2300      	movs	r3, #0
 80053a2:	4680      	mov	r8, r0
 80053a4:	4689      	mov	r9, r1
 80053a6:	f7fb faff 	bl	80009a8 <__aeabi_dcmpeq>
 80053aa:	2800      	cmp	r0, #0
 80053ac:	d09b      	beq.n	80052e6 <_dtoa_r+0x65e>
 80053ae:	e7cd      	b.n	800534c <_dtoa_r+0x6c4>
 80053b0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	f000 80d0 	beq.w	8005558 <_dtoa_r+0x8d0>
 80053b8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80053ba:	2a01      	cmp	r2, #1
 80053bc:	f300 80ae 	bgt.w	800551c <_dtoa_r+0x894>
 80053c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80053c2:	2a00      	cmp	r2, #0
 80053c4:	f000 80a6 	beq.w	8005514 <_dtoa_r+0x88c>
 80053c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80053cc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80053ce:	9f06      	ldr	r7, [sp, #24]
 80053d0:	9a06      	ldr	r2, [sp, #24]
 80053d2:	2101      	movs	r1, #1
 80053d4:	441a      	add	r2, r3
 80053d6:	9206      	str	r2, [sp, #24]
 80053d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053da:	4628      	mov	r0, r5
 80053dc:	441a      	add	r2, r3
 80053de:	9209      	str	r2, [sp, #36]	; 0x24
 80053e0:	f000 fc58 	bl	8005c94 <__i2b>
 80053e4:	4606      	mov	r6, r0
 80053e6:	2f00      	cmp	r7, #0
 80053e8:	dd0c      	ble.n	8005404 <_dtoa_r+0x77c>
 80053ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	dd09      	ble.n	8005404 <_dtoa_r+0x77c>
 80053f0:	42bb      	cmp	r3, r7
 80053f2:	bfa8      	it	ge
 80053f4:	463b      	movge	r3, r7
 80053f6:	9a06      	ldr	r2, [sp, #24]
 80053f8:	1aff      	subs	r7, r7, r3
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	9206      	str	r2, [sp, #24]
 80053fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	9309      	str	r3, [sp, #36]	; 0x24
 8005404:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005406:	b1f3      	cbz	r3, 8005446 <_dtoa_r+0x7be>
 8005408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80a8 	beq.w	8005560 <_dtoa_r+0x8d8>
 8005410:	2c00      	cmp	r4, #0
 8005412:	dd10      	ble.n	8005436 <_dtoa_r+0x7ae>
 8005414:	4631      	mov	r1, r6
 8005416:	4622      	mov	r2, r4
 8005418:	4628      	mov	r0, r5
 800541a:	f000 fcf9 	bl	8005e10 <__pow5mult>
 800541e:	465a      	mov	r2, fp
 8005420:	4601      	mov	r1, r0
 8005422:	4606      	mov	r6, r0
 8005424:	4628      	mov	r0, r5
 8005426:	f000 fc4b 	bl	8005cc0 <__multiply>
 800542a:	4680      	mov	r8, r0
 800542c:	4659      	mov	r1, fp
 800542e:	4628      	mov	r0, r5
 8005430:	f000 fb7a 	bl	8005b28 <_Bfree>
 8005434:	46c3      	mov	fp, r8
 8005436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005438:	1b1a      	subs	r2, r3, r4
 800543a:	d004      	beq.n	8005446 <_dtoa_r+0x7be>
 800543c:	4659      	mov	r1, fp
 800543e:	4628      	mov	r0, r5
 8005440:	f000 fce6 	bl	8005e10 <__pow5mult>
 8005444:	4683      	mov	fp, r0
 8005446:	2101      	movs	r1, #1
 8005448:	4628      	mov	r0, r5
 800544a:	f000 fc23 	bl	8005c94 <__i2b>
 800544e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005450:	4604      	mov	r4, r0
 8005452:	2b00      	cmp	r3, #0
 8005454:	f340 8086 	ble.w	8005564 <_dtoa_r+0x8dc>
 8005458:	461a      	mov	r2, r3
 800545a:	4601      	mov	r1, r0
 800545c:	4628      	mov	r0, r5
 800545e:	f000 fcd7 	bl	8005e10 <__pow5mult>
 8005462:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005464:	4604      	mov	r4, r0
 8005466:	2b01      	cmp	r3, #1
 8005468:	dd7f      	ble.n	800556a <_dtoa_r+0x8e2>
 800546a:	f04f 0800 	mov.w	r8, #0
 800546e:	6923      	ldr	r3, [r4, #16]
 8005470:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005474:	6918      	ldr	r0, [r3, #16]
 8005476:	f000 fbbf 	bl	8005bf8 <__hi0bits>
 800547a:	f1c0 0020 	rsb	r0, r0, #32
 800547e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005480:	4418      	add	r0, r3
 8005482:	f010 001f 	ands.w	r0, r0, #31
 8005486:	f000 8092 	beq.w	80055ae <_dtoa_r+0x926>
 800548a:	f1c0 0320 	rsb	r3, r0, #32
 800548e:	2b04      	cmp	r3, #4
 8005490:	f340 808a 	ble.w	80055a8 <_dtoa_r+0x920>
 8005494:	f1c0 001c 	rsb	r0, r0, #28
 8005498:	9b06      	ldr	r3, [sp, #24]
 800549a:	4407      	add	r7, r0
 800549c:	4403      	add	r3, r0
 800549e:	9306      	str	r3, [sp, #24]
 80054a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054a2:	4403      	add	r3, r0
 80054a4:	9309      	str	r3, [sp, #36]	; 0x24
 80054a6:	9b06      	ldr	r3, [sp, #24]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	dd05      	ble.n	80054b8 <_dtoa_r+0x830>
 80054ac:	4659      	mov	r1, fp
 80054ae:	461a      	mov	r2, r3
 80054b0:	4628      	mov	r0, r5
 80054b2:	f000 fd07 	bl	8005ec4 <__lshift>
 80054b6:	4683      	mov	fp, r0
 80054b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	dd05      	ble.n	80054ca <_dtoa_r+0x842>
 80054be:	4621      	mov	r1, r4
 80054c0:	461a      	mov	r2, r3
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 fcfe 	bl	8005ec4 <__lshift>
 80054c8:	4604      	mov	r4, r0
 80054ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d070      	beq.n	80055b2 <_dtoa_r+0x92a>
 80054d0:	4621      	mov	r1, r4
 80054d2:	4658      	mov	r0, fp
 80054d4:	f000 fd66 	bl	8005fa4 <__mcmp>
 80054d8:	2800      	cmp	r0, #0
 80054da:	da6a      	bge.n	80055b2 <_dtoa_r+0x92a>
 80054dc:	2300      	movs	r3, #0
 80054de:	4659      	mov	r1, fp
 80054e0:	220a      	movs	r2, #10
 80054e2:	4628      	mov	r0, r5
 80054e4:	f000 fb42 	bl	8005b6c <__multadd>
 80054e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054ea:	4683      	mov	fp, r0
 80054ec:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 8194 	beq.w	800581e <_dtoa_r+0xb96>
 80054f6:	4631      	mov	r1, r6
 80054f8:	2300      	movs	r3, #0
 80054fa:	220a      	movs	r2, #10
 80054fc:	4628      	mov	r0, r5
 80054fe:	f000 fb35 	bl	8005b6c <__multadd>
 8005502:	f1b9 0f00 	cmp.w	r9, #0
 8005506:	4606      	mov	r6, r0
 8005508:	f300 8093 	bgt.w	8005632 <_dtoa_r+0x9aa>
 800550c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800550e:	2b02      	cmp	r3, #2
 8005510:	dc57      	bgt.n	80055c2 <_dtoa_r+0x93a>
 8005512:	e08e      	b.n	8005632 <_dtoa_r+0x9aa>
 8005514:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005516:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800551a:	e757      	b.n	80053cc <_dtoa_r+0x744>
 800551c:	9b08      	ldr	r3, [sp, #32]
 800551e:	1e5c      	subs	r4, r3, #1
 8005520:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005522:	42a3      	cmp	r3, r4
 8005524:	bfb7      	itett	lt
 8005526:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005528:	1b1c      	subge	r4, r3, r4
 800552a:	1ae2      	sublt	r2, r4, r3
 800552c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800552e:	bfbe      	ittt	lt
 8005530:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005532:	189b      	addlt	r3, r3, r2
 8005534:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005536:	9b08      	ldr	r3, [sp, #32]
 8005538:	bfb8      	it	lt
 800553a:	2400      	movlt	r4, #0
 800553c:	2b00      	cmp	r3, #0
 800553e:	bfbb      	ittet	lt
 8005540:	9b06      	ldrlt	r3, [sp, #24]
 8005542:	9a08      	ldrlt	r2, [sp, #32]
 8005544:	9f06      	ldrge	r7, [sp, #24]
 8005546:	1a9f      	sublt	r7, r3, r2
 8005548:	bfac      	ite	ge
 800554a:	9b08      	ldrge	r3, [sp, #32]
 800554c:	2300      	movlt	r3, #0
 800554e:	e73f      	b.n	80053d0 <_dtoa_r+0x748>
 8005550:	3fe00000 	.word	0x3fe00000
 8005554:	40240000 	.word	0x40240000
 8005558:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800555a:	9f06      	ldr	r7, [sp, #24]
 800555c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800555e:	e742      	b.n	80053e6 <_dtoa_r+0x75e>
 8005560:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005562:	e76b      	b.n	800543c <_dtoa_r+0x7b4>
 8005564:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005566:	2b01      	cmp	r3, #1
 8005568:	dc19      	bgt.n	800559e <_dtoa_r+0x916>
 800556a:	9b04      	ldr	r3, [sp, #16]
 800556c:	b9bb      	cbnz	r3, 800559e <_dtoa_r+0x916>
 800556e:	9b05      	ldr	r3, [sp, #20]
 8005570:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005574:	b99b      	cbnz	r3, 800559e <_dtoa_r+0x916>
 8005576:	9b05      	ldr	r3, [sp, #20]
 8005578:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800557c:	0d1b      	lsrs	r3, r3, #20
 800557e:	051b      	lsls	r3, r3, #20
 8005580:	b183      	cbz	r3, 80055a4 <_dtoa_r+0x91c>
 8005582:	f04f 0801 	mov.w	r8, #1
 8005586:	9b06      	ldr	r3, [sp, #24]
 8005588:	3301      	adds	r3, #1
 800558a:	9306      	str	r3, [sp, #24]
 800558c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558e:	3301      	adds	r3, #1
 8005590:	9309      	str	r3, [sp, #36]	; 0x24
 8005592:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005594:	2b00      	cmp	r3, #0
 8005596:	f47f af6a 	bne.w	800546e <_dtoa_r+0x7e6>
 800559a:	2001      	movs	r0, #1
 800559c:	e76f      	b.n	800547e <_dtoa_r+0x7f6>
 800559e:	f04f 0800 	mov.w	r8, #0
 80055a2:	e7f6      	b.n	8005592 <_dtoa_r+0x90a>
 80055a4:	4698      	mov	r8, r3
 80055a6:	e7f4      	b.n	8005592 <_dtoa_r+0x90a>
 80055a8:	f43f af7d 	beq.w	80054a6 <_dtoa_r+0x81e>
 80055ac:	4618      	mov	r0, r3
 80055ae:	301c      	adds	r0, #28
 80055b0:	e772      	b.n	8005498 <_dtoa_r+0x810>
 80055b2:	9b08      	ldr	r3, [sp, #32]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	dc36      	bgt.n	8005626 <_dtoa_r+0x99e>
 80055b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	dd33      	ble.n	8005626 <_dtoa_r+0x99e>
 80055be:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80055c2:	f1b9 0f00 	cmp.w	r9, #0
 80055c6:	d10d      	bne.n	80055e4 <_dtoa_r+0x95c>
 80055c8:	4621      	mov	r1, r4
 80055ca:	464b      	mov	r3, r9
 80055cc:	2205      	movs	r2, #5
 80055ce:	4628      	mov	r0, r5
 80055d0:	f000 facc 	bl	8005b6c <__multadd>
 80055d4:	4601      	mov	r1, r0
 80055d6:	4604      	mov	r4, r0
 80055d8:	4658      	mov	r0, fp
 80055da:	f000 fce3 	bl	8005fa4 <__mcmp>
 80055de:	2800      	cmp	r0, #0
 80055e0:	f73f adb8 	bgt.w	8005154 <_dtoa_r+0x4cc>
 80055e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80055e6:	9f03      	ldr	r7, [sp, #12]
 80055e8:	ea6f 0a03 	mvn.w	sl, r3
 80055ec:	f04f 0800 	mov.w	r8, #0
 80055f0:	4621      	mov	r1, r4
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 fa98 	bl	8005b28 <_Bfree>
 80055f8:	2e00      	cmp	r6, #0
 80055fa:	f43f aea7 	beq.w	800534c <_dtoa_r+0x6c4>
 80055fe:	f1b8 0f00 	cmp.w	r8, #0
 8005602:	d005      	beq.n	8005610 <_dtoa_r+0x988>
 8005604:	45b0      	cmp	r8, r6
 8005606:	d003      	beq.n	8005610 <_dtoa_r+0x988>
 8005608:	4641      	mov	r1, r8
 800560a:	4628      	mov	r0, r5
 800560c:	f000 fa8c 	bl	8005b28 <_Bfree>
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	f000 fa88 	bl	8005b28 <_Bfree>
 8005618:	e698      	b.n	800534c <_dtoa_r+0x6c4>
 800561a:	2400      	movs	r4, #0
 800561c:	4626      	mov	r6, r4
 800561e:	e7e1      	b.n	80055e4 <_dtoa_r+0x95c>
 8005620:	46c2      	mov	sl, r8
 8005622:	4626      	mov	r6, r4
 8005624:	e596      	b.n	8005154 <_dtoa_r+0x4cc>
 8005626:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005628:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800562c:	2b00      	cmp	r3, #0
 800562e:	f000 80fd 	beq.w	800582c <_dtoa_r+0xba4>
 8005632:	2f00      	cmp	r7, #0
 8005634:	dd05      	ble.n	8005642 <_dtoa_r+0x9ba>
 8005636:	4631      	mov	r1, r6
 8005638:	463a      	mov	r2, r7
 800563a:	4628      	mov	r0, r5
 800563c:	f000 fc42 	bl	8005ec4 <__lshift>
 8005640:	4606      	mov	r6, r0
 8005642:	f1b8 0f00 	cmp.w	r8, #0
 8005646:	d05c      	beq.n	8005702 <_dtoa_r+0xa7a>
 8005648:	4628      	mov	r0, r5
 800564a:	6871      	ldr	r1, [r6, #4]
 800564c:	f000 fa2c 	bl	8005aa8 <_Balloc>
 8005650:	4607      	mov	r7, r0
 8005652:	b928      	cbnz	r0, 8005660 <_dtoa_r+0x9d8>
 8005654:	4602      	mov	r2, r0
 8005656:	f240 21ea 	movw	r1, #746	; 0x2ea
 800565a:	4b7f      	ldr	r3, [pc, #508]	; (8005858 <_dtoa_r+0xbd0>)
 800565c:	f7ff bb28 	b.w	8004cb0 <_dtoa_r+0x28>
 8005660:	6932      	ldr	r2, [r6, #16]
 8005662:	f106 010c 	add.w	r1, r6, #12
 8005666:	3202      	adds	r2, #2
 8005668:	0092      	lsls	r2, r2, #2
 800566a:	300c      	adds	r0, #12
 800566c:	f000 fa0e 	bl	8005a8c <memcpy>
 8005670:	2201      	movs	r2, #1
 8005672:	4639      	mov	r1, r7
 8005674:	4628      	mov	r0, r5
 8005676:	f000 fc25 	bl	8005ec4 <__lshift>
 800567a:	46b0      	mov	r8, r6
 800567c:	4606      	mov	r6, r0
 800567e:	9b03      	ldr	r3, [sp, #12]
 8005680:	3301      	adds	r3, #1
 8005682:	9308      	str	r3, [sp, #32]
 8005684:	9b03      	ldr	r3, [sp, #12]
 8005686:	444b      	add	r3, r9
 8005688:	930a      	str	r3, [sp, #40]	; 0x28
 800568a:	9b04      	ldr	r3, [sp, #16]
 800568c:	f003 0301 	and.w	r3, r3, #1
 8005690:	9309      	str	r3, [sp, #36]	; 0x24
 8005692:	9b08      	ldr	r3, [sp, #32]
 8005694:	4621      	mov	r1, r4
 8005696:	3b01      	subs	r3, #1
 8005698:	4658      	mov	r0, fp
 800569a:	9304      	str	r3, [sp, #16]
 800569c:	f7ff fa66 	bl	8004b6c <quorem>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4641      	mov	r1, r8
 80056a4:	3330      	adds	r3, #48	; 0x30
 80056a6:	9006      	str	r0, [sp, #24]
 80056a8:	4658      	mov	r0, fp
 80056aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80056ac:	f000 fc7a 	bl	8005fa4 <__mcmp>
 80056b0:	4632      	mov	r2, r6
 80056b2:	4681      	mov	r9, r0
 80056b4:	4621      	mov	r1, r4
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 fc90 	bl	8005fdc <__mdiff>
 80056bc:	68c2      	ldr	r2, [r0, #12]
 80056be:	4607      	mov	r7, r0
 80056c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056c2:	bb02      	cbnz	r2, 8005706 <_dtoa_r+0xa7e>
 80056c4:	4601      	mov	r1, r0
 80056c6:	4658      	mov	r0, fp
 80056c8:	f000 fc6c 	bl	8005fa4 <__mcmp>
 80056cc:	4602      	mov	r2, r0
 80056ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056d0:	4639      	mov	r1, r7
 80056d2:	4628      	mov	r0, r5
 80056d4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80056d8:	f000 fa26 	bl	8005b28 <_Bfree>
 80056dc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056e0:	9f08      	ldr	r7, [sp, #32]
 80056e2:	ea43 0102 	orr.w	r1, r3, r2
 80056e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056e8:	430b      	orrs	r3, r1
 80056ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80056ec:	d10d      	bne.n	800570a <_dtoa_r+0xa82>
 80056ee:	2b39      	cmp	r3, #57	; 0x39
 80056f0:	d029      	beq.n	8005746 <_dtoa_r+0xabe>
 80056f2:	f1b9 0f00 	cmp.w	r9, #0
 80056f6:	dd01      	ble.n	80056fc <_dtoa_r+0xa74>
 80056f8:	9b06      	ldr	r3, [sp, #24]
 80056fa:	3331      	adds	r3, #49	; 0x31
 80056fc:	9a04      	ldr	r2, [sp, #16]
 80056fe:	7013      	strb	r3, [r2, #0]
 8005700:	e776      	b.n	80055f0 <_dtoa_r+0x968>
 8005702:	4630      	mov	r0, r6
 8005704:	e7b9      	b.n	800567a <_dtoa_r+0x9f2>
 8005706:	2201      	movs	r2, #1
 8005708:	e7e2      	b.n	80056d0 <_dtoa_r+0xa48>
 800570a:	f1b9 0f00 	cmp.w	r9, #0
 800570e:	db06      	blt.n	800571e <_dtoa_r+0xa96>
 8005710:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005712:	ea41 0909 	orr.w	r9, r1, r9
 8005716:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005718:	ea59 0101 	orrs.w	r1, r9, r1
 800571c:	d120      	bne.n	8005760 <_dtoa_r+0xad8>
 800571e:	2a00      	cmp	r2, #0
 8005720:	ddec      	ble.n	80056fc <_dtoa_r+0xa74>
 8005722:	4659      	mov	r1, fp
 8005724:	2201      	movs	r2, #1
 8005726:	4628      	mov	r0, r5
 8005728:	9308      	str	r3, [sp, #32]
 800572a:	f000 fbcb 	bl	8005ec4 <__lshift>
 800572e:	4621      	mov	r1, r4
 8005730:	4683      	mov	fp, r0
 8005732:	f000 fc37 	bl	8005fa4 <__mcmp>
 8005736:	2800      	cmp	r0, #0
 8005738:	9b08      	ldr	r3, [sp, #32]
 800573a:	dc02      	bgt.n	8005742 <_dtoa_r+0xaba>
 800573c:	d1de      	bne.n	80056fc <_dtoa_r+0xa74>
 800573e:	07da      	lsls	r2, r3, #31
 8005740:	d5dc      	bpl.n	80056fc <_dtoa_r+0xa74>
 8005742:	2b39      	cmp	r3, #57	; 0x39
 8005744:	d1d8      	bne.n	80056f8 <_dtoa_r+0xa70>
 8005746:	2339      	movs	r3, #57	; 0x39
 8005748:	9a04      	ldr	r2, [sp, #16]
 800574a:	7013      	strb	r3, [r2, #0]
 800574c:	463b      	mov	r3, r7
 800574e:	461f      	mov	r7, r3
 8005750:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005754:	3b01      	subs	r3, #1
 8005756:	2a39      	cmp	r2, #57	; 0x39
 8005758:	d050      	beq.n	80057fc <_dtoa_r+0xb74>
 800575a:	3201      	adds	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
 800575e:	e747      	b.n	80055f0 <_dtoa_r+0x968>
 8005760:	2a00      	cmp	r2, #0
 8005762:	dd03      	ble.n	800576c <_dtoa_r+0xae4>
 8005764:	2b39      	cmp	r3, #57	; 0x39
 8005766:	d0ee      	beq.n	8005746 <_dtoa_r+0xabe>
 8005768:	3301      	adds	r3, #1
 800576a:	e7c7      	b.n	80056fc <_dtoa_r+0xa74>
 800576c:	9a08      	ldr	r2, [sp, #32]
 800576e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005770:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005774:	428a      	cmp	r2, r1
 8005776:	d02a      	beq.n	80057ce <_dtoa_r+0xb46>
 8005778:	4659      	mov	r1, fp
 800577a:	2300      	movs	r3, #0
 800577c:	220a      	movs	r2, #10
 800577e:	4628      	mov	r0, r5
 8005780:	f000 f9f4 	bl	8005b6c <__multadd>
 8005784:	45b0      	cmp	r8, r6
 8005786:	4683      	mov	fp, r0
 8005788:	f04f 0300 	mov.w	r3, #0
 800578c:	f04f 020a 	mov.w	r2, #10
 8005790:	4641      	mov	r1, r8
 8005792:	4628      	mov	r0, r5
 8005794:	d107      	bne.n	80057a6 <_dtoa_r+0xb1e>
 8005796:	f000 f9e9 	bl	8005b6c <__multadd>
 800579a:	4680      	mov	r8, r0
 800579c:	4606      	mov	r6, r0
 800579e:	9b08      	ldr	r3, [sp, #32]
 80057a0:	3301      	adds	r3, #1
 80057a2:	9308      	str	r3, [sp, #32]
 80057a4:	e775      	b.n	8005692 <_dtoa_r+0xa0a>
 80057a6:	f000 f9e1 	bl	8005b6c <__multadd>
 80057aa:	4631      	mov	r1, r6
 80057ac:	4680      	mov	r8, r0
 80057ae:	2300      	movs	r3, #0
 80057b0:	220a      	movs	r2, #10
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 f9da 	bl	8005b6c <__multadd>
 80057b8:	4606      	mov	r6, r0
 80057ba:	e7f0      	b.n	800579e <_dtoa_r+0xb16>
 80057bc:	f1b9 0f00 	cmp.w	r9, #0
 80057c0:	bfcc      	ite	gt
 80057c2:	464f      	movgt	r7, r9
 80057c4:	2701      	movle	r7, #1
 80057c6:	f04f 0800 	mov.w	r8, #0
 80057ca:	9a03      	ldr	r2, [sp, #12]
 80057cc:	4417      	add	r7, r2
 80057ce:	4659      	mov	r1, fp
 80057d0:	2201      	movs	r2, #1
 80057d2:	4628      	mov	r0, r5
 80057d4:	9308      	str	r3, [sp, #32]
 80057d6:	f000 fb75 	bl	8005ec4 <__lshift>
 80057da:	4621      	mov	r1, r4
 80057dc:	4683      	mov	fp, r0
 80057de:	f000 fbe1 	bl	8005fa4 <__mcmp>
 80057e2:	2800      	cmp	r0, #0
 80057e4:	dcb2      	bgt.n	800574c <_dtoa_r+0xac4>
 80057e6:	d102      	bne.n	80057ee <_dtoa_r+0xb66>
 80057e8:	9b08      	ldr	r3, [sp, #32]
 80057ea:	07db      	lsls	r3, r3, #31
 80057ec:	d4ae      	bmi.n	800574c <_dtoa_r+0xac4>
 80057ee:	463b      	mov	r3, r7
 80057f0:	461f      	mov	r7, r3
 80057f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80057f6:	2a30      	cmp	r2, #48	; 0x30
 80057f8:	d0fa      	beq.n	80057f0 <_dtoa_r+0xb68>
 80057fa:	e6f9      	b.n	80055f0 <_dtoa_r+0x968>
 80057fc:	9a03      	ldr	r2, [sp, #12]
 80057fe:	429a      	cmp	r2, r3
 8005800:	d1a5      	bne.n	800574e <_dtoa_r+0xac6>
 8005802:	2331      	movs	r3, #49	; 0x31
 8005804:	f10a 0a01 	add.w	sl, sl, #1
 8005808:	e779      	b.n	80056fe <_dtoa_r+0xa76>
 800580a:	4b14      	ldr	r3, [pc, #80]	; (800585c <_dtoa_r+0xbd4>)
 800580c:	f7ff baa8 	b.w	8004d60 <_dtoa_r+0xd8>
 8005810:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005812:	2b00      	cmp	r3, #0
 8005814:	f47f aa81 	bne.w	8004d1a <_dtoa_r+0x92>
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <_dtoa_r+0xbd8>)
 800581a:	f7ff baa1 	b.w	8004d60 <_dtoa_r+0xd8>
 800581e:	f1b9 0f00 	cmp.w	r9, #0
 8005822:	dc03      	bgt.n	800582c <_dtoa_r+0xba4>
 8005824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005826:	2b02      	cmp	r3, #2
 8005828:	f73f aecb 	bgt.w	80055c2 <_dtoa_r+0x93a>
 800582c:	9f03      	ldr	r7, [sp, #12]
 800582e:	4621      	mov	r1, r4
 8005830:	4658      	mov	r0, fp
 8005832:	f7ff f99b 	bl	8004b6c <quorem>
 8005836:	9a03      	ldr	r2, [sp, #12]
 8005838:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800583c:	f807 3b01 	strb.w	r3, [r7], #1
 8005840:	1aba      	subs	r2, r7, r2
 8005842:	4591      	cmp	r9, r2
 8005844:	ddba      	ble.n	80057bc <_dtoa_r+0xb34>
 8005846:	4659      	mov	r1, fp
 8005848:	2300      	movs	r3, #0
 800584a:	220a      	movs	r2, #10
 800584c:	4628      	mov	r0, r5
 800584e:	f000 f98d 	bl	8005b6c <__multadd>
 8005852:	4683      	mov	fp, r0
 8005854:	e7eb      	b.n	800582e <_dtoa_r+0xba6>
 8005856:	bf00      	nop
 8005858:	08006dcb 	.word	0x08006dcb
 800585c:	08006d28 	.word	0x08006d28
 8005860:	08006d4c 	.word	0x08006d4c

08005864 <std>:
 8005864:	2300      	movs	r3, #0
 8005866:	b510      	push	{r4, lr}
 8005868:	4604      	mov	r4, r0
 800586a:	e9c0 3300 	strd	r3, r3, [r0]
 800586e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005872:	6083      	str	r3, [r0, #8]
 8005874:	8181      	strh	r1, [r0, #12]
 8005876:	6643      	str	r3, [r0, #100]	; 0x64
 8005878:	81c2      	strh	r2, [r0, #14]
 800587a:	6183      	str	r3, [r0, #24]
 800587c:	4619      	mov	r1, r3
 800587e:	2208      	movs	r2, #8
 8005880:	305c      	adds	r0, #92	; 0x5c
 8005882:	f7fe fcf3 	bl	800426c <memset>
 8005886:	4b05      	ldr	r3, [pc, #20]	; (800589c <std+0x38>)
 8005888:	6224      	str	r4, [r4, #32]
 800588a:	6263      	str	r3, [r4, #36]	; 0x24
 800588c:	4b04      	ldr	r3, [pc, #16]	; (80058a0 <std+0x3c>)
 800588e:	62a3      	str	r3, [r4, #40]	; 0x28
 8005890:	4b04      	ldr	r3, [pc, #16]	; (80058a4 <std+0x40>)
 8005892:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005894:	4b04      	ldr	r3, [pc, #16]	; (80058a8 <std+0x44>)
 8005896:	6323      	str	r3, [r4, #48]	; 0x30
 8005898:	bd10      	pop	{r4, pc}
 800589a:	bf00      	nop
 800589c:	0800665d 	.word	0x0800665d
 80058a0:	0800667f 	.word	0x0800667f
 80058a4:	080066b7 	.word	0x080066b7
 80058a8:	080066db 	.word	0x080066db

080058ac <_cleanup_r>:
 80058ac:	4901      	ldr	r1, [pc, #4]	; (80058b4 <_cleanup_r+0x8>)
 80058ae:	f000 b8af 	b.w	8005a10 <_fwalk_reent>
 80058b2:	bf00      	nop
 80058b4:	080069e9 	.word	0x080069e9

080058b8 <__sfmoreglue>:
 80058b8:	2268      	movs	r2, #104	; 0x68
 80058ba:	b570      	push	{r4, r5, r6, lr}
 80058bc:	1e4d      	subs	r5, r1, #1
 80058be:	4355      	muls	r5, r2
 80058c0:	460e      	mov	r6, r1
 80058c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80058c6:	f000 fced 	bl	80062a4 <_malloc_r>
 80058ca:	4604      	mov	r4, r0
 80058cc:	b140      	cbz	r0, 80058e0 <__sfmoreglue+0x28>
 80058ce:	2100      	movs	r1, #0
 80058d0:	e9c0 1600 	strd	r1, r6, [r0]
 80058d4:	300c      	adds	r0, #12
 80058d6:	60a0      	str	r0, [r4, #8]
 80058d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80058dc:	f7fe fcc6 	bl	800426c <memset>
 80058e0:	4620      	mov	r0, r4
 80058e2:	bd70      	pop	{r4, r5, r6, pc}

080058e4 <__sfp_lock_acquire>:
 80058e4:	4801      	ldr	r0, [pc, #4]	; (80058ec <__sfp_lock_acquire+0x8>)
 80058e6:	f000 b8b8 	b.w	8005a5a <__retarget_lock_acquire_recursive>
 80058ea:	bf00      	nop
 80058ec:	20000361 	.word	0x20000361

080058f0 <__sfp_lock_release>:
 80058f0:	4801      	ldr	r0, [pc, #4]	; (80058f8 <__sfp_lock_release+0x8>)
 80058f2:	f000 b8b3 	b.w	8005a5c <__retarget_lock_release_recursive>
 80058f6:	bf00      	nop
 80058f8:	20000361 	.word	0x20000361

080058fc <__sinit_lock_acquire>:
 80058fc:	4801      	ldr	r0, [pc, #4]	; (8005904 <__sinit_lock_acquire+0x8>)
 80058fe:	f000 b8ac 	b.w	8005a5a <__retarget_lock_acquire_recursive>
 8005902:	bf00      	nop
 8005904:	20000362 	.word	0x20000362

08005908 <__sinit_lock_release>:
 8005908:	4801      	ldr	r0, [pc, #4]	; (8005910 <__sinit_lock_release+0x8>)
 800590a:	f000 b8a7 	b.w	8005a5c <__retarget_lock_release_recursive>
 800590e:	bf00      	nop
 8005910:	20000362 	.word	0x20000362

08005914 <__sinit>:
 8005914:	b510      	push	{r4, lr}
 8005916:	4604      	mov	r4, r0
 8005918:	f7ff fff0 	bl	80058fc <__sinit_lock_acquire>
 800591c:	69a3      	ldr	r3, [r4, #24]
 800591e:	b11b      	cbz	r3, 8005928 <__sinit+0x14>
 8005920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005924:	f7ff bff0 	b.w	8005908 <__sinit_lock_release>
 8005928:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800592c:	6523      	str	r3, [r4, #80]	; 0x50
 800592e:	4b13      	ldr	r3, [pc, #76]	; (800597c <__sinit+0x68>)
 8005930:	4a13      	ldr	r2, [pc, #76]	; (8005980 <__sinit+0x6c>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	62a2      	str	r2, [r4, #40]	; 0x28
 8005936:	42a3      	cmp	r3, r4
 8005938:	bf08      	it	eq
 800593a:	2301      	moveq	r3, #1
 800593c:	4620      	mov	r0, r4
 800593e:	bf08      	it	eq
 8005940:	61a3      	streq	r3, [r4, #24]
 8005942:	f000 f81f 	bl	8005984 <__sfp>
 8005946:	6060      	str	r0, [r4, #4]
 8005948:	4620      	mov	r0, r4
 800594a:	f000 f81b 	bl	8005984 <__sfp>
 800594e:	60a0      	str	r0, [r4, #8]
 8005950:	4620      	mov	r0, r4
 8005952:	f000 f817 	bl	8005984 <__sfp>
 8005956:	2200      	movs	r2, #0
 8005958:	2104      	movs	r1, #4
 800595a:	60e0      	str	r0, [r4, #12]
 800595c:	6860      	ldr	r0, [r4, #4]
 800595e:	f7ff ff81 	bl	8005864 <std>
 8005962:	2201      	movs	r2, #1
 8005964:	2109      	movs	r1, #9
 8005966:	68a0      	ldr	r0, [r4, #8]
 8005968:	f7ff ff7c 	bl	8005864 <std>
 800596c:	2202      	movs	r2, #2
 800596e:	2112      	movs	r1, #18
 8005970:	68e0      	ldr	r0, [r4, #12]
 8005972:	f7ff ff77 	bl	8005864 <std>
 8005976:	2301      	movs	r3, #1
 8005978:	61a3      	str	r3, [r4, #24]
 800597a:	e7d1      	b.n	8005920 <__sinit+0xc>
 800597c:	08006d14 	.word	0x08006d14
 8005980:	080058ad 	.word	0x080058ad

08005984 <__sfp>:
 8005984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005986:	4607      	mov	r7, r0
 8005988:	f7ff ffac 	bl	80058e4 <__sfp_lock_acquire>
 800598c:	4b1e      	ldr	r3, [pc, #120]	; (8005a08 <__sfp+0x84>)
 800598e:	681e      	ldr	r6, [r3, #0]
 8005990:	69b3      	ldr	r3, [r6, #24]
 8005992:	b913      	cbnz	r3, 800599a <__sfp+0x16>
 8005994:	4630      	mov	r0, r6
 8005996:	f7ff ffbd 	bl	8005914 <__sinit>
 800599a:	3648      	adds	r6, #72	; 0x48
 800599c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	d503      	bpl.n	80059ac <__sfp+0x28>
 80059a4:	6833      	ldr	r3, [r6, #0]
 80059a6:	b30b      	cbz	r3, 80059ec <__sfp+0x68>
 80059a8:	6836      	ldr	r6, [r6, #0]
 80059aa:	e7f7      	b.n	800599c <__sfp+0x18>
 80059ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80059b0:	b9d5      	cbnz	r5, 80059e8 <__sfp+0x64>
 80059b2:	4b16      	ldr	r3, [pc, #88]	; (8005a0c <__sfp+0x88>)
 80059b4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80059b8:	60e3      	str	r3, [r4, #12]
 80059ba:	6665      	str	r5, [r4, #100]	; 0x64
 80059bc:	f000 f84c 	bl	8005a58 <__retarget_lock_init_recursive>
 80059c0:	f7ff ff96 	bl	80058f0 <__sfp_lock_release>
 80059c4:	2208      	movs	r2, #8
 80059c6:	4629      	mov	r1, r5
 80059c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80059cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80059d0:	6025      	str	r5, [r4, #0]
 80059d2:	61a5      	str	r5, [r4, #24]
 80059d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80059d8:	f7fe fc48 	bl	800426c <memset>
 80059dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80059e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80059e4:	4620      	mov	r0, r4
 80059e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e8:	3468      	adds	r4, #104	; 0x68
 80059ea:	e7d9      	b.n	80059a0 <__sfp+0x1c>
 80059ec:	2104      	movs	r1, #4
 80059ee:	4638      	mov	r0, r7
 80059f0:	f7ff ff62 	bl	80058b8 <__sfmoreglue>
 80059f4:	4604      	mov	r4, r0
 80059f6:	6030      	str	r0, [r6, #0]
 80059f8:	2800      	cmp	r0, #0
 80059fa:	d1d5      	bne.n	80059a8 <__sfp+0x24>
 80059fc:	f7ff ff78 	bl	80058f0 <__sfp_lock_release>
 8005a00:	230c      	movs	r3, #12
 8005a02:	603b      	str	r3, [r7, #0]
 8005a04:	e7ee      	b.n	80059e4 <__sfp+0x60>
 8005a06:	bf00      	nop
 8005a08:	08006d14 	.word	0x08006d14
 8005a0c:	ffff0001 	.word	0xffff0001

08005a10 <_fwalk_reent>:
 8005a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a14:	4606      	mov	r6, r0
 8005a16:	4688      	mov	r8, r1
 8005a18:	2700      	movs	r7, #0
 8005a1a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005a1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a22:	f1b9 0901 	subs.w	r9, r9, #1
 8005a26:	d505      	bpl.n	8005a34 <_fwalk_reent+0x24>
 8005a28:	6824      	ldr	r4, [r4, #0]
 8005a2a:	2c00      	cmp	r4, #0
 8005a2c:	d1f7      	bne.n	8005a1e <_fwalk_reent+0xe>
 8005a2e:	4638      	mov	r0, r7
 8005a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a34:	89ab      	ldrh	r3, [r5, #12]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d907      	bls.n	8005a4a <_fwalk_reent+0x3a>
 8005a3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	d003      	beq.n	8005a4a <_fwalk_reent+0x3a>
 8005a42:	4629      	mov	r1, r5
 8005a44:	4630      	mov	r0, r6
 8005a46:	47c0      	blx	r8
 8005a48:	4307      	orrs	r7, r0
 8005a4a:	3568      	adds	r5, #104	; 0x68
 8005a4c:	e7e9      	b.n	8005a22 <_fwalk_reent+0x12>
	...

08005a50 <_localeconv_r>:
 8005a50:	4800      	ldr	r0, [pc, #0]	; (8005a54 <_localeconv_r+0x4>)
 8005a52:	4770      	bx	lr
 8005a54:	20000164 	.word	0x20000164

08005a58 <__retarget_lock_init_recursive>:
 8005a58:	4770      	bx	lr

08005a5a <__retarget_lock_acquire_recursive>:
 8005a5a:	4770      	bx	lr

08005a5c <__retarget_lock_release_recursive>:
 8005a5c:	4770      	bx	lr
	...

08005a60 <malloc>:
 8005a60:	4b02      	ldr	r3, [pc, #8]	; (8005a6c <malloc+0xc>)
 8005a62:	4601      	mov	r1, r0
 8005a64:	6818      	ldr	r0, [r3, #0]
 8005a66:	f000 bc1d 	b.w	80062a4 <_malloc_r>
 8005a6a:	bf00      	nop
 8005a6c:	20000010 	.word	0x20000010

08005a70 <memchr>:
 8005a70:	4603      	mov	r3, r0
 8005a72:	b510      	push	{r4, lr}
 8005a74:	b2c9      	uxtb	r1, r1
 8005a76:	4402      	add	r2, r0
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	d101      	bne.n	8005a82 <memchr+0x12>
 8005a7e:	2000      	movs	r0, #0
 8005a80:	e003      	b.n	8005a8a <memchr+0x1a>
 8005a82:	7804      	ldrb	r4, [r0, #0]
 8005a84:	3301      	adds	r3, #1
 8005a86:	428c      	cmp	r4, r1
 8005a88:	d1f6      	bne.n	8005a78 <memchr+0x8>
 8005a8a:	bd10      	pop	{r4, pc}

08005a8c <memcpy>:
 8005a8c:	440a      	add	r2, r1
 8005a8e:	4291      	cmp	r1, r2
 8005a90:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005a94:	d100      	bne.n	8005a98 <memcpy+0xc>
 8005a96:	4770      	bx	lr
 8005a98:	b510      	push	{r4, lr}
 8005a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a9e:	4291      	cmp	r1, r2
 8005aa0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005aa4:	d1f9      	bne.n	8005a9a <memcpy+0xe>
 8005aa6:	bd10      	pop	{r4, pc}

08005aa8 <_Balloc>:
 8005aa8:	b570      	push	{r4, r5, r6, lr}
 8005aaa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005aac:	4604      	mov	r4, r0
 8005aae:	460d      	mov	r5, r1
 8005ab0:	b976      	cbnz	r6, 8005ad0 <_Balloc+0x28>
 8005ab2:	2010      	movs	r0, #16
 8005ab4:	f7ff ffd4 	bl	8005a60 <malloc>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	6260      	str	r0, [r4, #36]	; 0x24
 8005abc:	b920      	cbnz	r0, 8005ac8 <_Balloc+0x20>
 8005abe:	2166      	movs	r1, #102	; 0x66
 8005ac0:	4b17      	ldr	r3, [pc, #92]	; (8005b20 <_Balloc+0x78>)
 8005ac2:	4818      	ldr	r0, [pc, #96]	; (8005b24 <_Balloc+0x7c>)
 8005ac4:	f000 fee0 	bl	8006888 <__assert_func>
 8005ac8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005acc:	6006      	str	r6, [r0, #0]
 8005ace:	60c6      	str	r6, [r0, #12]
 8005ad0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005ad2:	68f3      	ldr	r3, [r6, #12]
 8005ad4:	b183      	cbz	r3, 8005af8 <_Balloc+0x50>
 8005ad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ade:	b9b8      	cbnz	r0, 8005b10 <_Balloc+0x68>
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	fa01 f605 	lsl.w	r6, r1, r5
 8005ae6:	1d72      	adds	r2, r6, #5
 8005ae8:	4620      	mov	r0, r4
 8005aea:	0092      	lsls	r2, r2, #2
 8005aec:	f000 fb5e 	bl	80061ac <_calloc_r>
 8005af0:	b160      	cbz	r0, 8005b0c <_Balloc+0x64>
 8005af2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005af6:	e00e      	b.n	8005b16 <_Balloc+0x6e>
 8005af8:	2221      	movs	r2, #33	; 0x21
 8005afa:	2104      	movs	r1, #4
 8005afc:	4620      	mov	r0, r4
 8005afe:	f000 fb55 	bl	80061ac <_calloc_r>
 8005b02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b04:	60f0      	str	r0, [r6, #12]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e4      	bne.n	8005ad6 <_Balloc+0x2e>
 8005b0c:	2000      	movs	r0, #0
 8005b0e:	bd70      	pop	{r4, r5, r6, pc}
 8005b10:	6802      	ldr	r2, [r0, #0]
 8005b12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b16:	2300      	movs	r3, #0
 8005b18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b1c:	e7f7      	b.n	8005b0e <_Balloc+0x66>
 8005b1e:	bf00      	nop
 8005b20:	08006d59 	.word	0x08006d59
 8005b24:	08006e3c 	.word	0x08006e3c

08005b28 <_Bfree>:
 8005b28:	b570      	push	{r4, r5, r6, lr}
 8005b2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005b2c:	4605      	mov	r5, r0
 8005b2e:	460c      	mov	r4, r1
 8005b30:	b976      	cbnz	r6, 8005b50 <_Bfree+0x28>
 8005b32:	2010      	movs	r0, #16
 8005b34:	f7ff ff94 	bl	8005a60 <malloc>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	6268      	str	r0, [r5, #36]	; 0x24
 8005b3c:	b920      	cbnz	r0, 8005b48 <_Bfree+0x20>
 8005b3e:	218a      	movs	r1, #138	; 0x8a
 8005b40:	4b08      	ldr	r3, [pc, #32]	; (8005b64 <_Bfree+0x3c>)
 8005b42:	4809      	ldr	r0, [pc, #36]	; (8005b68 <_Bfree+0x40>)
 8005b44:	f000 fea0 	bl	8006888 <__assert_func>
 8005b48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b4c:	6006      	str	r6, [r0, #0]
 8005b4e:	60c6      	str	r6, [r0, #12]
 8005b50:	b13c      	cbz	r4, 8005b62 <_Bfree+0x3a>
 8005b52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005b54:	6862      	ldr	r2, [r4, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b5c:	6021      	str	r1, [r4, #0]
 8005b5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b62:	bd70      	pop	{r4, r5, r6, pc}
 8005b64:	08006d59 	.word	0x08006d59
 8005b68:	08006e3c 	.word	0x08006e3c

08005b6c <__multadd>:
 8005b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b70:	4607      	mov	r7, r0
 8005b72:	460c      	mov	r4, r1
 8005b74:	461e      	mov	r6, r3
 8005b76:	2000      	movs	r0, #0
 8005b78:	690d      	ldr	r5, [r1, #16]
 8005b7a:	f101 0c14 	add.w	ip, r1, #20
 8005b7e:	f8dc 3000 	ldr.w	r3, [ip]
 8005b82:	3001      	adds	r0, #1
 8005b84:	b299      	uxth	r1, r3
 8005b86:	fb02 6101 	mla	r1, r2, r1, r6
 8005b8a:	0c1e      	lsrs	r6, r3, #16
 8005b8c:	0c0b      	lsrs	r3, r1, #16
 8005b8e:	fb02 3306 	mla	r3, r2, r6, r3
 8005b92:	b289      	uxth	r1, r1
 8005b94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b98:	4285      	cmp	r5, r0
 8005b9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b9e:	f84c 1b04 	str.w	r1, [ip], #4
 8005ba2:	dcec      	bgt.n	8005b7e <__multadd+0x12>
 8005ba4:	b30e      	cbz	r6, 8005bea <__multadd+0x7e>
 8005ba6:	68a3      	ldr	r3, [r4, #8]
 8005ba8:	42ab      	cmp	r3, r5
 8005baa:	dc19      	bgt.n	8005be0 <__multadd+0x74>
 8005bac:	6861      	ldr	r1, [r4, #4]
 8005bae:	4638      	mov	r0, r7
 8005bb0:	3101      	adds	r1, #1
 8005bb2:	f7ff ff79 	bl	8005aa8 <_Balloc>
 8005bb6:	4680      	mov	r8, r0
 8005bb8:	b928      	cbnz	r0, 8005bc6 <__multadd+0x5a>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	21b5      	movs	r1, #181	; 0xb5
 8005bbe:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <__multadd+0x84>)
 8005bc0:	480c      	ldr	r0, [pc, #48]	; (8005bf4 <__multadd+0x88>)
 8005bc2:	f000 fe61 	bl	8006888 <__assert_func>
 8005bc6:	6922      	ldr	r2, [r4, #16]
 8005bc8:	f104 010c 	add.w	r1, r4, #12
 8005bcc:	3202      	adds	r2, #2
 8005bce:	0092      	lsls	r2, r2, #2
 8005bd0:	300c      	adds	r0, #12
 8005bd2:	f7ff ff5b 	bl	8005a8c <memcpy>
 8005bd6:	4621      	mov	r1, r4
 8005bd8:	4638      	mov	r0, r7
 8005bda:	f7ff ffa5 	bl	8005b28 <_Bfree>
 8005bde:	4644      	mov	r4, r8
 8005be0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005be4:	3501      	adds	r5, #1
 8005be6:	615e      	str	r6, [r3, #20]
 8005be8:	6125      	str	r5, [r4, #16]
 8005bea:	4620      	mov	r0, r4
 8005bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf0:	08006dcb 	.word	0x08006dcb
 8005bf4:	08006e3c 	.word	0x08006e3c

08005bf8 <__hi0bits>:
 8005bf8:	0c02      	lsrs	r2, r0, #16
 8005bfa:	0412      	lsls	r2, r2, #16
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	b9ca      	cbnz	r2, 8005c34 <__hi0bits+0x3c>
 8005c00:	0403      	lsls	r3, r0, #16
 8005c02:	2010      	movs	r0, #16
 8005c04:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005c08:	bf04      	itt	eq
 8005c0a:	021b      	lsleq	r3, r3, #8
 8005c0c:	3008      	addeq	r0, #8
 8005c0e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005c12:	bf04      	itt	eq
 8005c14:	011b      	lsleq	r3, r3, #4
 8005c16:	3004      	addeq	r0, #4
 8005c18:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005c1c:	bf04      	itt	eq
 8005c1e:	009b      	lsleq	r3, r3, #2
 8005c20:	3002      	addeq	r0, #2
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	db05      	blt.n	8005c32 <__hi0bits+0x3a>
 8005c26:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005c2a:	f100 0001 	add.w	r0, r0, #1
 8005c2e:	bf08      	it	eq
 8005c30:	2020      	moveq	r0, #32
 8005c32:	4770      	bx	lr
 8005c34:	2000      	movs	r0, #0
 8005c36:	e7e5      	b.n	8005c04 <__hi0bits+0xc>

08005c38 <__lo0bits>:
 8005c38:	6803      	ldr	r3, [r0, #0]
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	f013 0007 	ands.w	r0, r3, #7
 8005c40:	d00b      	beq.n	8005c5a <__lo0bits+0x22>
 8005c42:	07d9      	lsls	r1, r3, #31
 8005c44:	d421      	bmi.n	8005c8a <__lo0bits+0x52>
 8005c46:	0798      	lsls	r0, r3, #30
 8005c48:	bf49      	itett	mi
 8005c4a:	085b      	lsrmi	r3, r3, #1
 8005c4c:	089b      	lsrpl	r3, r3, #2
 8005c4e:	2001      	movmi	r0, #1
 8005c50:	6013      	strmi	r3, [r2, #0]
 8005c52:	bf5c      	itt	pl
 8005c54:	2002      	movpl	r0, #2
 8005c56:	6013      	strpl	r3, [r2, #0]
 8005c58:	4770      	bx	lr
 8005c5a:	b299      	uxth	r1, r3
 8005c5c:	b909      	cbnz	r1, 8005c62 <__lo0bits+0x2a>
 8005c5e:	2010      	movs	r0, #16
 8005c60:	0c1b      	lsrs	r3, r3, #16
 8005c62:	b2d9      	uxtb	r1, r3
 8005c64:	b909      	cbnz	r1, 8005c6a <__lo0bits+0x32>
 8005c66:	3008      	adds	r0, #8
 8005c68:	0a1b      	lsrs	r3, r3, #8
 8005c6a:	0719      	lsls	r1, r3, #28
 8005c6c:	bf04      	itt	eq
 8005c6e:	091b      	lsreq	r3, r3, #4
 8005c70:	3004      	addeq	r0, #4
 8005c72:	0799      	lsls	r1, r3, #30
 8005c74:	bf04      	itt	eq
 8005c76:	089b      	lsreq	r3, r3, #2
 8005c78:	3002      	addeq	r0, #2
 8005c7a:	07d9      	lsls	r1, r3, #31
 8005c7c:	d403      	bmi.n	8005c86 <__lo0bits+0x4e>
 8005c7e:	085b      	lsrs	r3, r3, #1
 8005c80:	f100 0001 	add.w	r0, r0, #1
 8005c84:	d003      	beq.n	8005c8e <__lo0bits+0x56>
 8005c86:	6013      	str	r3, [r2, #0]
 8005c88:	4770      	bx	lr
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	4770      	bx	lr
 8005c8e:	2020      	movs	r0, #32
 8005c90:	4770      	bx	lr
	...

08005c94 <__i2b>:
 8005c94:	b510      	push	{r4, lr}
 8005c96:	460c      	mov	r4, r1
 8005c98:	2101      	movs	r1, #1
 8005c9a:	f7ff ff05 	bl	8005aa8 <_Balloc>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	b928      	cbnz	r0, 8005cae <__i2b+0x1a>
 8005ca2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ca6:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <__i2b+0x24>)
 8005ca8:	4804      	ldr	r0, [pc, #16]	; (8005cbc <__i2b+0x28>)
 8005caa:	f000 fded 	bl	8006888 <__assert_func>
 8005cae:	2301      	movs	r3, #1
 8005cb0:	6144      	str	r4, [r0, #20]
 8005cb2:	6103      	str	r3, [r0, #16]
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	bf00      	nop
 8005cb8:	08006dcb 	.word	0x08006dcb
 8005cbc:	08006e3c 	.word	0x08006e3c

08005cc0 <__multiply>:
 8005cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cc4:	4691      	mov	r9, r2
 8005cc6:	690a      	ldr	r2, [r1, #16]
 8005cc8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ccc:	460c      	mov	r4, r1
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	bfbe      	ittt	lt
 8005cd2:	460b      	movlt	r3, r1
 8005cd4:	464c      	movlt	r4, r9
 8005cd6:	4699      	movlt	r9, r3
 8005cd8:	6927      	ldr	r7, [r4, #16]
 8005cda:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005cde:	68a3      	ldr	r3, [r4, #8]
 8005ce0:	6861      	ldr	r1, [r4, #4]
 8005ce2:	eb07 060a 	add.w	r6, r7, sl
 8005ce6:	42b3      	cmp	r3, r6
 8005ce8:	b085      	sub	sp, #20
 8005cea:	bfb8      	it	lt
 8005cec:	3101      	addlt	r1, #1
 8005cee:	f7ff fedb 	bl	8005aa8 <_Balloc>
 8005cf2:	b930      	cbnz	r0, 8005d02 <__multiply+0x42>
 8005cf4:	4602      	mov	r2, r0
 8005cf6:	f240 115d 	movw	r1, #349	; 0x15d
 8005cfa:	4b43      	ldr	r3, [pc, #268]	; (8005e08 <__multiply+0x148>)
 8005cfc:	4843      	ldr	r0, [pc, #268]	; (8005e0c <__multiply+0x14c>)
 8005cfe:	f000 fdc3 	bl	8006888 <__assert_func>
 8005d02:	f100 0514 	add.w	r5, r0, #20
 8005d06:	462b      	mov	r3, r5
 8005d08:	2200      	movs	r2, #0
 8005d0a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d0e:	4543      	cmp	r3, r8
 8005d10:	d321      	bcc.n	8005d56 <__multiply+0x96>
 8005d12:	f104 0314 	add.w	r3, r4, #20
 8005d16:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d1a:	f109 0314 	add.w	r3, r9, #20
 8005d1e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d22:	9202      	str	r2, [sp, #8]
 8005d24:	1b3a      	subs	r2, r7, r4
 8005d26:	3a15      	subs	r2, #21
 8005d28:	f022 0203 	bic.w	r2, r2, #3
 8005d2c:	3204      	adds	r2, #4
 8005d2e:	f104 0115 	add.w	r1, r4, #21
 8005d32:	428f      	cmp	r7, r1
 8005d34:	bf38      	it	cc
 8005d36:	2204      	movcc	r2, #4
 8005d38:	9201      	str	r2, [sp, #4]
 8005d3a:	9a02      	ldr	r2, [sp, #8]
 8005d3c:	9303      	str	r3, [sp, #12]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d80c      	bhi.n	8005d5c <__multiply+0x9c>
 8005d42:	2e00      	cmp	r6, #0
 8005d44:	dd03      	ble.n	8005d4e <__multiply+0x8e>
 8005d46:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d059      	beq.n	8005e02 <__multiply+0x142>
 8005d4e:	6106      	str	r6, [r0, #16]
 8005d50:	b005      	add	sp, #20
 8005d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d56:	f843 2b04 	str.w	r2, [r3], #4
 8005d5a:	e7d8      	b.n	8005d0e <__multiply+0x4e>
 8005d5c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d60:	f1ba 0f00 	cmp.w	sl, #0
 8005d64:	d023      	beq.n	8005dae <__multiply+0xee>
 8005d66:	46a9      	mov	r9, r5
 8005d68:	f04f 0c00 	mov.w	ip, #0
 8005d6c:	f104 0e14 	add.w	lr, r4, #20
 8005d70:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d74:	f8d9 1000 	ldr.w	r1, [r9]
 8005d78:	fa1f fb82 	uxth.w	fp, r2
 8005d7c:	b289      	uxth	r1, r1
 8005d7e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d82:	4461      	add	r1, ip
 8005d84:	f8d9 c000 	ldr.w	ip, [r9]
 8005d88:	0c12      	lsrs	r2, r2, #16
 8005d8a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005d8e:	fb0a c202 	mla	r2, sl, r2, ip
 8005d92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d96:	b289      	uxth	r1, r1
 8005d98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d9c:	4577      	cmp	r7, lr
 8005d9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005da2:	f849 1b04 	str.w	r1, [r9], #4
 8005da6:	d8e3      	bhi.n	8005d70 <__multiply+0xb0>
 8005da8:	9a01      	ldr	r2, [sp, #4]
 8005daa:	f845 c002 	str.w	ip, [r5, r2]
 8005dae:	9a03      	ldr	r2, [sp, #12]
 8005db0:	3304      	adds	r3, #4
 8005db2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005db6:	f1b9 0f00 	cmp.w	r9, #0
 8005dba:	d020      	beq.n	8005dfe <__multiply+0x13e>
 8005dbc:	46ae      	mov	lr, r5
 8005dbe:	f04f 0a00 	mov.w	sl, #0
 8005dc2:	6829      	ldr	r1, [r5, #0]
 8005dc4:	f104 0c14 	add.w	ip, r4, #20
 8005dc8:	f8bc b000 	ldrh.w	fp, [ip]
 8005dcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005dd0:	b289      	uxth	r1, r1
 8005dd2:	fb09 220b 	mla	r2, r9, fp, r2
 8005dd6:	4492      	add	sl, r2
 8005dd8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005ddc:	f84e 1b04 	str.w	r1, [lr], #4
 8005de0:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005de4:	f8be 1000 	ldrh.w	r1, [lr]
 8005de8:	0c12      	lsrs	r2, r2, #16
 8005dea:	fb09 1102 	mla	r1, r9, r2, r1
 8005dee:	4567      	cmp	r7, ip
 8005df0:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005df4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005df8:	d8e6      	bhi.n	8005dc8 <__multiply+0x108>
 8005dfa:	9a01      	ldr	r2, [sp, #4]
 8005dfc:	50a9      	str	r1, [r5, r2]
 8005dfe:	3504      	adds	r5, #4
 8005e00:	e79b      	b.n	8005d3a <__multiply+0x7a>
 8005e02:	3e01      	subs	r6, #1
 8005e04:	e79d      	b.n	8005d42 <__multiply+0x82>
 8005e06:	bf00      	nop
 8005e08:	08006dcb 	.word	0x08006dcb
 8005e0c:	08006e3c 	.word	0x08006e3c

08005e10 <__pow5mult>:
 8005e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e14:	4615      	mov	r5, r2
 8005e16:	f012 0203 	ands.w	r2, r2, #3
 8005e1a:	4606      	mov	r6, r0
 8005e1c:	460f      	mov	r7, r1
 8005e1e:	d007      	beq.n	8005e30 <__pow5mult+0x20>
 8005e20:	4c25      	ldr	r4, [pc, #148]	; (8005eb8 <__pow5mult+0xa8>)
 8005e22:	3a01      	subs	r2, #1
 8005e24:	2300      	movs	r3, #0
 8005e26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e2a:	f7ff fe9f 	bl	8005b6c <__multadd>
 8005e2e:	4607      	mov	r7, r0
 8005e30:	10ad      	asrs	r5, r5, #2
 8005e32:	d03d      	beq.n	8005eb0 <__pow5mult+0xa0>
 8005e34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005e36:	b97c      	cbnz	r4, 8005e58 <__pow5mult+0x48>
 8005e38:	2010      	movs	r0, #16
 8005e3a:	f7ff fe11 	bl	8005a60 <malloc>
 8005e3e:	4602      	mov	r2, r0
 8005e40:	6270      	str	r0, [r6, #36]	; 0x24
 8005e42:	b928      	cbnz	r0, 8005e50 <__pow5mult+0x40>
 8005e44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005e48:	4b1c      	ldr	r3, [pc, #112]	; (8005ebc <__pow5mult+0xac>)
 8005e4a:	481d      	ldr	r0, [pc, #116]	; (8005ec0 <__pow5mult+0xb0>)
 8005e4c:	f000 fd1c 	bl	8006888 <__assert_func>
 8005e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e54:	6004      	str	r4, [r0, #0]
 8005e56:	60c4      	str	r4, [r0, #12]
 8005e58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005e5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e60:	b94c      	cbnz	r4, 8005e76 <__pow5mult+0x66>
 8005e62:	f240 2171 	movw	r1, #625	; 0x271
 8005e66:	4630      	mov	r0, r6
 8005e68:	f7ff ff14 	bl	8005c94 <__i2b>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4604      	mov	r4, r0
 8005e70:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e74:	6003      	str	r3, [r0, #0]
 8005e76:	f04f 0900 	mov.w	r9, #0
 8005e7a:	07eb      	lsls	r3, r5, #31
 8005e7c:	d50a      	bpl.n	8005e94 <__pow5mult+0x84>
 8005e7e:	4639      	mov	r1, r7
 8005e80:	4622      	mov	r2, r4
 8005e82:	4630      	mov	r0, r6
 8005e84:	f7ff ff1c 	bl	8005cc0 <__multiply>
 8005e88:	4680      	mov	r8, r0
 8005e8a:	4639      	mov	r1, r7
 8005e8c:	4630      	mov	r0, r6
 8005e8e:	f7ff fe4b 	bl	8005b28 <_Bfree>
 8005e92:	4647      	mov	r7, r8
 8005e94:	106d      	asrs	r5, r5, #1
 8005e96:	d00b      	beq.n	8005eb0 <__pow5mult+0xa0>
 8005e98:	6820      	ldr	r0, [r4, #0]
 8005e9a:	b938      	cbnz	r0, 8005eac <__pow5mult+0x9c>
 8005e9c:	4622      	mov	r2, r4
 8005e9e:	4621      	mov	r1, r4
 8005ea0:	4630      	mov	r0, r6
 8005ea2:	f7ff ff0d 	bl	8005cc0 <__multiply>
 8005ea6:	6020      	str	r0, [r4, #0]
 8005ea8:	f8c0 9000 	str.w	r9, [r0]
 8005eac:	4604      	mov	r4, r0
 8005eae:	e7e4      	b.n	8005e7a <__pow5mult+0x6a>
 8005eb0:	4638      	mov	r0, r7
 8005eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb6:	bf00      	nop
 8005eb8:	08006f88 	.word	0x08006f88
 8005ebc:	08006d59 	.word	0x08006d59
 8005ec0:	08006e3c 	.word	0x08006e3c

08005ec4 <__lshift>:
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	460c      	mov	r4, r1
 8005eca:	4607      	mov	r7, r0
 8005ecc:	4691      	mov	r9, r2
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	6849      	ldr	r1, [r1, #4]
 8005ed2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ed6:	68a3      	ldr	r3, [r4, #8]
 8005ed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005edc:	f108 0601 	add.w	r6, r8, #1
 8005ee0:	42b3      	cmp	r3, r6
 8005ee2:	db0b      	blt.n	8005efc <__lshift+0x38>
 8005ee4:	4638      	mov	r0, r7
 8005ee6:	f7ff fddf 	bl	8005aa8 <_Balloc>
 8005eea:	4605      	mov	r5, r0
 8005eec:	b948      	cbnz	r0, 8005f02 <__lshift+0x3e>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005ef4:	4b29      	ldr	r3, [pc, #164]	; (8005f9c <__lshift+0xd8>)
 8005ef6:	482a      	ldr	r0, [pc, #168]	; (8005fa0 <__lshift+0xdc>)
 8005ef8:	f000 fcc6 	bl	8006888 <__assert_func>
 8005efc:	3101      	adds	r1, #1
 8005efe:	005b      	lsls	r3, r3, #1
 8005f00:	e7ee      	b.n	8005ee0 <__lshift+0x1c>
 8005f02:	2300      	movs	r3, #0
 8005f04:	f100 0114 	add.w	r1, r0, #20
 8005f08:	f100 0210 	add.w	r2, r0, #16
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	4553      	cmp	r3, sl
 8005f10:	db37      	blt.n	8005f82 <__lshift+0xbe>
 8005f12:	6920      	ldr	r0, [r4, #16]
 8005f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f18:	f104 0314 	add.w	r3, r4, #20
 8005f1c:	f019 091f 	ands.w	r9, r9, #31
 8005f20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005f28:	d02f      	beq.n	8005f8a <__lshift+0xc6>
 8005f2a:	468a      	mov	sl, r1
 8005f2c:	f04f 0c00 	mov.w	ip, #0
 8005f30:	f1c9 0e20 	rsb	lr, r9, #32
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	fa02 f209 	lsl.w	r2, r2, r9
 8005f3a:	ea42 020c 	orr.w	r2, r2, ip
 8005f3e:	f84a 2b04 	str.w	r2, [sl], #4
 8005f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f46:	4298      	cmp	r0, r3
 8005f48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005f4c:	d8f2      	bhi.n	8005f34 <__lshift+0x70>
 8005f4e:	1b03      	subs	r3, r0, r4
 8005f50:	3b15      	subs	r3, #21
 8005f52:	f023 0303 	bic.w	r3, r3, #3
 8005f56:	3304      	adds	r3, #4
 8005f58:	f104 0215 	add.w	r2, r4, #21
 8005f5c:	4290      	cmp	r0, r2
 8005f5e:	bf38      	it	cc
 8005f60:	2304      	movcc	r3, #4
 8005f62:	f841 c003 	str.w	ip, [r1, r3]
 8005f66:	f1bc 0f00 	cmp.w	ip, #0
 8005f6a:	d001      	beq.n	8005f70 <__lshift+0xac>
 8005f6c:	f108 0602 	add.w	r6, r8, #2
 8005f70:	3e01      	subs	r6, #1
 8005f72:	4638      	mov	r0, r7
 8005f74:	4621      	mov	r1, r4
 8005f76:	612e      	str	r6, [r5, #16]
 8005f78:	f7ff fdd6 	bl	8005b28 <_Bfree>
 8005f7c:	4628      	mov	r0, r5
 8005f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f82:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f86:	3301      	adds	r3, #1
 8005f88:	e7c1      	b.n	8005f0e <__lshift+0x4a>
 8005f8a:	3904      	subs	r1, #4
 8005f8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f90:	4298      	cmp	r0, r3
 8005f92:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f96:	d8f9      	bhi.n	8005f8c <__lshift+0xc8>
 8005f98:	e7ea      	b.n	8005f70 <__lshift+0xac>
 8005f9a:	bf00      	nop
 8005f9c:	08006dcb 	.word	0x08006dcb
 8005fa0:	08006e3c 	.word	0x08006e3c

08005fa4 <__mcmp>:
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	690a      	ldr	r2, [r1, #16]
 8005fa8:	6900      	ldr	r0, [r0, #16]
 8005faa:	b530      	push	{r4, r5, lr}
 8005fac:	1a80      	subs	r0, r0, r2
 8005fae:	d10d      	bne.n	8005fcc <__mcmp+0x28>
 8005fb0:	3314      	adds	r3, #20
 8005fb2:	3114      	adds	r1, #20
 8005fb4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005fb8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005fbc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005fc0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005fc4:	4295      	cmp	r5, r2
 8005fc6:	d002      	beq.n	8005fce <__mcmp+0x2a>
 8005fc8:	d304      	bcc.n	8005fd4 <__mcmp+0x30>
 8005fca:	2001      	movs	r0, #1
 8005fcc:	bd30      	pop	{r4, r5, pc}
 8005fce:	42a3      	cmp	r3, r4
 8005fd0:	d3f4      	bcc.n	8005fbc <__mcmp+0x18>
 8005fd2:	e7fb      	b.n	8005fcc <__mcmp+0x28>
 8005fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fd8:	e7f8      	b.n	8005fcc <__mcmp+0x28>
	...

08005fdc <__mdiff>:
 8005fdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fe0:	460d      	mov	r5, r1
 8005fe2:	4607      	mov	r7, r0
 8005fe4:	4611      	mov	r1, r2
 8005fe6:	4628      	mov	r0, r5
 8005fe8:	4614      	mov	r4, r2
 8005fea:	f7ff ffdb 	bl	8005fa4 <__mcmp>
 8005fee:	1e06      	subs	r6, r0, #0
 8005ff0:	d111      	bne.n	8006016 <__mdiff+0x3a>
 8005ff2:	4631      	mov	r1, r6
 8005ff4:	4638      	mov	r0, r7
 8005ff6:	f7ff fd57 	bl	8005aa8 <_Balloc>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	b928      	cbnz	r0, 800600a <__mdiff+0x2e>
 8005ffe:	f240 2132 	movw	r1, #562	; 0x232
 8006002:	4b3a      	ldr	r3, [pc, #232]	; (80060ec <__mdiff+0x110>)
 8006004:	483a      	ldr	r0, [pc, #232]	; (80060f0 <__mdiff+0x114>)
 8006006:	f000 fc3f 	bl	8006888 <__assert_func>
 800600a:	2301      	movs	r3, #1
 800600c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006010:	4610      	mov	r0, r2
 8006012:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006016:	bfa4      	itt	ge
 8006018:	4623      	movge	r3, r4
 800601a:	462c      	movge	r4, r5
 800601c:	4638      	mov	r0, r7
 800601e:	6861      	ldr	r1, [r4, #4]
 8006020:	bfa6      	itte	ge
 8006022:	461d      	movge	r5, r3
 8006024:	2600      	movge	r6, #0
 8006026:	2601      	movlt	r6, #1
 8006028:	f7ff fd3e 	bl	8005aa8 <_Balloc>
 800602c:	4602      	mov	r2, r0
 800602e:	b918      	cbnz	r0, 8006038 <__mdiff+0x5c>
 8006030:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006034:	4b2d      	ldr	r3, [pc, #180]	; (80060ec <__mdiff+0x110>)
 8006036:	e7e5      	b.n	8006004 <__mdiff+0x28>
 8006038:	f102 0814 	add.w	r8, r2, #20
 800603c:	46c2      	mov	sl, r8
 800603e:	f04f 0c00 	mov.w	ip, #0
 8006042:	6927      	ldr	r7, [r4, #16]
 8006044:	60c6      	str	r6, [r0, #12]
 8006046:	692e      	ldr	r6, [r5, #16]
 8006048:	f104 0014 	add.w	r0, r4, #20
 800604c:	f105 0914 	add.w	r9, r5, #20
 8006050:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006054:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006058:	3410      	adds	r4, #16
 800605a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800605e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006062:	fa1f f18b 	uxth.w	r1, fp
 8006066:	448c      	add	ip, r1
 8006068:	b299      	uxth	r1, r3
 800606a:	0c1b      	lsrs	r3, r3, #16
 800606c:	ebac 0101 	sub.w	r1, ip, r1
 8006070:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006074:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006078:	b289      	uxth	r1, r1
 800607a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800607e:	454e      	cmp	r6, r9
 8006080:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006084:	f84a 3b04 	str.w	r3, [sl], #4
 8006088:	d8e7      	bhi.n	800605a <__mdiff+0x7e>
 800608a:	1b73      	subs	r3, r6, r5
 800608c:	3b15      	subs	r3, #21
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	3515      	adds	r5, #21
 8006094:	3304      	adds	r3, #4
 8006096:	42ae      	cmp	r6, r5
 8006098:	bf38      	it	cc
 800609a:	2304      	movcc	r3, #4
 800609c:	4418      	add	r0, r3
 800609e:	4443      	add	r3, r8
 80060a0:	461e      	mov	r6, r3
 80060a2:	4605      	mov	r5, r0
 80060a4:	4575      	cmp	r5, lr
 80060a6:	d30e      	bcc.n	80060c6 <__mdiff+0xea>
 80060a8:	f10e 0103 	add.w	r1, lr, #3
 80060ac:	1a09      	subs	r1, r1, r0
 80060ae:	f021 0103 	bic.w	r1, r1, #3
 80060b2:	3803      	subs	r0, #3
 80060b4:	4586      	cmp	lr, r0
 80060b6:	bf38      	it	cc
 80060b8:	2100      	movcc	r1, #0
 80060ba:	4419      	add	r1, r3
 80060bc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80060c0:	b18b      	cbz	r3, 80060e6 <__mdiff+0x10a>
 80060c2:	6117      	str	r7, [r2, #16]
 80060c4:	e7a4      	b.n	8006010 <__mdiff+0x34>
 80060c6:	f855 8b04 	ldr.w	r8, [r5], #4
 80060ca:	fa1f f188 	uxth.w	r1, r8
 80060ce:	4461      	add	r1, ip
 80060d0:	140c      	asrs	r4, r1, #16
 80060d2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060d6:	b289      	uxth	r1, r1
 80060d8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80060dc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80060e0:	f846 1b04 	str.w	r1, [r6], #4
 80060e4:	e7de      	b.n	80060a4 <__mdiff+0xc8>
 80060e6:	3f01      	subs	r7, #1
 80060e8:	e7e8      	b.n	80060bc <__mdiff+0xe0>
 80060ea:	bf00      	nop
 80060ec:	08006dcb 	.word	0x08006dcb
 80060f0:	08006e3c 	.word	0x08006e3c

080060f4 <__d2b>:
 80060f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80060f8:	2101      	movs	r1, #1
 80060fa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80060fe:	4690      	mov	r8, r2
 8006100:	461d      	mov	r5, r3
 8006102:	f7ff fcd1 	bl	8005aa8 <_Balloc>
 8006106:	4604      	mov	r4, r0
 8006108:	b930      	cbnz	r0, 8006118 <__d2b+0x24>
 800610a:	4602      	mov	r2, r0
 800610c:	f240 310a 	movw	r1, #778	; 0x30a
 8006110:	4b24      	ldr	r3, [pc, #144]	; (80061a4 <__d2b+0xb0>)
 8006112:	4825      	ldr	r0, [pc, #148]	; (80061a8 <__d2b+0xb4>)
 8006114:	f000 fbb8 	bl	8006888 <__assert_func>
 8006118:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800611c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006120:	bb2d      	cbnz	r5, 800616e <__d2b+0x7a>
 8006122:	9301      	str	r3, [sp, #4]
 8006124:	f1b8 0300 	subs.w	r3, r8, #0
 8006128:	d026      	beq.n	8006178 <__d2b+0x84>
 800612a:	4668      	mov	r0, sp
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	f7ff fd83 	bl	8005c38 <__lo0bits>
 8006132:	9900      	ldr	r1, [sp, #0]
 8006134:	b1f0      	cbz	r0, 8006174 <__d2b+0x80>
 8006136:	9a01      	ldr	r2, [sp, #4]
 8006138:	f1c0 0320 	rsb	r3, r0, #32
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	430b      	orrs	r3, r1
 8006142:	40c2      	lsrs	r2, r0
 8006144:	6163      	str	r3, [r4, #20]
 8006146:	9201      	str	r2, [sp, #4]
 8006148:	9b01      	ldr	r3, [sp, #4]
 800614a:	2b00      	cmp	r3, #0
 800614c:	bf14      	ite	ne
 800614e:	2102      	movne	r1, #2
 8006150:	2101      	moveq	r1, #1
 8006152:	61a3      	str	r3, [r4, #24]
 8006154:	6121      	str	r1, [r4, #16]
 8006156:	b1c5      	cbz	r5, 800618a <__d2b+0x96>
 8006158:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800615c:	4405      	add	r5, r0
 800615e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006162:	603d      	str	r5, [r7, #0]
 8006164:	6030      	str	r0, [r6, #0]
 8006166:	4620      	mov	r0, r4
 8006168:	b002      	add	sp, #8
 800616a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800616e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006172:	e7d6      	b.n	8006122 <__d2b+0x2e>
 8006174:	6161      	str	r1, [r4, #20]
 8006176:	e7e7      	b.n	8006148 <__d2b+0x54>
 8006178:	a801      	add	r0, sp, #4
 800617a:	f7ff fd5d 	bl	8005c38 <__lo0bits>
 800617e:	2101      	movs	r1, #1
 8006180:	9b01      	ldr	r3, [sp, #4]
 8006182:	6121      	str	r1, [r4, #16]
 8006184:	6163      	str	r3, [r4, #20]
 8006186:	3020      	adds	r0, #32
 8006188:	e7e5      	b.n	8006156 <__d2b+0x62>
 800618a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800618e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006192:	6038      	str	r0, [r7, #0]
 8006194:	6918      	ldr	r0, [r3, #16]
 8006196:	f7ff fd2f 	bl	8005bf8 <__hi0bits>
 800619a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800619e:	6031      	str	r1, [r6, #0]
 80061a0:	e7e1      	b.n	8006166 <__d2b+0x72>
 80061a2:	bf00      	nop
 80061a4:	08006dcb 	.word	0x08006dcb
 80061a8:	08006e3c 	.word	0x08006e3c

080061ac <_calloc_r>:
 80061ac:	b570      	push	{r4, r5, r6, lr}
 80061ae:	fba1 5402 	umull	r5, r4, r1, r2
 80061b2:	b934      	cbnz	r4, 80061c2 <_calloc_r+0x16>
 80061b4:	4629      	mov	r1, r5
 80061b6:	f000 f875 	bl	80062a4 <_malloc_r>
 80061ba:	4606      	mov	r6, r0
 80061bc:	b928      	cbnz	r0, 80061ca <_calloc_r+0x1e>
 80061be:	4630      	mov	r0, r6
 80061c0:	bd70      	pop	{r4, r5, r6, pc}
 80061c2:	220c      	movs	r2, #12
 80061c4:	2600      	movs	r6, #0
 80061c6:	6002      	str	r2, [r0, #0]
 80061c8:	e7f9      	b.n	80061be <_calloc_r+0x12>
 80061ca:	462a      	mov	r2, r5
 80061cc:	4621      	mov	r1, r4
 80061ce:	f7fe f84d 	bl	800426c <memset>
 80061d2:	e7f4      	b.n	80061be <_calloc_r+0x12>

080061d4 <_free_r>:
 80061d4:	b538      	push	{r3, r4, r5, lr}
 80061d6:	4605      	mov	r5, r0
 80061d8:	2900      	cmp	r1, #0
 80061da:	d040      	beq.n	800625e <_free_r+0x8a>
 80061dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061e0:	1f0c      	subs	r4, r1, #4
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	bfb8      	it	lt
 80061e6:	18e4      	addlt	r4, r4, r3
 80061e8:	f000 fcd6 	bl	8006b98 <__malloc_lock>
 80061ec:	4a1c      	ldr	r2, [pc, #112]	; (8006260 <_free_r+0x8c>)
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	b933      	cbnz	r3, 8006200 <_free_r+0x2c>
 80061f2:	6063      	str	r3, [r4, #4]
 80061f4:	6014      	str	r4, [r2, #0]
 80061f6:	4628      	mov	r0, r5
 80061f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061fc:	f000 bcd2 	b.w	8006ba4 <__malloc_unlock>
 8006200:	42a3      	cmp	r3, r4
 8006202:	d908      	bls.n	8006216 <_free_r+0x42>
 8006204:	6820      	ldr	r0, [r4, #0]
 8006206:	1821      	adds	r1, r4, r0
 8006208:	428b      	cmp	r3, r1
 800620a:	bf01      	itttt	eq
 800620c:	6819      	ldreq	r1, [r3, #0]
 800620e:	685b      	ldreq	r3, [r3, #4]
 8006210:	1809      	addeq	r1, r1, r0
 8006212:	6021      	streq	r1, [r4, #0]
 8006214:	e7ed      	b.n	80061f2 <_free_r+0x1e>
 8006216:	461a      	mov	r2, r3
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	b10b      	cbz	r3, 8006220 <_free_r+0x4c>
 800621c:	42a3      	cmp	r3, r4
 800621e:	d9fa      	bls.n	8006216 <_free_r+0x42>
 8006220:	6811      	ldr	r1, [r2, #0]
 8006222:	1850      	adds	r0, r2, r1
 8006224:	42a0      	cmp	r0, r4
 8006226:	d10b      	bne.n	8006240 <_free_r+0x6c>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	4401      	add	r1, r0
 800622c:	1850      	adds	r0, r2, r1
 800622e:	4283      	cmp	r3, r0
 8006230:	6011      	str	r1, [r2, #0]
 8006232:	d1e0      	bne.n	80061f6 <_free_r+0x22>
 8006234:	6818      	ldr	r0, [r3, #0]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	4401      	add	r1, r0
 800623a:	6011      	str	r1, [r2, #0]
 800623c:	6053      	str	r3, [r2, #4]
 800623e:	e7da      	b.n	80061f6 <_free_r+0x22>
 8006240:	d902      	bls.n	8006248 <_free_r+0x74>
 8006242:	230c      	movs	r3, #12
 8006244:	602b      	str	r3, [r5, #0]
 8006246:	e7d6      	b.n	80061f6 <_free_r+0x22>
 8006248:	6820      	ldr	r0, [r4, #0]
 800624a:	1821      	adds	r1, r4, r0
 800624c:	428b      	cmp	r3, r1
 800624e:	bf01      	itttt	eq
 8006250:	6819      	ldreq	r1, [r3, #0]
 8006252:	685b      	ldreq	r3, [r3, #4]
 8006254:	1809      	addeq	r1, r1, r0
 8006256:	6021      	streq	r1, [r4, #0]
 8006258:	6063      	str	r3, [r4, #4]
 800625a:	6054      	str	r4, [r2, #4]
 800625c:	e7cb      	b.n	80061f6 <_free_r+0x22>
 800625e:	bd38      	pop	{r3, r4, r5, pc}
 8006260:	20000364 	.word	0x20000364

08006264 <sbrk_aligned>:
 8006264:	b570      	push	{r4, r5, r6, lr}
 8006266:	4e0e      	ldr	r6, [pc, #56]	; (80062a0 <sbrk_aligned+0x3c>)
 8006268:	460c      	mov	r4, r1
 800626a:	6831      	ldr	r1, [r6, #0]
 800626c:	4605      	mov	r5, r0
 800626e:	b911      	cbnz	r1, 8006276 <sbrk_aligned+0x12>
 8006270:	f000 f9e4 	bl	800663c <_sbrk_r>
 8006274:	6030      	str	r0, [r6, #0]
 8006276:	4621      	mov	r1, r4
 8006278:	4628      	mov	r0, r5
 800627a:	f000 f9df 	bl	800663c <_sbrk_r>
 800627e:	1c43      	adds	r3, r0, #1
 8006280:	d00a      	beq.n	8006298 <sbrk_aligned+0x34>
 8006282:	1cc4      	adds	r4, r0, #3
 8006284:	f024 0403 	bic.w	r4, r4, #3
 8006288:	42a0      	cmp	r0, r4
 800628a:	d007      	beq.n	800629c <sbrk_aligned+0x38>
 800628c:	1a21      	subs	r1, r4, r0
 800628e:	4628      	mov	r0, r5
 8006290:	f000 f9d4 	bl	800663c <_sbrk_r>
 8006294:	3001      	adds	r0, #1
 8006296:	d101      	bne.n	800629c <sbrk_aligned+0x38>
 8006298:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800629c:	4620      	mov	r0, r4
 800629e:	bd70      	pop	{r4, r5, r6, pc}
 80062a0:	20000368 	.word	0x20000368

080062a4 <_malloc_r>:
 80062a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a8:	1ccd      	adds	r5, r1, #3
 80062aa:	f025 0503 	bic.w	r5, r5, #3
 80062ae:	3508      	adds	r5, #8
 80062b0:	2d0c      	cmp	r5, #12
 80062b2:	bf38      	it	cc
 80062b4:	250c      	movcc	r5, #12
 80062b6:	2d00      	cmp	r5, #0
 80062b8:	4607      	mov	r7, r0
 80062ba:	db01      	blt.n	80062c0 <_malloc_r+0x1c>
 80062bc:	42a9      	cmp	r1, r5
 80062be:	d905      	bls.n	80062cc <_malloc_r+0x28>
 80062c0:	230c      	movs	r3, #12
 80062c2:	2600      	movs	r6, #0
 80062c4:	603b      	str	r3, [r7, #0]
 80062c6:	4630      	mov	r0, r6
 80062c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062cc:	4e2e      	ldr	r6, [pc, #184]	; (8006388 <_malloc_r+0xe4>)
 80062ce:	f000 fc63 	bl	8006b98 <__malloc_lock>
 80062d2:	6833      	ldr	r3, [r6, #0]
 80062d4:	461c      	mov	r4, r3
 80062d6:	bb34      	cbnz	r4, 8006326 <_malloc_r+0x82>
 80062d8:	4629      	mov	r1, r5
 80062da:	4638      	mov	r0, r7
 80062dc:	f7ff ffc2 	bl	8006264 <sbrk_aligned>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	4604      	mov	r4, r0
 80062e4:	d14d      	bne.n	8006382 <_malloc_r+0xde>
 80062e6:	6834      	ldr	r4, [r6, #0]
 80062e8:	4626      	mov	r6, r4
 80062ea:	2e00      	cmp	r6, #0
 80062ec:	d140      	bne.n	8006370 <_malloc_r+0xcc>
 80062ee:	6823      	ldr	r3, [r4, #0]
 80062f0:	4631      	mov	r1, r6
 80062f2:	4638      	mov	r0, r7
 80062f4:	eb04 0803 	add.w	r8, r4, r3
 80062f8:	f000 f9a0 	bl	800663c <_sbrk_r>
 80062fc:	4580      	cmp	r8, r0
 80062fe:	d13a      	bne.n	8006376 <_malloc_r+0xd2>
 8006300:	6821      	ldr	r1, [r4, #0]
 8006302:	3503      	adds	r5, #3
 8006304:	1a6d      	subs	r5, r5, r1
 8006306:	f025 0503 	bic.w	r5, r5, #3
 800630a:	3508      	adds	r5, #8
 800630c:	2d0c      	cmp	r5, #12
 800630e:	bf38      	it	cc
 8006310:	250c      	movcc	r5, #12
 8006312:	4638      	mov	r0, r7
 8006314:	4629      	mov	r1, r5
 8006316:	f7ff ffa5 	bl	8006264 <sbrk_aligned>
 800631a:	3001      	adds	r0, #1
 800631c:	d02b      	beq.n	8006376 <_malloc_r+0xd2>
 800631e:	6823      	ldr	r3, [r4, #0]
 8006320:	442b      	add	r3, r5
 8006322:	6023      	str	r3, [r4, #0]
 8006324:	e00e      	b.n	8006344 <_malloc_r+0xa0>
 8006326:	6822      	ldr	r2, [r4, #0]
 8006328:	1b52      	subs	r2, r2, r5
 800632a:	d41e      	bmi.n	800636a <_malloc_r+0xc6>
 800632c:	2a0b      	cmp	r2, #11
 800632e:	d916      	bls.n	800635e <_malloc_r+0xba>
 8006330:	1961      	adds	r1, r4, r5
 8006332:	42a3      	cmp	r3, r4
 8006334:	6025      	str	r5, [r4, #0]
 8006336:	bf18      	it	ne
 8006338:	6059      	strne	r1, [r3, #4]
 800633a:	6863      	ldr	r3, [r4, #4]
 800633c:	bf08      	it	eq
 800633e:	6031      	streq	r1, [r6, #0]
 8006340:	5162      	str	r2, [r4, r5]
 8006342:	604b      	str	r3, [r1, #4]
 8006344:	4638      	mov	r0, r7
 8006346:	f104 060b 	add.w	r6, r4, #11
 800634a:	f000 fc2b 	bl	8006ba4 <__malloc_unlock>
 800634e:	f026 0607 	bic.w	r6, r6, #7
 8006352:	1d23      	adds	r3, r4, #4
 8006354:	1af2      	subs	r2, r6, r3
 8006356:	d0b6      	beq.n	80062c6 <_malloc_r+0x22>
 8006358:	1b9b      	subs	r3, r3, r6
 800635a:	50a3      	str	r3, [r4, r2]
 800635c:	e7b3      	b.n	80062c6 <_malloc_r+0x22>
 800635e:	6862      	ldr	r2, [r4, #4]
 8006360:	42a3      	cmp	r3, r4
 8006362:	bf0c      	ite	eq
 8006364:	6032      	streq	r2, [r6, #0]
 8006366:	605a      	strne	r2, [r3, #4]
 8006368:	e7ec      	b.n	8006344 <_malloc_r+0xa0>
 800636a:	4623      	mov	r3, r4
 800636c:	6864      	ldr	r4, [r4, #4]
 800636e:	e7b2      	b.n	80062d6 <_malloc_r+0x32>
 8006370:	4634      	mov	r4, r6
 8006372:	6876      	ldr	r6, [r6, #4]
 8006374:	e7b9      	b.n	80062ea <_malloc_r+0x46>
 8006376:	230c      	movs	r3, #12
 8006378:	4638      	mov	r0, r7
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	f000 fc12 	bl	8006ba4 <__malloc_unlock>
 8006380:	e7a1      	b.n	80062c6 <_malloc_r+0x22>
 8006382:	6025      	str	r5, [r4, #0]
 8006384:	e7de      	b.n	8006344 <_malloc_r+0xa0>
 8006386:	bf00      	nop
 8006388:	20000364 	.word	0x20000364

0800638c <__sfputc_r>:
 800638c:	6893      	ldr	r3, [r2, #8]
 800638e:	b410      	push	{r4}
 8006390:	3b01      	subs	r3, #1
 8006392:	2b00      	cmp	r3, #0
 8006394:	6093      	str	r3, [r2, #8]
 8006396:	da07      	bge.n	80063a8 <__sfputc_r+0x1c>
 8006398:	6994      	ldr	r4, [r2, #24]
 800639a:	42a3      	cmp	r3, r4
 800639c:	db01      	blt.n	80063a2 <__sfputc_r+0x16>
 800639e:	290a      	cmp	r1, #10
 80063a0:	d102      	bne.n	80063a8 <__sfputc_r+0x1c>
 80063a2:	bc10      	pop	{r4}
 80063a4:	f000 b99e 	b.w	80066e4 <__swbuf_r>
 80063a8:	6813      	ldr	r3, [r2, #0]
 80063aa:	1c58      	adds	r0, r3, #1
 80063ac:	6010      	str	r0, [r2, #0]
 80063ae:	7019      	strb	r1, [r3, #0]
 80063b0:	4608      	mov	r0, r1
 80063b2:	bc10      	pop	{r4}
 80063b4:	4770      	bx	lr

080063b6 <__sfputs_r>:
 80063b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b8:	4606      	mov	r6, r0
 80063ba:	460f      	mov	r7, r1
 80063bc:	4614      	mov	r4, r2
 80063be:	18d5      	adds	r5, r2, r3
 80063c0:	42ac      	cmp	r4, r5
 80063c2:	d101      	bne.n	80063c8 <__sfputs_r+0x12>
 80063c4:	2000      	movs	r0, #0
 80063c6:	e007      	b.n	80063d8 <__sfputs_r+0x22>
 80063c8:	463a      	mov	r2, r7
 80063ca:	4630      	mov	r0, r6
 80063cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063d0:	f7ff ffdc 	bl	800638c <__sfputc_r>
 80063d4:	1c43      	adds	r3, r0, #1
 80063d6:	d1f3      	bne.n	80063c0 <__sfputs_r+0xa>
 80063d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080063dc <_vfiprintf_r>:
 80063dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063e0:	460d      	mov	r5, r1
 80063e2:	4614      	mov	r4, r2
 80063e4:	4698      	mov	r8, r3
 80063e6:	4606      	mov	r6, r0
 80063e8:	b09d      	sub	sp, #116	; 0x74
 80063ea:	b118      	cbz	r0, 80063f4 <_vfiprintf_r+0x18>
 80063ec:	6983      	ldr	r3, [r0, #24]
 80063ee:	b90b      	cbnz	r3, 80063f4 <_vfiprintf_r+0x18>
 80063f0:	f7ff fa90 	bl	8005914 <__sinit>
 80063f4:	4b89      	ldr	r3, [pc, #548]	; (800661c <_vfiprintf_r+0x240>)
 80063f6:	429d      	cmp	r5, r3
 80063f8:	d11b      	bne.n	8006432 <_vfiprintf_r+0x56>
 80063fa:	6875      	ldr	r5, [r6, #4]
 80063fc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80063fe:	07d9      	lsls	r1, r3, #31
 8006400:	d405      	bmi.n	800640e <_vfiprintf_r+0x32>
 8006402:	89ab      	ldrh	r3, [r5, #12]
 8006404:	059a      	lsls	r2, r3, #22
 8006406:	d402      	bmi.n	800640e <_vfiprintf_r+0x32>
 8006408:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800640a:	f7ff fb26 	bl	8005a5a <__retarget_lock_acquire_recursive>
 800640e:	89ab      	ldrh	r3, [r5, #12]
 8006410:	071b      	lsls	r3, r3, #28
 8006412:	d501      	bpl.n	8006418 <_vfiprintf_r+0x3c>
 8006414:	692b      	ldr	r3, [r5, #16]
 8006416:	b9eb      	cbnz	r3, 8006454 <_vfiprintf_r+0x78>
 8006418:	4629      	mov	r1, r5
 800641a:	4630      	mov	r0, r6
 800641c:	f000 f9c6 	bl	80067ac <__swsetup_r>
 8006420:	b1c0      	cbz	r0, 8006454 <_vfiprintf_r+0x78>
 8006422:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006424:	07dc      	lsls	r4, r3, #31
 8006426:	d50e      	bpl.n	8006446 <_vfiprintf_r+0x6a>
 8006428:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800642c:	b01d      	add	sp, #116	; 0x74
 800642e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006432:	4b7b      	ldr	r3, [pc, #492]	; (8006620 <_vfiprintf_r+0x244>)
 8006434:	429d      	cmp	r5, r3
 8006436:	d101      	bne.n	800643c <_vfiprintf_r+0x60>
 8006438:	68b5      	ldr	r5, [r6, #8]
 800643a:	e7df      	b.n	80063fc <_vfiprintf_r+0x20>
 800643c:	4b79      	ldr	r3, [pc, #484]	; (8006624 <_vfiprintf_r+0x248>)
 800643e:	429d      	cmp	r5, r3
 8006440:	bf08      	it	eq
 8006442:	68f5      	ldreq	r5, [r6, #12]
 8006444:	e7da      	b.n	80063fc <_vfiprintf_r+0x20>
 8006446:	89ab      	ldrh	r3, [r5, #12]
 8006448:	0598      	lsls	r0, r3, #22
 800644a:	d4ed      	bmi.n	8006428 <_vfiprintf_r+0x4c>
 800644c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800644e:	f7ff fb05 	bl	8005a5c <__retarget_lock_release_recursive>
 8006452:	e7e9      	b.n	8006428 <_vfiprintf_r+0x4c>
 8006454:	2300      	movs	r3, #0
 8006456:	9309      	str	r3, [sp, #36]	; 0x24
 8006458:	2320      	movs	r3, #32
 800645a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800645e:	2330      	movs	r3, #48	; 0x30
 8006460:	f04f 0901 	mov.w	r9, #1
 8006464:	f8cd 800c 	str.w	r8, [sp, #12]
 8006468:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006628 <_vfiprintf_r+0x24c>
 800646c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006470:	4623      	mov	r3, r4
 8006472:	469a      	mov	sl, r3
 8006474:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006478:	b10a      	cbz	r2, 800647e <_vfiprintf_r+0xa2>
 800647a:	2a25      	cmp	r2, #37	; 0x25
 800647c:	d1f9      	bne.n	8006472 <_vfiprintf_r+0x96>
 800647e:	ebba 0b04 	subs.w	fp, sl, r4
 8006482:	d00b      	beq.n	800649c <_vfiprintf_r+0xc0>
 8006484:	465b      	mov	r3, fp
 8006486:	4622      	mov	r2, r4
 8006488:	4629      	mov	r1, r5
 800648a:	4630      	mov	r0, r6
 800648c:	f7ff ff93 	bl	80063b6 <__sfputs_r>
 8006490:	3001      	adds	r0, #1
 8006492:	f000 80aa 	beq.w	80065ea <_vfiprintf_r+0x20e>
 8006496:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006498:	445a      	add	r2, fp
 800649a:	9209      	str	r2, [sp, #36]	; 0x24
 800649c:	f89a 3000 	ldrb.w	r3, [sl]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f000 80a2 	beq.w	80065ea <_vfiprintf_r+0x20e>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80064ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064b0:	f10a 0a01 	add.w	sl, sl, #1
 80064b4:	9304      	str	r3, [sp, #16]
 80064b6:	9307      	str	r3, [sp, #28]
 80064b8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064bc:	931a      	str	r3, [sp, #104]	; 0x68
 80064be:	4654      	mov	r4, sl
 80064c0:	2205      	movs	r2, #5
 80064c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c6:	4858      	ldr	r0, [pc, #352]	; (8006628 <_vfiprintf_r+0x24c>)
 80064c8:	f7ff fad2 	bl	8005a70 <memchr>
 80064cc:	9a04      	ldr	r2, [sp, #16]
 80064ce:	b9d8      	cbnz	r0, 8006508 <_vfiprintf_r+0x12c>
 80064d0:	06d1      	lsls	r1, r2, #27
 80064d2:	bf44      	itt	mi
 80064d4:	2320      	movmi	r3, #32
 80064d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064da:	0713      	lsls	r3, r2, #28
 80064dc:	bf44      	itt	mi
 80064de:	232b      	movmi	r3, #43	; 0x2b
 80064e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80064e4:	f89a 3000 	ldrb.w	r3, [sl]
 80064e8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ea:	d015      	beq.n	8006518 <_vfiprintf_r+0x13c>
 80064ec:	4654      	mov	r4, sl
 80064ee:	2000      	movs	r0, #0
 80064f0:	f04f 0c0a 	mov.w	ip, #10
 80064f4:	9a07      	ldr	r2, [sp, #28]
 80064f6:	4621      	mov	r1, r4
 80064f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80064fc:	3b30      	subs	r3, #48	; 0x30
 80064fe:	2b09      	cmp	r3, #9
 8006500:	d94e      	bls.n	80065a0 <_vfiprintf_r+0x1c4>
 8006502:	b1b0      	cbz	r0, 8006532 <_vfiprintf_r+0x156>
 8006504:	9207      	str	r2, [sp, #28]
 8006506:	e014      	b.n	8006532 <_vfiprintf_r+0x156>
 8006508:	eba0 0308 	sub.w	r3, r0, r8
 800650c:	fa09 f303 	lsl.w	r3, r9, r3
 8006510:	4313      	orrs	r3, r2
 8006512:	46a2      	mov	sl, r4
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	e7d2      	b.n	80064be <_vfiprintf_r+0xe2>
 8006518:	9b03      	ldr	r3, [sp, #12]
 800651a:	1d19      	adds	r1, r3, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	9103      	str	r1, [sp, #12]
 8006520:	2b00      	cmp	r3, #0
 8006522:	bfbb      	ittet	lt
 8006524:	425b      	neglt	r3, r3
 8006526:	f042 0202 	orrlt.w	r2, r2, #2
 800652a:	9307      	strge	r3, [sp, #28]
 800652c:	9307      	strlt	r3, [sp, #28]
 800652e:	bfb8      	it	lt
 8006530:	9204      	strlt	r2, [sp, #16]
 8006532:	7823      	ldrb	r3, [r4, #0]
 8006534:	2b2e      	cmp	r3, #46	; 0x2e
 8006536:	d10c      	bne.n	8006552 <_vfiprintf_r+0x176>
 8006538:	7863      	ldrb	r3, [r4, #1]
 800653a:	2b2a      	cmp	r3, #42	; 0x2a
 800653c:	d135      	bne.n	80065aa <_vfiprintf_r+0x1ce>
 800653e:	9b03      	ldr	r3, [sp, #12]
 8006540:	3402      	adds	r4, #2
 8006542:	1d1a      	adds	r2, r3, #4
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	9203      	str	r2, [sp, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	bfb8      	it	lt
 800654c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006550:	9305      	str	r3, [sp, #20]
 8006552:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800662c <_vfiprintf_r+0x250>
 8006556:	2203      	movs	r2, #3
 8006558:	4650      	mov	r0, sl
 800655a:	7821      	ldrb	r1, [r4, #0]
 800655c:	f7ff fa88 	bl	8005a70 <memchr>
 8006560:	b140      	cbz	r0, 8006574 <_vfiprintf_r+0x198>
 8006562:	2340      	movs	r3, #64	; 0x40
 8006564:	eba0 000a 	sub.w	r0, r0, sl
 8006568:	fa03 f000 	lsl.w	r0, r3, r0
 800656c:	9b04      	ldr	r3, [sp, #16]
 800656e:	3401      	adds	r4, #1
 8006570:	4303      	orrs	r3, r0
 8006572:	9304      	str	r3, [sp, #16]
 8006574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006578:	2206      	movs	r2, #6
 800657a:	482d      	ldr	r0, [pc, #180]	; (8006630 <_vfiprintf_r+0x254>)
 800657c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006580:	f7ff fa76 	bl	8005a70 <memchr>
 8006584:	2800      	cmp	r0, #0
 8006586:	d03f      	beq.n	8006608 <_vfiprintf_r+0x22c>
 8006588:	4b2a      	ldr	r3, [pc, #168]	; (8006634 <_vfiprintf_r+0x258>)
 800658a:	bb1b      	cbnz	r3, 80065d4 <_vfiprintf_r+0x1f8>
 800658c:	9b03      	ldr	r3, [sp, #12]
 800658e:	3307      	adds	r3, #7
 8006590:	f023 0307 	bic.w	r3, r3, #7
 8006594:	3308      	adds	r3, #8
 8006596:	9303      	str	r3, [sp, #12]
 8006598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800659a:	443b      	add	r3, r7
 800659c:	9309      	str	r3, [sp, #36]	; 0x24
 800659e:	e767      	b.n	8006470 <_vfiprintf_r+0x94>
 80065a0:	460c      	mov	r4, r1
 80065a2:	2001      	movs	r0, #1
 80065a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80065a8:	e7a5      	b.n	80064f6 <_vfiprintf_r+0x11a>
 80065aa:	2300      	movs	r3, #0
 80065ac:	f04f 0c0a 	mov.w	ip, #10
 80065b0:	4619      	mov	r1, r3
 80065b2:	3401      	adds	r4, #1
 80065b4:	9305      	str	r3, [sp, #20]
 80065b6:	4620      	mov	r0, r4
 80065b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065bc:	3a30      	subs	r2, #48	; 0x30
 80065be:	2a09      	cmp	r2, #9
 80065c0:	d903      	bls.n	80065ca <_vfiprintf_r+0x1ee>
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d0c5      	beq.n	8006552 <_vfiprintf_r+0x176>
 80065c6:	9105      	str	r1, [sp, #20]
 80065c8:	e7c3      	b.n	8006552 <_vfiprintf_r+0x176>
 80065ca:	4604      	mov	r4, r0
 80065cc:	2301      	movs	r3, #1
 80065ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80065d2:	e7f0      	b.n	80065b6 <_vfiprintf_r+0x1da>
 80065d4:	ab03      	add	r3, sp, #12
 80065d6:	9300      	str	r3, [sp, #0]
 80065d8:	462a      	mov	r2, r5
 80065da:	4630      	mov	r0, r6
 80065dc:	4b16      	ldr	r3, [pc, #88]	; (8006638 <_vfiprintf_r+0x25c>)
 80065de:	a904      	add	r1, sp, #16
 80065e0:	f7fd feea 	bl	80043b8 <_printf_float>
 80065e4:	4607      	mov	r7, r0
 80065e6:	1c78      	adds	r0, r7, #1
 80065e8:	d1d6      	bne.n	8006598 <_vfiprintf_r+0x1bc>
 80065ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80065ec:	07d9      	lsls	r1, r3, #31
 80065ee:	d405      	bmi.n	80065fc <_vfiprintf_r+0x220>
 80065f0:	89ab      	ldrh	r3, [r5, #12]
 80065f2:	059a      	lsls	r2, r3, #22
 80065f4:	d402      	bmi.n	80065fc <_vfiprintf_r+0x220>
 80065f6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80065f8:	f7ff fa30 	bl	8005a5c <__retarget_lock_release_recursive>
 80065fc:	89ab      	ldrh	r3, [r5, #12]
 80065fe:	065b      	lsls	r3, r3, #25
 8006600:	f53f af12 	bmi.w	8006428 <_vfiprintf_r+0x4c>
 8006604:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006606:	e711      	b.n	800642c <_vfiprintf_r+0x50>
 8006608:	ab03      	add	r3, sp, #12
 800660a:	9300      	str	r3, [sp, #0]
 800660c:	462a      	mov	r2, r5
 800660e:	4630      	mov	r0, r6
 8006610:	4b09      	ldr	r3, [pc, #36]	; (8006638 <_vfiprintf_r+0x25c>)
 8006612:	a904      	add	r1, sp, #16
 8006614:	f7fe f96c 	bl	80048f0 <_printf_i>
 8006618:	e7e4      	b.n	80065e4 <_vfiprintf_r+0x208>
 800661a:	bf00      	nop
 800661c:	08006dfc 	.word	0x08006dfc
 8006620:	08006e1c 	.word	0x08006e1c
 8006624:	08006ddc 	.word	0x08006ddc
 8006628:	08006f94 	.word	0x08006f94
 800662c:	08006f9a 	.word	0x08006f9a
 8006630:	08006f9e 	.word	0x08006f9e
 8006634:	080043b9 	.word	0x080043b9
 8006638:	080063b7 	.word	0x080063b7

0800663c <_sbrk_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	2300      	movs	r3, #0
 8006640:	4d05      	ldr	r5, [pc, #20]	; (8006658 <_sbrk_r+0x1c>)
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	f7fb fade 	bl	8001c08 <_sbrk>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_sbrk_r+0x1a>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_sbrk_r+0x1a>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	2000036c 	.word	0x2000036c

0800665c <__sread>:
 800665c:	b510      	push	{r4, lr}
 800665e:	460c      	mov	r4, r1
 8006660:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006664:	f000 faa4 	bl	8006bb0 <_read_r>
 8006668:	2800      	cmp	r0, #0
 800666a:	bfab      	itete	ge
 800666c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800666e:	89a3      	ldrhlt	r3, [r4, #12]
 8006670:	181b      	addge	r3, r3, r0
 8006672:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006676:	bfac      	ite	ge
 8006678:	6563      	strge	r3, [r4, #84]	; 0x54
 800667a:	81a3      	strhlt	r3, [r4, #12]
 800667c:	bd10      	pop	{r4, pc}

0800667e <__swrite>:
 800667e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006682:	461f      	mov	r7, r3
 8006684:	898b      	ldrh	r3, [r1, #12]
 8006686:	4605      	mov	r5, r0
 8006688:	05db      	lsls	r3, r3, #23
 800668a:	460c      	mov	r4, r1
 800668c:	4616      	mov	r6, r2
 800668e:	d505      	bpl.n	800669c <__swrite+0x1e>
 8006690:	2302      	movs	r3, #2
 8006692:	2200      	movs	r2, #0
 8006694:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006698:	f000 f9f4 	bl	8006a84 <_lseek_r>
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	4632      	mov	r2, r6
 80066a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066a4:	81a3      	strh	r3, [r4, #12]
 80066a6:	4628      	mov	r0, r5
 80066a8:	463b      	mov	r3, r7
 80066aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066b2:	f000 b869 	b.w	8006788 <_write_r>

080066b6 <__sseek>:
 80066b6:	b510      	push	{r4, lr}
 80066b8:	460c      	mov	r4, r1
 80066ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066be:	f000 f9e1 	bl	8006a84 <_lseek_r>
 80066c2:	1c43      	adds	r3, r0, #1
 80066c4:	89a3      	ldrh	r3, [r4, #12]
 80066c6:	bf15      	itete	ne
 80066c8:	6560      	strne	r0, [r4, #84]	; 0x54
 80066ca:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ce:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066d2:	81a3      	strheq	r3, [r4, #12]
 80066d4:	bf18      	it	ne
 80066d6:	81a3      	strhne	r3, [r4, #12]
 80066d8:	bd10      	pop	{r4, pc}

080066da <__sclose>:
 80066da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066de:	f000 b8f1 	b.w	80068c4 <_close_r>
	...

080066e4 <__swbuf_r>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	460e      	mov	r6, r1
 80066e8:	4614      	mov	r4, r2
 80066ea:	4605      	mov	r5, r0
 80066ec:	b118      	cbz	r0, 80066f6 <__swbuf_r+0x12>
 80066ee:	6983      	ldr	r3, [r0, #24]
 80066f0:	b90b      	cbnz	r3, 80066f6 <__swbuf_r+0x12>
 80066f2:	f7ff f90f 	bl	8005914 <__sinit>
 80066f6:	4b21      	ldr	r3, [pc, #132]	; (800677c <__swbuf_r+0x98>)
 80066f8:	429c      	cmp	r4, r3
 80066fa:	d12b      	bne.n	8006754 <__swbuf_r+0x70>
 80066fc:	686c      	ldr	r4, [r5, #4]
 80066fe:	69a3      	ldr	r3, [r4, #24]
 8006700:	60a3      	str	r3, [r4, #8]
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	071a      	lsls	r2, r3, #28
 8006706:	d52f      	bpl.n	8006768 <__swbuf_r+0x84>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	b36b      	cbz	r3, 8006768 <__swbuf_r+0x84>
 800670c:	6923      	ldr	r3, [r4, #16]
 800670e:	6820      	ldr	r0, [r4, #0]
 8006710:	b2f6      	uxtb	r6, r6
 8006712:	1ac0      	subs	r0, r0, r3
 8006714:	6963      	ldr	r3, [r4, #20]
 8006716:	4637      	mov	r7, r6
 8006718:	4283      	cmp	r3, r0
 800671a:	dc04      	bgt.n	8006726 <__swbuf_r+0x42>
 800671c:	4621      	mov	r1, r4
 800671e:	4628      	mov	r0, r5
 8006720:	f000 f962 	bl	80069e8 <_fflush_r>
 8006724:	bb30      	cbnz	r0, 8006774 <__swbuf_r+0x90>
 8006726:	68a3      	ldr	r3, [r4, #8]
 8006728:	3001      	adds	r0, #1
 800672a:	3b01      	subs	r3, #1
 800672c:	60a3      	str	r3, [r4, #8]
 800672e:	6823      	ldr	r3, [r4, #0]
 8006730:	1c5a      	adds	r2, r3, #1
 8006732:	6022      	str	r2, [r4, #0]
 8006734:	701e      	strb	r6, [r3, #0]
 8006736:	6963      	ldr	r3, [r4, #20]
 8006738:	4283      	cmp	r3, r0
 800673a:	d004      	beq.n	8006746 <__swbuf_r+0x62>
 800673c:	89a3      	ldrh	r3, [r4, #12]
 800673e:	07db      	lsls	r3, r3, #31
 8006740:	d506      	bpl.n	8006750 <__swbuf_r+0x6c>
 8006742:	2e0a      	cmp	r6, #10
 8006744:	d104      	bne.n	8006750 <__swbuf_r+0x6c>
 8006746:	4621      	mov	r1, r4
 8006748:	4628      	mov	r0, r5
 800674a:	f000 f94d 	bl	80069e8 <_fflush_r>
 800674e:	b988      	cbnz	r0, 8006774 <__swbuf_r+0x90>
 8006750:	4638      	mov	r0, r7
 8006752:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006754:	4b0a      	ldr	r3, [pc, #40]	; (8006780 <__swbuf_r+0x9c>)
 8006756:	429c      	cmp	r4, r3
 8006758:	d101      	bne.n	800675e <__swbuf_r+0x7a>
 800675a:	68ac      	ldr	r4, [r5, #8]
 800675c:	e7cf      	b.n	80066fe <__swbuf_r+0x1a>
 800675e:	4b09      	ldr	r3, [pc, #36]	; (8006784 <__swbuf_r+0xa0>)
 8006760:	429c      	cmp	r4, r3
 8006762:	bf08      	it	eq
 8006764:	68ec      	ldreq	r4, [r5, #12]
 8006766:	e7ca      	b.n	80066fe <__swbuf_r+0x1a>
 8006768:	4621      	mov	r1, r4
 800676a:	4628      	mov	r0, r5
 800676c:	f000 f81e 	bl	80067ac <__swsetup_r>
 8006770:	2800      	cmp	r0, #0
 8006772:	d0cb      	beq.n	800670c <__swbuf_r+0x28>
 8006774:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006778:	e7ea      	b.n	8006750 <__swbuf_r+0x6c>
 800677a:	bf00      	nop
 800677c:	08006dfc 	.word	0x08006dfc
 8006780:	08006e1c 	.word	0x08006e1c
 8006784:	08006ddc 	.word	0x08006ddc

08006788 <_write_r>:
 8006788:	b538      	push	{r3, r4, r5, lr}
 800678a:	4604      	mov	r4, r0
 800678c:	4608      	mov	r0, r1
 800678e:	4611      	mov	r1, r2
 8006790:	2200      	movs	r2, #0
 8006792:	4d05      	ldr	r5, [pc, #20]	; (80067a8 <_write_r+0x20>)
 8006794:	602a      	str	r2, [r5, #0]
 8006796:	461a      	mov	r2, r3
 8006798:	f7fa fc6a 	bl	8001070 <_write>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_write_r+0x1e>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_write_r+0x1e>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	2000036c 	.word	0x2000036c

080067ac <__swsetup_r>:
 80067ac:	4b32      	ldr	r3, [pc, #200]	; (8006878 <__swsetup_r+0xcc>)
 80067ae:	b570      	push	{r4, r5, r6, lr}
 80067b0:	681d      	ldr	r5, [r3, #0]
 80067b2:	4606      	mov	r6, r0
 80067b4:	460c      	mov	r4, r1
 80067b6:	b125      	cbz	r5, 80067c2 <__swsetup_r+0x16>
 80067b8:	69ab      	ldr	r3, [r5, #24]
 80067ba:	b913      	cbnz	r3, 80067c2 <__swsetup_r+0x16>
 80067bc:	4628      	mov	r0, r5
 80067be:	f7ff f8a9 	bl	8005914 <__sinit>
 80067c2:	4b2e      	ldr	r3, [pc, #184]	; (800687c <__swsetup_r+0xd0>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	d10f      	bne.n	80067e8 <__swsetup_r+0x3c>
 80067c8:	686c      	ldr	r4, [r5, #4]
 80067ca:	89a3      	ldrh	r3, [r4, #12]
 80067cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067d0:	0719      	lsls	r1, r3, #28
 80067d2:	d42c      	bmi.n	800682e <__swsetup_r+0x82>
 80067d4:	06dd      	lsls	r5, r3, #27
 80067d6:	d411      	bmi.n	80067fc <__swsetup_r+0x50>
 80067d8:	2309      	movs	r3, #9
 80067da:	6033      	str	r3, [r6, #0]
 80067dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	e03e      	b.n	8006866 <__swsetup_r+0xba>
 80067e8:	4b25      	ldr	r3, [pc, #148]	; (8006880 <__swsetup_r+0xd4>)
 80067ea:	429c      	cmp	r4, r3
 80067ec:	d101      	bne.n	80067f2 <__swsetup_r+0x46>
 80067ee:	68ac      	ldr	r4, [r5, #8]
 80067f0:	e7eb      	b.n	80067ca <__swsetup_r+0x1e>
 80067f2:	4b24      	ldr	r3, [pc, #144]	; (8006884 <__swsetup_r+0xd8>)
 80067f4:	429c      	cmp	r4, r3
 80067f6:	bf08      	it	eq
 80067f8:	68ec      	ldreq	r4, [r5, #12]
 80067fa:	e7e6      	b.n	80067ca <__swsetup_r+0x1e>
 80067fc:	0758      	lsls	r0, r3, #29
 80067fe:	d512      	bpl.n	8006826 <__swsetup_r+0x7a>
 8006800:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006802:	b141      	cbz	r1, 8006816 <__swsetup_r+0x6a>
 8006804:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006808:	4299      	cmp	r1, r3
 800680a:	d002      	beq.n	8006812 <__swsetup_r+0x66>
 800680c:	4630      	mov	r0, r6
 800680e:	f7ff fce1 	bl	80061d4 <_free_r>
 8006812:	2300      	movs	r3, #0
 8006814:	6363      	str	r3, [r4, #52]	; 0x34
 8006816:	89a3      	ldrh	r3, [r4, #12]
 8006818:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800681c:	81a3      	strh	r3, [r4, #12]
 800681e:	2300      	movs	r3, #0
 8006820:	6063      	str	r3, [r4, #4]
 8006822:	6923      	ldr	r3, [r4, #16]
 8006824:	6023      	str	r3, [r4, #0]
 8006826:	89a3      	ldrh	r3, [r4, #12]
 8006828:	f043 0308 	orr.w	r3, r3, #8
 800682c:	81a3      	strh	r3, [r4, #12]
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	b94b      	cbnz	r3, 8006846 <__swsetup_r+0x9a>
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006838:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800683c:	d003      	beq.n	8006846 <__swsetup_r+0x9a>
 800683e:	4621      	mov	r1, r4
 8006840:	4630      	mov	r0, r6
 8006842:	f000 f957 	bl	8006af4 <__smakebuf_r>
 8006846:	89a0      	ldrh	r0, [r4, #12]
 8006848:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800684c:	f010 0301 	ands.w	r3, r0, #1
 8006850:	d00a      	beq.n	8006868 <__swsetup_r+0xbc>
 8006852:	2300      	movs	r3, #0
 8006854:	60a3      	str	r3, [r4, #8]
 8006856:	6963      	ldr	r3, [r4, #20]
 8006858:	425b      	negs	r3, r3
 800685a:	61a3      	str	r3, [r4, #24]
 800685c:	6923      	ldr	r3, [r4, #16]
 800685e:	b943      	cbnz	r3, 8006872 <__swsetup_r+0xc6>
 8006860:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006864:	d1ba      	bne.n	80067dc <__swsetup_r+0x30>
 8006866:	bd70      	pop	{r4, r5, r6, pc}
 8006868:	0781      	lsls	r1, r0, #30
 800686a:	bf58      	it	pl
 800686c:	6963      	ldrpl	r3, [r4, #20]
 800686e:	60a3      	str	r3, [r4, #8]
 8006870:	e7f4      	b.n	800685c <__swsetup_r+0xb0>
 8006872:	2000      	movs	r0, #0
 8006874:	e7f7      	b.n	8006866 <__swsetup_r+0xba>
 8006876:	bf00      	nop
 8006878:	20000010 	.word	0x20000010
 800687c:	08006dfc 	.word	0x08006dfc
 8006880:	08006e1c 	.word	0x08006e1c
 8006884:	08006ddc 	.word	0x08006ddc

08006888 <__assert_func>:
 8006888:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800688a:	4614      	mov	r4, r2
 800688c:	461a      	mov	r2, r3
 800688e:	4b09      	ldr	r3, [pc, #36]	; (80068b4 <__assert_func+0x2c>)
 8006890:	4605      	mov	r5, r0
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68d8      	ldr	r0, [r3, #12]
 8006896:	b14c      	cbz	r4, 80068ac <__assert_func+0x24>
 8006898:	4b07      	ldr	r3, [pc, #28]	; (80068b8 <__assert_func+0x30>)
 800689a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800689e:	9100      	str	r1, [sp, #0]
 80068a0:	462b      	mov	r3, r5
 80068a2:	4906      	ldr	r1, [pc, #24]	; (80068bc <__assert_func+0x34>)
 80068a4:	f000 f8dc 	bl	8006a60 <fiprintf>
 80068a8:	f000 f9a1 	bl	8006bee <abort>
 80068ac:	4b04      	ldr	r3, [pc, #16]	; (80068c0 <__assert_func+0x38>)
 80068ae:	461c      	mov	r4, r3
 80068b0:	e7f3      	b.n	800689a <__assert_func+0x12>
 80068b2:	bf00      	nop
 80068b4:	20000010 	.word	0x20000010
 80068b8:	08006fa5 	.word	0x08006fa5
 80068bc:	08006fb2 	.word	0x08006fb2
 80068c0:	08006fe0 	.word	0x08006fe0

080068c4 <_close_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	2300      	movs	r3, #0
 80068c8:	4d05      	ldr	r5, [pc, #20]	; (80068e0 <_close_r+0x1c>)
 80068ca:	4604      	mov	r4, r0
 80068cc:	4608      	mov	r0, r1
 80068ce:	602b      	str	r3, [r5, #0]
 80068d0:	f7fb f96a 	bl	8001ba8 <_close>
 80068d4:	1c43      	adds	r3, r0, #1
 80068d6:	d102      	bne.n	80068de <_close_r+0x1a>
 80068d8:	682b      	ldr	r3, [r5, #0]
 80068da:	b103      	cbz	r3, 80068de <_close_r+0x1a>
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	bd38      	pop	{r3, r4, r5, pc}
 80068e0:	2000036c 	.word	0x2000036c

080068e4 <__sflush_r>:
 80068e4:	898a      	ldrh	r2, [r1, #12]
 80068e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068e8:	4605      	mov	r5, r0
 80068ea:	0710      	lsls	r0, r2, #28
 80068ec:	460c      	mov	r4, r1
 80068ee:	d457      	bmi.n	80069a0 <__sflush_r+0xbc>
 80068f0:	684b      	ldr	r3, [r1, #4]
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	dc04      	bgt.n	8006900 <__sflush_r+0x1c>
 80068f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc01      	bgt.n	8006900 <__sflush_r+0x1c>
 80068fc:	2000      	movs	r0, #0
 80068fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006900:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006902:	2e00      	cmp	r6, #0
 8006904:	d0fa      	beq.n	80068fc <__sflush_r+0x18>
 8006906:	2300      	movs	r3, #0
 8006908:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800690c:	682f      	ldr	r7, [r5, #0]
 800690e:	602b      	str	r3, [r5, #0]
 8006910:	d032      	beq.n	8006978 <__sflush_r+0x94>
 8006912:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	075a      	lsls	r2, r3, #29
 8006918:	d505      	bpl.n	8006926 <__sflush_r+0x42>
 800691a:	6863      	ldr	r3, [r4, #4]
 800691c:	1ac0      	subs	r0, r0, r3
 800691e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006920:	b10b      	cbz	r3, 8006926 <__sflush_r+0x42>
 8006922:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006924:	1ac0      	subs	r0, r0, r3
 8006926:	2300      	movs	r3, #0
 8006928:	4602      	mov	r2, r0
 800692a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800692c:	4628      	mov	r0, r5
 800692e:	6a21      	ldr	r1, [r4, #32]
 8006930:	47b0      	blx	r6
 8006932:	1c43      	adds	r3, r0, #1
 8006934:	89a3      	ldrh	r3, [r4, #12]
 8006936:	d106      	bne.n	8006946 <__sflush_r+0x62>
 8006938:	6829      	ldr	r1, [r5, #0]
 800693a:	291d      	cmp	r1, #29
 800693c:	d82c      	bhi.n	8006998 <__sflush_r+0xb4>
 800693e:	4a29      	ldr	r2, [pc, #164]	; (80069e4 <__sflush_r+0x100>)
 8006940:	40ca      	lsrs	r2, r1
 8006942:	07d6      	lsls	r6, r2, #31
 8006944:	d528      	bpl.n	8006998 <__sflush_r+0xb4>
 8006946:	2200      	movs	r2, #0
 8006948:	6062      	str	r2, [r4, #4]
 800694a:	6922      	ldr	r2, [r4, #16]
 800694c:	04d9      	lsls	r1, r3, #19
 800694e:	6022      	str	r2, [r4, #0]
 8006950:	d504      	bpl.n	800695c <__sflush_r+0x78>
 8006952:	1c42      	adds	r2, r0, #1
 8006954:	d101      	bne.n	800695a <__sflush_r+0x76>
 8006956:	682b      	ldr	r3, [r5, #0]
 8006958:	b903      	cbnz	r3, 800695c <__sflush_r+0x78>
 800695a:	6560      	str	r0, [r4, #84]	; 0x54
 800695c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800695e:	602f      	str	r7, [r5, #0]
 8006960:	2900      	cmp	r1, #0
 8006962:	d0cb      	beq.n	80068fc <__sflush_r+0x18>
 8006964:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006968:	4299      	cmp	r1, r3
 800696a:	d002      	beq.n	8006972 <__sflush_r+0x8e>
 800696c:	4628      	mov	r0, r5
 800696e:	f7ff fc31 	bl	80061d4 <_free_r>
 8006972:	2000      	movs	r0, #0
 8006974:	6360      	str	r0, [r4, #52]	; 0x34
 8006976:	e7c2      	b.n	80068fe <__sflush_r+0x1a>
 8006978:	6a21      	ldr	r1, [r4, #32]
 800697a:	2301      	movs	r3, #1
 800697c:	4628      	mov	r0, r5
 800697e:	47b0      	blx	r6
 8006980:	1c41      	adds	r1, r0, #1
 8006982:	d1c7      	bne.n	8006914 <__sflush_r+0x30>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d0c4      	beq.n	8006914 <__sflush_r+0x30>
 800698a:	2b1d      	cmp	r3, #29
 800698c:	d001      	beq.n	8006992 <__sflush_r+0xae>
 800698e:	2b16      	cmp	r3, #22
 8006990:	d101      	bne.n	8006996 <__sflush_r+0xb2>
 8006992:	602f      	str	r7, [r5, #0]
 8006994:	e7b2      	b.n	80068fc <__sflush_r+0x18>
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800699c:	81a3      	strh	r3, [r4, #12]
 800699e:	e7ae      	b.n	80068fe <__sflush_r+0x1a>
 80069a0:	690f      	ldr	r7, [r1, #16]
 80069a2:	2f00      	cmp	r7, #0
 80069a4:	d0aa      	beq.n	80068fc <__sflush_r+0x18>
 80069a6:	0793      	lsls	r3, r2, #30
 80069a8:	bf18      	it	ne
 80069aa:	2300      	movne	r3, #0
 80069ac:	680e      	ldr	r6, [r1, #0]
 80069ae:	bf08      	it	eq
 80069b0:	694b      	ldreq	r3, [r1, #20]
 80069b2:	1bf6      	subs	r6, r6, r7
 80069b4:	600f      	str	r7, [r1, #0]
 80069b6:	608b      	str	r3, [r1, #8]
 80069b8:	2e00      	cmp	r6, #0
 80069ba:	dd9f      	ble.n	80068fc <__sflush_r+0x18>
 80069bc:	4633      	mov	r3, r6
 80069be:	463a      	mov	r2, r7
 80069c0:	4628      	mov	r0, r5
 80069c2:	6a21      	ldr	r1, [r4, #32]
 80069c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80069c8:	47e0      	blx	ip
 80069ca:	2800      	cmp	r0, #0
 80069cc:	dc06      	bgt.n	80069dc <__sflush_r+0xf8>
 80069ce:	89a3      	ldrh	r3, [r4, #12]
 80069d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069d8:	81a3      	strh	r3, [r4, #12]
 80069da:	e790      	b.n	80068fe <__sflush_r+0x1a>
 80069dc:	4407      	add	r7, r0
 80069de:	1a36      	subs	r6, r6, r0
 80069e0:	e7ea      	b.n	80069b8 <__sflush_r+0xd4>
 80069e2:	bf00      	nop
 80069e4:	20400001 	.word	0x20400001

080069e8 <_fflush_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	690b      	ldr	r3, [r1, #16]
 80069ec:	4605      	mov	r5, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	b913      	cbnz	r3, 80069f8 <_fflush_r+0x10>
 80069f2:	2500      	movs	r5, #0
 80069f4:	4628      	mov	r0, r5
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	b118      	cbz	r0, 8006a02 <_fflush_r+0x1a>
 80069fa:	6983      	ldr	r3, [r0, #24]
 80069fc:	b90b      	cbnz	r3, 8006a02 <_fflush_r+0x1a>
 80069fe:	f7fe ff89 	bl	8005914 <__sinit>
 8006a02:	4b14      	ldr	r3, [pc, #80]	; (8006a54 <_fflush_r+0x6c>)
 8006a04:	429c      	cmp	r4, r3
 8006a06:	d11b      	bne.n	8006a40 <_fflush_r+0x58>
 8006a08:	686c      	ldr	r4, [r5, #4]
 8006a0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d0ef      	beq.n	80069f2 <_fflush_r+0xa>
 8006a12:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a14:	07d0      	lsls	r0, r2, #31
 8006a16:	d404      	bmi.n	8006a22 <_fflush_r+0x3a>
 8006a18:	0599      	lsls	r1, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_fflush_r+0x3a>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1e:	f7ff f81c 	bl	8005a5a <__retarget_lock_acquire_recursive>
 8006a22:	4628      	mov	r0, r5
 8006a24:	4621      	mov	r1, r4
 8006a26:	f7ff ff5d 	bl	80068e4 <__sflush_r>
 8006a2a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a2c:	4605      	mov	r5, r0
 8006a2e:	07da      	lsls	r2, r3, #31
 8006a30:	d4e0      	bmi.n	80069f4 <_fflush_r+0xc>
 8006a32:	89a3      	ldrh	r3, [r4, #12]
 8006a34:	059b      	lsls	r3, r3, #22
 8006a36:	d4dd      	bmi.n	80069f4 <_fflush_r+0xc>
 8006a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a3a:	f7ff f80f 	bl	8005a5c <__retarget_lock_release_recursive>
 8006a3e:	e7d9      	b.n	80069f4 <_fflush_r+0xc>
 8006a40:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <_fflush_r+0x70>)
 8006a42:	429c      	cmp	r4, r3
 8006a44:	d101      	bne.n	8006a4a <_fflush_r+0x62>
 8006a46:	68ac      	ldr	r4, [r5, #8]
 8006a48:	e7df      	b.n	8006a0a <_fflush_r+0x22>
 8006a4a:	4b04      	ldr	r3, [pc, #16]	; (8006a5c <_fflush_r+0x74>)
 8006a4c:	429c      	cmp	r4, r3
 8006a4e:	bf08      	it	eq
 8006a50:	68ec      	ldreq	r4, [r5, #12]
 8006a52:	e7da      	b.n	8006a0a <_fflush_r+0x22>
 8006a54:	08006dfc 	.word	0x08006dfc
 8006a58:	08006e1c 	.word	0x08006e1c
 8006a5c:	08006ddc 	.word	0x08006ddc

08006a60 <fiprintf>:
 8006a60:	b40e      	push	{r1, r2, r3}
 8006a62:	b503      	push	{r0, r1, lr}
 8006a64:	4601      	mov	r1, r0
 8006a66:	ab03      	add	r3, sp, #12
 8006a68:	4805      	ldr	r0, [pc, #20]	; (8006a80 <fiprintf+0x20>)
 8006a6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a6e:	6800      	ldr	r0, [r0, #0]
 8006a70:	9301      	str	r3, [sp, #4]
 8006a72:	f7ff fcb3 	bl	80063dc <_vfiprintf_r>
 8006a76:	b002      	add	sp, #8
 8006a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a7c:	b003      	add	sp, #12
 8006a7e:	4770      	bx	lr
 8006a80:	20000010 	.word	0x20000010

08006a84 <_lseek_r>:
 8006a84:	b538      	push	{r3, r4, r5, lr}
 8006a86:	4604      	mov	r4, r0
 8006a88:	4608      	mov	r0, r1
 8006a8a:	4611      	mov	r1, r2
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	4d05      	ldr	r5, [pc, #20]	; (8006aa4 <_lseek_r+0x20>)
 8006a90:	602a      	str	r2, [r5, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	f7fb f8ac 	bl	8001bf0 <_lseek>
 8006a98:	1c43      	adds	r3, r0, #1
 8006a9a:	d102      	bne.n	8006aa2 <_lseek_r+0x1e>
 8006a9c:	682b      	ldr	r3, [r5, #0]
 8006a9e:	b103      	cbz	r3, 8006aa2 <_lseek_r+0x1e>
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	bd38      	pop	{r3, r4, r5, pc}
 8006aa4:	2000036c 	.word	0x2000036c

08006aa8 <__swhatbuf_r>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	460e      	mov	r6, r1
 8006aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	2900      	cmp	r1, #0
 8006ab4:	461d      	mov	r5, r3
 8006ab6:	b096      	sub	sp, #88	; 0x58
 8006ab8:	da08      	bge.n	8006acc <__swhatbuf_r+0x24>
 8006aba:	2200      	movs	r2, #0
 8006abc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ac0:	602a      	str	r2, [r5, #0]
 8006ac2:	061a      	lsls	r2, r3, #24
 8006ac4:	d410      	bmi.n	8006ae8 <__swhatbuf_r+0x40>
 8006ac6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aca:	e00e      	b.n	8006aea <__swhatbuf_r+0x42>
 8006acc:	466a      	mov	r2, sp
 8006ace:	f000 f895 	bl	8006bfc <_fstat_r>
 8006ad2:	2800      	cmp	r0, #0
 8006ad4:	dbf1      	blt.n	8006aba <__swhatbuf_r+0x12>
 8006ad6:	9a01      	ldr	r2, [sp, #4]
 8006ad8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006adc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ae0:	425a      	negs	r2, r3
 8006ae2:	415a      	adcs	r2, r3
 8006ae4:	602a      	str	r2, [r5, #0]
 8006ae6:	e7ee      	b.n	8006ac6 <__swhatbuf_r+0x1e>
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	2000      	movs	r0, #0
 8006aec:	6023      	str	r3, [r4, #0]
 8006aee:	b016      	add	sp, #88	; 0x58
 8006af0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006af4 <__smakebuf_r>:
 8006af4:	898b      	ldrh	r3, [r1, #12]
 8006af6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006af8:	079d      	lsls	r5, r3, #30
 8006afa:	4606      	mov	r6, r0
 8006afc:	460c      	mov	r4, r1
 8006afe:	d507      	bpl.n	8006b10 <__smakebuf_r+0x1c>
 8006b00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	6123      	str	r3, [r4, #16]
 8006b08:	2301      	movs	r3, #1
 8006b0a:	6163      	str	r3, [r4, #20]
 8006b0c:	b002      	add	sp, #8
 8006b0e:	bd70      	pop	{r4, r5, r6, pc}
 8006b10:	466a      	mov	r2, sp
 8006b12:	ab01      	add	r3, sp, #4
 8006b14:	f7ff ffc8 	bl	8006aa8 <__swhatbuf_r>
 8006b18:	9900      	ldr	r1, [sp, #0]
 8006b1a:	4605      	mov	r5, r0
 8006b1c:	4630      	mov	r0, r6
 8006b1e:	f7ff fbc1 	bl	80062a4 <_malloc_r>
 8006b22:	b948      	cbnz	r0, 8006b38 <__smakebuf_r+0x44>
 8006b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b28:	059a      	lsls	r2, r3, #22
 8006b2a:	d4ef      	bmi.n	8006b0c <__smakebuf_r+0x18>
 8006b2c:	f023 0303 	bic.w	r3, r3, #3
 8006b30:	f043 0302 	orr.w	r3, r3, #2
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	e7e3      	b.n	8006b00 <__smakebuf_r+0xc>
 8006b38:	4b0d      	ldr	r3, [pc, #52]	; (8006b70 <__smakebuf_r+0x7c>)
 8006b3a:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	6020      	str	r0, [r4, #0]
 8006b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	9b00      	ldr	r3, [sp, #0]
 8006b48:	6120      	str	r0, [r4, #16]
 8006b4a:	6163      	str	r3, [r4, #20]
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	b15b      	cbz	r3, 8006b68 <__smakebuf_r+0x74>
 8006b50:	4630      	mov	r0, r6
 8006b52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b56:	f000 f863 	bl	8006c20 <_isatty_r>
 8006b5a:	b128      	cbz	r0, 8006b68 <__smakebuf_r+0x74>
 8006b5c:	89a3      	ldrh	r3, [r4, #12]
 8006b5e:	f023 0303 	bic.w	r3, r3, #3
 8006b62:	f043 0301 	orr.w	r3, r3, #1
 8006b66:	81a3      	strh	r3, [r4, #12]
 8006b68:	89a0      	ldrh	r0, [r4, #12]
 8006b6a:	4305      	orrs	r5, r0
 8006b6c:	81a5      	strh	r5, [r4, #12]
 8006b6e:	e7cd      	b.n	8006b0c <__smakebuf_r+0x18>
 8006b70:	080058ad 	.word	0x080058ad

08006b74 <__ascii_mbtowc>:
 8006b74:	b082      	sub	sp, #8
 8006b76:	b901      	cbnz	r1, 8006b7a <__ascii_mbtowc+0x6>
 8006b78:	a901      	add	r1, sp, #4
 8006b7a:	b142      	cbz	r2, 8006b8e <__ascii_mbtowc+0x1a>
 8006b7c:	b14b      	cbz	r3, 8006b92 <__ascii_mbtowc+0x1e>
 8006b7e:	7813      	ldrb	r3, [r2, #0]
 8006b80:	600b      	str	r3, [r1, #0]
 8006b82:	7812      	ldrb	r2, [r2, #0]
 8006b84:	1e10      	subs	r0, r2, #0
 8006b86:	bf18      	it	ne
 8006b88:	2001      	movne	r0, #1
 8006b8a:	b002      	add	sp, #8
 8006b8c:	4770      	bx	lr
 8006b8e:	4610      	mov	r0, r2
 8006b90:	e7fb      	b.n	8006b8a <__ascii_mbtowc+0x16>
 8006b92:	f06f 0001 	mvn.w	r0, #1
 8006b96:	e7f8      	b.n	8006b8a <__ascii_mbtowc+0x16>

08006b98 <__malloc_lock>:
 8006b98:	4801      	ldr	r0, [pc, #4]	; (8006ba0 <__malloc_lock+0x8>)
 8006b9a:	f7fe bf5e 	b.w	8005a5a <__retarget_lock_acquire_recursive>
 8006b9e:	bf00      	nop
 8006ba0:	20000360 	.word	0x20000360

08006ba4 <__malloc_unlock>:
 8006ba4:	4801      	ldr	r0, [pc, #4]	; (8006bac <__malloc_unlock+0x8>)
 8006ba6:	f7fe bf59 	b.w	8005a5c <__retarget_lock_release_recursive>
 8006baa:	bf00      	nop
 8006bac:	20000360 	.word	0x20000360

08006bb0 <_read_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	4604      	mov	r4, r0
 8006bb4:	4608      	mov	r0, r1
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4d05      	ldr	r5, [pc, #20]	; (8006bd0 <_read_r+0x20>)
 8006bbc:	602a      	str	r2, [r5, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	f7fa ffd5 	bl	8001b6e <_read>
 8006bc4:	1c43      	adds	r3, r0, #1
 8006bc6:	d102      	bne.n	8006bce <_read_r+0x1e>
 8006bc8:	682b      	ldr	r3, [r5, #0]
 8006bca:	b103      	cbz	r3, 8006bce <_read_r+0x1e>
 8006bcc:	6023      	str	r3, [r4, #0]
 8006bce:	bd38      	pop	{r3, r4, r5, pc}
 8006bd0:	2000036c 	.word	0x2000036c

08006bd4 <__ascii_wctomb>:
 8006bd4:	4603      	mov	r3, r0
 8006bd6:	4608      	mov	r0, r1
 8006bd8:	b141      	cbz	r1, 8006bec <__ascii_wctomb+0x18>
 8006bda:	2aff      	cmp	r2, #255	; 0xff
 8006bdc:	d904      	bls.n	8006be8 <__ascii_wctomb+0x14>
 8006bde:	228a      	movs	r2, #138	; 0x8a
 8006be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	4770      	bx	lr
 8006be8:	2001      	movs	r0, #1
 8006bea:	700a      	strb	r2, [r1, #0]
 8006bec:	4770      	bx	lr

08006bee <abort>:
 8006bee:	2006      	movs	r0, #6
 8006bf0:	b508      	push	{r3, lr}
 8006bf2:	f000 f84d 	bl	8006c90 <raise>
 8006bf6:	2001      	movs	r0, #1
 8006bf8:	f7fa ffaf 	bl	8001b5a <_exit>

08006bfc <_fstat_r>:
 8006bfc:	b538      	push	{r3, r4, r5, lr}
 8006bfe:	2300      	movs	r3, #0
 8006c00:	4d06      	ldr	r5, [pc, #24]	; (8006c1c <_fstat_r+0x20>)
 8006c02:	4604      	mov	r4, r0
 8006c04:	4608      	mov	r0, r1
 8006c06:	4611      	mov	r1, r2
 8006c08:	602b      	str	r3, [r5, #0]
 8006c0a:	f7fa ffd8 	bl	8001bbe <_fstat>
 8006c0e:	1c43      	adds	r3, r0, #1
 8006c10:	d102      	bne.n	8006c18 <_fstat_r+0x1c>
 8006c12:	682b      	ldr	r3, [r5, #0]
 8006c14:	b103      	cbz	r3, 8006c18 <_fstat_r+0x1c>
 8006c16:	6023      	str	r3, [r4, #0]
 8006c18:	bd38      	pop	{r3, r4, r5, pc}
 8006c1a:	bf00      	nop
 8006c1c:	2000036c 	.word	0x2000036c

08006c20 <_isatty_r>:
 8006c20:	b538      	push	{r3, r4, r5, lr}
 8006c22:	2300      	movs	r3, #0
 8006c24:	4d05      	ldr	r5, [pc, #20]	; (8006c3c <_isatty_r+0x1c>)
 8006c26:	4604      	mov	r4, r0
 8006c28:	4608      	mov	r0, r1
 8006c2a:	602b      	str	r3, [r5, #0]
 8006c2c:	f7fa ffd6 	bl	8001bdc <_isatty>
 8006c30:	1c43      	adds	r3, r0, #1
 8006c32:	d102      	bne.n	8006c3a <_isatty_r+0x1a>
 8006c34:	682b      	ldr	r3, [r5, #0]
 8006c36:	b103      	cbz	r3, 8006c3a <_isatty_r+0x1a>
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	bd38      	pop	{r3, r4, r5, pc}
 8006c3c:	2000036c 	.word	0x2000036c

08006c40 <_raise_r>:
 8006c40:	291f      	cmp	r1, #31
 8006c42:	b538      	push	{r3, r4, r5, lr}
 8006c44:	4604      	mov	r4, r0
 8006c46:	460d      	mov	r5, r1
 8006c48:	d904      	bls.n	8006c54 <_raise_r+0x14>
 8006c4a:	2316      	movs	r3, #22
 8006c4c:	6003      	str	r3, [r0, #0]
 8006c4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c52:	bd38      	pop	{r3, r4, r5, pc}
 8006c54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006c56:	b112      	cbz	r2, 8006c5e <_raise_r+0x1e>
 8006c58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006c5c:	b94b      	cbnz	r3, 8006c72 <_raise_r+0x32>
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f000 f830 	bl	8006cc4 <_getpid_r>
 8006c64:	462a      	mov	r2, r5
 8006c66:	4601      	mov	r1, r0
 8006c68:	4620      	mov	r0, r4
 8006c6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c6e:	f000 b817 	b.w	8006ca0 <_kill_r>
 8006c72:	2b01      	cmp	r3, #1
 8006c74:	d00a      	beq.n	8006c8c <_raise_r+0x4c>
 8006c76:	1c59      	adds	r1, r3, #1
 8006c78:	d103      	bne.n	8006c82 <_raise_r+0x42>
 8006c7a:	2316      	movs	r3, #22
 8006c7c:	6003      	str	r3, [r0, #0]
 8006c7e:	2001      	movs	r0, #1
 8006c80:	e7e7      	b.n	8006c52 <_raise_r+0x12>
 8006c82:	2400      	movs	r4, #0
 8006c84:	4628      	mov	r0, r5
 8006c86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006c8a:	4798      	blx	r3
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	e7e0      	b.n	8006c52 <_raise_r+0x12>

08006c90 <raise>:
 8006c90:	4b02      	ldr	r3, [pc, #8]	; (8006c9c <raise+0xc>)
 8006c92:	4601      	mov	r1, r0
 8006c94:	6818      	ldr	r0, [r3, #0]
 8006c96:	f7ff bfd3 	b.w	8006c40 <_raise_r>
 8006c9a:	bf00      	nop
 8006c9c:	20000010 	.word	0x20000010

08006ca0 <_kill_r>:
 8006ca0:	b538      	push	{r3, r4, r5, lr}
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	4d06      	ldr	r5, [pc, #24]	; (8006cc0 <_kill_r+0x20>)
 8006ca6:	4604      	mov	r4, r0
 8006ca8:	4608      	mov	r0, r1
 8006caa:	4611      	mov	r1, r2
 8006cac:	602b      	str	r3, [r5, #0]
 8006cae:	f7fa ff44 	bl	8001b3a <_kill>
 8006cb2:	1c43      	adds	r3, r0, #1
 8006cb4:	d102      	bne.n	8006cbc <_kill_r+0x1c>
 8006cb6:	682b      	ldr	r3, [r5, #0]
 8006cb8:	b103      	cbz	r3, 8006cbc <_kill_r+0x1c>
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	bd38      	pop	{r3, r4, r5, pc}
 8006cbe:	bf00      	nop
 8006cc0:	2000036c 	.word	0x2000036c

08006cc4 <_getpid_r>:
 8006cc4:	f7fa bf32 	b.w	8001b2c <_getpid>

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	bf00      	nop
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	bf00      	nop
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
