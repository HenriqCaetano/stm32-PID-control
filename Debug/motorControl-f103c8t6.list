
motorControl-f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000069f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006b00  08006b00  00016b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f0c  08006f0c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08006f0c  08006f0c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f0c  08006f0c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f0c  08006f0c  00016f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08006f14  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  200001e4  080070f8  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000374  080070f8  00020374  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9eb  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c44  00000000  00000000  0002cbf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0002e840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002f4c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018468  00000000  00000000  00030098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cd07  00000000  00000000  00048500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbbf  00000000  00000000  00055207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e0dc6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004530  00000000  00000000  000e0e18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	08006ae8 	.word	0x08006ae8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	08006ae8 	.word	0x08006ae8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
//for data transmission using FTDI, requires USART 1 enabled
int _write(int fd, char* ptr, int len) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f58:	68b9      	ldr	r1, [r7, #8]
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <_write+0x28>)
 8000f5c:	f002 feed 	bl	8003d3a <HAL_UART_Transmit>
    return len;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200002d8 	.word	0x200002d8

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f76:	f000 fd75 	bl	8001a64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7a:	f000 f851 	bl	8001020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7e:	f000 fa15 	bl	80013ac <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f82:	f000 f931 	bl	80011e8 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000f86:	f000 f9e7 	bl	8001358 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f8a:	f000 f991 	bl	80012b0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000f8e:	f000 f88d 	bl	80010ac <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //starts PWM timer
 8000f92:	210c      	movs	r1, #12
 8000f94:	4818      	ldr	r0, [pc, #96]	; (8000ff8 <main+0x88>)
 8000f96:	f001 fd7b 	bl	8002a90 <HAL_TIM_PWM_Start>
  dutyCycle = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4); //initializes dutyCycle
 8000f9a:	210c      	movs	r1, #12
 8000f9c:	4816      	ldr	r0, [pc, #88]	; (8000ff8 <main+0x88>)
 8000f9e:	f002 fa1d 	bl	80033dc <HAL_TIM_ReadCapturedValue>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	4a15      	ldr	r2, [pc, #84]	; (8000ffc <main+0x8c>)
 8000fa6:	6013      	str	r3, [r2, #0]
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //start timer in encoder mode
 8000fa8:	213c      	movs	r1, #60	; 0x3c
 8000faa:	4815      	ldr	r0, [pc, #84]	; (8001000 <main+0x90>)
 8000fac:	f001 feb4 	bl	8002d18 <HAL_TIM_Encoder_Start>

  //TODO: ajuste dos parâmetros do PID
  pidInit(&controller, MIN_PWM, MAX_PWM, KP, KI, KD);
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	9301      	str	r3, [sp, #4]
 8000fb6:	f04f 0300 	mov.w	r3, #0
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	f04f 0300 	mov.w	r3, #0
 8000fc0:	4a10      	ldr	r2, [pc, #64]	; (8001004 <main+0x94>)
 8000fc2:	4911      	ldr	r1, [pc, #68]	; (8001008 <main+0x98>)
 8000fc4:	4811      	ldr	r0, [pc, #68]	; (800100c <main+0x9c>)
 8000fc6:	f000 fb18 	bl	80015fa <pidInit>

  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, GPIO_PIN_SET); //enable ON (required)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2108      	movs	r1, #8
 8000fce:	4810      	ldr	r0, [pc, #64]	; (8001010 <main+0xa0>)
 8000fd0:	f001 f83c 	bl	800204c <HAL_GPIO_WritePin>
  motorStop(); //motor initially stopped
 8000fd4:	f000 fafc 	bl	80015d0 <motorStop>

//  HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_RESET);

  htim1.Instance->CCR4 = 174;
 8000fd8:	4b07      	ldr	r3, [pc, #28]	; (8000ff8 <main+0x88>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	22ae      	movs	r2, #174	; 0xae
 8000fde:	641a      	str	r2, [r3, #64]	; 0x40
  TIM4->CNT = 0;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <main+0xa4>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	625a      	str	r2, [r3, #36]	; 0x24
  lastTick = HAL_GetTick();
 8000fe6:	f000 fd95 	bl	8001b14 <HAL_GetTick>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4a0a      	ldr	r2, [pc, #40]	; (8001018 <main+0xa8>)
 8000fee:	6013      	str	r3, [r2, #0]

  //TIM1->CCR4 = 399; //100% PWM
  HAL_TIM_Base_Start_IT(&htim2); //starts interrupt timer
 8000ff0:	480a      	ldr	r0, [pc, #40]	; (800101c <main+0xac>)
 8000ff2:	f001 fca3 	bl	800293c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <main+0x86>
 8000ff8:	20000200 	.word	0x20000200
 8000ffc:	2000033c 	.word	0x2000033c
 8001000:	20000290 	.word	0x20000290
 8001004:	42c80000 	.word	0x42c80000
 8001008:	c2c80000 	.word	0xc2c80000
 800100c:	20000340 	.word	0x20000340
 8001010:	40010800 	.word	0x40010800
 8001014:	40000800 	.word	0x40000800
 8001018:	20000338 	.word	0x20000338
 800101c:	20000248 	.word	0x20000248

08001020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b090      	sub	sp, #64	; 0x40
 8001024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001026:	f107 0318 	add.w	r3, r7, #24
 800102a:	2228      	movs	r2, #40	; 0x28
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f003 f82c 	bl	800408c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001034:	1d3b      	adds	r3, r7, #4
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
 800103a:	605a      	str	r2, [r3, #4]
 800103c:	609a      	str	r2, [r3, #8]
 800103e:	60da      	str	r2, [r3, #12]
 8001040:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001042:	2301      	movs	r3, #1
 8001044:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001046:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800104a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800104c:	2300      	movs	r3, #0
 800104e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001050:	2301      	movs	r3, #1
 8001052:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001054:	2302      	movs	r3, #2
 8001056:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001058:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800105e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001062:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001064:	f107 0318 	add.w	r3, r7, #24
 8001068:	4618      	mov	r0, r3
 800106a:	f001 f807 	bl	800207c <HAL_RCC_OscConfig>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001074:	f000 fabc 	bl	80015f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001078:	230f      	movs	r3, #15
 800107a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800107c:	2302      	movs	r3, #2
 800107e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001084:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001088:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800108e:	1d3b      	adds	r3, r7, #4
 8001090:	2102      	movs	r1, #2
 8001092:	4618      	mov	r0, r3
 8001094:	f001 fa74 	bl	8002580 <HAL_RCC_ClockConfig>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800109e:	f000 faa7 	bl	80015f0 <Error_Handler>
  }
}
 80010a2:	bf00      	nop
 80010a4:	3740      	adds	r7, #64	; 0x40
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b096      	sub	sp, #88	; 0x58
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
 80010d8:	611a      	str	r2, [r3, #16]
 80010da:	615a      	str	r2, [r3, #20]
 80010dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010de:	1d3b      	adds	r3, r7, #4
 80010e0:	2220      	movs	r2, #32
 80010e2:	2100      	movs	r1, #0
 80010e4:	4618      	mov	r0, r3
 80010e6:	f002 ffd1 	bl	800408c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ea:	4b3d      	ldr	r3, [pc, #244]	; (80011e0 <MX_TIM1_Init+0x134>)
 80010ec:	4a3d      	ldr	r2, [pc, #244]	; (80011e4 <MX_TIM1_Init+0x138>)
 80010ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 80010f0:	4b3b      	ldr	r3, [pc, #236]	; (80011e0 <MX_TIM1_Init+0x134>)
 80010f2:	2209      	movs	r2, #9
 80010f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b3a      	ldr	r3, [pc, #232]	; (80011e0 <MX_TIM1_Init+0x134>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 699;
 80010fc:	4b38      	ldr	r3, [pc, #224]	; (80011e0 <MX_TIM1_Init+0x134>)
 80010fe:	f240 22bb 	movw	r2, #699	; 0x2bb
 8001102:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b36      	ldr	r3, [pc, #216]	; (80011e0 <MX_TIM1_Init+0x134>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800110a:	4b35      	ldr	r3, [pc, #212]	; (80011e0 <MX_TIM1_Init+0x134>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001110:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <MX_TIM1_Init+0x134>)
 8001112:	2280      	movs	r2, #128	; 0x80
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001116:	4832      	ldr	r0, [pc, #200]	; (80011e0 <MX_TIM1_Init+0x134>)
 8001118:	f001 fbc0 	bl	800289c <HAL_TIM_Base_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001122:	f000 fa65 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001130:	4619      	mov	r1, r3
 8001132:	482b      	ldr	r0, [pc, #172]	; (80011e0 <MX_TIM1_Init+0x134>)
 8001134:	f002 f848 	bl	80031c8 <HAL_TIM_ConfigClockSource>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800113e:	f000 fa57 	bl	80015f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001142:	4827      	ldr	r0, [pc, #156]	; (80011e0 <MX_TIM1_Init+0x134>)
 8001144:	f001 fc4c 	bl	80029e0 <HAL_TIM_PWM_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800114e:	f000 fa4f 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800115e:	4619      	mov	r1, r3
 8001160:	481f      	ldr	r0, [pc, #124]	; (80011e0 <MX_TIM1_Init+0x134>)
 8001162:	f002 fcd9 	bl	8003b18 <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800116c:	f000 fa40 	bl	80015f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001170:	2360      	movs	r3, #96	; 0x60
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001174:	2300      	movs	r3, #0
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001178:	2300      	movs	r3, #0
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001180:	2300      	movs	r3, #0
 8001182:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001184:	2300      	movs	r3, #0
 8001186:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001188:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800118c:	220c      	movs	r2, #12
 800118e:	4619      	mov	r1, r3
 8001190:	4813      	ldr	r0, [pc, #76]	; (80011e0 <MX_TIM1_Init+0x134>)
 8001192:	f001 ff57 	bl	8003044 <HAL_TIM_PWM_ConfigChannel>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800119c:	f000 fa28 	bl	80015f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011b8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011ba:	2300      	movs	r3, #0
 80011bc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011be:	1d3b      	adds	r3, r7, #4
 80011c0:	4619      	mov	r1, r3
 80011c2:	4807      	ldr	r0, [pc, #28]	; (80011e0 <MX_TIM1_Init+0x134>)
 80011c4:	f002 fd06 	bl	8003bd4 <HAL_TIMEx_ConfigBreakDeadTime>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80011ce:	f000 fa0f 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011d2:	4803      	ldr	r0, [pc, #12]	; (80011e0 <MX_TIM1_Init+0x134>)
 80011d4:	f000 fac4 	bl	8001760 <HAL_TIM_MspPostInit>

}
 80011d8:	bf00      	nop
 80011da:	3758      	adds	r7, #88	; 0x58
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000200 	.word	0x20000200
 80011e4:	40012c00 	.word	0x40012c00

080011e8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b08c      	sub	sp, #48	; 0x30
 80011ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ee:	f107 0320 	add.w	r3, r7, #32
 80011f2:	2200      	movs	r2, #0
 80011f4:	601a      	str	r2, [r3, #0]
 80011f6:	605a      	str	r2, [r3, #4]
 80011f8:	609a      	str	r2, [r3, #8]
 80011fa:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80011fc:	f107 030c 	add.w	r3, r7, #12
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001214:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MX_TIM2_Init+0xc4>)
 8001216:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800121a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200;
 800121c:	4b23      	ldr	r3, [pc, #140]	; (80012ac <MX_TIM2_Init+0xc4>)
 800121e:	f44f 52e1 	mov.w	r2, #7200	; 0x1c20
 8001222:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <MX_TIM2_Init+0xc4>)
 8001226:	2200      	movs	r2, #0
 8001228:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 800;
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_TIM2_Init+0xc4>)
 800122c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8001230:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001232:	4b1e      	ldr	r3, [pc, #120]	; (80012ac <MX_TIM2_Init+0xc4>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <MX_TIM2_Init+0xc4>)
 800123a:	2280      	movs	r2, #128	; 0x80
 800123c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800123e:	481b      	ldr	r0, [pc, #108]	; (80012ac <MX_TIM2_Init+0xc4>)
 8001240:	f001 fb2c 	bl	800289c <HAL_TIM_Base_Init>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800124a:	f000 f9d1 	bl	80015f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800124e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001252:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001254:	f107 0320 	add.w	r3, r7, #32
 8001258:	4619      	mov	r1, r3
 800125a:	4814      	ldr	r0, [pc, #80]	; (80012ac <MX_TIM2_Init+0xc4>)
 800125c:	f001 ffb4 	bl	80031c8 <HAL_TIM_ConfigClockSource>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001266:	f000 f9c3 	bl	80015f0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800126e:	2300      	movs	r3, #0
 8001270:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4619      	mov	r1, r3
 8001278:	480c      	ldr	r0, [pc, #48]	; (80012ac <MX_TIM2_Init+0xc4>)
 800127a:	f002 f86c 	bl	8003356 <HAL_TIM_SlaveConfigSynchro>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001284:	f000 f9b4 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001288:	2300      	movs	r3, #0
 800128a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	4619      	mov	r1, r3
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <MX_TIM2_Init+0xc4>)
 8001296:	f002 fc3f 	bl	8003b18 <HAL_TIMEx_MasterConfigSynchronization>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80012a0:	f000 f9a6 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012a4:	bf00      	nop
 80012a6:	3730      	adds	r7, #48	; 0x30
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	20000248 	.word	0x20000248

080012b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	; 0x30
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2224      	movs	r2, #36	; 0x24
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f002 fee4 	bl	800408c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	1d3b      	adds	r3, r7, #4
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012cc:	4b20      	ldr	r3, [pc, #128]	; (8001350 <MX_TIM4_Init+0xa0>)
 80012ce:	4a21      	ldr	r2, [pc, #132]	; (8001354 <MX_TIM4_Init+0xa4>)
 80012d0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80012d2:	4b1f      	ldr	r3, [pc, #124]	; (8001350 <MX_TIM4_Init+0xa0>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <MX_TIM4_Init+0xa0>)
 80012da:	2200      	movs	r2, #0
 80012dc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80012de:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <MX_TIM4_Init+0xa0>)
 80012e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e6:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <MX_TIM4_Init+0xa0>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ec:	4b18      	ldr	r3, [pc, #96]	; (8001350 <MX_TIM4_Init+0xa0>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012f2:	2301      	movs	r3, #1
 80012f4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012fa:	2301      	movs	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800130a:	2301      	movs	r3, #1
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800130e:	2300      	movs	r3, #0
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001316:	f107 030c 	add.w	r3, r7, #12
 800131a:	4619      	mov	r1, r3
 800131c:	480c      	ldr	r0, [pc, #48]	; (8001350 <MX_TIM4_Init+0xa0>)
 800131e:	f001 fc59 	bl	8002bd4 <HAL_TIM_Encoder_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001328:	f000 f962 	bl	80015f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	; (8001350 <MX_TIM4_Init+0xa0>)
 800133a:	f002 fbed 	bl	8003b18 <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001344:	f000 f954 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3730      	adds	r7, #48	; 0x30
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000290 	.word	0x20000290
 8001354:	40000800 	.word	0x40000800

08001358 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <MX_USART1_UART_Init+0x50>)
 8001360:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001364:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001368:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800136a:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001370:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800137c:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800137e:	220c      	movs	r2, #12
 8001380:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001382:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001388:	4b06      	ldr	r3, [pc, #24]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 800138a:	2200      	movs	r2, #0
 800138c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800138e:	4805      	ldr	r0, [pc, #20]	; (80013a4 <MX_USART1_UART_Init+0x4c>)
 8001390:	f002 fc83 	bl	8003c9a <HAL_UART_Init>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800139a:	f000 f929 	bl	80015f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200002d8 	.word	0x200002d8
 80013a8:	40013800 	.word	0x40013800

080013ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b088      	sub	sp, #32
 80013b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b2:	f107 0310 	add.w	r3, r7, #16
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_GPIO_Init+0x8c>)
 80013c2:	699b      	ldr	r3, [r3, #24]
 80013c4:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <MX_GPIO_Init+0x8c>)
 80013c6:	f043 0320 	orr.w	r3, r3, #32
 80013ca:	6193      	str	r3, [r2, #24]
 80013cc:	4b1a      	ldr	r3, [pc, #104]	; (8001438 <MX_GPIO_Init+0x8c>)
 80013ce:	699b      	ldr	r3, [r3, #24]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d8:	4b17      	ldr	r3, [pc, #92]	; (8001438 <MX_GPIO_Init+0x8c>)
 80013da:	699b      	ldr	r3, [r3, #24]
 80013dc:	4a16      	ldr	r2, [pc, #88]	; (8001438 <MX_GPIO_Init+0x8c>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6193      	str	r3, [r2, #24]
 80013e4:	4b14      	ldr	r3, [pc, #80]	; (8001438 <MX_GPIO_Init+0x8c>)
 80013e6:	699b      	ldr	r3, [r3, #24]
 80013e8:	f003 0304 	and.w	r3, r3, #4
 80013ec:	60bb      	str	r3, [r7, #8]
 80013ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f0:	4b11      	ldr	r3, [pc, #68]	; (8001438 <MX_GPIO_Init+0x8c>)
 80013f2:	699b      	ldr	r3, [r3, #24]
 80013f4:	4a10      	ldr	r2, [pc, #64]	; (8001438 <MX_GPIO_Init+0x8c>)
 80013f6:	f043 0308 	orr.w	r3, r3, #8
 80013fa:	6193      	str	r3, [r2, #24]
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <MX_GPIO_Init+0x8c>)
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	f003 0308 	and.w	r3, r3, #8
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|IN_A_Pin|IN_B_Pin, GPIO_PIN_RESET);
 8001408:	2200      	movs	r2, #0
 800140a:	2138      	movs	r1, #56	; 0x38
 800140c:	480b      	ldr	r0, [pc, #44]	; (800143c <MX_GPIO_Init+0x90>)
 800140e:	f000 fe1d 	bl	800204c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin IN_A_Pin IN_B_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|IN_A_Pin|IN_B_Pin;
 8001412:	2338      	movs	r3, #56	; 0x38
 8001414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001416:	2301      	movs	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141a:	2300      	movs	r3, #0
 800141c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141e:	2302      	movs	r3, #2
 8001420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4619      	mov	r1, r3
 8001428:	4804      	ldr	r0, [pc, #16]	; (800143c <MX_GPIO_Init+0x90>)
 800142a:	f000 fc8b 	bl	8001d44 <HAL_GPIO_Init>

}
 800142e:	bf00      	nop
 8001430:	3720      	adds	r7, #32
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40021000 	.word	0x40021000
 800143c:	40010800 	.word	0x40010800

08001440 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
//central control function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001440:	b5b0      	push	{r4, r5, r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af02      	add	r7, sp, #8
 8001446:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a45      	ldr	r2, [pc, #276]	; (8001560 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800144c:	4293      	cmp	r3, r2
 800144e:	f040 8082 	bne.w	8001556 <HAL_TIM_PeriodElapsedCallback+0x116>
		 * PASSAR VELOCIDADE ATUAL E ALVO PARA A FUNÇÃO DE CÁLCULO DE PID
		 * PASSAR O RESULTADO PARA O TIMER DE PWM
		 * VERIFICAR RESULTADOS
		 * */

		currentTick = HAL_GetTick();
 8001452:	f000 fb5f 	bl	8001b14 <HAL_GetTick>
 8001456:	4603      	mov	r3, r0
 8001458:	4a42      	ldr	r2, [pc, #264]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800145a:	6013      	str	r3, [r2, #0]

		//setPoint in PWM becomes encoder pulses
		//pulsesSetPoint = -(setPoint-127) * (float)HIGH_LEVEL_INPUT_TO_PWM_PERCENTAGE * MOTOR_MAX_PULSES; //high-level input to pulses (0-127)
		//pulsesSetPoint = (setPoint - 129) * (float)HIGH_LEVEL_INPUT_TO_PWM_PERCENTAGE * MOTOR_MAX_PULSES; //high-level input to pulses (129-255)

		if(pulsesSetPoint > 0){
 800145c:	4b42      	ldr	r3, [pc, #264]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800145e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001462:	f04f 0200 	mov.w	r2, #0
 8001466:	f04f 0300 	mov.w	r3, #0
 800146a:	f7ff fac5 	bl	80009f8 <__aeabi_dcmpgt>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d002      	beq.n	800147a <HAL_TIM_PeriodElapsedCallback+0x3a>
			motorClockWise();
 8001474:	f000 f88c 	bl	8001590 <motorClockWise>
 8001478:	e010      	b.n	800149c <HAL_TIM_PeriodElapsedCallback+0x5c>
		}
		else if(pulsesSetPoint < 0){
 800147a:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800147c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001480:	f04f 0200 	mov.w	r2, #0
 8001484:	f04f 0300 	mov.w	r3, #0
 8001488:	f7ff fa98 	bl	80009bc <__aeabi_dcmplt>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d002      	beq.n	8001498 <HAL_TIM_PeriodElapsedCallback+0x58>
			motorAntiClockWise(); //TODO: analisar comportamento para velocidades no sentido anti-horário (negativas)
 8001492:	f000 f88d 	bl	80015b0 <motorAntiClockWise>
 8001496:	e001      	b.n	800149c <HAL_TIM_PeriodElapsedCallback+0x5c>
		}
		else motorStop();
 8001498:	f000 f89a 	bl	80015d0 <motorStop>

		currentStep = TIM4->CNT;
 800149c:	4b33      	ldr	r3, [pc, #204]	; (800156c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800149e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a0:	4a33      	ldr	r2, [pc, #204]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014a2:	6013      	str	r3, [r2, #0]

		//current speed in pulses
		deltaSteps = currentStep - lastStep;
 80014a4:	4b32      	ldr	r3, [pc, #200]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	4b32      	ldr	r3, [pc, #200]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	4a32      	ldr	r2, [pc, #200]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80014b0:	6013      	str	r3, [r2, #0]

		speedInPulses = ((float)deltaSteps / (float)(currentTick - lastTick)) * 1000; //multiplies by 1000 for ms to s
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4618      	mov	r0, r3
 80014b8:	f7ff fb9c 	bl	8000bf4 <__aeabi_ui2f>
 80014bc:	4604      	mov	r4, r0
 80014be:	4b29      	ldr	r3, [pc, #164]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	4b2e      	ldr	r3, [pc, #184]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fb93 	bl	8000bf4 <__aeabi_ui2f>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4619      	mov	r1, r3
 80014d2:	4620      	mov	r0, r4
 80014d4:	f7ff fc9a 	bl	8000e0c <__aeabi_fdiv>
 80014d8:	4603      	mov	r3, r0
 80014da:	4929      	ldr	r1, [pc, #164]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fbe1 	bl	8000ca4 <__aeabi_fmul>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80014e8:	601a      	str	r2, [r3, #0]
		pastTime += (float)(currentTick - lastTick) / 1000;
 80014ea:	4b1e      	ldr	r3, [pc, #120]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	4b23      	ldr	r3, [pc, #140]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff fb7d 	bl	8000bf4 <__aeabi_ui2f>
 80014fa:	4603      	mov	r3, r0
 80014fc:	4920      	ldr	r1, [pc, #128]	; (8001580 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fc84 	bl	8000e0c <__aeabi_fdiv>
 8001504:	4603      	mov	r3, r0
 8001506:	461a      	mov	r2, r3
 8001508:	4b1f      	ldr	r3, [pc, #124]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	4610      	mov	r0, r2
 8001510:	f7ff fac0 	bl	8000a94 <__addsf3>
 8001514:	4603      	mov	r3, r0
 8001516:	461a      	mov	r2, r3
 8001518:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800151a:	601a      	str	r2, [r3, #0]
		//atualização no PWM
		//CCR EM 399 -> DUTY CYCLE 100%
		//CCR EM 0 -> DUTY CYCLE 0%
		//TIM3->CCR1 = dutyCycle;
		//TODO: gerar gráficos para avaliar o resultado
		printf("%f %f\n", speedInPulses, pastTime);
 800151c:	4b19      	ldr	r3, [pc, #100]	; (8001584 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7fe ff81 	bl	8000428 <__aeabi_f2d>
 8001526:	4604      	mov	r4, r0
 8001528:	460d      	mov	r5, r1
 800152a:	4b17      	ldr	r3, [pc, #92]	; (8001588 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe ff7a 	bl	8000428 <__aeabi_f2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	e9cd 2300 	strd	r2, r3, [sp]
 800153c:	4622      	mov	r2, r4
 800153e:	462b      	mov	r3, r5
 8001540:	4812      	ldr	r0, [pc, #72]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001542:	f003 fa0b 	bl	800495c <iprintf>

		//updates for next interruption
		lastStep = currentStep;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a0a      	ldr	r2, [pc, #40]	; (8001574 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800154c:	6013      	str	r3, [r2, #0]
		lastTick = currentTick;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a0a      	ldr	r2, [pc, #40]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001554:	6013      	str	r3, [r2, #0]
	}
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bdb0      	pop	{r4, r5, r7, pc}
 800155e:	bf00      	nop
 8001560:	20000248 	.word	0x20000248
 8001564:	20000334 	.word	0x20000334
 8001568:	20000000 	.word	0x20000000
 800156c:	40000800 	.word	0x40000800
 8001570:	20000320 	.word	0x20000320
 8001574:	20000324 	.word	0x20000324
 8001578:	20000328 	.word	0x20000328
 800157c:	20000338 	.word	0x20000338
 8001580:	447a0000 	.word	0x447a0000
 8001584:	2000032c 	.word	0x2000032c
 8001588:	20000330 	.word	0x20000330
 800158c:	08006b00 	.word	0x08006b00

08001590 <motorClockWise>:

/**
 * IN A: ON
 * IN B: OFF
 * */
void motorClockWise(){
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_SET);
 8001594:	2201      	movs	r2, #1
 8001596:	2110      	movs	r1, #16
 8001598:	4804      	ldr	r0, [pc, #16]	; (80015ac <motorClockWise+0x1c>)
 800159a:	f000 fd57 	bl	800204c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_RESET);
 800159e:	2200      	movs	r2, #0
 80015a0:	2120      	movs	r1, #32
 80015a2:	4802      	ldr	r0, [pc, #8]	; (80015ac <motorClockWise+0x1c>)
 80015a4:	f000 fd52 	bl	800204c <HAL_GPIO_WritePin>
}
 80015a8:	bf00      	nop
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	40010800 	.word	0x40010800

080015b0 <motorAntiClockWise>:

/**
 * IN A: OFF
 * IN B: ON
 * */
void motorAntiClockWise(){
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_RESET);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2110      	movs	r1, #16
 80015b8:	4804      	ldr	r0, [pc, #16]	; (80015cc <motorAntiClockWise+0x1c>)
 80015ba:	f000 fd47 	bl	800204c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_SET);
 80015be:	2201      	movs	r2, #1
 80015c0:	2120      	movs	r1, #32
 80015c2:	4802      	ldr	r0, [pc, #8]	; (80015cc <motorAntiClockWise+0x1c>)
 80015c4:	f000 fd42 	bl	800204c <HAL_GPIO_WritePin>
}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40010800 	.word	0x40010800

080015d0 <motorStop>:
/**
 * IN A: OFF
 * IN B: OFF
 * */
//brakes to GND
void motorStop(){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_RESET);
 80015d4:	2200      	movs	r2, #0
 80015d6:	2110      	movs	r1, #16
 80015d8:	4804      	ldr	r0, [pc, #16]	; (80015ec <motorStop+0x1c>)
 80015da:	f000 fd37 	bl	800204c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_RESET);
 80015de:	2200      	movs	r2, #0
 80015e0:	2120      	movs	r1, #32
 80015e2:	4802      	ldr	r0, [pc, #8]	; (80015ec <motorStop+0x1c>)
 80015e4:	f000 fd32 	bl	800204c <HAL_GPIO_WritePin>
}
 80015e8:	bf00      	nop
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40010800 	.word	0x40010800

080015f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f4:	b672      	cpsid	i
}
 80015f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <Error_Handler+0x8>

080015fa <pidInit>:



//the min and max values should consider the duty cycle %
//example: if the minValue is 10% duty cycle, the minimalPwm must be a value that reflects it
void pidInit(Pid* p, float minimalPwm, float maximumPwm, float kp, float ki, float kd){
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	60f8      	str	r0, [r7, #12]
 8001602:	60b9      	str	r1, [r7, #8]
 8001604:	607a      	str	r2, [r7, #4]
 8001606:	603b      	str	r3, [r7, #0]
    p->max = maximumPwm;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	687a      	ldr	r2, [r7, #4]
 800160c:	60da      	str	r2, [r3, #12]
    p->min = minimalPwm;
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	611a      	str	r2, [r3, #16]
    p->kp = kp;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	683a      	ldr	r2, [r7, #0]
 8001618:	601a      	str	r2, [r3, #0]
    p->ki = ki;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	605a      	str	r2, [r3, #4]
    p->kd = kd;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	69fa      	ldr	r2, [r7, #28]
 8001624:	609a      	str	r2, [r3, #8]
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <HAL_MspInit+0x40>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <HAL_MspInit+0x40>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <HAL_MspInit+0x40>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b08      	ldr	r3, [pc, #32]	; (8001670 <HAL_MspInit+0x40>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a07      	ldr	r2, [pc, #28]	; (8001670 <HAL_MspInit+0x40>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b05      	ldr	r3, [pc, #20]	; (8001670 <HAL_MspInit+0x40>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001662:	603b      	str	r3, [r7, #0]
 8001664:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001666:	bf00      	nop
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	bc80      	pop	{r7}
 800166e:	4770      	bx	lr
 8001670:	40021000 	.word	0x40021000

08001674 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b084      	sub	sp, #16
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a16      	ldr	r2, [pc, #88]	; (80016dc <HAL_TIM_Base_MspInit+0x68>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d10c      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_TIM_Base_MspInit+0x6c>)
 8001688:	699b      	ldr	r3, [r3, #24]
 800168a:	4a15      	ldr	r2, [pc, #84]	; (80016e0 <HAL_TIM_Base_MspInit+0x6c>)
 800168c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001690:	6193      	str	r3, [r2, #24]
 8001692:	4b13      	ldr	r3, [pc, #76]	; (80016e0 <HAL_TIM_Base_MspInit+0x6c>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800169e:	e018      	b.n	80016d2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a8:	d113      	bne.n	80016d2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <HAL_TIM_Base_MspInit+0x6c>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a0c      	ldr	r2, [pc, #48]	; (80016e0 <HAL_TIM_Base_MspInit+0x6c>)
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_TIM_Base_MspInit+0x6c>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0301 	and.w	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80016c2:	2200      	movs	r2, #0
 80016c4:	2100      	movs	r1, #0
 80016c6:	201c      	movs	r0, #28
 80016c8:	f000 fb05 	bl	8001cd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80016cc:	201c      	movs	r0, #28
 80016ce:	f000 fb1e 	bl	8001d0e <HAL_NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3710      	adds	r7, #16
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40012c00 	.word	0x40012c00
 80016e0:	40021000 	.word	0x40021000

080016e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b088      	sub	sp, #32
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <HAL_TIM_Encoder_MspInit+0x70>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d123      	bne.n	800174c <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001704:	4b14      	ldr	r3, [pc, #80]	; (8001758 <HAL_TIM_Encoder_MspInit+0x74>)
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	4a13      	ldr	r2, [pc, #76]	; (8001758 <HAL_TIM_Encoder_MspInit+0x74>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	61d3      	str	r3, [r2, #28]
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_TIM_Encoder_MspInit+0x74>)
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	f003 0304 	and.w	r3, r3, #4
 8001718:	60fb      	str	r3, [r7, #12]
 800171a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <HAL_TIM_Encoder_MspInit+0x74>)
 800171e:	699b      	ldr	r3, [r3, #24]
 8001720:	4a0d      	ldr	r2, [pc, #52]	; (8001758 <HAL_TIM_Encoder_MspInit+0x74>)
 8001722:	f043 0308 	orr.w	r3, r3, #8
 8001726:	6193      	str	r3, [r2, #24]
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <HAL_TIM_Encoder_MspInit+0x74>)
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0308 	and.w	r3, r3, #8
 8001730:	60bb      	str	r3, [r7, #8]
 8001732:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001734:	23c0      	movs	r3, #192	; 0xc0
 8001736:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001738:	2300      	movs	r3, #0
 800173a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173c:	2300      	movs	r3, #0
 800173e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001740:	f107 0310 	add.w	r3, r7, #16
 8001744:	4619      	mov	r1, r3
 8001746:	4805      	ldr	r0, [pc, #20]	; (800175c <HAL_TIM_Encoder_MspInit+0x78>)
 8001748:	f000 fafc 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800174c:	bf00      	nop
 800174e:	3720      	adds	r7, #32
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	40000800 	.word	0x40000800
 8001758:	40021000 	.word	0x40021000
 800175c:	40010c00 	.word	0x40010c00

08001760 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0310 	add.w	r3, r7, #16
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a10      	ldr	r2, [pc, #64]	; (80017bc <HAL_TIM_MspPostInit+0x5c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d118      	bne.n	80017b2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <HAL_TIM_MspPostInit+0x60>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a0e      	ldr	r2, [pc, #56]	; (80017c0 <HAL_TIM_MspPostInit+0x60>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <HAL_TIM_MspPostInit+0x60>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001798:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800179c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	2302      	movs	r3, #2
 80017a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	2302      	movs	r3, #2
 80017a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a6:	f107 0310 	add.w	r3, r7, #16
 80017aa:	4619      	mov	r1, r3
 80017ac:	4805      	ldr	r0, [pc, #20]	; (80017c4 <HAL_TIM_MspPostInit+0x64>)
 80017ae:	f000 fac9 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80017b2:	bf00      	nop
 80017b4:	3720      	adds	r7, #32
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40012c00 	.word	0x40012c00
 80017c0:	40021000 	.word	0x40021000
 80017c4:	40010800 	.word	0x40010800

080017c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	2200      	movs	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	605a      	str	r2, [r3, #4]
 80017da:	609a      	str	r2, [r3, #8]
 80017dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a1c      	ldr	r2, [pc, #112]	; (8001854 <HAL_UART_MspInit+0x8c>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d131      	bne.n	800184c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017e8:	4b1b      	ldr	r3, [pc, #108]	; (8001858 <HAL_UART_MspInit+0x90>)
 80017ea:	699b      	ldr	r3, [r3, #24]
 80017ec:	4a1a      	ldr	r2, [pc, #104]	; (8001858 <HAL_UART_MspInit+0x90>)
 80017ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017f2:	6193      	str	r3, [r2, #24]
 80017f4:	4b18      	ldr	r3, [pc, #96]	; (8001858 <HAL_UART_MspInit+0x90>)
 80017f6:	699b      	ldr	r3, [r3, #24]
 80017f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001800:	4b15      	ldr	r3, [pc, #84]	; (8001858 <HAL_UART_MspInit+0x90>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a14      	ldr	r2, [pc, #80]	; (8001858 <HAL_UART_MspInit+0x90>)
 8001806:	f043 0304 	orr.w	r3, r3, #4
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <HAL_UART_MspInit+0x90>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	60bb      	str	r3, [r7, #8]
 8001816:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2302      	movs	r3, #2
 8001820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001822:	2303      	movs	r3, #3
 8001824:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001826:	f107 0310 	add.w	r3, r7, #16
 800182a:	4619      	mov	r1, r3
 800182c:	480b      	ldr	r0, [pc, #44]	; (800185c <HAL_UART_MspInit+0x94>)
 800182e:	f000 fa89 	bl	8001d44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183c:	2300      	movs	r3, #0
 800183e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001840:	f107 0310 	add.w	r3, r7, #16
 8001844:	4619      	mov	r1, r3
 8001846:	4805      	ldr	r0, [pc, #20]	; (800185c <HAL_UART_MspInit+0x94>)
 8001848:	f000 fa7c 	bl	8001d44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800184c:	bf00      	nop
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40013800 	.word	0x40013800
 8001858:	40021000 	.word	0x40021000
 800185c:	40010800 	.word	0x40010800

08001860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001864:	e7fe      	b.n	8001864 <NMI_Handler+0x4>

08001866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001866:	b480      	push	{r7}
 8001868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800186a:	e7fe      	b.n	800186a <HardFault_Handler+0x4>

0800186c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001870:	e7fe      	b.n	8001870 <MemManage_Handler+0x4>

08001872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001876:	e7fe      	b.n	8001876 <BusFault_Handler+0x4>

08001878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800187c:	e7fe      	b.n	800187c <UsageFault_Handler+0x4>

0800187e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	46bd      	mov	sp, r7
 8001886:	bc80      	pop	{r7}
 8001888:	4770      	bx	lr

0800188a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800188a:	b480      	push	{r7}
 800188c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bc80      	pop	{r7}
 80018a0:	4770      	bx	lr

080018a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018a6:	f000 f923 	bl	8001af0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
	...

080018b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018b4:	4802      	ldr	r0, [pc, #8]	; (80018c0 <TIM2_IRQHandler+0x10>)
 80018b6:	f001 fabd 	bl	8002e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000248 	.word	0x20000248

080018c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
	return 1;
 80018c8:	2301      	movs	r3, #1
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bc80      	pop	{r7}
 80018d0:	4770      	bx	lr

080018d2 <_kill>:

int _kill(int pid, int sig)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
 80018da:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80018dc:	f002 fbac 	bl	8004038 <__errno>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2216      	movs	r2, #22
 80018e4:	601a      	str	r2, [r3, #0]
	return -1;
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_exit>:

void _exit (int status)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b082      	sub	sp, #8
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80018fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff ffe7 	bl	80018d2 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001904:	e7fe      	b.n	8001904 <_exit+0x12>

08001906 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	60b9      	str	r1, [r7, #8]
 8001910:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	2300      	movs	r3, #0
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	e00a      	b.n	800192e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001918:	f3af 8000 	nop.w
 800191c:	4601      	mov	r1, r0
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	1c5a      	adds	r2, r3, #1
 8001922:	60ba      	str	r2, [r7, #8]
 8001924:	b2ca      	uxtb	r2, r1
 8001926:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	429a      	cmp	r2, r3
 8001934:	dbf0      	blt.n	8001918 <_read+0x12>
	}

return len;
 8001936:	687b      	ldr	r3, [r7, #4]
}
 8001938:	4618      	mov	r0, r3
 800193a:	3718      	adds	r7, #24
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
	return -1;
 8001948:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800194c:	4618      	mov	r0, r3
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	bc80      	pop	{r7}
 8001954:	4770      	bx	lr

08001956 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001966:	605a      	str	r2, [r3, #4]
	return 0;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	370c      	adds	r7, #12
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <_isatty>:

int _isatty(int file)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
	return 1;
 800197c:	2301      	movs	r3, #1
}
 800197e:	4618      	mov	r0, r3
 8001980:	370c      	adds	r7, #12
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
	return 0;
 8001994:	2300      	movs	r3, #0
}
 8001996:	4618      	mov	r0, r3
 8001998:	3714      	adds	r7, #20
 800199a:	46bd      	mov	sp, r7
 800199c:	bc80      	pop	{r7}
 800199e:	4770      	bx	lr

080019a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019a8:	4a14      	ldr	r2, [pc, #80]	; (80019fc <_sbrk+0x5c>)
 80019aa:	4b15      	ldr	r3, [pc, #84]	; (8001a00 <_sbrk+0x60>)
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <_sbrk+0x64>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d102      	bne.n	80019c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019bc:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <_sbrk+0x64>)
 80019be:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <_sbrk+0x68>)
 80019c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019c2:	4b10      	ldr	r3, [pc, #64]	; (8001a04 <_sbrk+0x64>)
 80019c4:	681a      	ldr	r2, [r3, #0]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d207      	bcs.n	80019e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019d0:	f002 fb32 	bl	8004038 <__errno>
 80019d4:	4603      	mov	r3, r0
 80019d6:	220c      	movs	r2, #12
 80019d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019de:	e009      	b.n	80019f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019e0:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <_sbrk+0x64>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019e6:	4b07      	ldr	r3, [pc, #28]	; (8001a04 <_sbrk+0x64>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4413      	add	r3, r2
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <_sbrk+0x64>)
 80019f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019f2:	68fb      	ldr	r3, [r7, #12]
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3718      	adds	r7, #24
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20005000 	.word	0x20005000
 8001a00:	00000400 	.word	0x00000400
 8001a04:	2000035c 	.word	0x2000035c
 8001a08:	20000378 	.word	0x20000378

08001a0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a10:	bf00      	nop
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bc80      	pop	{r7}
 8001a16:	4770      	bx	lr

08001a18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a18:	f7ff fff8 	bl	8001a0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a1c:	480b      	ldr	r0, [pc, #44]	; (8001a4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a1e:	490c      	ldr	r1, [pc, #48]	; (8001a50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a20:	4a0c      	ldr	r2, [pc, #48]	; (8001a54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a24:	e002      	b.n	8001a2c <LoopCopyDataInit>

08001a26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a2a:	3304      	adds	r3, #4

08001a2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a30:	d3f9      	bcc.n	8001a26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a32:	4a09      	ldr	r2, [pc, #36]	; (8001a58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a34:	4c09      	ldr	r4, [pc, #36]	; (8001a5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a38:	e001      	b.n	8001a3e <LoopFillZerobss>

08001a3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a3c:	3204      	adds	r2, #4

08001a3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a40:	d3fb      	bcc.n	8001a3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a42:	f002 faff 	bl	8004044 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a46:	f7ff fa93 	bl	8000f70 <main>
  bx lr
 8001a4a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a50:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001a54:	08006f14 	.word	0x08006f14
  ldr r2, =_sbss
 8001a58:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001a5c:	20000374 	.word	0x20000374

08001a60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a60:	e7fe      	b.n	8001a60 <ADC1_2_IRQHandler>
	...

08001a64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <HAL_Init+0x28>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a07      	ldr	r2, [pc, #28]	; (8001a8c <HAL_Init+0x28>)
 8001a6e:	f043 0310 	orr.w	r3, r3, #16
 8001a72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a74:	2003      	movs	r0, #3
 8001a76:	f000 f923 	bl	8001cc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a7a:	200f      	movs	r0, #15
 8001a7c:	f000 f808 	bl	8001a90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a80:	f7ff fdd6 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000

08001a90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a98:	4b12      	ldr	r3, [pc, #72]	; (8001ae4 <HAL_InitTick+0x54>)
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	4b12      	ldr	r3, [pc, #72]	; (8001ae8 <HAL_InitTick+0x58>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001aa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f000 f93b 	bl	8001d2a <HAL_SYSTICK_Config>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e00e      	b.n	8001adc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2b0f      	cmp	r3, #15
 8001ac2:	d80a      	bhi.n	8001ada <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001acc:	f000 f903 	bl	8001cd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <HAL_InitTick+0x5c>)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	e000      	b.n	8001adc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	20000008 	.word	0x20000008
 8001ae8:	20000010 	.word	0x20000010
 8001aec:	2000000c 	.word	0x2000000c

08001af0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001af4:	4b05      	ldr	r3, [pc, #20]	; (8001b0c <HAL_IncTick+0x1c>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	461a      	mov	r2, r3
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_IncTick+0x20>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4413      	add	r3, r2
 8001b00:	4a03      	ldr	r2, [pc, #12]	; (8001b10 <HAL_IncTick+0x20>)
 8001b02:	6013      	str	r3, [r2, #0]
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000010 	.word	0x20000010
 8001b10:	20000360 	.word	0x20000360

08001b14 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  return uwTick;
 8001b18:	4b02      	ldr	r3, [pc, #8]	; (8001b24 <HAL_GetTick+0x10>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr
 8001b24:	20000360 	.word	0x20000360

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4906      	ldr	r1, [pc, #24]	; (8001bc0 <__NVIC_EnableIRQ+0x34>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	; (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	; (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	; 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3b01      	subs	r3, #1
 8001c88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c8c:	d301      	bcc.n	8001c92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e00f      	b.n	8001cb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c92:	4a0a      	ldr	r2, [pc, #40]	; (8001cbc <SysTick_Config+0x40>)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3b01      	subs	r3, #1
 8001c98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c9a:	210f      	movs	r1, #15
 8001c9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ca0:	f7ff ff90 	bl	8001bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ca4:	4b05      	ldr	r3, [pc, #20]	; (8001cbc <SysTick_Config+0x40>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001caa:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <SysTick_Config+0x40>)
 8001cac:	2207      	movs	r2, #7
 8001cae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	e000e010 	.word	0xe000e010

08001cc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f7ff ff2d 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001cce:	bf00      	nop
 8001cd0:	3708      	adds	r7, #8
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}

08001cd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001cd6:	b580      	push	{r7, lr}
 8001cd8:	b086      	sub	sp, #24
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4603      	mov	r3, r0
 8001cde:	60b9      	str	r1, [r7, #8]
 8001ce0:	607a      	str	r2, [r7, #4]
 8001ce2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ce8:	f7ff ff42 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001cec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	68b9      	ldr	r1, [r7, #8]
 8001cf2:	6978      	ldr	r0, [r7, #20]
 8001cf4:	f7ff ff90 	bl	8001c18 <NVIC_EncodePriority>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cfe:	4611      	mov	r1, r2
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7ff ff5f 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d0e:	b580      	push	{r7, lr}
 8001d10:	b082      	sub	sp, #8
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff35 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001d22:	bf00      	nop
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffa2 	bl	8001c7c <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b08b      	sub	sp, #44	; 0x2c
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d52:	2300      	movs	r3, #0
 8001d54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	e169      	b.n	800202c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d58:	2201      	movs	r2, #1
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	4013      	ands	r3, r2
 8001d6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	f040 8158 	bne.w	8002026 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	4a9a      	ldr	r2, [pc, #616]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d05e      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d80:	4a98      	ldr	r2, [pc, #608]	; (8001fe4 <HAL_GPIO_Init+0x2a0>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d875      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d86:	4a98      	ldr	r2, [pc, #608]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d058      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d8c:	4a96      	ldr	r2, [pc, #600]	; (8001fe8 <HAL_GPIO_Init+0x2a4>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d86f      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d92:	4a96      	ldr	r2, [pc, #600]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d052      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001d98:	4a94      	ldr	r2, [pc, #592]	; (8001fec <HAL_GPIO_Init+0x2a8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d869      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001d9e:	4a94      	ldr	r2, [pc, #592]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d04c      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001da4:	4a92      	ldr	r2, [pc, #584]	; (8001ff0 <HAL_GPIO_Init+0x2ac>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d863      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001daa:	4a92      	ldr	r2, [pc, #584]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d046      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
 8001db0:	4a90      	ldr	r2, [pc, #576]	; (8001ff4 <HAL_GPIO_Init+0x2b0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d85d      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001db6:	2b12      	cmp	r3, #18
 8001db8:	d82a      	bhi.n	8001e10 <HAL_GPIO_Init+0xcc>
 8001dba:	2b12      	cmp	r3, #18
 8001dbc:	d859      	bhi.n	8001e72 <HAL_GPIO_Init+0x12e>
 8001dbe:	a201      	add	r2, pc, #4	; (adr r2, 8001dc4 <HAL_GPIO_Init+0x80>)
 8001dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dc4:	08001e3f 	.word	0x08001e3f
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e2b 	.word	0x08001e2b
 8001dd0:	08001e6d 	.word	0x08001e6d
 8001dd4:	08001e73 	.word	0x08001e73
 8001dd8:	08001e73 	.word	0x08001e73
 8001ddc:	08001e73 	.word	0x08001e73
 8001de0:	08001e73 	.word	0x08001e73
 8001de4:	08001e73 	.word	0x08001e73
 8001de8:	08001e73 	.word	0x08001e73
 8001dec:	08001e73 	.word	0x08001e73
 8001df0:	08001e73 	.word	0x08001e73
 8001df4:	08001e73 	.word	0x08001e73
 8001df8:	08001e73 	.word	0x08001e73
 8001dfc:	08001e73 	.word	0x08001e73
 8001e00:	08001e73 	.word	0x08001e73
 8001e04:	08001e73 	.word	0x08001e73
 8001e08:	08001e21 	.word	0x08001e21
 8001e0c:	08001e35 	.word	0x08001e35
 8001e10:	4a79      	ldr	r2, [pc, #484]	; (8001ff8 <HAL_GPIO_Init+0x2b4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d013      	beq.n	8001e3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e16:	e02c      	b.n	8001e72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	623b      	str	r3, [r7, #32]
          break;
 8001e1e:	e029      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	3304      	adds	r3, #4
 8001e26:	623b      	str	r3, [r7, #32]
          break;
 8001e28:	e024      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	3308      	adds	r3, #8
 8001e30:	623b      	str	r3, [r7, #32]
          break;
 8001e32:	e01f      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	623b      	str	r3, [r7, #32]
          break;
 8001e3c:	e01a      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d102      	bne.n	8001e4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e46:	2304      	movs	r3, #4
 8001e48:	623b      	str	r3, [r7, #32]
          break;
 8001e4a:	e013      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d105      	bne.n	8001e60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e54:	2308      	movs	r3, #8
 8001e56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69fa      	ldr	r2, [r7, #28]
 8001e5c:	611a      	str	r2, [r3, #16]
          break;
 8001e5e:	e009      	b.n	8001e74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e60:	2308      	movs	r3, #8
 8001e62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69fa      	ldr	r2, [r7, #28]
 8001e68:	615a      	str	r2, [r3, #20]
          break;
 8001e6a:	e003      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	623b      	str	r3, [r7, #32]
          break;
 8001e70:	e000      	b.n	8001e74 <HAL_GPIO_Init+0x130>
          break;
 8001e72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	2bff      	cmp	r3, #255	; 0xff
 8001e78:	d801      	bhi.n	8001e7e <HAL_GPIO_Init+0x13a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	e001      	b.n	8001e82 <HAL_GPIO_Init+0x13e>
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	3304      	adds	r3, #4
 8001e82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e84:	69bb      	ldr	r3, [r7, #24]
 8001e86:	2bff      	cmp	r3, #255	; 0xff
 8001e88:	d802      	bhi.n	8001e90 <HAL_GPIO_Init+0x14c>
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	e002      	b.n	8001e96 <HAL_GPIO_Init+0x152>
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	3b08      	subs	r3, #8
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	210f      	movs	r1, #15
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	401a      	ands	r2, r3
 8001ea8:	6a39      	ldr	r1, [r7, #32]
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	fa01 f303 	lsl.w	r3, r1, r3
 8001eb0:	431a      	orrs	r2, r3
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	f000 80b1 	beq.w	8002026 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ec4:	4b4d      	ldr	r3, [pc, #308]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	4a4c      	ldr	r2, [pc, #304]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001eca:	f043 0301 	orr.w	r3, r3, #1
 8001ece:	6193      	str	r3, [r2, #24]
 8001ed0:	4b4a      	ldr	r3, [pc, #296]	; (8001ffc <HAL_GPIO_Init+0x2b8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	60bb      	str	r3, [r7, #8]
 8001eda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001edc:	4a48      	ldr	r2, [pc, #288]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	089b      	lsrs	r3, r3, #2
 8001ee2:	3302      	adds	r3, #2
 8001ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eec:	f003 0303 	and.w	r3, r3, #3
 8001ef0:	009b      	lsls	r3, r3, #2
 8001ef2:	220f      	movs	r2, #15
 8001ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4a40      	ldr	r2, [pc, #256]	; (8002004 <HAL_GPIO_Init+0x2c0>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d013      	beq.n	8001f30 <HAL_GPIO_Init+0x1ec>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	4a3f      	ldr	r2, [pc, #252]	; (8002008 <HAL_GPIO_Init+0x2c4>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00d      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	4a3e      	ldr	r2, [pc, #248]	; (800200c <HAL_GPIO_Init+0x2c8>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d007      	beq.n	8001f28 <HAL_GPIO_Init+0x1e4>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4a3d      	ldr	r2, [pc, #244]	; (8002010 <HAL_GPIO_Init+0x2cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d101      	bne.n	8001f24 <HAL_GPIO_Init+0x1e0>
 8001f20:	2303      	movs	r3, #3
 8001f22:	e006      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e004      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e002      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e000      	b.n	8001f32 <HAL_GPIO_Init+0x1ee>
 8001f30:	2300      	movs	r3, #0
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	f002 0203 	and.w	r2, r2, #3
 8001f38:	0092      	lsls	r2, r2, #2
 8001f3a:	4093      	lsls	r3, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f42:	492f      	ldr	r1, [pc, #188]	; (8002000 <HAL_GPIO_Init+0x2bc>)
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	089b      	lsrs	r3, r3, #2
 8001f48:	3302      	adds	r3, #2
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d006      	beq.n	8001f6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b2d      	ldr	r3, [pc, #180]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	492c      	ldr	r1, [pc, #176]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e006      	b.n	8001f78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	69bb      	ldr	r3, [r7, #24]
 8001f70:	43db      	mvns	r3, r3
 8001f72:	4928      	ldr	r1, [pc, #160]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f74:	4013      	ands	r3, r2
 8001f76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f86:	68da      	ldr	r2, [r3, #12]
 8001f88:	4922      	ldr	r1, [pc, #136]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	60cb      	str	r3, [r1, #12]
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f92:	4b20      	ldr	r3, [pc, #128]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	491e      	ldr	r1, [pc, #120]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d006      	beq.n	8001fba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fae:	685a      	ldr	r2, [r3, #4]
 8001fb0:	4918      	ldr	r1, [pc, #96]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	604b      	str	r3, [r1, #4]
 8001fb8:	e006      	b.n	8001fc8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001fba:	4b16      	ldr	r3, [pc, #88]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fbc:	685a      	ldr	r2, [r3, #4]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	4914      	ldr	r1, [pc, #80]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d021      	beq.n	8002018 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_GPIO_Init+0x2d0>)
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]
 8001fe0:	e021      	b.n	8002026 <HAL_GPIO_Init+0x2e2>
 8001fe2:	bf00      	nop
 8001fe4:	10320000 	.word	0x10320000
 8001fe8:	10310000 	.word	0x10310000
 8001fec:	10220000 	.word	0x10220000
 8001ff0:	10210000 	.word	0x10210000
 8001ff4:	10120000 	.word	0x10120000
 8001ff8:	10110000 	.word	0x10110000
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40010000 	.word	0x40010000
 8002004:	40010800 	.word	0x40010800
 8002008:	40010c00 	.word	0x40010c00
 800200c:	40011000 	.word	0x40011000
 8002010:	40011400 	.word	0x40011400
 8002014:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_GPIO_Init+0x304>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	43db      	mvns	r3, r3
 8002020:	4909      	ldr	r1, [pc, #36]	; (8002048 <HAL_GPIO_Init+0x304>)
 8002022:	4013      	ands	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	3301      	adds	r3, #1
 800202a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	fa22 f303 	lsr.w	r3, r2, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	f47f ae8e 	bne.w	8001d58 <HAL_GPIO_Init+0x14>
  }
}
 800203c:	bf00      	nop
 800203e:	bf00      	nop
 8002040:	372c      	adds	r7, #44	; 0x2c
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr
 8002048:	40010400 	.word	0x40010400

0800204c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	807b      	strh	r3, [r7, #2]
 8002058:	4613      	mov	r3, r2
 800205a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800205c:	787b      	ldrb	r3, [r7, #1]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d003      	beq.n	800206a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002062:	887a      	ldrh	r2, [r7, #2]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002068:	e003      	b.n	8002072 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800206a:	887b      	ldrh	r3, [r7, #2]
 800206c:	041a      	lsls	r2, r3, #16
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	611a      	str	r2, [r3, #16]
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	bc80      	pop	{r7}
 800207a:	4770      	bx	lr

0800207c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b086      	sub	sp, #24
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e272      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 8087 	beq.w	80021aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800209c:	4b92      	ldr	r3, [pc, #584]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 030c 	and.w	r3, r3, #12
 80020a4:	2b04      	cmp	r3, #4
 80020a6:	d00c      	beq.n	80020c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020a8:	4b8f      	ldr	r3, [pc, #572]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 030c 	and.w	r3, r3, #12
 80020b0:	2b08      	cmp	r3, #8
 80020b2:	d112      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
 80020b4:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c0:	d10b      	bne.n	80020da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020c2:	4b89      	ldr	r3, [pc, #548]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d06c      	beq.n	80021a8 <HAL_RCC_OscConfig+0x12c>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d168      	bne.n	80021a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e24c      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020e2:	d106      	bne.n	80020f2 <HAL_RCC_OscConfig+0x76>
 80020e4:	4b80      	ldr	r3, [pc, #512]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a7f      	ldr	r2, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	e02e      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d10c      	bne.n	8002114 <HAL_RCC_OscConfig+0x98>
 80020fa:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a7a      	ldr	r2, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002104:	6013      	str	r3, [r2, #0]
 8002106:	4b78      	ldr	r3, [pc, #480]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a77      	ldr	r2, [pc, #476]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800210c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002110:	6013      	str	r3, [r2, #0]
 8002112:	e01d      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800211c:	d10c      	bne.n	8002138 <HAL_RCC_OscConfig+0xbc>
 800211e:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a71      	ldr	r2, [pc, #452]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	4b6f      	ldr	r3, [pc, #444]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a6e      	ldr	r2, [pc, #440]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002134:	6013      	str	r3, [r2, #0]
 8002136:	e00b      	b.n	8002150 <HAL_RCC_OscConfig+0xd4>
 8002138:	4b6b      	ldr	r3, [pc, #428]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a6a      	ldr	r2, [pc, #424]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	6013      	str	r3, [r2, #0]
 8002144:	4b68      	ldr	r3, [pc, #416]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a67      	ldr	r2, [pc, #412]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800214a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800214e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d013      	beq.n	8002180 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002158:	f7ff fcdc 	bl	8001b14 <HAL_GetTick>
 800215c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002160:	f7ff fcd8 	bl	8001b14 <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b64      	cmp	r3, #100	; 0x64
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e200      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002172:	4b5d      	ldr	r3, [pc, #372]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0xe4>
 800217e:	e014      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002180:	f7ff fcc8 	bl	8001b14 <HAL_GetTick>
 8002184:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002186:	e008      	b.n	800219a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002188:	f7ff fcc4 	bl	8001b14 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e1ec      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219a:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1f0      	bne.n	8002188 <HAL_RCC_OscConfig+0x10c>
 80021a6:	e000      	b.n	80021aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d063      	beq.n	800227e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021b6:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 030c 	and.w	r3, r3, #12
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d00b      	beq.n	80021da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021c2:	4b49      	ldr	r3, [pc, #292]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	f003 030c 	and.w	r3, r3, #12
 80021ca:	2b08      	cmp	r3, #8
 80021cc:	d11c      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
 80021ce:	4b46      	ldr	r3, [pc, #280]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d116      	bne.n	8002208 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 0302 	and.w	r3, r3, #2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	691b      	ldr	r3, [r3, #16]
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e1c0      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	4939      	ldr	r1, [pc, #228]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002202:	4313      	orrs	r3, r2
 8002204:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	e03a      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d020      	beq.n	8002252 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002210:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002212:	2201      	movs	r2, #1
 8002214:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002216:	f7ff fc7d 	bl	8001b14 <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800221e:	f7ff fc79 	bl	8001b14 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e1a1      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002230:	4b2d      	ldr	r3, [pc, #180]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0f0      	beq.n	800221e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800223c:	4b2a      	ldr	r3, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	695b      	ldr	r3, [r3, #20]
 8002248:	00db      	lsls	r3, r3, #3
 800224a:	4927      	ldr	r1, [pc, #156]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 800224c:	4313      	orrs	r3, r2
 800224e:	600b      	str	r3, [r1, #0]
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_RCC_OscConfig+0x270>)
 8002254:	2200      	movs	r2, #0
 8002256:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002258:	f7ff fc5c 	bl	8001b14 <HAL_GetTick>
 800225c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	e008      	b.n	8002272 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002260:	f7ff fc58 	bl	8001b14 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	2b02      	cmp	r3, #2
 800226c:	d901      	bls.n	8002272 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e180      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	d03a      	beq.n	8002300 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d019      	beq.n	80022c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002292:	4b17      	ldr	r3, [pc, #92]	; (80022f0 <HAL_RCC_OscConfig+0x274>)
 8002294:	2201      	movs	r2, #1
 8002296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7ff fc3c 	bl	8001b14 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a0:	f7ff fc38 	bl	8001b14 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e160      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022b2:	4b0d      	ldr	r3, [pc, #52]	; (80022e8 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022be:	2001      	movs	r0, #1
 80022c0:	f000 face 	bl	8002860 <RCC_Delay>
 80022c4:	e01c      	b.n	8002300 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022c6:	4b0a      	ldr	r3, [pc, #40]	; (80022f0 <HAL_RCC_OscConfig+0x274>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022cc:	f7ff fc22 	bl	8001b14 <HAL_GetTick>
 80022d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022d2:	e00f      	b.n	80022f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022d4:	f7ff fc1e 	bl	8001b14 <HAL_GetTick>
 80022d8:	4602      	mov	r2, r0
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	1ad3      	subs	r3, r2, r3
 80022de:	2b02      	cmp	r3, #2
 80022e0:	d908      	bls.n	80022f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e146      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
 80022e6:	bf00      	nop
 80022e8:	40021000 	.word	0x40021000
 80022ec:	42420000 	.word	0x42420000
 80022f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f4:	4b92      	ldr	r3, [pc, #584]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d1e9      	bne.n	80022d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	f000 80a6 	beq.w	800245a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800230e:	2300      	movs	r3, #0
 8002310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002312:	4b8b      	ldr	r3, [pc, #556]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002314:	69db      	ldr	r3, [r3, #28]
 8002316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d10d      	bne.n	800233a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800231e:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002320:	69db      	ldr	r3, [r3, #28]
 8002322:	4a87      	ldr	r2, [pc, #540]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002328:	61d3      	str	r3, [r2, #28]
 800232a:	4b85      	ldr	r3, [pc, #532]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002336:	2301      	movs	r3, #1
 8002338:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233a:	4b82      	ldr	r3, [pc, #520]	; (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002342:	2b00      	cmp	r3, #0
 8002344:	d118      	bne.n	8002378 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002346:	4b7f      	ldr	r3, [pc, #508]	; (8002544 <HAL_RCC_OscConfig+0x4c8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a7e      	ldr	r2, [pc, #504]	; (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800234c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002350:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002352:	f7ff fbdf 	bl	8001b14 <HAL_GetTick>
 8002356:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002358:	e008      	b.n	800236c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800235a:	f7ff fbdb 	bl	8001b14 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	2b64      	cmp	r3, #100	; 0x64
 8002366:	d901      	bls.n	800236c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e103      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800236c:	4b75      	ldr	r3, [pc, #468]	; (8002544 <HAL_RCC_OscConfig+0x4c8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002374:	2b00      	cmp	r3, #0
 8002376:	d0f0      	beq.n	800235a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d106      	bne.n	800238e <HAL_RCC_OscConfig+0x312>
 8002380:	4b6f      	ldr	r3, [pc, #444]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002382:	6a1b      	ldr	r3, [r3, #32]
 8002384:	4a6e      	ldr	r2, [pc, #440]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	6213      	str	r3, [r2, #32]
 800238c:	e02d      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x334>
 8002396:	4b6a      	ldr	r3, [pc, #424]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002398:	6a1b      	ldr	r3, [r3, #32]
 800239a:	4a69      	ldr	r2, [pc, #420]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	6213      	str	r3, [r2, #32]
 80023a2:	4b67      	ldr	r3, [pc, #412]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	6a1b      	ldr	r3, [r3, #32]
 80023a6:	4a66      	ldr	r2, [pc, #408]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023a8:	f023 0304 	bic.w	r3, r3, #4
 80023ac:	6213      	str	r3, [r2, #32]
 80023ae:	e01c      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b05      	cmp	r3, #5
 80023b6:	d10c      	bne.n	80023d2 <HAL_RCC_OscConfig+0x356>
 80023b8:	4b61      	ldr	r3, [pc, #388]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	4a60      	ldr	r2, [pc, #384]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023be:	f043 0304 	orr.w	r3, r3, #4
 80023c2:	6213      	str	r3, [r2, #32]
 80023c4:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4a5d      	ldr	r2, [pc, #372]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023ca:	f043 0301 	orr.w	r3, r3, #1
 80023ce:	6213      	str	r3, [r2, #32]
 80023d0:	e00b      	b.n	80023ea <HAL_RCC_OscConfig+0x36e>
 80023d2:	4b5b      	ldr	r3, [pc, #364]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	4a5a      	ldr	r2, [pc, #360]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023d8:	f023 0301 	bic.w	r3, r3, #1
 80023dc:	6213      	str	r3, [r2, #32]
 80023de:	4b58      	ldr	r3, [pc, #352]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a57      	ldr	r2, [pc, #348]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80023e4:	f023 0304 	bic.w	r3, r3, #4
 80023e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d015      	beq.n	800241e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f2:	f7ff fb8f 	bl	8001b14 <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f8:	e00a      	b.n	8002410 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023fa:	f7ff fb8b 	bl	8001b14 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	f241 3288 	movw	r2, #5000	; 0x1388
 8002408:	4293      	cmp	r3, r2
 800240a:	d901      	bls.n	8002410 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800240c:	2303      	movs	r3, #3
 800240e:	e0b1      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002410:	4b4b      	ldr	r3, [pc, #300]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	6a1b      	ldr	r3, [r3, #32]
 8002414:	f003 0302 	and.w	r3, r3, #2
 8002418:	2b00      	cmp	r3, #0
 800241a:	d0ee      	beq.n	80023fa <HAL_RCC_OscConfig+0x37e>
 800241c:	e014      	b.n	8002448 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7ff fb79 	bl	8001b14 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7ff fb75 	bl	8001b14 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e09b      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800243c:	4b40      	ldr	r3, [pc, #256]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1ee      	bne.n	8002426 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002448:	7dfb      	ldrb	r3, [r7, #23]
 800244a:	2b01      	cmp	r3, #1
 800244c:	d105      	bne.n	800245a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800244e:	4b3c      	ldr	r3, [pc, #240]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a3b      	ldr	r2, [pc, #236]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f000 8087 	beq.w	8002572 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002464:	4b36      	ldr	r3, [pc, #216]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f003 030c 	and.w	r3, r3, #12
 800246c:	2b08      	cmp	r3, #8
 800246e:	d061      	beq.n	8002534 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b02      	cmp	r3, #2
 8002476:	d146      	bne.n	8002506 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002478:	4b33      	ldr	r3, [pc, #204]	; (8002548 <HAL_RCC_OscConfig+0x4cc>)
 800247a:	2200      	movs	r2, #0
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7ff fb49 	bl	8001b14 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7ff fb45 	bl	8001b14 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e06d      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002498:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1f0      	bne.n	8002486 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ac:	d108      	bne.n	80024c0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ae:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	4921      	ldr	r1, [pc, #132]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024c0:	4b1f      	ldr	r3, [pc, #124]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a19      	ldr	r1, [r3, #32]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d0:	430b      	orrs	r3, r1
 80024d2:	491b      	ldr	r1, [pc, #108]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024d8:	4b1b      	ldr	r3, [pc, #108]	; (8002548 <HAL_RCC_OscConfig+0x4cc>)
 80024da:	2201      	movs	r2, #1
 80024dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7ff fb19 	bl	8001b14 <HAL_GetTick>
 80024e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024e4:	e008      	b.n	80024f8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e6:	f7ff fb15 	bl	8001b14 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	2b02      	cmp	r3, #2
 80024f2:	d901      	bls.n	80024f8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024f4:	2303      	movs	r3, #3
 80024f6:	e03d      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024f8:	4b11      	ldr	r3, [pc, #68]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0f0      	beq.n	80024e6 <HAL_RCC_OscConfig+0x46a>
 8002504:	e035      	b.n	8002572 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_RCC_OscConfig+0x4cc>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7ff fb02 	bl	8001b14 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002514:	f7ff fafe 	bl	8001b14 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e026      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_RCC_OscConfig+0x4c4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x498>
 8002532:	e01e      	b.n	8002572 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d107      	bne.n	800254c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e019      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
 8002540:	40021000 	.word	0x40021000
 8002544:	40007000 	.word	0x40007000
 8002548:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_OscConfig+0x500>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6a1b      	ldr	r3, [r3, #32]
 800255c:	429a      	cmp	r2, r3
 800255e:	d106      	bne.n	800256e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000

08002580 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e0d0      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002594:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d910      	bls.n	80025c4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025a2:	4b67      	ldr	r3, [pc, #412]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 0207 	bic.w	r2, r3, #7
 80025aa:	4965      	ldr	r1, [pc, #404]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025b2:	4b63      	ldr	r3, [pc, #396]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0307 	and.w	r3, r3, #7
 80025ba:	683a      	ldr	r2, [r7, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d001      	beq.n	80025c4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e0b8      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0302 	and.w	r3, r3, #2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d020      	beq.n	8002612 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0304 	and.w	r3, r3, #4
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025dc:	4b59      	ldr	r3, [pc, #356]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025e6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025f4:	4b53      	ldr	r3, [pc, #332]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a52      	ldr	r2, [pc, #328]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80025fe:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002600:	4b50      	ldr	r3, [pc, #320]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	494d      	ldr	r1, [pc, #308]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	4313      	orrs	r3, r2
 8002610:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b00      	cmp	r3, #0
 800261c:	d040      	beq.n	80026a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d107      	bne.n	8002636 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d115      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e07f      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b02      	cmp	r3, #2
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263e:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e073      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800264e:	4b3d      	ldr	r3, [pc, #244]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e06b      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800265e:	4b39      	ldr	r3, [pc, #228]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f023 0203 	bic.w	r2, r3, #3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	4936      	ldr	r1, [pc, #216]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	4313      	orrs	r3, r2
 800266e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002670:	f7ff fa50 	bl	8001b14 <HAL_GetTick>
 8002674:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	e00a      	b.n	800268e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002678:	f7ff fa4c 	bl	8001b14 <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	f241 3288 	movw	r2, #5000	; 0x1388
 8002686:	4293      	cmp	r3, r2
 8002688:	d901      	bls.n	800268e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800268a:	2303      	movs	r3, #3
 800268c:	e053      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	4b2d      	ldr	r3, [pc, #180]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 020c 	and.w	r2, r3, #12
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	429a      	cmp	r2, r3
 800269e:	d1eb      	bne.n	8002678 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a0:	4b27      	ldr	r3, [pc, #156]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0307 	and.w	r3, r3, #7
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d210      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ae:	4b24      	ldr	r3, [pc, #144]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f023 0207 	bic.w	r2, r3, #7
 80026b6:	4922      	ldr	r1, [pc, #136]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026be:	4b20      	ldr	r3, [pc, #128]	; (8002740 <HAL_RCC_ClockConfig+0x1c0>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0307 	and.w	r3, r3, #7
 80026c6:	683a      	ldr	r2, [r7, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e032      	b.n	8002736 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0304 	and.w	r3, r3, #4
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d008      	beq.n	80026ee <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	4916      	ldr	r1, [pc, #88]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 0308 	and.w	r3, r3, #8
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d009      	beq.n	800270e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	691b      	ldr	r3, [r3, #16]
 8002706:	00db      	lsls	r3, r3, #3
 8002708:	490e      	ldr	r1, [pc, #56]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	4313      	orrs	r3, r2
 800270c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800270e:	f000 f821 	bl	8002754 <HAL_RCC_GetSysClockFreq>
 8002712:	4602      	mov	r2, r0
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 030f 	and.w	r3, r3, #15
 800271e:	490a      	ldr	r1, [pc, #40]	; (8002748 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	5ccb      	ldrb	r3, [r1, r3]
 8002722:	fa22 f303 	lsr.w	r3, r2, r3
 8002726:	4a09      	ldr	r2, [pc, #36]	; (800274c <HAL_RCC_ClockConfig+0x1cc>)
 8002728:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800272a:	4b09      	ldr	r3, [pc, #36]	; (8002750 <HAL_RCC_ClockConfig+0x1d0>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff f9ae 	bl	8001a90 <HAL_InitTick>

  return HAL_OK;
 8002734:	2300      	movs	r3, #0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40022000 	.word	0x40022000
 8002744:	40021000 	.word	0x40021000
 8002748:	08006b08 	.word	0x08006b08
 800274c:	20000008 	.word	0x20000008
 8002750:	2000000c 	.word	0x2000000c

08002754 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002754:	b480      	push	{r7}
 8002756:	b087      	sub	sp, #28
 8002758:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800275a:	2300      	movs	r3, #0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	2300      	movs	r3, #0
 8002768:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800276e:	4b1e      	ldr	r3, [pc, #120]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d002      	beq.n	8002784 <HAL_RCC_GetSysClockFreq+0x30>
 800277e:	2b08      	cmp	r3, #8
 8002780:	d003      	beq.n	800278a <HAL_RCC_GetSysClockFreq+0x36>
 8002782:	e027      	b.n	80027d4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002784:	4b19      	ldr	r3, [pc, #100]	; (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002786:	613b      	str	r3, [r7, #16]
      break;
 8002788:	e027      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	0c9b      	lsrs	r3, r3, #18
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	4a17      	ldr	r2, [pc, #92]	; (80027f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002794:	5cd3      	ldrb	r3, [r2, r3]
 8002796:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d010      	beq.n	80027c4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_RCC_GetSysClockFreq+0x94>)
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	0c5b      	lsrs	r3, r3, #17
 80027a8:	f003 0301 	and.w	r3, r3, #1
 80027ac:	4a11      	ldr	r2, [pc, #68]	; (80027f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80027ae:	5cd3      	ldrb	r3, [r2, r3]
 80027b0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 80027b6:	fb03 f202 	mul.w	r2, r3, r2
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	e004      	b.n	80027ce <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a0c      	ldr	r2, [pc, #48]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027c8:	fb02 f303 	mul.w	r3, r2, r3
 80027cc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	613b      	str	r3, [r7, #16]
      break;
 80027d2:	e002      	b.n	80027da <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_RCC_GetSysClockFreq+0x98>)
 80027d6:	613b      	str	r3, [r7, #16]
      break;
 80027d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027da:	693b      	ldr	r3, [r7, #16]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	371c      	adds	r7, #28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	40021000 	.word	0x40021000
 80027ec:	007a1200 	.word	0x007a1200
 80027f0:	08006b20 	.word	0x08006b20
 80027f4:	08006b30 	.word	0x08006b30
 80027f8:	003d0900 	.word	0x003d0900

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002800:	4b02      	ldr	r3, [pc, #8]	; (800280c <HAL_RCC_GetHCLKFreq+0x10>)
 8002802:	681b      	ldr	r3, [r3, #0]
}
 8002804:	4618      	mov	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	bc80      	pop	{r7}
 800280a:	4770      	bx	lr
 800280c:	20000008 	.word	0x20000008

08002810 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002814:	f7ff fff2 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002818:	4602      	mov	r2, r0
 800281a:	4b05      	ldr	r3, [pc, #20]	; (8002830 <HAL_RCC_GetPCLK1Freq+0x20>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	0a1b      	lsrs	r3, r3, #8
 8002820:	f003 0307 	and.w	r3, r3, #7
 8002824:	4903      	ldr	r1, [pc, #12]	; (8002834 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002826:	5ccb      	ldrb	r3, [r1, r3]
 8002828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800282c:	4618      	mov	r0, r3
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000
 8002834:	08006b18 	.word	0x08006b18

08002838 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800283c:	f7ff ffde 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002840:	4602      	mov	r2, r0
 8002842:	4b05      	ldr	r3, [pc, #20]	; (8002858 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	0adb      	lsrs	r3, r3, #11
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	4903      	ldr	r1, [pc, #12]	; (800285c <HAL_RCC_GetPCLK2Freq+0x24>)
 800284e:	5ccb      	ldrb	r3, [r1, r3]
 8002850:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002854:	4618      	mov	r0, r3
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	08006b18 	.word	0x08006b18

08002860 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002868:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <RCC_Delay+0x34>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <RCC_Delay+0x38>)
 800286e:	fba2 2303 	umull	r2, r3, r2, r3
 8002872:	0a5b      	lsrs	r3, r3, #9
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800287c:	bf00      	nop
  }
  while (Delay --);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1e5a      	subs	r2, r3, #1
 8002882:	60fa      	str	r2, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d1f9      	bne.n	800287c <RCC_Delay+0x1c>
}
 8002888:	bf00      	nop
 800288a:	bf00      	nop
 800288c:	3714      	adds	r7, #20
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	20000008 	.word	0x20000008
 8002898:	10624dd3 	.word	0x10624dd3

0800289c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e041      	b.n	8002932 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fe fed6 	bl	8001674 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3304      	adds	r3, #4
 80028d8:	4619      	mov	r1, r3
 80028da:	4610      	mov	r0, r2
 80028dc:	f000 fde6 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b01      	cmp	r3, #1
 800294e:	d001      	beq.n	8002954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e03a      	b.n	80029ca <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68da      	ldr	r2, [r3, #12]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0201 	orr.w	r2, r2, #1
 800296a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a18      	ldr	r2, [pc, #96]	; (80029d4 <HAL_TIM_Base_Start_IT+0x98>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00e      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x58>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297e:	d009      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x58>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a14      	ldr	r2, [pc, #80]	; (80029d8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x58>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a13      	ldr	r2, [pc, #76]	; (80029dc <HAL_TIM_Base_Start_IT+0xa0>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d111      	bne.n	80029b8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d010      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f042 0201 	orr.w	r2, r2, #1
 80029b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	e007      	b.n	80029c8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f042 0201 	orr.w	r2, r2, #1
 80029c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3714      	adds	r7, #20
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00
 80029d8:	40000400 	.word	0x40000400
 80029dc:	40000800 	.word	0x40000800

080029e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d101      	bne.n	80029f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e041      	b.n	8002a76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d106      	bne.n	8002a0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2200      	movs	r2, #0
 8002a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	f000 f839 	bl	8002a7e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2202      	movs	r2, #2
 8002a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	3304      	adds	r3, #4
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4610      	mov	r0, r2
 8002a20:	f000 fd44 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2201      	movs	r2, #1
 8002a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2201      	movs	r2, #1
 8002a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2201      	movs	r2, #1
 8002a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d109      	bne.n	8002ab4 <HAL_TIM_PWM_Start+0x24>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	bf14      	ite	ne
 8002aac:	2301      	movne	r3, #1
 8002aae:	2300      	moveq	r3, #0
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	e022      	b.n	8002afa <HAL_TIM_PWM_Start+0x6a>
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	2b04      	cmp	r3, #4
 8002ab8:	d109      	bne.n	8002ace <HAL_TIM_PWM_Start+0x3e>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	bf14      	ite	ne
 8002ac6:	2301      	movne	r3, #1
 8002ac8:	2300      	moveq	r3, #0
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	e015      	b.n	8002afa <HAL_TIM_PWM_Start+0x6a>
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	2b08      	cmp	r3, #8
 8002ad2:	d109      	bne.n	8002ae8 <HAL_TIM_PWM_Start+0x58>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	e008      	b.n	8002afa <HAL_TIM_PWM_Start+0x6a>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	bf14      	ite	ne
 8002af4:	2301      	movne	r3, #1
 8002af6:	2300      	moveq	r3, #0
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d001      	beq.n	8002b02 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e05e      	b.n	8002bc0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d104      	bne.n	8002b12 <HAL_TIM_PWM_Start+0x82>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2202      	movs	r2, #2
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b10:	e013      	b.n	8002b3a <HAL_TIM_PWM_Start+0xaa>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b04      	cmp	r3, #4
 8002b16:	d104      	bne.n	8002b22 <HAL_TIM_PWM_Start+0x92>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b20:	e00b      	b.n	8002b3a <HAL_TIM_PWM_Start+0xaa>
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	2b08      	cmp	r3, #8
 8002b26:	d104      	bne.n	8002b32 <HAL_TIM_PWM_Start+0xa2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b30:	e003      	b.n	8002b3a <HAL_TIM_PWM_Start+0xaa>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2202      	movs	r2, #2
 8002b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	6839      	ldr	r1, [r7, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 ffc3 	bl	8003ace <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a1e      	ldr	r2, [pc, #120]	; (8002bc8 <HAL_TIM_PWM_Start+0x138>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d107      	bne.n	8002b62 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_TIM_PWM_Start+0x138>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d00e      	beq.n	8002b8a <HAL_TIM_PWM_Start+0xfa>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b74:	d009      	beq.n	8002b8a <HAL_TIM_PWM_Start+0xfa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a14      	ldr	r2, [pc, #80]	; (8002bcc <HAL_TIM_PWM_Start+0x13c>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d004      	beq.n	8002b8a <HAL_TIM_PWM_Start+0xfa>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a12      	ldr	r2, [pc, #72]	; (8002bd0 <HAL_TIM_PWM_Start+0x140>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d111      	bne.n	8002bae <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b06      	cmp	r3, #6
 8002b9a:	d010      	beq.n	8002bbe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0201 	orr.w	r2, r2, #1
 8002baa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bac:	e007      	b.n	8002bbe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f042 0201 	orr.w	r2, r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002bbe:	2300      	movs	r3, #0
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3710      	adds	r7, #16
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40012c00 	.word	0x40012c00
 8002bcc:	40000400 	.word	0x40000400
 8002bd0:	40000800 	.word	0x40000800

08002bd4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d101      	bne.n	8002be8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e093      	b.n	8002d10 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d106      	bne.n	8002c02 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7fe fd71 	bl	80016e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2202      	movs	r2, #2
 8002c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c18:	f023 0307 	bic.w	r3, r3, #7
 8002c1c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	3304      	adds	r3, #4
 8002c26:	4619      	mov	r1, r3
 8002c28:	4610      	mov	r0, r2
 8002c2a:	f000 fc3f 	bl	80034ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	689b      	ldr	r3, [r3, #8]
 8002c34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	699b      	ldr	r3, [r3, #24]
 8002c3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	697a      	ldr	r2, [r7, #20]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8002c50:	693b      	ldr	r3, [r7, #16]
 8002c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c56:	f023 0303 	bic.w	r3, r3, #3
 8002c5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	689a      	ldr	r2, [r3, #8]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	4313      	orrs	r3, r2
 8002c68:	693a      	ldr	r2, [r7, #16]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8002c74:	f023 030c 	bic.w	r3, r3, #12
 8002c78:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	68da      	ldr	r2, [r3, #12]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	021b      	lsls	r3, r3, #8
 8002c90:	4313      	orrs	r3, r2
 8002c92:	693a      	ldr	r2, [r7, #16]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	691b      	ldr	r3, [r3, #16]
 8002c9c:	011a      	lsls	r2, r3, #4
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	6a1b      	ldr	r3, [r3, #32]
 8002ca2:	031b      	lsls	r3, r3, #12
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	693a      	ldr	r2, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8002cb2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	011b      	lsls	r3, r3, #4
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	68fa      	ldr	r2, [r7, #12]
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	693a      	ldr	r2, [r7, #16]
 8002cd4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68fa      	ldr	r2, [r7, #12]
 8002cdc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2201      	movs	r2, #1
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2201      	movs	r2, #1
 8002d02:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d0e:	2300      	movs	r3, #0
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	3718      	adds	r7, #24
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d28:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d30:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d38:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d40:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d110      	bne.n	8002d6a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d48:	7bfb      	ldrb	r3, [r7, #15]
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d4e:	7b7b      	ldrb	r3, [r7, #13]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d001      	beq.n	8002d58 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e069      	b.n	8002e2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2202      	movs	r2, #2
 8002d64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d68:	e031      	b.n	8002dce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d110      	bne.n	8002d92 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d70:	7bbb      	ldrb	r3, [r7, #14]
 8002d72:	2b01      	cmp	r3, #1
 8002d74:	d102      	bne.n	8002d7c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002d76:	7b3b      	ldrb	r3, [r7, #12]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d001      	beq.n	8002d80 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e055      	b.n	8002e2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d90:	e01d      	b.n	8002dce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d92:	7bfb      	ldrb	r3, [r7, #15]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d108      	bne.n	8002daa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d98:	7bbb      	ldrb	r3, [r7, #14]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d105      	bne.n	8002daa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002d9e:	7b7b      	ldrb	r3, [r7, #13]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d102      	bne.n	8002daa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002da4:	7b3b      	ldrb	r3, [r7, #12]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d001      	beq.n	8002dae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e03e      	b.n	8002e2c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2202      	movs	r2, #2
 8002db2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2202      	movs	r2, #2
 8002dba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2202      	movs	r2, #2
 8002dc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2202      	movs	r2, #2
 8002dca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d003      	beq.n	8002ddc <HAL_TIM_Encoder_Start+0xc4>
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b04      	cmp	r3, #4
 8002dd8:	d008      	beq.n	8002dec <HAL_TIM_Encoder_Start+0xd4>
 8002dda:	e00f      	b.n	8002dfc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2201      	movs	r2, #1
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f000 fe72 	bl	8003ace <TIM_CCxChannelCmd>
      break;
 8002dea:	e016      	b.n	8002e1a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2201      	movs	r2, #1
 8002df2:	2104      	movs	r1, #4
 8002df4:	4618      	mov	r0, r3
 8002df6:	f000 fe6a 	bl	8003ace <TIM_CCxChannelCmd>
      break;
 8002dfa:	e00e      	b.n	8002e1a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2201      	movs	r2, #1
 8002e02:	2100      	movs	r1, #0
 8002e04:	4618      	mov	r0, r3
 8002e06:	f000 fe62 	bl	8003ace <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	2104      	movs	r1, #4
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fe5b 	bl	8003ace <TIM_CCxChannelCmd>
      break;
 8002e18:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f042 0201 	orr.w	r2, r2, #1
 8002e28:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3710      	adds	r7, #16
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b082      	sub	sp, #8
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691b      	ldr	r3, [r3, #16]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d122      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68db      	ldr	r3, [r3, #12]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d11b      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f06f 0202 	mvn.w	r2, #2
 8002e60:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2201      	movs	r2, #1
 8002e66:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	f003 0303 	and.w	r3, r3, #3
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f000 fafd 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 8002e7c:	e005      	b.n	8002e8a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f000 faf0 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 faff 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0304 	and.w	r3, r3, #4
 8002e9a:	2b04      	cmp	r3, #4
 8002e9c:	d122      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b04      	cmp	r3, #4
 8002eaa:	d11b      	bne.n	8002ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0204 	mvn.w	r2, #4
 8002eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d003      	beq.n	8002ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f000 fad3 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 8002ed0:	e005      	b.n	8002ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fac6 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 fad5 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f003 0308 	and.w	r3, r3, #8
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d122      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0308 	and.w	r3, r3, #8
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d11b      	bne.n	8002f38 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f06f 0208 	mvn.w	r2, #8
 8002f08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2204      	movs	r2, #4
 8002f0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d003      	beq.n	8002f26 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 faa9 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 8002f24:	e005      	b.n	8002f32 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 fa9c 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f000 faab 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2200      	movs	r2, #0
 8002f36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691b      	ldr	r3, [r3, #16]
 8002f3e:	f003 0310 	and.w	r3, r3, #16
 8002f42:	2b10      	cmp	r3, #16
 8002f44:	d122      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	f003 0310 	and.w	r3, r3, #16
 8002f50:	2b10      	cmp	r3, #16
 8002f52:	d11b      	bne.n	8002f8c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f06f 0210 	mvn.w	r2, #16
 8002f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2208      	movs	r2, #8
 8002f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fa7f 	bl	8003476 <HAL_TIM_IC_CaptureCallback>
 8002f78:	e005      	b.n	8002f86 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa72 	bl	8003464 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fa81 	bl	8003488 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	f003 0301 	and.w	r3, r3, #1
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d10e      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f003 0301 	and.w	r3, r3, #1
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d107      	bne.n	8002fb8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f06f 0201 	mvn.w	r2, #1
 8002fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fa44 	bl	8001440 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691b      	ldr	r3, [r3, #16]
 8002fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc2:	2b80      	cmp	r3, #128	; 0x80
 8002fc4:	d10e      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68db      	ldr	r3, [r3, #12]
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b80      	cmp	r3, #128	; 0x80
 8002fd2:	d107      	bne.n	8002fe4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fe52 	bl	8003c88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fee:	2b40      	cmp	r3, #64	; 0x40
 8002ff0:	d10e      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68db      	ldr	r3, [r3, #12]
 8002ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffc:	2b40      	cmp	r3, #64	; 0x40
 8002ffe:	d107      	bne.n	8003010 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa45 	bl	800349a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	691b      	ldr	r3, [r3, #16]
 8003016:	f003 0320 	and.w	r3, r3, #32
 800301a:	2b20      	cmp	r3, #32
 800301c:	d10e      	bne.n	800303c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b20      	cmp	r3, #32
 800302a:	d107      	bne.n	800303c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0220 	mvn.w	r2, #32
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fe1d 	bl	8003c76 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800303c:	bf00      	nop
 800303e:	3708      	adds	r7, #8
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800305e:	2302      	movs	r3, #2
 8003060:	e0ae      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b0c      	cmp	r3, #12
 800306e:	f200 809f 	bhi.w	80031b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003072:	a201      	add	r2, pc, #4	; (adr r2, 8003078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003078:	080030ad 	.word	0x080030ad
 800307c:	080031b1 	.word	0x080031b1
 8003080:	080031b1 	.word	0x080031b1
 8003084:	080031b1 	.word	0x080031b1
 8003088:	080030ed 	.word	0x080030ed
 800308c:	080031b1 	.word	0x080031b1
 8003090:	080031b1 	.word	0x080031b1
 8003094:	080031b1 	.word	0x080031b1
 8003098:	0800312f 	.word	0x0800312f
 800309c:	080031b1 	.word	0x080031b1
 80030a0:	080031b1 	.word	0x080031b1
 80030a4:	080031b1 	.word	0x080031b1
 80030a8:	0800316f 	.word	0x0800316f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fa5c 	bl	8003570 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0208 	orr.w	r2, r2, #8
 80030c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0204 	bic.w	r2, r2, #4
 80030d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6999      	ldr	r1, [r3, #24]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	619a      	str	r2, [r3, #24]
      break;
 80030ea:	e064      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 faa2 	bl	800363c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6999      	ldr	r1, [r3, #24]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	021a      	lsls	r2, r3, #8
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	619a      	str	r2, [r3, #24]
      break;
 800312c:	e043      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 faeb 	bl	8003710 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0208 	orr.w	r2, r2, #8
 8003148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0204 	bic.w	r2, r2, #4
 8003158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69d9      	ldr	r1, [r3, #28]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	61da      	str	r2, [r3, #28]
      break;
 800316c:	e023      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fb35 	bl	80037e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69d9      	ldr	r1, [r3, #28]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	021a      	lsls	r2, r3, #8
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	61da      	str	r2, [r3, #28]
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
      break;
 80031b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031be:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_TIM_ConfigClockSource+0x1c>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e0b4      	b.n	800334e <HAL_TIM_ConfigClockSource+0x186>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800320a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800321c:	d03e      	beq.n	800329c <HAL_TIM_ConfigClockSource+0xd4>
 800321e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003222:	f200 8087 	bhi.w	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800322a:	f000 8086 	beq.w	800333a <HAL_TIM_ConfigClockSource+0x172>
 800322e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003232:	d87f      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003234:	2b70      	cmp	r3, #112	; 0x70
 8003236:	d01a      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xa6>
 8003238:	2b70      	cmp	r3, #112	; 0x70
 800323a:	d87b      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 800323c:	2b60      	cmp	r3, #96	; 0x60
 800323e:	d050      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003240:	2b60      	cmp	r3, #96	; 0x60
 8003242:	d877      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003244:	2b50      	cmp	r3, #80	; 0x50
 8003246:	d03c      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003248:	2b50      	cmp	r3, #80	; 0x50
 800324a:	d873      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 800324c:	2b40      	cmp	r3, #64	; 0x40
 800324e:	d058      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x13a>
 8003250:	2b40      	cmp	r3, #64	; 0x40
 8003252:	d86f      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b30      	cmp	r3, #48	; 0x30
 8003256:	d064      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x15a>
 8003258:	2b30      	cmp	r3, #48	; 0x30
 800325a:	d86b      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b20      	cmp	r3, #32
 800325e:	d060      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x15a>
 8003260:	2b20      	cmp	r3, #32
 8003262:	d867      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d05c      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x15a>
 8003268:	2b10      	cmp	r3, #16
 800326a:	d05a      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x15a>
 800326c:	e062      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	f000 fc07 	bl	8003a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	609a      	str	r2, [r3, #8]
      break;
 800329a:	e04f      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6899      	ldr	r1, [r3, #8]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f000 fbf0 	bl	8003a90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032be:	609a      	str	r2, [r3, #8]
      break;
 80032c0:	e03c      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6859      	ldr	r1, [r3, #4]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
 80032ce:	461a      	mov	r2, r3
 80032d0:	f000 fb67 	bl	80039a2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2150      	movs	r1, #80	; 0x50
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fbbe 	bl	8003a5c <TIM_ITRx_SetConfig>
      break;
 80032e0:	e02c      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
 80032ee:	461a      	mov	r2, r3
 80032f0:	f000 fb85 	bl	80039fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2160      	movs	r1, #96	; 0x60
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fbae 	bl	8003a5c <TIM_ITRx_SetConfig>
      break;
 8003300:	e01c      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	461a      	mov	r2, r3
 8003310:	f000 fb47 	bl	80039a2 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2140      	movs	r1, #64	; 0x40
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fb9e 	bl	8003a5c <TIM_ITRx_SetConfig>
      break;
 8003320:	e00c      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f000 fb95 	bl	8003a5c <TIM_ITRx_SetConfig>
      break;
 8003332:	e003      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      break;
 8003338:	e000      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800333a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_TIM_SlaveConfigSynchro+0x18>
 800336a:	2302      	movs	r3, #2
 800336c:	e031      	b.n	80033d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800337e:	6839      	ldr	r1, [r7, #0]
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 fa7d 	bl	8003880 <TIM_SlaveTimer_SetConfig>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d009      	beq.n	80033a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e018      	b.n	80033d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
 80033e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80033e6:	2300      	movs	r3, #0
 80033e8:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b0c      	cmp	r3, #12
 80033ee:	d831      	bhi.n	8003454 <HAL_TIM_ReadCapturedValue+0x78>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800342d 	.word	0x0800342d
 80033fc:	08003455 	.word	0x08003455
 8003400:	08003455 	.word	0x08003455
 8003404:	08003455 	.word	0x08003455
 8003408:	08003437 	.word	0x08003437
 800340c:	08003455 	.word	0x08003455
 8003410:	08003455 	.word	0x08003455
 8003414:	08003455 	.word	0x08003455
 8003418:	08003441 	.word	0x08003441
 800341c:	08003455 	.word	0x08003455
 8003420:	08003455 	.word	0x08003455
 8003424:	08003455 	.word	0x08003455
 8003428:	0800344b 	.word	0x0800344b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003432:	60fb      	str	r3, [r7, #12]

      break;
 8003434:	e00f      	b.n	8003456 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800343c:	60fb      	str	r3, [r7, #12]

      break;
 800343e:	e00a      	b.n	8003456 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003446:	60fb      	str	r3, [r7, #12]

      break;
 8003448:	e005      	b.n	8003456 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	60fb      	str	r3, [r7, #12]

      break;
 8003452:	e000      	b.n	8003456 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003454:	bf00      	nop
  }

  return tmpreg;
 8003456:	68fb      	ldr	r3, [r7, #12]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	bc80      	pop	{r7}
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop

08003464 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr

08003476 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800347e:	bf00      	nop
 8003480:	370c      	adds	r7, #12
 8003482:	46bd      	mov	sp, r7
 8003484:	bc80      	pop	{r7}
 8003486:	4770      	bx	lr

08003488 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003490:	bf00      	nop
 8003492:	370c      	adds	r7, #12
 8003494:	46bd      	mov	sp, r7
 8003496:	bc80      	pop	{r7}
 8003498:	4770      	bx	lr

0800349a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bc80      	pop	{r7}
 80034aa:	4770      	bx	lr

080034ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a29      	ldr	r2, [pc, #164]	; (8003564 <TIM_Base_SetConfig+0xb8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00b      	beq.n	80034dc <TIM_Base_SetConfig+0x30>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d007      	beq.n	80034dc <TIM_Base_SetConfig+0x30>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a26      	ldr	r2, [pc, #152]	; (8003568 <TIM_Base_SetConfig+0xbc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d003      	beq.n	80034dc <TIM_Base_SetConfig+0x30>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a25      	ldr	r2, [pc, #148]	; (800356c <TIM_Base_SetConfig+0xc0>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d108      	bne.n	80034ee <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a1c      	ldr	r2, [pc, #112]	; (8003564 <TIM_Base_SetConfig+0xb8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00b      	beq.n	800350e <TIM_Base_SetConfig+0x62>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034fc:	d007      	beq.n	800350e <TIM_Base_SetConfig+0x62>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	4a19      	ldr	r2, [pc, #100]	; (8003568 <TIM_Base_SetConfig+0xbc>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d003      	beq.n	800350e <TIM_Base_SetConfig+0x62>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a18      	ldr	r2, [pc, #96]	; (800356c <TIM_Base_SetConfig+0xc0>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d108      	bne.n	8003520 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003514:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	68fa      	ldr	r2, [r7, #12]
 800351c:	4313      	orrs	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	4313      	orrs	r3, r2
 800352c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68fa      	ldr	r2, [r7, #12]
 8003532:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	689a      	ldr	r2, [r3, #8]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a07      	ldr	r2, [pc, #28]	; (8003564 <TIM_Base_SetConfig+0xb8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d103      	bne.n	8003554 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	691a      	ldr	r2, [r3, #16]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	615a      	str	r2, [r3, #20]
}
 800355a:	bf00      	nop
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800

08003570 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003570:	b480      	push	{r7}
 8003572:	b087      	sub	sp, #28
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6a1b      	ldr	r3, [r3, #32]
 8003584:	f023 0201 	bic.w	r2, r3, #1
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	699b      	ldr	r3, [r3, #24]
 8003596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f023 0303 	bic.w	r3, r3, #3
 80035a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	f023 0302 	bic.w	r3, r3, #2
 80035b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	689b      	ldr	r3, [r3, #8]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a1c      	ldr	r2, [pc, #112]	; (8003638 <TIM_OC1_SetConfig+0xc8>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d10c      	bne.n	80035e6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0308 	bic.w	r3, r3, #8
 80035d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	697a      	ldr	r2, [r7, #20]
 80035da:	4313      	orrs	r3, r2
 80035dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	f023 0304 	bic.w	r3, r3, #4
 80035e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a13      	ldr	r2, [pc, #76]	; (8003638 <TIM_OC1_SetConfig+0xc8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d111      	bne.n	8003612 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	695b      	ldr	r3, [r3, #20]
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	4313      	orrs	r3, r2
 8003606:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	693a      	ldr	r2, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	693a      	ldr	r2, [r7, #16]
 8003616:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	685a      	ldr	r2, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	697a      	ldr	r2, [r7, #20]
 800362a:	621a      	str	r2, [r3, #32]
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	40012c00 	.word	0x40012c00

0800363c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	f023 0210 	bic.w	r2, r3, #16
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800366a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003672:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	021b      	lsls	r3, r3, #8
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	4313      	orrs	r3, r2
 800367e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f023 0320 	bic.w	r3, r3, #32
 8003686:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a1d      	ldr	r2, [pc, #116]	; (800370c <TIM_OC2_SetConfig+0xd0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d10d      	bne.n	80036b8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036b6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a14      	ldr	r2, [pc, #80]	; (800370c <TIM_OC2_SetConfig+0xd0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d113      	bne.n	80036e8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	695b      	ldr	r3, [r3, #20]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	693a      	ldr	r2, [r7, #16]
 80036ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	68fa      	ldr	r2, [r7, #12]
 80036f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	40012c00 	.word	0x40012c00

08003710 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a1b      	ldr	r3, [r3, #32]
 8003724:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800373e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0303 	bic.w	r3, r3, #3
 8003746:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	4313      	orrs	r3, r2
 8003750:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003758:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	021b      	lsls	r3, r3, #8
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	4313      	orrs	r3, r2
 8003764:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a1d      	ldr	r2, [pc, #116]	; (80037e0 <TIM_OC3_SetConfig+0xd0>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d10d      	bne.n	800378a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003774:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003788:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a14      	ldr	r2, [pc, #80]	; (80037e0 <TIM_OC3_SetConfig+0xd0>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d113      	bne.n	80037ba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003798:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	695b      	ldr	r3, [r3, #20]
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	011b      	lsls	r3, r3, #4
 80037b4:	693a      	ldr	r2, [r7, #16]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	693a      	ldr	r2, [r7, #16]
 80037be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	685a      	ldr	r2, [r3, #4]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	621a      	str	r2, [r3, #32]
}
 80037d4:	bf00      	nop
 80037d6:	371c      	adds	r7, #28
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr
 80037de:	bf00      	nop
 80037e0:	40012c00 	.word	0x40012c00

080037e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
 80037ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	69db      	ldr	r3, [r3, #28]
 800380a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003812:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	68fa      	ldr	r2, [r7, #12]
 8003824:	4313      	orrs	r3, r2
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800382e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	031b      	lsls	r3, r3, #12
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a0f      	ldr	r2, [pc, #60]	; (800387c <TIM_OC4_SetConfig+0x98>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d109      	bne.n	8003858 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800384a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	695b      	ldr	r3, [r3, #20]
 8003850:	019b      	lsls	r3, r3, #6
 8003852:	697a      	ldr	r2, [r7, #20]
 8003854:	4313      	orrs	r3, r2
 8003856:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68fa      	ldr	r2, [r7, #12]
 8003862:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	621a      	str	r2, [r3, #32]
}
 8003872:	bf00      	nop
 8003874:	371c      	adds	r7, #28
 8003876:	46bd      	mov	sp, r7
 8003878:	bc80      	pop	{r7}
 800387a:	4770      	bx	lr
 800387c:	40012c00 	.word	0x40012c00

08003880 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800388a:	2300      	movs	r3, #0
 800388c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800389c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	f023 0307 	bic.w	r3, r3, #7
 80038ae:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b70      	cmp	r3, #112	; 0x70
 80038c8:	d01a      	beq.n	8003900 <TIM_SlaveTimer_SetConfig+0x80>
 80038ca:	2b70      	cmp	r3, #112	; 0x70
 80038cc:	d860      	bhi.n	8003990 <TIM_SlaveTimer_SetConfig+0x110>
 80038ce:	2b60      	cmp	r3, #96	; 0x60
 80038d0:	d054      	beq.n	800397c <TIM_SlaveTimer_SetConfig+0xfc>
 80038d2:	2b60      	cmp	r3, #96	; 0x60
 80038d4:	d85c      	bhi.n	8003990 <TIM_SlaveTimer_SetConfig+0x110>
 80038d6:	2b50      	cmp	r3, #80	; 0x50
 80038d8:	d046      	beq.n	8003968 <TIM_SlaveTimer_SetConfig+0xe8>
 80038da:	2b50      	cmp	r3, #80	; 0x50
 80038dc:	d858      	bhi.n	8003990 <TIM_SlaveTimer_SetConfig+0x110>
 80038de:	2b40      	cmp	r3, #64	; 0x40
 80038e0:	d019      	beq.n	8003916 <TIM_SlaveTimer_SetConfig+0x96>
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d854      	bhi.n	8003990 <TIM_SlaveTimer_SetConfig+0x110>
 80038e6:	2b30      	cmp	r3, #48	; 0x30
 80038e8:	d055      	beq.n	8003996 <TIM_SlaveTimer_SetConfig+0x116>
 80038ea:	2b30      	cmp	r3, #48	; 0x30
 80038ec:	d850      	bhi.n	8003990 <TIM_SlaveTimer_SetConfig+0x110>
 80038ee:	2b20      	cmp	r3, #32
 80038f0:	d051      	beq.n	8003996 <TIM_SlaveTimer_SetConfig+0x116>
 80038f2:	2b20      	cmp	r3, #32
 80038f4:	d84c      	bhi.n	8003990 <TIM_SlaveTimer_SetConfig+0x110>
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d04d      	beq.n	8003996 <TIM_SlaveTimer_SetConfig+0x116>
 80038fa:	2b10      	cmp	r3, #16
 80038fc:	d04b      	beq.n	8003996 <TIM_SlaveTimer_SetConfig+0x116>
 80038fe:	e047      	b.n	8003990 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6818      	ldr	r0, [r3, #0]
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68d9      	ldr	r1, [r3, #12]
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	689a      	ldr	r2, [r3, #8]
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f000 f8be 	bl	8003a90 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003914:	e040      	b.n	8003998 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b05      	cmp	r3, #5
 800391c:	d101      	bne.n	8003922 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e03b      	b.n	800399a <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6a1a      	ldr	r2, [r3, #32]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f022 0201 	bic.w	r2, r2, #1
 8003938:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	699b      	ldr	r3, [r3, #24]
 8003940:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003948:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	691b      	ldr	r3, [r3, #16]
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	68ba      	ldr	r2, [r7, #8]
 8003952:	4313      	orrs	r3, r2
 8003954:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	68ba      	ldr	r2, [r7, #8]
 800395c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	621a      	str	r2, [r3, #32]
      break;
 8003966:	e017      	b.n	8003998 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6899      	ldr	r1, [r3, #8]
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	461a      	mov	r2, r3
 8003976:	f000 f814 	bl	80039a2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800397a:	e00d      	b.n	8003998 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6818      	ldr	r0, [r3, #0]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	6899      	ldr	r1, [r3, #8]
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	461a      	mov	r2, r3
 800398a:	f000 f838 	bl	80039fe <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 800398e:	e003      	b.n	8003998 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	75fb      	strb	r3, [r7, #23]
      break;
 8003994:	e000      	b.n	8003998 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003996:	bf00      	nop
  }

  return status;
 8003998:	7dfb      	ldrb	r3, [r7, #23]
}
 800399a:	4618      	mov	r0, r3
 800399c:	3718      	adds	r7, #24
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}

080039a2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b087      	sub	sp, #28
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	60f8      	str	r0, [r7, #12]
 80039aa:	60b9      	str	r1, [r7, #8]
 80039ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f023 0201 	bic.w	r2, r3, #1
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	011b      	lsls	r3, r3, #4
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	f023 030a 	bic.w	r3, r3, #10
 80039de:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	697a      	ldr	r2, [r7, #20]
 80039f2:	621a      	str	r2, [r3, #32]
}
 80039f4:	bf00      	nop
 80039f6:	371c      	adds	r7, #28
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bc80      	pop	{r7}
 80039fc:	4770      	bx	lr

080039fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039fe:	b480      	push	{r7}
 8003a00:	b087      	sub	sp, #28
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	60b9      	str	r1, [r7, #8]
 8003a08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a1b      	ldr	r3, [r3, #32]
 8003a0e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6a1b      	ldr	r3, [r3, #32]
 8003a14:	f023 0210 	bic.w	r2, r3, #16
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a28:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a3a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	697a      	ldr	r2, [r7, #20]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	693a      	ldr	r2, [r7, #16]
 8003a4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	f043 0307 	orr.w	r3, r3, #7
 8003a7e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	609a      	str	r2, [r3, #8]
}
 8003a86:	bf00      	nop
 8003a88:	3714      	adds	r7, #20
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr

08003a90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a90:	b480      	push	{r7}
 8003a92:	b087      	sub	sp, #28
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	021a      	lsls	r2, r3, #8
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	431a      	orrs	r2, r3
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	4313      	orrs	r3, r2
 8003abc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	697a      	ldr	r2, [r7, #20]
 8003ac2:	609a      	str	r2, [r3, #8]
}
 8003ac4:	bf00      	nop
 8003ac6:	371c      	adds	r7, #28
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bc80      	pop	{r7}
 8003acc:	4770      	bx	lr

08003ace <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	b087      	sub	sp, #28
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	60f8      	str	r0, [r7, #12]
 8003ad6:	60b9      	str	r1, [r7, #8]
 8003ad8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6a1a      	ldr	r2, [r3, #32]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	43db      	mvns	r3, r3
 8003af0:	401a      	ands	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a1a      	ldr	r2, [r3, #32]
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f003 031f 	and.w	r3, r3, #31
 8003b00:	6879      	ldr	r1, [r7, #4]
 8003b02:	fa01 f303 	lsl.w	r3, r1, r3
 8003b06:	431a      	orrs	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	621a      	str	r2, [r3, #32]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bc80      	pop	{r7}
 8003b14:	4770      	bx	lr
	...

08003b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e046      	b.n	8003bbe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b56:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a16      	ldr	r2, [pc, #88]	; (8003bc8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00e      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d009      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a12      	ldr	r2, [pc, #72]	; (8003bcc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d004      	beq.n	8003b92 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a10      	ldr	r2, [pc, #64]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d10c      	bne.n	8003bac <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b98:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3714      	adds	r7, #20
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	40012c00 	.word	0x40012c00
 8003bcc:	40000400 	.word	0x40000400
 8003bd0:	40000800 	.word	0x40000800

08003bd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003bde:	2300      	movs	r3, #0
 8003be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e03d      	b.n	8003c6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	69db      	ldr	r3, [r3, #28]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	68fa      	ldr	r2, [r7, #12]
 8003c60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c6a:	2300      	movs	r3, #0
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bc80      	pop	{r7}
 8003c74:	4770      	bx	lr

08003c76 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b083      	sub	sp, #12
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bc80      	pop	{r7}
 8003c86:	4770      	bx	lr

08003c88 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c90:	bf00      	nop
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	4770      	bx	lr

08003c9a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b082      	sub	sp, #8
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e042      	b.n	8003d32 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cb2:	b2db      	uxtb	r3, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d106      	bne.n	8003cc6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f7fd fd81 	bl	80017c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2224      	movs	r2, #36	; 0x24
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68da      	ldr	r2, [r3, #12]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cdc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f91c 	bl	8003f1c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691a      	ldr	r2, [r3, #16]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cf2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	695a      	ldr	r2, [r3, #20]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d02:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68da      	ldr	r2, [r3, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d12:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2220      	movs	r2, #32
 8003d1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2220      	movs	r2, #32
 8003d26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b08a      	sub	sp, #40	; 0x28
 8003d3e:	af02      	add	r7, sp, #8
 8003d40:	60f8      	str	r0, [r7, #12]
 8003d42:	60b9      	str	r1, [r7, #8]
 8003d44:	603b      	str	r3, [r7, #0]
 8003d46:	4613      	mov	r3, r2
 8003d48:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b20      	cmp	r3, #32
 8003d58:	d16d      	bne.n	8003e36 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <HAL_UART_Transmit+0x2c>
 8003d60:	88fb      	ldrh	r3, [r7, #6]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e066      	b.n	8003e38 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2221      	movs	r2, #33	; 0x21
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d78:	f7fd fecc 	bl	8001b14 <HAL_GetTick>
 8003d7c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	88fa      	ldrh	r2, [r7, #6]
 8003d82:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	d108      	bne.n	8003da6 <HAL_UART_Transmit+0x6c>
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d104      	bne.n	8003da6 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
 8003da4:	e003      	b.n	8003dae <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dae:	e02a      	b.n	8003e06 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	2200      	movs	r2, #0
 8003db8:	2180      	movs	r1, #128	; 0x80
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 f840 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e036      	b.n	8003e38 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003dca:	69fb      	ldr	r3, [r7, #28]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d10b      	bne.n	8003de8 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dd0:	69bb      	ldr	r3, [r7, #24]
 8003dd2:	881b      	ldrh	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003dde:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	3302      	adds	r3, #2
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e007      	b.n	8003df8 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	781a      	ldrb	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	3301      	adds	r3, #1
 8003df6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	3b01      	subs	r3, #1
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e0a:	b29b      	uxth	r3, r3
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1cf      	bne.n	8003db0 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	2200      	movs	r2, #0
 8003e18:	2140      	movs	r1, #64	; 0x40
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f810 	bl	8003e40 <UART_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e006      	b.n	8003e38 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e36:	2302      	movs	r3, #2
  }
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3720      	adds	r7, #32
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b090      	sub	sp, #64	; 0x40
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e50:	e050      	b.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e58:	d04c      	beq.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d007      	beq.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e60:	f7fd fe58 	bl	8001b14 <HAL_GetTick>
 8003e64:	4602      	mov	r2, r0
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	1ad3      	subs	r3, r2, r3
 8003e6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e6c:	429a      	cmp	r2, r3
 8003e6e:	d241      	bcs.n	8003ef4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	330c      	adds	r3, #12
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e90:	637a      	str	r2, [r7, #52]	; 0x34
 8003e92:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e5      	bne.n	8003e70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3314      	adds	r3, #20
 8003eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ec4:	623a      	str	r2, [r7, #32]
 8003ec6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	69f9      	ldr	r1, [r7, #28]
 8003eca:	6a3a      	ldr	r2, [r7, #32]
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e5      	bne.n	8003ea4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e00f      	b.n	8003f14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	4013      	ands	r3, r2
 8003efe:	68ba      	ldr	r2, [r7, #8]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
 8003f0e:	429a      	cmp	r2, r3
 8003f10:	d09f      	beq.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f12:	2300      	movs	r3, #0
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3740      	adds	r7, #64	; 0x40
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	431a      	orrs	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	695b      	ldr	r3, [r3, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003f56:	f023 030c 	bic.w	r3, r3, #12
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	6812      	ldr	r2, [r2, #0]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	430b      	orrs	r3, r1
 8003f62:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699a      	ldr	r2, [r3, #24]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	430a      	orrs	r2, r1
 8003f78:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a2c      	ldr	r2, [pc, #176]	; (8004030 <UART_SetConfig+0x114>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d103      	bne.n	8003f8c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003f84:	f7fe fc58 	bl	8002838 <HAL_RCC_GetPCLK2Freq>
 8003f88:	60f8      	str	r0, [r7, #12]
 8003f8a:	e002      	b.n	8003f92 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003f8c:	f7fe fc40 	bl	8002810 <HAL_RCC_GetPCLK1Freq>
 8003f90:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4613      	mov	r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	4413      	add	r3, r2
 8003f9a:	009a      	lsls	r2, r3, #2
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa8:	4a22      	ldr	r2, [pc, #136]	; (8004034 <UART_SetConfig+0x118>)
 8003faa:	fba2 2303 	umull	r2, r3, r2, r3
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	0119      	lsls	r1, r3, #4
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4613      	mov	r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	4413      	add	r3, r2
 8003fba:	009a      	lsls	r2, r3, #2
 8003fbc:	441a      	add	r2, r3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003fc8:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <UART_SetConfig+0x118>)
 8003fca:	fba3 0302 	umull	r0, r3, r3, r2
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2064      	movs	r0, #100	; 0x64
 8003fd2:	fb00 f303 	mul.w	r3, r0, r3
 8003fd6:	1ad3      	subs	r3, r2, r3
 8003fd8:	011b      	lsls	r3, r3, #4
 8003fda:	3332      	adds	r3, #50	; 0x32
 8003fdc:	4a15      	ldr	r2, [pc, #84]	; (8004034 <UART_SetConfig+0x118>)
 8003fde:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe2:	095b      	lsrs	r3, r3, #5
 8003fe4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fe8:	4419      	add	r1, r3
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4613      	mov	r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	4413      	add	r3, r2
 8003ff2:	009a      	lsls	r2, r3, #2
 8003ff4:	441a      	add	r2, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004000:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <UART_SetConfig+0x118>)
 8004002:	fba3 0302 	umull	r0, r3, r3, r2
 8004006:	095b      	lsrs	r3, r3, #5
 8004008:	2064      	movs	r0, #100	; 0x64
 800400a:	fb00 f303 	mul.w	r3, r0, r3
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	3332      	adds	r3, #50	; 0x32
 8004014:	4a07      	ldr	r2, [pc, #28]	; (8004034 <UART_SetConfig+0x118>)
 8004016:	fba2 2303 	umull	r2, r3, r2, r3
 800401a:	095b      	lsrs	r3, r3, #5
 800401c:	f003 020f 	and.w	r2, r3, #15
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	440a      	add	r2, r1
 8004026:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004028:	bf00      	nop
 800402a:	3710      	adds	r7, #16
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	40013800 	.word	0x40013800
 8004034:	51eb851f 	.word	0x51eb851f

08004038 <__errno>:
 8004038:	4b01      	ldr	r3, [pc, #4]	; (8004040 <__errno+0x8>)
 800403a:	6818      	ldr	r0, [r3, #0]
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	20000014 	.word	0x20000014

08004044 <__libc_init_array>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	2600      	movs	r6, #0
 8004048:	4d0c      	ldr	r5, [pc, #48]	; (800407c <__libc_init_array+0x38>)
 800404a:	4c0d      	ldr	r4, [pc, #52]	; (8004080 <__libc_init_array+0x3c>)
 800404c:	1b64      	subs	r4, r4, r5
 800404e:	10a4      	asrs	r4, r4, #2
 8004050:	42a6      	cmp	r6, r4
 8004052:	d109      	bne.n	8004068 <__libc_init_array+0x24>
 8004054:	f002 fd48 	bl	8006ae8 <_init>
 8004058:	2600      	movs	r6, #0
 800405a:	4d0a      	ldr	r5, [pc, #40]	; (8004084 <__libc_init_array+0x40>)
 800405c:	4c0a      	ldr	r4, [pc, #40]	; (8004088 <__libc_init_array+0x44>)
 800405e:	1b64      	subs	r4, r4, r5
 8004060:	10a4      	asrs	r4, r4, #2
 8004062:	42a6      	cmp	r6, r4
 8004064:	d105      	bne.n	8004072 <__libc_init_array+0x2e>
 8004066:	bd70      	pop	{r4, r5, r6, pc}
 8004068:	f855 3b04 	ldr.w	r3, [r5], #4
 800406c:	4798      	blx	r3
 800406e:	3601      	adds	r6, #1
 8004070:	e7ee      	b.n	8004050 <__libc_init_array+0xc>
 8004072:	f855 3b04 	ldr.w	r3, [r5], #4
 8004076:	4798      	blx	r3
 8004078:	3601      	adds	r6, #1
 800407a:	e7f2      	b.n	8004062 <__libc_init_array+0x1e>
 800407c:	08006f0c 	.word	0x08006f0c
 8004080:	08006f0c 	.word	0x08006f0c
 8004084:	08006f0c 	.word	0x08006f0c
 8004088:	08006f10 	.word	0x08006f10

0800408c <memset>:
 800408c:	4603      	mov	r3, r0
 800408e:	4402      	add	r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	d100      	bne.n	8004096 <memset+0xa>
 8004094:	4770      	bx	lr
 8004096:	f803 1b01 	strb.w	r1, [r3], #1
 800409a:	e7f9      	b.n	8004090 <memset+0x4>

0800409c <__cvt>:
 800409c:	2b00      	cmp	r3, #0
 800409e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a2:	461f      	mov	r7, r3
 80040a4:	bfbb      	ittet	lt
 80040a6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80040aa:	461f      	movlt	r7, r3
 80040ac:	2300      	movge	r3, #0
 80040ae:	232d      	movlt	r3, #45	; 0x2d
 80040b0:	b088      	sub	sp, #32
 80040b2:	4614      	mov	r4, r2
 80040b4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80040b6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80040b8:	7013      	strb	r3, [r2, #0]
 80040ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80040bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80040c0:	f023 0820 	bic.w	r8, r3, #32
 80040c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80040c8:	d005      	beq.n	80040d6 <__cvt+0x3a>
 80040ca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80040ce:	d100      	bne.n	80040d2 <__cvt+0x36>
 80040d0:	3501      	adds	r5, #1
 80040d2:	2302      	movs	r3, #2
 80040d4:	e000      	b.n	80040d8 <__cvt+0x3c>
 80040d6:	2303      	movs	r3, #3
 80040d8:	aa07      	add	r2, sp, #28
 80040da:	9204      	str	r2, [sp, #16]
 80040dc:	aa06      	add	r2, sp, #24
 80040de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80040e2:	e9cd 3500 	strd	r3, r5, [sp]
 80040e6:	4622      	mov	r2, r4
 80040e8:	463b      	mov	r3, r7
 80040ea:	f000 fcdd 	bl	8004aa8 <_dtoa_r>
 80040ee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80040f2:	4606      	mov	r6, r0
 80040f4:	d102      	bne.n	80040fc <__cvt+0x60>
 80040f6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80040f8:	07db      	lsls	r3, r3, #31
 80040fa:	d522      	bpl.n	8004142 <__cvt+0xa6>
 80040fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004100:	eb06 0905 	add.w	r9, r6, r5
 8004104:	d110      	bne.n	8004128 <__cvt+0x8c>
 8004106:	7833      	ldrb	r3, [r6, #0]
 8004108:	2b30      	cmp	r3, #48	; 0x30
 800410a:	d10a      	bne.n	8004122 <__cvt+0x86>
 800410c:	2200      	movs	r2, #0
 800410e:	2300      	movs	r3, #0
 8004110:	4620      	mov	r0, r4
 8004112:	4639      	mov	r1, r7
 8004114:	f7fc fc48 	bl	80009a8 <__aeabi_dcmpeq>
 8004118:	b918      	cbnz	r0, 8004122 <__cvt+0x86>
 800411a:	f1c5 0501 	rsb	r5, r5, #1
 800411e:	f8ca 5000 	str.w	r5, [sl]
 8004122:	f8da 3000 	ldr.w	r3, [sl]
 8004126:	4499      	add	r9, r3
 8004128:	2200      	movs	r2, #0
 800412a:	2300      	movs	r3, #0
 800412c:	4620      	mov	r0, r4
 800412e:	4639      	mov	r1, r7
 8004130:	f7fc fc3a 	bl	80009a8 <__aeabi_dcmpeq>
 8004134:	b108      	cbz	r0, 800413a <__cvt+0x9e>
 8004136:	f8cd 901c 	str.w	r9, [sp, #28]
 800413a:	2230      	movs	r2, #48	; 0x30
 800413c:	9b07      	ldr	r3, [sp, #28]
 800413e:	454b      	cmp	r3, r9
 8004140:	d307      	bcc.n	8004152 <__cvt+0xb6>
 8004142:	4630      	mov	r0, r6
 8004144:	9b07      	ldr	r3, [sp, #28]
 8004146:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004148:	1b9b      	subs	r3, r3, r6
 800414a:	6013      	str	r3, [r2, #0]
 800414c:	b008      	add	sp, #32
 800414e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004152:	1c59      	adds	r1, r3, #1
 8004154:	9107      	str	r1, [sp, #28]
 8004156:	701a      	strb	r2, [r3, #0]
 8004158:	e7f0      	b.n	800413c <__cvt+0xa0>

0800415a <__exponent>:
 800415a:	4603      	mov	r3, r0
 800415c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800415e:	2900      	cmp	r1, #0
 8004160:	f803 2b02 	strb.w	r2, [r3], #2
 8004164:	bfb6      	itet	lt
 8004166:	222d      	movlt	r2, #45	; 0x2d
 8004168:	222b      	movge	r2, #43	; 0x2b
 800416a:	4249      	neglt	r1, r1
 800416c:	2909      	cmp	r1, #9
 800416e:	7042      	strb	r2, [r0, #1]
 8004170:	dd2b      	ble.n	80041ca <__exponent+0x70>
 8004172:	f10d 0407 	add.w	r4, sp, #7
 8004176:	46a4      	mov	ip, r4
 8004178:	270a      	movs	r7, #10
 800417a:	fb91 f6f7 	sdiv	r6, r1, r7
 800417e:	460a      	mov	r2, r1
 8004180:	46a6      	mov	lr, r4
 8004182:	fb07 1516 	mls	r5, r7, r6, r1
 8004186:	2a63      	cmp	r2, #99	; 0x63
 8004188:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800418c:	4631      	mov	r1, r6
 800418e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004192:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004196:	dcf0      	bgt.n	800417a <__exponent+0x20>
 8004198:	3130      	adds	r1, #48	; 0x30
 800419a:	f1ae 0502 	sub.w	r5, lr, #2
 800419e:	f804 1c01 	strb.w	r1, [r4, #-1]
 80041a2:	4629      	mov	r1, r5
 80041a4:	1c44      	adds	r4, r0, #1
 80041a6:	4561      	cmp	r1, ip
 80041a8:	d30a      	bcc.n	80041c0 <__exponent+0x66>
 80041aa:	f10d 0209 	add.w	r2, sp, #9
 80041ae:	eba2 020e 	sub.w	r2, r2, lr
 80041b2:	4565      	cmp	r5, ip
 80041b4:	bf88      	it	hi
 80041b6:	2200      	movhi	r2, #0
 80041b8:	4413      	add	r3, r2
 80041ba:	1a18      	subs	r0, r3, r0
 80041bc:	b003      	add	sp, #12
 80041be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041c4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80041c8:	e7ed      	b.n	80041a6 <__exponent+0x4c>
 80041ca:	2330      	movs	r3, #48	; 0x30
 80041cc:	3130      	adds	r1, #48	; 0x30
 80041ce:	7083      	strb	r3, [r0, #2]
 80041d0:	70c1      	strb	r1, [r0, #3]
 80041d2:	1d03      	adds	r3, r0, #4
 80041d4:	e7f1      	b.n	80041ba <__exponent+0x60>
	...

080041d8 <_printf_float>:
 80041d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041dc:	b091      	sub	sp, #68	; 0x44
 80041de:	460c      	mov	r4, r1
 80041e0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80041e4:	4616      	mov	r6, r2
 80041e6:	461f      	mov	r7, r3
 80041e8:	4605      	mov	r5, r0
 80041ea:	f001 fb41 	bl	8005870 <_localeconv_r>
 80041ee:	6803      	ldr	r3, [r0, #0]
 80041f0:	4618      	mov	r0, r3
 80041f2:	9309      	str	r3, [sp, #36]	; 0x24
 80041f4:	f7fb ffac 	bl	8000150 <strlen>
 80041f8:	2300      	movs	r3, #0
 80041fa:	930e      	str	r3, [sp, #56]	; 0x38
 80041fc:	f8d8 3000 	ldr.w	r3, [r8]
 8004200:	900a      	str	r0, [sp, #40]	; 0x28
 8004202:	3307      	adds	r3, #7
 8004204:	f023 0307 	bic.w	r3, r3, #7
 8004208:	f103 0208 	add.w	r2, r3, #8
 800420c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004210:	f8d4 b000 	ldr.w	fp, [r4]
 8004214:	f8c8 2000 	str.w	r2, [r8]
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004220:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004224:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004228:	930b      	str	r3, [sp, #44]	; 0x2c
 800422a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800422e:	4640      	mov	r0, r8
 8004230:	4b9c      	ldr	r3, [pc, #624]	; (80044a4 <_printf_float+0x2cc>)
 8004232:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004234:	f7fc fbea 	bl	8000a0c <__aeabi_dcmpun>
 8004238:	bb70      	cbnz	r0, 8004298 <_printf_float+0xc0>
 800423a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800423e:	4640      	mov	r0, r8
 8004240:	4b98      	ldr	r3, [pc, #608]	; (80044a4 <_printf_float+0x2cc>)
 8004242:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004244:	f7fc fbc4 	bl	80009d0 <__aeabi_dcmple>
 8004248:	bb30      	cbnz	r0, 8004298 <_printf_float+0xc0>
 800424a:	2200      	movs	r2, #0
 800424c:	2300      	movs	r3, #0
 800424e:	4640      	mov	r0, r8
 8004250:	4651      	mov	r1, sl
 8004252:	f7fc fbb3 	bl	80009bc <__aeabi_dcmplt>
 8004256:	b110      	cbz	r0, 800425e <_printf_float+0x86>
 8004258:	232d      	movs	r3, #45	; 0x2d
 800425a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800425e:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <_printf_float+0x2d0>)
 8004260:	4892      	ldr	r0, [pc, #584]	; (80044ac <_printf_float+0x2d4>)
 8004262:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004266:	bf94      	ite	ls
 8004268:	4698      	movls	r8, r3
 800426a:	4680      	movhi	r8, r0
 800426c:	2303      	movs	r3, #3
 800426e:	f04f 0a00 	mov.w	sl, #0
 8004272:	6123      	str	r3, [r4, #16]
 8004274:	f02b 0304 	bic.w	r3, fp, #4
 8004278:	6023      	str	r3, [r4, #0]
 800427a:	4633      	mov	r3, r6
 800427c:	4621      	mov	r1, r4
 800427e:	4628      	mov	r0, r5
 8004280:	9700      	str	r7, [sp, #0]
 8004282:	aa0f      	add	r2, sp, #60	; 0x3c
 8004284:	f000 f9d4 	bl	8004630 <_printf_common>
 8004288:	3001      	adds	r0, #1
 800428a:	f040 8090 	bne.w	80043ae <_printf_float+0x1d6>
 800428e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004292:	b011      	add	sp, #68	; 0x44
 8004294:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004298:	4642      	mov	r2, r8
 800429a:	4653      	mov	r3, sl
 800429c:	4640      	mov	r0, r8
 800429e:	4651      	mov	r1, sl
 80042a0:	f7fc fbb4 	bl	8000a0c <__aeabi_dcmpun>
 80042a4:	b148      	cbz	r0, 80042ba <_printf_float+0xe2>
 80042a6:	f1ba 0f00 	cmp.w	sl, #0
 80042aa:	bfb8      	it	lt
 80042ac:	232d      	movlt	r3, #45	; 0x2d
 80042ae:	4880      	ldr	r0, [pc, #512]	; (80044b0 <_printf_float+0x2d8>)
 80042b0:	bfb8      	it	lt
 80042b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042b6:	4b7f      	ldr	r3, [pc, #508]	; (80044b4 <_printf_float+0x2dc>)
 80042b8:	e7d3      	b.n	8004262 <_printf_float+0x8a>
 80042ba:	6863      	ldr	r3, [r4, #4]
 80042bc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	d142      	bne.n	800434a <_printf_float+0x172>
 80042c4:	2306      	movs	r3, #6
 80042c6:	6063      	str	r3, [r4, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	9206      	str	r2, [sp, #24]
 80042cc:	aa0e      	add	r2, sp, #56	; 0x38
 80042ce:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80042d2:	aa0d      	add	r2, sp, #52	; 0x34
 80042d4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80042d8:	9203      	str	r2, [sp, #12]
 80042da:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80042de:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80042e2:	6023      	str	r3, [r4, #0]
 80042e4:	6863      	ldr	r3, [r4, #4]
 80042e6:	4642      	mov	r2, r8
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	4628      	mov	r0, r5
 80042ec:	4653      	mov	r3, sl
 80042ee:	910b      	str	r1, [sp, #44]	; 0x2c
 80042f0:	f7ff fed4 	bl	800409c <__cvt>
 80042f4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80042f6:	4680      	mov	r8, r0
 80042f8:	2947      	cmp	r1, #71	; 0x47
 80042fa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80042fc:	d108      	bne.n	8004310 <_printf_float+0x138>
 80042fe:	1cc8      	adds	r0, r1, #3
 8004300:	db02      	blt.n	8004308 <_printf_float+0x130>
 8004302:	6863      	ldr	r3, [r4, #4]
 8004304:	4299      	cmp	r1, r3
 8004306:	dd40      	ble.n	800438a <_printf_float+0x1b2>
 8004308:	f1a9 0902 	sub.w	r9, r9, #2
 800430c:	fa5f f989 	uxtb.w	r9, r9
 8004310:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004314:	d81f      	bhi.n	8004356 <_printf_float+0x17e>
 8004316:	464a      	mov	r2, r9
 8004318:	3901      	subs	r1, #1
 800431a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800431e:	910d      	str	r1, [sp, #52]	; 0x34
 8004320:	f7ff ff1b 	bl	800415a <__exponent>
 8004324:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004326:	4682      	mov	sl, r0
 8004328:	1813      	adds	r3, r2, r0
 800432a:	2a01      	cmp	r2, #1
 800432c:	6123      	str	r3, [r4, #16]
 800432e:	dc02      	bgt.n	8004336 <_printf_float+0x15e>
 8004330:	6822      	ldr	r2, [r4, #0]
 8004332:	07d2      	lsls	r2, r2, #31
 8004334:	d501      	bpl.n	800433a <_printf_float+0x162>
 8004336:	3301      	adds	r3, #1
 8004338:	6123      	str	r3, [r4, #16]
 800433a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800433e:	2b00      	cmp	r3, #0
 8004340:	d09b      	beq.n	800427a <_printf_float+0xa2>
 8004342:	232d      	movs	r3, #45	; 0x2d
 8004344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004348:	e797      	b.n	800427a <_printf_float+0xa2>
 800434a:	2947      	cmp	r1, #71	; 0x47
 800434c:	d1bc      	bne.n	80042c8 <_printf_float+0xf0>
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1ba      	bne.n	80042c8 <_printf_float+0xf0>
 8004352:	2301      	movs	r3, #1
 8004354:	e7b7      	b.n	80042c6 <_printf_float+0xee>
 8004356:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800435a:	d118      	bne.n	800438e <_printf_float+0x1b6>
 800435c:	2900      	cmp	r1, #0
 800435e:	6863      	ldr	r3, [r4, #4]
 8004360:	dd0b      	ble.n	800437a <_printf_float+0x1a2>
 8004362:	6121      	str	r1, [r4, #16]
 8004364:	b913      	cbnz	r3, 800436c <_printf_float+0x194>
 8004366:	6822      	ldr	r2, [r4, #0]
 8004368:	07d0      	lsls	r0, r2, #31
 800436a:	d502      	bpl.n	8004372 <_printf_float+0x19a>
 800436c:	3301      	adds	r3, #1
 800436e:	440b      	add	r3, r1
 8004370:	6123      	str	r3, [r4, #16]
 8004372:	f04f 0a00 	mov.w	sl, #0
 8004376:	65a1      	str	r1, [r4, #88]	; 0x58
 8004378:	e7df      	b.n	800433a <_printf_float+0x162>
 800437a:	b913      	cbnz	r3, 8004382 <_printf_float+0x1aa>
 800437c:	6822      	ldr	r2, [r4, #0]
 800437e:	07d2      	lsls	r2, r2, #31
 8004380:	d501      	bpl.n	8004386 <_printf_float+0x1ae>
 8004382:	3302      	adds	r3, #2
 8004384:	e7f4      	b.n	8004370 <_printf_float+0x198>
 8004386:	2301      	movs	r3, #1
 8004388:	e7f2      	b.n	8004370 <_printf_float+0x198>
 800438a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800438e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004390:	4299      	cmp	r1, r3
 8004392:	db05      	blt.n	80043a0 <_printf_float+0x1c8>
 8004394:	6823      	ldr	r3, [r4, #0]
 8004396:	6121      	str	r1, [r4, #16]
 8004398:	07d8      	lsls	r0, r3, #31
 800439a:	d5ea      	bpl.n	8004372 <_printf_float+0x19a>
 800439c:	1c4b      	adds	r3, r1, #1
 800439e:	e7e7      	b.n	8004370 <_printf_float+0x198>
 80043a0:	2900      	cmp	r1, #0
 80043a2:	bfcc      	ite	gt
 80043a4:	2201      	movgt	r2, #1
 80043a6:	f1c1 0202 	rsble	r2, r1, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	e7e0      	b.n	8004370 <_printf_float+0x198>
 80043ae:	6823      	ldr	r3, [r4, #0]
 80043b0:	055a      	lsls	r2, r3, #21
 80043b2:	d407      	bmi.n	80043c4 <_printf_float+0x1ec>
 80043b4:	6923      	ldr	r3, [r4, #16]
 80043b6:	4642      	mov	r2, r8
 80043b8:	4631      	mov	r1, r6
 80043ba:	4628      	mov	r0, r5
 80043bc:	47b8      	blx	r7
 80043be:	3001      	adds	r0, #1
 80043c0:	d12b      	bne.n	800441a <_printf_float+0x242>
 80043c2:	e764      	b.n	800428e <_printf_float+0xb6>
 80043c4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80043c8:	f240 80dd 	bls.w	8004586 <_printf_float+0x3ae>
 80043cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80043d0:	2200      	movs	r2, #0
 80043d2:	2300      	movs	r3, #0
 80043d4:	f7fc fae8 	bl	80009a8 <__aeabi_dcmpeq>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d033      	beq.n	8004444 <_printf_float+0x26c>
 80043dc:	2301      	movs	r3, #1
 80043de:	4631      	mov	r1, r6
 80043e0:	4628      	mov	r0, r5
 80043e2:	4a35      	ldr	r2, [pc, #212]	; (80044b8 <_printf_float+0x2e0>)
 80043e4:	47b8      	blx	r7
 80043e6:	3001      	adds	r0, #1
 80043e8:	f43f af51 	beq.w	800428e <_printf_float+0xb6>
 80043ec:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80043f0:	429a      	cmp	r2, r3
 80043f2:	db02      	blt.n	80043fa <_printf_float+0x222>
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	07d8      	lsls	r0, r3, #31
 80043f8:	d50f      	bpl.n	800441a <_printf_float+0x242>
 80043fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80043fe:	4631      	mov	r1, r6
 8004400:	4628      	mov	r0, r5
 8004402:	47b8      	blx	r7
 8004404:	3001      	adds	r0, #1
 8004406:	f43f af42 	beq.w	800428e <_printf_float+0xb6>
 800440a:	f04f 0800 	mov.w	r8, #0
 800440e:	f104 091a 	add.w	r9, r4, #26
 8004412:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004414:	3b01      	subs	r3, #1
 8004416:	4543      	cmp	r3, r8
 8004418:	dc09      	bgt.n	800442e <_printf_float+0x256>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	079b      	lsls	r3, r3, #30
 800441e:	f100 8102 	bmi.w	8004626 <_printf_float+0x44e>
 8004422:	68e0      	ldr	r0, [r4, #12]
 8004424:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004426:	4298      	cmp	r0, r3
 8004428:	bfb8      	it	lt
 800442a:	4618      	movlt	r0, r3
 800442c:	e731      	b.n	8004292 <_printf_float+0xba>
 800442e:	2301      	movs	r3, #1
 8004430:	464a      	mov	r2, r9
 8004432:	4631      	mov	r1, r6
 8004434:	4628      	mov	r0, r5
 8004436:	47b8      	blx	r7
 8004438:	3001      	adds	r0, #1
 800443a:	f43f af28 	beq.w	800428e <_printf_float+0xb6>
 800443e:	f108 0801 	add.w	r8, r8, #1
 8004442:	e7e6      	b.n	8004412 <_printf_float+0x23a>
 8004444:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004446:	2b00      	cmp	r3, #0
 8004448:	dc38      	bgt.n	80044bc <_printf_float+0x2e4>
 800444a:	2301      	movs	r3, #1
 800444c:	4631      	mov	r1, r6
 800444e:	4628      	mov	r0, r5
 8004450:	4a19      	ldr	r2, [pc, #100]	; (80044b8 <_printf_float+0x2e0>)
 8004452:	47b8      	blx	r7
 8004454:	3001      	adds	r0, #1
 8004456:	f43f af1a 	beq.w	800428e <_printf_float+0xb6>
 800445a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800445e:	4313      	orrs	r3, r2
 8004460:	d102      	bne.n	8004468 <_printf_float+0x290>
 8004462:	6823      	ldr	r3, [r4, #0]
 8004464:	07d9      	lsls	r1, r3, #31
 8004466:	d5d8      	bpl.n	800441a <_printf_float+0x242>
 8004468:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800446c:	4631      	mov	r1, r6
 800446e:	4628      	mov	r0, r5
 8004470:	47b8      	blx	r7
 8004472:	3001      	adds	r0, #1
 8004474:	f43f af0b 	beq.w	800428e <_printf_float+0xb6>
 8004478:	f04f 0900 	mov.w	r9, #0
 800447c:	f104 0a1a 	add.w	sl, r4, #26
 8004480:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004482:	425b      	negs	r3, r3
 8004484:	454b      	cmp	r3, r9
 8004486:	dc01      	bgt.n	800448c <_printf_float+0x2b4>
 8004488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800448a:	e794      	b.n	80043b6 <_printf_float+0x1de>
 800448c:	2301      	movs	r3, #1
 800448e:	4652      	mov	r2, sl
 8004490:	4631      	mov	r1, r6
 8004492:	4628      	mov	r0, r5
 8004494:	47b8      	blx	r7
 8004496:	3001      	adds	r0, #1
 8004498:	f43f aef9 	beq.w	800428e <_printf_float+0xb6>
 800449c:	f109 0901 	add.w	r9, r9, #1
 80044a0:	e7ee      	b.n	8004480 <_printf_float+0x2a8>
 80044a2:	bf00      	nop
 80044a4:	7fefffff 	.word	0x7fefffff
 80044a8:	08006b38 	.word	0x08006b38
 80044ac:	08006b3c 	.word	0x08006b3c
 80044b0:	08006b44 	.word	0x08006b44
 80044b4:	08006b40 	.word	0x08006b40
 80044b8:	08006b48 	.word	0x08006b48
 80044bc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80044be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80044c0:	429a      	cmp	r2, r3
 80044c2:	bfa8      	it	ge
 80044c4:	461a      	movge	r2, r3
 80044c6:	2a00      	cmp	r2, #0
 80044c8:	4691      	mov	r9, r2
 80044ca:	dc37      	bgt.n	800453c <_printf_float+0x364>
 80044cc:	f04f 0b00 	mov.w	fp, #0
 80044d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80044d4:	f104 021a 	add.w	r2, r4, #26
 80044d8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80044dc:	ebaa 0309 	sub.w	r3, sl, r9
 80044e0:	455b      	cmp	r3, fp
 80044e2:	dc33      	bgt.n	800454c <_printf_float+0x374>
 80044e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80044e8:	429a      	cmp	r2, r3
 80044ea:	db3b      	blt.n	8004564 <_printf_float+0x38c>
 80044ec:	6823      	ldr	r3, [r4, #0]
 80044ee:	07da      	lsls	r2, r3, #31
 80044f0:	d438      	bmi.n	8004564 <_printf_float+0x38c>
 80044f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80044f4:	990d      	ldr	r1, [sp, #52]	; 0x34
 80044f6:	eba3 020a 	sub.w	r2, r3, sl
 80044fa:	eba3 0901 	sub.w	r9, r3, r1
 80044fe:	4591      	cmp	r9, r2
 8004500:	bfa8      	it	ge
 8004502:	4691      	movge	r9, r2
 8004504:	f1b9 0f00 	cmp.w	r9, #0
 8004508:	dc34      	bgt.n	8004574 <_printf_float+0x39c>
 800450a:	f04f 0800 	mov.w	r8, #0
 800450e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004512:	f104 0a1a 	add.w	sl, r4, #26
 8004516:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800451a:	1a9b      	subs	r3, r3, r2
 800451c:	eba3 0309 	sub.w	r3, r3, r9
 8004520:	4543      	cmp	r3, r8
 8004522:	f77f af7a 	ble.w	800441a <_printf_float+0x242>
 8004526:	2301      	movs	r3, #1
 8004528:	4652      	mov	r2, sl
 800452a:	4631      	mov	r1, r6
 800452c:	4628      	mov	r0, r5
 800452e:	47b8      	blx	r7
 8004530:	3001      	adds	r0, #1
 8004532:	f43f aeac 	beq.w	800428e <_printf_float+0xb6>
 8004536:	f108 0801 	add.w	r8, r8, #1
 800453a:	e7ec      	b.n	8004516 <_printf_float+0x33e>
 800453c:	4613      	mov	r3, r2
 800453e:	4631      	mov	r1, r6
 8004540:	4642      	mov	r2, r8
 8004542:	4628      	mov	r0, r5
 8004544:	47b8      	blx	r7
 8004546:	3001      	adds	r0, #1
 8004548:	d1c0      	bne.n	80044cc <_printf_float+0x2f4>
 800454a:	e6a0      	b.n	800428e <_printf_float+0xb6>
 800454c:	2301      	movs	r3, #1
 800454e:	4631      	mov	r1, r6
 8004550:	4628      	mov	r0, r5
 8004552:	920b      	str	r2, [sp, #44]	; 0x2c
 8004554:	47b8      	blx	r7
 8004556:	3001      	adds	r0, #1
 8004558:	f43f ae99 	beq.w	800428e <_printf_float+0xb6>
 800455c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800455e:	f10b 0b01 	add.w	fp, fp, #1
 8004562:	e7b9      	b.n	80044d8 <_printf_float+0x300>
 8004564:	4631      	mov	r1, r6
 8004566:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800456a:	4628      	mov	r0, r5
 800456c:	47b8      	blx	r7
 800456e:	3001      	adds	r0, #1
 8004570:	d1bf      	bne.n	80044f2 <_printf_float+0x31a>
 8004572:	e68c      	b.n	800428e <_printf_float+0xb6>
 8004574:	464b      	mov	r3, r9
 8004576:	4631      	mov	r1, r6
 8004578:	4628      	mov	r0, r5
 800457a:	eb08 020a 	add.w	r2, r8, sl
 800457e:	47b8      	blx	r7
 8004580:	3001      	adds	r0, #1
 8004582:	d1c2      	bne.n	800450a <_printf_float+0x332>
 8004584:	e683      	b.n	800428e <_printf_float+0xb6>
 8004586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004588:	2a01      	cmp	r2, #1
 800458a:	dc01      	bgt.n	8004590 <_printf_float+0x3b8>
 800458c:	07db      	lsls	r3, r3, #31
 800458e:	d537      	bpl.n	8004600 <_printf_float+0x428>
 8004590:	2301      	movs	r3, #1
 8004592:	4642      	mov	r2, r8
 8004594:	4631      	mov	r1, r6
 8004596:	4628      	mov	r0, r5
 8004598:	47b8      	blx	r7
 800459a:	3001      	adds	r0, #1
 800459c:	f43f ae77 	beq.w	800428e <_printf_float+0xb6>
 80045a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80045a4:	4631      	mov	r1, r6
 80045a6:	4628      	mov	r0, r5
 80045a8:	47b8      	blx	r7
 80045aa:	3001      	adds	r0, #1
 80045ac:	f43f ae6f 	beq.w	800428e <_printf_float+0xb6>
 80045b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80045b4:	2200      	movs	r2, #0
 80045b6:	2300      	movs	r3, #0
 80045b8:	f7fc f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80045bc:	b9d8      	cbnz	r0, 80045f6 <_printf_float+0x41e>
 80045be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045c0:	f108 0201 	add.w	r2, r8, #1
 80045c4:	3b01      	subs	r3, #1
 80045c6:	4631      	mov	r1, r6
 80045c8:	4628      	mov	r0, r5
 80045ca:	47b8      	blx	r7
 80045cc:	3001      	adds	r0, #1
 80045ce:	d10e      	bne.n	80045ee <_printf_float+0x416>
 80045d0:	e65d      	b.n	800428e <_printf_float+0xb6>
 80045d2:	2301      	movs	r3, #1
 80045d4:	464a      	mov	r2, r9
 80045d6:	4631      	mov	r1, r6
 80045d8:	4628      	mov	r0, r5
 80045da:	47b8      	blx	r7
 80045dc:	3001      	adds	r0, #1
 80045de:	f43f ae56 	beq.w	800428e <_printf_float+0xb6>
 80045e2:	f108 0801 	add.w	r8, r8, #1
 80045e6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045e8:	3b01      	subs	r3, #1
 80045ea:	4543      	cmp	r3, r8
 80045ec:	dcf1      	bgt.n	80045d2 <_printf_float+0x3fa>
 80045ee:	4653      	mov	r3, sl
 80045f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80045f4:	e6e0      	b.n	80043b8 <_printf_float+0x1e0>
 80045f6:	f04f 0800 	mov.w	r8, #0
 80045fa:	f104 091a 	add.w	r9, r4, #26
 80045fe:	e7f2      	b.n	80045e6 <_printf_float+0x40e>
 8004600:	2301      	movs	r3, #1
 8004602:	4642      	mov	r2, r8
 8004604:	e7df      	b.n	80045c6 <_printf_float+0x3ee>
 8004606:	2301      	movs	r3, #1
 8004608:	464a      	mov	r2, r9
 800460a:	4631      	mov	r1, r6
 800460c:	4628      	mov	r0, r5
 800460e:	47b8      	blx	r7
 8004610:	3001      	adds	r0, #1
 8004612:	f43f ae3c 	beq.w	800428e <_printf_float+0xb6>
 8004616:	f108 0801 	add.w	r8, r8, #1
 800461a:	68e3      	ldr	r3, [r4, #12]
 800461c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800461e:	1a5b      	subs	r3, r3, r1
 8004620:	4543      	cmp	r3, r8
 8004622:	dcf0      	bgt.n	8004606 <_printf_float+0x42e>
 8004624:	e6fd      	b.n	8004422 <_printf_float+0x24a>
 8004626:	f04f 0800 	mov.w	r8, #0
 800462a:	f104 0919 	add.w	r9, r4, #25
 800462e:	e7f4      	b.n	800461a <_printf_float+0x442>

08004630 <_printf_common>:
 8004630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004634:	4616      	mov	r6, r2
 8004636:	4699      	mov	r9, r3
 8004638:	688a      	ldr	r2, [r1, #8]
 800463a:	690b      	ldr	r3, [r1, #16]
 800463c:	4607      	mov	r7, r0
 800463e:	4293      	cmp	r3, r2
 8004640:	bfb8      	it	lt
 8004642:	4613      	movlt	r3, r2
 8004644:	6033      	str	r3, [r6, #0]
 8004646:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800464a:	460c      	mov	r4, r1
 800464c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004650:	b10a      	cbz	r2, 8004656 <_printf_common+0x26>
 8004652:	3301      	adds	r3, #1
 8004654:	6033      	str	r3, [r6, #0]
 8004656:	6823      	ldr	r3, [r4, #0]
 8004658:	0699      	lsls	r1, r3, #26
 800465a:	bf42      	ittt	mi
 800465c:	6833      	ldrmi	r3, [r6, #0]
 800465e:	3302      	addmi	r3, #2
 8004660:	6033      	strmi	r3, [r6, #0]
 8004662:	6825      	ldr	r5, [r4, #0]
 8004664:	f015 0506 	ands.w	r5, r5, #6
 8004668:	d106      	bne.n	8004678 <_printf_common+0x48>
 800466a:	f104 0a19 	add.w	sl, r4, #25
 800466e:	68e3      	ldr	r3, [r4, #12]
 8004670:	6832      	ldr	r2, [r6, #0]
 8004672:	1a9b      	subs	r3, r3, r2
 8004674:	42ab      	cmp	r3, r5
 8004676:	dc28      	bgt.n	80046ca <_printf_common+0x9a>
 8004678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800467c:	1e13      	subs	r3, r2, #0
 800467e:	6822      	ldr	r2, [r4, #0]
 8004680:	bf18      	it	ne
 8004682:	2301      	movne	r3, #1
 8004684:	0692      	lsls	r2, r2, #26
 8004686:	d42d      	bmi.n	80046e4 <_printf_common+0xb4>
 8004688:	4649      	mov	r1, r9
 800468a:	4638      	mov	r0, r7
 800468c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004690:	47c0      	blx	r8
 8004692:	3001      	adds	r0, #1
 8004694:	d020      	beq.n	80046d8 <_printf_common+0xa8>
 8004696:	6823      	ldr	r3, [r4, #0]
 8004698:	68e5      	ldr	r5, [r4, #12]
 800469a:	f003 0306 	and.w	r3, r3, #6
 800469e:	2b04      	cmp	r3, #4
 80046a0:	bf18      	it	ne
 80046a2:	2500      	movne	r5, #0
 80046a4:	6832      	ldr	r2, [r6, #0]
 80046a6:	f04f 0600 	mov.w	r6, #0
 80046aa:	68a3      	ldr	r3, [r4, #8]
 80046ac:	bf08      	it	eq
 80046ae:	1aad      	subeq	r5, r5, r2
 80046b0:	6922      	ldr	r2, [r4, #16]
 80046b2:	bf08      	it	eq
 80046b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046b8:	4293      	cmp	r3, r2
 80046ba:	bfc4      	itt	gt
 80046bc:	1a9b      	subgt	r3, r3, r2
 80046be:	18ed      	addgt	r5, r5, r3
 80046c0:	341a      	adds	r4, #26
 80046c2:	42b5      	cmp	r5, r6
 80046c4:	d11a      	bne.n	80046fc <_printf_common+0xcc>
 80046c6:	2000      	movs	r0, #0
 80046c8:	e008      	b.n	80046dc <_printf_common+0xac>
 80046ca:	2301      	movs	r3, #1
 80046cc:	4652      	mov	r2, sl
 80046ce:	4649      	mov	r1, r9
 80046d0:	4638      	mov	r0, r7
 80046d2:	47c0      	blx	r8
 80046d4:	3001      	adds	r0, #1
 80046d6:	d103      	bne.n	80046e0 <_printf_common+0xb0>
 80046d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e0:	3501      	adds	r5, #1
 80046e2:	e7c4      	b.n	800466e <_printf_common+0x3e>
 80046e4:	2030      	movs	r0, #48	; 0x30
 80046e6:	18e1      	adds	r1, r4, r3
 80046e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80046f2:	4422      	add	r2, r4
 80046f4:	3302      	adds	r3, #2
 80046f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80046fa:	e7c5      	b.n	8004688 <_printf_common+0x58>
 80046fc:	2301      	movs	r3, #1
 80046fe:	4622      	mov	r2, r4
 8004700:	4649      	mov	r1, r9
 8004702:	4638      	mov	r0, r7
 8004704:	47c0      	blx	r8
 8004706:	3001      	adds	r0, #1
 8004708:	d0e6      	beq.n	80046d8 <_printf_common+0xa8>
 800470a:	3601      	adds	r6, #1
 800470c:	e7d9      	b.n	80046c2 <_printf_common+0x92>
	...

08004710 <_printf_i>:
 8004710:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004714:	7e0f      	ldrb	r7, [r1, #24]
 8004716:	4691      	mov	r9, r2
 8004718:	2f78      	cmp	r7, #120	; 0x78
 800471a:	4680      	mov	r8, r0
 800471c:	460c      	mov	r4, r1
 800471e:	469a      	mov	sl, r3
 8004720:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004722:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004726:	d807      	bhi.n	8004738 <_printf_i+0x28>
 8004728:	2f62      	cmp	r7, #98	; 0x62
 800472a:	d80a      	bhi.n	8004742 <_printf_i+0x32>
 800472c:	2f00      	cmp	r7, #0
 800472e:	f000 80d9 	beq.w	80048e4 <_printf_i+0x1d4>
 8004732:	2f58      	cmp	r7, #88	; 0x58
 8004734:	f000 80a4 	beq.w	8004880 <_printf_i+0x170>
 8004738:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800473c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004740:	e03a      	b.n	80047b8 <_printf_i+0xa8>
 8004742:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004746:	2b15      	cmp	r3, #21
 8004748:	d8f6      	bhi.n	8004738 <_printf_i+0x28>
 800474a:	a101      	add	r1, pc, #4	; (adr r1, 8004750 <_printf_i+0x40>)
 800474c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004750:	080047a9 	.word	0x080047a9
 8004754:	080047bd 	.word	0x080047bd
 8004758:	08004739 	.word	0x08004739
 800475c:	08004739 	.word	0x08004739
 8004760:	08004739 	.word	0x08004739
 8004764:	08004739 	.word	0x08004739
 8004768:	080047bd 	.word	0x080047bd
 800476c:	08004739 	.word	0x08004739
 8004770:	08004739 	.word	0x08004739
 8004774:	08004739 	.word	0x08004739
 8004778:	08004739 	.word	0x08004739
 800477c:	080048cb 	.word	0x080048cb
 8004780:	080047ed 	.word	0x080047ed
 8004784:	080048ad 	.word	0x080048ad
 8004788:	08004739 	.word	0x08004739
 800478c:	08004739 	.word	0x08004739
 8004790:	080048ed 	.word	0x080048ed
 8004794:	08004739 	.word	0x08004739
 8004798:	080047ed 	.word	0x080047ed
 800479c:	08004739 	.word	0x08004739
 80047a0:	08004739 	.word	0x08004739
 80047a4:	080048b5 	.word	0x080048b5
 80047a8:	682b      	ldr	r3, [r5, #0]
 80047aa:	1d1a      	adds	r2, r3, #4
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	602a      	str	r2, [r5, #0]
 80047b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047b8:	2301      	movs	r3, #1
 80047ba:	e0a4      	b.n	8004906 <_printf_i+0x1f6>
 80047bc:	6820      	ldr	r0, [r4, #0]
 80047be:	6829      	ldr	r1, [r5, #0]
 80047c0:	0606      	lsls	r6, r0, #24
 80047c2:	f101 0304 	add.w	r3, r1, #4
 80047c6:	d50a      	bpl.n	80047de <_printf_i+0xce>
 80047c8:	680e      	ldr	r6, [r1, #0]
 80047ca:	602b      	str	r3, [r5, #0]
 80047cc:	2e00      	cmp	r6, #0
 80047ce:	da03      	bge.n	80047d8 <_printf_i+0xc8>
 80047d0:	232d      	movs	r3, #45	; 0x2d
 80047d2:	4276      	negs	r6, r6
 80047d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d8:	230a      	movs	r3, #10
 80047da:	485e      	ldr	r0, [pc, #376]	; (8004954 <_printf_i+0x244>)
 80047dc:	e019      	b.n	8004812 <_printf_i+0x102>
 80047de:	680e      	ldr	r6, [r1, #0]
 80047e0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80047e4:	602b      	str	r3, [r5, #0]
 80047e6:	bf18      	it	ne
 80047e8:	b236      	sxthne	r6, r6
 80047ea:	e7ef      	b.n	80047cc <_printf_i+0xbc>
 80047ec:	682b      	ldr	r3, [r5, #0]
 80047ee:	6820      	ldr	r0, [r4, #0]
 80047f0:	1d19      	adds	r1, r3, #4
 80047f2:	6029      	str	r1, [r5, #0]
 80047f4:	0601      	lsls	r1, r0, #24
 80047f6:	d501      	bpl.n	80047fc <_printf_i+0xec>
 80047f8:	681e      	ldr	r6, [r3, #0]
 80047fa:	e002      	b.n	8004802 <_printf_i+0xf2>
 80047fc:	0646      	lsls	r6, r0, #25
 80047fe:	d5fb      	bpl.n	80047f8 <_printf_i+0xe8>
 8004800:	881e      	ldrh	r6, [r3, #0]
 8004802:	2f6f      	cmp	r7, #111	; 0x6f
 8004804:	bf0c      	ite	eq
 8004806:	2308      	moveq	r3, #8
 8004808:	230a      	movne	r3, #10
 800480a:	4852      	ldr	r0, [pc, #328]	; (8004954 <_printf_i+0x244>)
 800480c:	2100      	movs	r1, #0
 800480e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004812:	6865      	ldr	r5, [r4, #4]
 8004814:	2d00      	cmp	r5, #0
 8004816:	bfa8      	it	ge
 8004818:	6821      	ldrge	r1, [r4, #0]
 800481a:	60a5      	str	r5, [r4, #8]
 800481c:	bfa4      	itt	ge
 800481e:	f021 0104 	bicge.w	r1, r1, #4
 8004822:	6021      	strge	r1, [r4, #0]
 8004824:	b90e      	cbnz	r6, 800482a <_printf_i+0x11a>
 8004826:	2d00      	cmp	r5, #0
 8004828:	d04d      	beq.n	80048c6 <_printf_i+0x1b6>
 800482a:	4615      	mov	r5, r2
 800482c:	fbb6 f1f3 	udiv	r1, r6, r3
 8004830:	fb03 6711 	mls	r7, r3, r1, r6
 8004834:	5dc7      	ldrb	r7, [r0, r7]
 8004836:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800483a:	4637      	mov	r7, r6
 800483c:	42bb      	cmp	r3, r7
 800483e:	460e      	mov	r6, r1
 8004840:	d9f4      	bls.n	800482c <_printf_i+0x11c>
 8004842:	2b08      	cmp	r3, #8
 8004844:	d10b      	bne.n	800485e <_printf_i+0x14e>
 8004846:	6823      	ldr	r3, [r4, #0]
 8004848:	07de      	lsls	r6, r3, #31
 800484a:	d508      	bpl.n	800485e <_printf_i+0x14e>
 800484c:	6923      	ldr	r3, [r4, #16]
 800484e:	6861      	ldr	r1, [r4, #4]
 8004850:	4299      	cmp	r1, r3
 8004852:	bfde      	ittt	le
 8004854:	2330      	movle	r3, #48	; 0x30
 8004856:	f805 3c01 	strble.w	r3, [r5, #-1]
 800485a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800485e:	1b52      	subs	r2, r2, r5
 8004860:	6122      	str	r2, [r4, #16]
 8004862:	464b      	mov	r3, r9
 8004864:	4621      	mov	r1, r4
 8004866:	4640      	mov	r0, r8
 8004868:	f8cd a000 	str.w	sl, [sp]
 800486c:	aa03      	add	r2, sp, #12
 800486e:	f7ff fedf 	bl	8004630 <_printf_common>
 8004872:	3001      	adds	r0, #1
 8004874:	d14c      	bne.n	8004910 <_printf_i+0x200>
 8004876:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800487a:	b004      	add	sp, #16
 800487c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004880:	4834      	ldr	r0, [pc, #208]	; (8004954 <_printf_i+0x244>)
 8004882:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004886:	6829      	ldr	r1, [r5, #0]
 8004888:	6823      	ldr	r3, [r4, #0]
 800488a:	f851 6b04 	ldr.w	r6, [r1], #4
 800488e:	6029      	str	r1, [r5, #0]
 8004890:	061d      	lsls	r5, r3, #24
 8004892:	d514      	bpl.n	80048be <_printf_i+0x1ae>
 8004894:	07df      	lsls	r7, r3, #31
 8004896:	bf44      	itt	mi
 8004898:	f043 0320 	orrmi.w	r3, r3, #32
 800489c:	6023      	strmi	r3, [r4, #0]
 800489e:	b91e      	cbnz	r6, 80048a8 <_printf_i+0x198>
 80048a0:	6823      	ldr	r3, [r4, #0]
 80048a2:	f023 0320 	bic.w	r3, r3, #32
 80048a6:	6023      	str	r3, [r4, #0]
 80048a8:	2310      	movs	r3, #16
 80048aa:	e7af      	b.n	800480c <_printf_i+0xfc>
 80048ac:	6823      	ldr	r3, [r4, #0]
 80048ae:	f043 0320 	orr.w	r3, r3, #32
 80048b2:	6023      	str	r3, [r4, #0]
 80048b4:	2378      	movs	r3, #120	; 0x78
 80048b6:	4828      	ldr	r0, [pc, #160]	; (8004958 <_printf_i+0x248>)
 80048b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80048bc:	e7e3      	b.n	8004886 <_printf_i+0x176>
 80048be:	0659      	lsls	r1, r3, #25
 80048c0:	bf48      	it	mi
 80048c2:	b2b6      	uxthmi	r6, r6
 80048c4:	e7e6      	b.n	8004894 <_printf_i+0x184>
 80048c6:	4615      	mov	r5, r2
 80048c8:	e7bb      	b.n	8004842 <_printf_i+0x132>
 80048ca:	682b      	ldr	r3, [r5, #0]
 80048cc:	6826      	ldr	r6, [r4, #0]
 80048ce:	1d18      	adds	r0, r3, #4
 80048d0:	6961      	ldr	r1, [r4, #20]
 80048d2:	6028      	str	r0, [r5, #0]
 80048d4:	0635      	lsls	r5, r6, #24
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	d501      	bpl.n	80048de <_printf_i+0x1ce>
 80048da:	6019      	str	r1, [r3, #0]
 80048dc:	e002      	b.n	80048e4 <_printf_i+0x1d4>
 80048de:	0670      	lsls	r0, r6, #25
 80048e0:	d5fb      	bpl.n	80048da <_printf_i+0x1ca>
 80048e2:	8019      	strh	r1, [r3, #0]
 80048e4:	2300      	movs	r3, #0
 80048e6:	4615      	mov	r5, r2
 80048e8:	6123      	str	r3, [r4, #16]
 80048ea:	e7ba      	b.n	8004862 <_printf_i+0x152>
 80048ec:	682b      	ldr	r3, [r5, #0]
 80048ee:	2100      	movs	r1, #0
 80048f0:	1d1a      	adds	r2, r3, #4
 80048f2:	602a      	str	r2, [r5, #0]
 80048f4:	681d      	ldr	r5, [r3, #0]
 80048f6:	6862      	ldr	r2, [r4, #4]
 80048f8:	4628      	mov	r0, r5
 80048fa:	f000 ffc9 	bl	8005890 <memchr>
 80048fe:	b108      	cbz	r0, 8004904 <_printf_i+0x1f4>
 8004900:	1b40      	subs	r0, r0, r5
 8004902:	6060      	str	r0, [r4, #4]
 8004904:	6863      	ldr	r3, [r4, #4]
 8004906:	6123      	str	r3, [r4, #16]
 8004908:	2300      	movs	r3, #0
 800490a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800490e:	e7a8      	b.n	8004862 <_printf_i+0x152>
 8004910:	462a      	mov	r2, r5
 8004912:	4649      	mov	r1, r9
 8004914:	4640      	mov	r0, r8
 8004916:	6923      	ldr	r3, [r4, #16]
 8004918:	47d0      	blx	sl
 800491a:	3001      	adds	r0, #1
 800491c:	d0ab      	beq.n	8004876 <_printf_i+0x166>
 800491e:	6823      	ldr	r3, [r4, #0]
 8004920:	079b      	lsls	r3, r3, #30
 8004922:	d413      	bmi.n	800494c <_printf_i+0x23c>
 8004924:	68e0      	ldr	r0, [r4, #12]
 8004926:	9b03      	ldr	r3, [sp, #12]
 8004928:	4298      	cmp	r0, r3
 800492a:	bfb8      	it	lt
 800492c:	4618      	movlt	r0, r3
 800492e:	e7a4      	b.n	800487a <_printf_i+0x16a>
 8004930:	2301      	movs	r3, #1
 8004932:	4632      	mov	r2, r6
 8004934:	4649      	mov	r1, r9
 8004936:	4640      	mov	r0, r8
 8004938:	47d0      	blx	sl
 800493a:	3001      	adds	r0, #1
 800493c:	d09b      	beq.n	8004876 <_printf_i+0x166>
 800493e:	3501      	adds	r5, #1
 8004940:	68e3      	ldr	r3, [r4, #12]
 8004942:	9903      	ldr	r1, [sp, #12]
 8004944:	1a5b      	subs	r3, r3, r1
 8004946:	42ab      	cmp	r3, r5
 8004948:	dcf2      	bgt.n	8004930 <_printf_i+0x220>
 800494a:	e7eb      	b.n	8004924 <_printf_i+0x214>
 800494c:	2500      	movs	r5, #0
 800494e:	f104 0619 	add.w	r6, r4, #25
 8004952:	e7f5      	b.n	8004940 <_printf_i+0x230>
 8004954:	08006b4a 	.word	0x08006b4a
 8004958:	08006b5b 	.word	0x08006b5b

0800495c <iprintf>:
 800495c:	b40f      	push	{r0, r1, r2, r3}
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <iprintf+0x2c>)
 8004960:	b513      	push	{r0, r1, r4, lr}
 8004962:	681c      	ldr	r4, [r3, #0]
 8004964:	b124      	cbz	r4, 8004970 <iprintf+0x14>
 8004966:	69a3      	ldr	r3, [r4, #24]
 8004968:	b913      	cbnz	r3, 8004970 <iprintf+0x14>
 800496a:	4620      	mov	r0, r4
 800496c:	f000 fee2 	bl	8005734 <__sinit>
 8004970:	ab05      	add	r3, sp, #20
 8004972:	4620      	mov	r0, r4
 8004974:	9a04      	ldr	r2, [sp, #16]
 8004976:	68a1      	ldr	r1, [r4, #8]
 8004978:	9301      	str	r3, [sp, #4]
 800497a:	f001 fc3f 	bl	80061fc <_vfiprintf_r>
 800497e:	b002      	add	sp, #8
 8004980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004984:	b004      	add	sp, #16
 8004986:	4770      	bx	lr
 8004988:	20000014 	.word	0x20000014

0800498c <quorem>:
 800498c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004990:	6903      	ldr	r3, [r0, #16]
 8004992:	690c      	ldr	r4, [r1, #16]
 8004994:	4607      	mov	r7, r0
 8004996:	42a3      	cmp	r3, r4
 8004998:	f2c0 8082 	blt.w	8004aa0 <quorem+0x114>
 800499c:	3c01      	subs	r4, #1
 800499e:	f100 0514 	add.w	r5, r0, #20
 80049a2:	f101 0814 	add.w	r8, r1, #20
 80049a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80049aa:	9301      	str	r3, [sp, #4]
 80049ac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80049b0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80049b4:	3301      	adds	r3, #1
 80049b6:	429a      	cmp	r2, r3
 80049b8:	fbb2 f6f3 	udiv	r6, r2, r3
 80049bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80049c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80049c4:	d331      	bcc.n	8004a2a <quorem+0x9e>
 80049c6:	f04f 0e00 	mov.w	lr, #0
 80049ca:	4640      	mov	r0, r8
 80049cc:	46ac      	mov	ip, r5
 80049ce:	46f2      	mov	sl, lr
 80049d0:	f850 2b04 	ldr.w	r2, [r0], #4
 80049d4:	b293      	uxth	r3, r2
 80049d6:	fb06 e303 	mla	r3, r6, r3, lr
 80049da:	0c12      	lsrs	r2, r2, #16
 80049dc:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	fb06 e202 	mla	r2, r6, r2, lr
 80049e6:	ebaa 0303 	sub.w	r3, sl, r3
 80049ea:	f8dc a000 	ldr.w	sl, [ip]
 80049ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80049f2:	fa1f fa8a 	uxth.w	sl, sl
 80049f6:	4453      	add	r3, sl
 80049f8:	f8dc a000 	ldr.w	sl, [ip]
 80049fc:	b292      	uxth	r2, r2
 80049fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004a02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a0c:	4581      	cmp	r9, r0
 8004a0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004a12:	f84c 3b04 	str.w	r3, [ip], #4
 8004a16:	d2db      	bcs.n	80049d0 <quorem+0x44>
 8004a18:	f855 300b 	ldr.w	r3, [r5, fp]
 8004a1c:	b92b      	cbnz	r3, 8004a2a <quorem+0x9e>
 8004a1e:	9b01      	ldr	r3, [sp, #4]
 8004a20:	3b04      	subs	r3, #4
 8004a22:	429d      	cmp	r5, r3
 8004a24:	461a      	mov	r2, r3
 8004a26:	d32f      	bcc.n	8004a88 <quorem+0xfc>
 8004a28:	613c      	str	r4, [r7, #16]
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	f001 f9ca 	bl	8005dc4 <__mcmp>
 8004a30:	2800      	cmp	r0, #0
 8004a32:	db25      	blt.n	8004a80 <quorem+0xf4>
 8004a34:	4628      	mov	r0, r5
 8004a36:	f04f 0c00 	mov.w	ip, #0
 8004a3a:	3601      	adds	r6, #1
 8004a3c:	f858 1b04 	ldr.w	r1, [r8], #4
 8004a40:	f8d0 e000 	ldr.w	lr, [r0]
 8004a44:	b28b      	uxth	r3, r1
 8004a46:	ebac 0303 	sub.w	r3, ip, r3
 8004a4a:	fa1f f28e 	uxth.w	r2, lr
 8004a4e:	4413      	add	r3, r2
 8004a50:	0c0a      	lsrs	r2, r1, #16
 8004a52:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004a56:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a60:	45c1      	cmp	r9, r8
 8004a62:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004a66:	f840 3b04 	str.w	r3, [r0], #4
 8004a6a:	d2e7      	bcs.n	8004a3c <quorem+0xb0>
 8004a6c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a70:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a74:	b922      	cbnz	r2, 8004a80 <quorem+0xf4>
 8004a76:	3b04      	subs	r3, #4
 8004a78:	429d      	cmp	r5, r3
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	d30a      	bcc.n	8004a94 <quorem+0x108>
 8004a7e:	613c      	str	r4, [r7, #16]
 8004a80:	4630      	mov	r0, r6
 8004a82:	b003      	add	sp, #12
 8004a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a88:	6812      	ldr	r2, [r2, #0]
 8004a8a:	3b04      	subs	r3, #4
 8004a8c:	2a00      	cmp	r2, #0
 8004a8e:	d1cb      	bne.n	8004a28 <quorem+0x9c>
 8004a90:	3c01      	subs	r4, #1
 8004a92:	e7c6      	b.n	8004a22 <quorem+0x96>
 8004a94:	6812      	ldr	r2, [r2, #0]
 8004a96:	3b04      	subs	r3, #4
 8004a98:	2a00      	cmp	r2, #0
 8004a9a:	d1f0      	bne.n	8004a7e <quorem+0xf2>
 8004a9c:	3c01      	subs	r4, #1
 8004a9e:	e7eb      	b.n	8004a78 <quorem+0xec>
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	e7ee      	b.n	8004a82 <quorem+0xf6>
 8004aa4:	0000      	movs	r0, r0
	...

08004aa8 <_dtoa_r>:
 8004aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aac:	4616      	mov	r6, r2
 8004aae:	461f      	mov	r7, r3
 8004ab0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004ab2:	b099      	sub	sp, #100	; 0x64
 8004ab4:	4605      	mov	r5, r0
 8004ab6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004aba:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004abe:	b974      	cbnz	r4, 8004ade <_dtoa_r+0x36>
 8004ac0:	2010      	movs	r0, #16
 8004ac2:	f000 fedd 	bl	8005880 <malloc>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	6268      	str	r0, [r5, #36]	; 0x24
 8004aca:	b920      	cbnz	r0, 8004ad6 <_dtoa_r+0x2e>
 8004acc:	21ea      	movs	r1, #234	; 0xea
 8004ace:	4ba8      	ldr	r3, [pc, #672]	; (8004d70 <_dtoa_r+0x2c8>)
 8004ad0:	48a8      	ldr	r0, [pc, #672]	; (8004d74 <_dtoa_r+0x2cc>)
 8004ad2:	f001 fde9 	bl	80066a8 <__assert_func>
 8004ad6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004ada:	6004      	str	r4, [r0, #0]
 8004adc:	60c4      	str	r4, [r0, #12]
 8004ade:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ae0:	6819      	ldr	r1, [r3, #0]
 8004ae2:	b151      	cbz	r1, 8004afa <_dtoa_r+0x52>
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4093      	lsls	r3, r2
 8004aea:	604a      	str	r2, [r1, #4]
 8004aec:	608b      	str	r3, [r1, #8]
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 ff2a 	bl	8005948 <_Bfree>
 8004af4:	2200      	movs	r2, #0
 8004af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004af8:	601a      	str	r2, [r3, #0]
 8004afa:	1e3b      	subs	r3, r7, #0
 8004afc:	bfaf      	iteee	ge
 8004afe:	2300      	movge	r3, #0
 8004b00:	2201      	movlt	r2, #1
 8004b02:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004b06:	9305      	strlt	r3, [sp, #20]
 8004b08:	bfa8      	it	ge
 8004b0a:	f8c8 3000 	strge.w	r3, [r8]
 8004b0e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004b12:	4b99      	ldr	r3, [pc, #612]	; (8004d78 <_dtoa_r+0x2d0>)
 8004b14:	bfb8      	it	lt
 8004b16:	f8c8 2000 	strlt.w	r2, [r8]
 8004b1a:	ea33 0309 	bics.w	r3, r3, r9
 8004b1e:	d119      	bne.n	8004b54 <_dtoa_r+0xac>
 8004b20:	f242 730f 	movw	r3, #9999	; 0x270f
 8004b24:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004b2c:	4333      	orrs	r3, r6
 8004b2e:	f000 857f 	beq.w	8005630 <_dtoa_r+0xb88>
 8004b32:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b34:	b953      	cbnz	r3, 8004b4c <_dtoa_r+0xa4>
 8004b36:	4b91      	ldr	r3, [pc, #580]	; (8004d7c <_dtoa_r+0x2d4>)
 8004b38:	e022      	b.n	8004b80 <_dtoa_r+0xd8>
 8004b3a:	4b91      	ldr	r3, [pc, #580]	; (8004d80 <_dtoa_r+0x2d8>)
 8004b3c:	9303      	str	r3, [sp, #12]
 8004b3e:	3308      	adds	r3, #8
 8004b40:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004b42:	6013      	str	r3, [r2, #0]
 8004b44:	9803      	ldr	r0, [sp, #12]
 8004b46:	b019      	add	sp, #100	; 0x64
 8004b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b4c:	4b8b      	ldr	r3, [pc, #556]	; (8004d7c <_dtoa_r+0x2d4>)
 8004b4e:	9303      	str	r3, [sp, #12]
 8004b50:	3303      	adds	r3, #3
 8004b52:	e7f5      	b.n	8004b40 <_dtoa_r+0x98>
 8004b54:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004b58:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004b5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b60:	2200      	movs	r2, #0
 8004b62:	2300      	movs	r3, #0
 8004b64:	f7fb ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8004b68:	4680      	mov	r8, r0
 8004b6a:	b158      	cbz	r0, 8004b84 <_dtoa_r+0xdc>
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004b70:	6013      	str	r3, [r2, #0]
 8004b72:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 8558 	beq.w	800562a <_dtoa_r+0xb82>
 8004b7a:	4882      	ldr	r0, [pc, #520]	; (8004d84 <_dtoa_r+0x2dc>)
 8004b7c:	6018      	str	r0, [r3, #0]
 8004b7e:	1e43      	subs	r3, r0, #1
 8004b80:	9303      	str	r3, [sp, #12]
 8004b82:	e7df      	b.n	8004b44 <_dtoa_r+0x9c>
 8004b84:	ab16      	add	r3, sp, #88	; 0x58
 8004b86:	9301      	str	r3, [sp, #4]
 8004b88:	ab17      	add	r3, sp, #92	; 0x5c
 8004b8a:	9300      	str	r3, [sp, #0]
 8004b8c:	4628      	mov	r0, r5
 8004b8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004b92:	f001 f9bf 	bl	8005f14 <__d2b>
 8004b96:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004b9a:	4683      	mov	fp, r0
 8004b9c:	2c00      	cmp	r4, #0
 8004b9e:	d07f      	beq.n	8004ca0 <_dtoa_r+0x1f8>
 8004ba0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ba4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ba6:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004baa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004bae:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004bb2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004bb6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004bba:	2200      	movs	r2, #0
 8004bbc:	4b72      	ldr	r3, [pc, #456]	; (8004d88 <_dtoa_r+0x2e0>)
 8004bbe:	f7fb fad3 	bl	8000168 <__aeabi_dsub>
 8004bc2:	a365      	add	r3, pc, #404	; (adr r3, 8004d58 <_dtoa_r+0x2b0>)
 8004bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc8:	f7fb fc86 	bl	80004d8 <__aeabi_dmul>
 8004bcc:	a364      	add	r3, pc, #400	; (adr r3, 8004d60 <_dtoa_r+0x2b8>)
 8004bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd2:	f7fb facb 	bl	800016c <__adddf3>
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	4620      	mov	r0, r4
 8004bda:	460f      	mov	r7, r1
 8004bdc:	f7fb fc12 	bl	8000404 <__aeabi_i2d>
 8004be0:	a361      	add	r3, pc, #388	; (adr r3, 8004d68 <_dtoa_r+0x2c0>)
 8004be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be6:	f7fb fc77 	bl	80004d8 <__aeabi_dmul>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4630      	mov	r0, r6
 8004bf0:	4639      	mov	r1, r7
 8004bf2:	f7fb fabb 	bl	800016c <__adddf3>
 8004bf6:	4606      	mov	r6, r0
 8004bf8:	460f      	mov	r7, r1
 8004bfa:	f7fb ff1d 	bl	8000a38 <__aeabi_d2iz>
 8004bfe:	2200      	movs	r2, #0
 8004c00:	4682      	mov	sl, r0
 8004c02:	2300      	movs	r3, #0
 8004c04:	4630      	mov	r0, r6
 8004c06:	4639      	mov	r1, r7
 8004c08:	f7fb fed8 	bl	80009bc <__aeabi_dcmplt>
 8004c0c:	b148      	cbz	r0, 8004c22 <_dtoa_r+0x17a>
 8004c0e:	4650      	mov	r0, sl
 8004c10:	f7fb fbf8 	bl	8000404 <__aeabi_i2d>
 8004c14:	4632      	mov	r2, r6
 8004c16:	463b      	mov	r3, r7
 8004c18:	f7fb fec6 	bl	80009a8 <__aeabi_dcmpeq>
 8004c1c:	b908      	cbnz	r0, 8004c22 <_dtoa_r+0x17a>
 8004c1e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c22:	f1ba 0f16 	cmp.w	sl, #22
 8004c26:	d858      	bhi.n	8004cda <_dtoa_r+0x232>
 8004c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c2c:	4b57      	ldr	r3, [pc, #348]	; (8004d8c <_dtoa_r+0x2e4>)
 8004c2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c36:	f7fb fec1 	bl	80009bc <__aeabi_dcmplt>
 8004c3a:	2800      	cmp	r0, #0
 8004c3c:	d04f      	beq.n	8004cde <_dtoa_r+0x236>
 8004c3e:	2300      	movs	r3, #0
 8004c40:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8004c44:	930f      	str	r3, [sp, #60]	; 0x3c
 8004c46:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004c48:	1b1c      	subs	r4, r3, r4
 8004c4a:	1e63      	subs	r3, r4, #1
 8004c4c:	9309      	str	r3, [sp, #36]	; 0x24
 8004c4e:	bf49      	itett	mi
 8004c50:	f1c4 0301 	rsbmi	r3, r4, #1
 8004c54:	2300      	movpl	r3, #0
 8004c56:	9306      	strmi	r3, [sp, #24]
 8004c58:	2300      	movmi	r3, #0
 8004c5a:	bf54      	ite	pl
 8004c5c:	9306      	strpl	r3, [sp, #24]
 8004c5e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004c60:	f1ba 0f00 	cmp.w	sl, #0
 8004c64:	db3d      	blt.n	8004ce2 <_dtoa_r+0x23a>
 8004c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c68:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8004c6c:	4453      	add	r3, sl
 8004c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8004c70:	2300      	movs	r3, #0
 8004c72:	930a      	str	r3, [sp, #40]	; 0x28
 8004c74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c76:	2b09      	cmp	r3, #9
 8004c78:	f200 808c 	bhi.w	8004d94 <_dtoa_r+0x2ec>
 8004c7c:	2b05      	cmp	r3, #5
 8004c7e:	bfc4      	itt	gt
 8004c80:	3b04      	subgt	r3, #4
 8004c82:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004c84:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004c86:	bfc8      	it	gt
 8004c88:	2400      	movgt	r4, #0
 8004c8a:	f1a3 0302 	sub.w	r3, r3, #2
 8004c8e:	bfd8      	it	le
 8004c90:	2401      	movle	r4, #1
 8004c92:	2b03      	cmp	r3, #3
 8004c94:	f200 808a 	bhi.w	8004dac <_dtoa_r+0x304>
 8004c98:	e8df f003 	tbb	[pc, r3]
 8004c9c:	5b4d4f2d 	.word	0x5b4d4f2d
 8004ca0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004ca4:	441c      	add	r4, r3
 8004ca6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004caa:	2b20      	cmp	r3, #32
 8004cac:	bfc3      	ittte	gt
 8004cae:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004cb2:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004cb6:	fa09 f303 	lslgt.w	r3, r9, r3
 8004cba:	f1c3 0320 	rsble	r3, r3, #32
 8004cbe:	bfc6      	itte	gt
 8004cc0:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004cc4:	4318      	orrgt	r0, r3
 8004cc6:	fa06 f003 	lslle.w	r0, r6, r3
 8004cca:	f7fb fb8b 	bl	80003e4 <__aeabi_ui2d>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004cd4:	3c01      	subs	r4, #1
 8004cd6:	9313      	str	r3, [sp, #76]	; 0x4c
 8004cd8:	e76f      	b.n	8004bba <_dtoa_r+0x112>
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e7b2      	b.n	8004c44 <_dtoa_r+0x19c>
 8004cde:	900f      	str	r0, [sp, #60]	; 0x3c
 8004ce0:	e7b1      	b.n	8004c46 <_dtoa_r+0x19e>
 8004ce2:	9b06      	ldr	r3, [sp, #24]
 8004ce4:	eba3 030a 	sub.w	r3, r3, sl
 8004ce8:	9306      	str	r3, [sp, #24]
 8004cea:	f1ca 0300 	rsb	r3, sl, #0
 8004cee:	930a      	str	r3, [sp, #40]	; 0x28
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	930e      	str	r3, [sp, #56]	; 0x38
 8004cf4:	e7be      	b.n	8004c74 <_dtoa_r+0x1cc>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004cfa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	dc58      	bgt.n	8004db2 <_dtoa_r+0x30a>
 8004d00:	f04f 0901 	mov.w	r9, #1
 8004d04:	464b      	mov	r3, r9
 8004d06:	f8cd 9020 	str.w	r9, [sp, #32]
 8004d0a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8004d0e:	2200      	movs	r2, #0
 8004d10:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8004d12:	6042      	str	r2, [r0, #4]
 8004d14:	2204      	movs	r2, #4
 8004d16:	f102 0614 	add.w	r6, r2, #20
 8004d1a:	429e      	cmp	r6, r3
 8004d1c:	6841      	ldr	r1, [r0, #4]
 8004d1e:	d94e      	bls.n	8004dbe <_dtoa_r+0x316>
 8004d20:	4628      	mov	r0, r5
 8004d22:	f000 fdd1 	bl	80058c8 <_Balloc>
 8004d26:	9003      	str	r0, [sp, #12]
 8004d28:	2800      	cmp	r0, #0
 8004d2a:	d14c      	bne.n	8004dc6 <_dtoa_r+0x31e>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004d32:	4b17      	ldr	r3, [pc, #92]	; (8004d90 <_dtoa_r+0x2e8>)
 8004d34:	e6cc      	b.n	8004ad0 <_dtoa_r+0x28>
 8004d36:	2301      	movs	r3, #1
 8004d38:	e7de      	b.n	8004cf8 <_dtoa_r+0x250>
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d3e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004d40:	eb0a 0903 	add.w	r9, sl, r3
 8004d44:	f109 0301 	add.w	r3, r9, #1
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	9308      	str	r3, [sp, #32]
 8004d4c:	bfb8      	it	lt
 8004d4e:	2301      	movlt	r3, #1
 8004d50:	e7dd      	b.n	8004d0e <_dtoa_r+0x266>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e7f2      	b.n	8004d3c <_dtoa_r+0x294>
 8004d56:	bf00      	nop
 8004d58:	636f4361 	.word	0x636f4361
 8004d5c:	3fd287a7 	.word	0x3fd287a7
 8004d60:	8b60c8b3 	.word	0x8b60c8b3
 8004d64:	3fc68a28 	.word	0x3fc68a28
 8004d68:	509f79fb 	.word	0x509f79fb
 8004d6c:	3fd34413 	.word	0x3fd34413
 8004d70:	08006b79 	.word	0x08006b79
 8004d74:	08006b90 	.word	0x08006b90
 8004d78:	7ff00000 	.word	0x7ff00000
 8004d7c:	08006b75 	.word	0x08006b75
 8004d80:	08006b6c 	.word	0x08006b6c
 8004d84:	08006b49 	.word	0x08006b49
 8004d88:	3ff80000 	.word	0x3ff80000
 8004d8c:	08006ce0 	.word	0x08006ce0
 8004d90:	08006beb 	.word	0x08006beb
 8004d94:	2401      	movs	r4, #1
 8004d96:	2300      	movs	r3, #0
 8004d98:	940b      	str	r4, [sp, #44]	; 0x2c
 8004d9a:	9322      	str	r3, [sp, #136]	; 0x88
 8004d9c:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8004da0:	2200      	movs	r2, #0
 8004da2:	2312      	movs	r3, #18
 8004da4:	f8cd 9020 	str.w	r9, [sp, #32]
 8004da8:	9223      	str	r2, [sp, #140]	; 0x8c
 8004daa:	e7b0      	b.n	8004d0e <_dtoa_r+0x266>
 8004dac:	2301      	movs	r3, #1
 8004dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db0:	e7f4      	b.n	8004d9c <_dtoa_r+0x2f4>
 8004db2:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8004db6:	464b      	mov	r3, r9
 8004db8:	f8cd 9020 	str.w	r9, [sp, #32]
 8004dbc:	e7a7      	b.n	8004d0e <_dtoa_r+0x266>
 8004dbe:	3101      	adds	r1, #1
 8004dc0:	6041      	str	r1, [r0, #4]
 8004dc2:	0052      	lsls	r2, r2, #1
 8004dc4:	e7a7      	b.n	8004d16 <_dtoa_r+0x26e>
 8004dc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dc8:	9a03      	ldr	r2, [sp, #12]
 8004dca:	601a      	str	r2, [r3, #0]
 8004dcc:	9b08      	ldr	r3, [sp, #32]
 8004dce:	2b0e      	cmp	r3, #14
 8004dd0:	f200 80a8 	bhi.w	8004f24 <_dtoa_r+0x47c>
 8004dd4:	2c00      	cmp	r4, #0
 8004dd6:	f000 80a5 	beq.w	8004f24 <_dtoa_r+0x47c>
 8004dda:	f1ba 0f00 	cmp.w	sl, #0
 8004dde:	dd34      	ble.n	8004e4a <_dtoa_r+0x3a2>
 8004de0:	4a9a      	ldr	r2, [pc, #616]	; (800504c <_dtoa_r+0x5a4>)
 8004de2:	f00a 030f 	and.w	r3, sl, #15
 8004de6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004dea:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8004dee:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004df2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004df6:	ea4f 142a 	mov.w	r4, sl, asr #4
 8004dfa:	d016      	beq.n	8004e2a <_dtoa_r+0x382>
 8004dfc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e00:	4b93      	ldr	r3, [pc, #588]	; (8005050 <_dtoa_r+0x5a8>)
 8004e02:	2703      	movs	r7, #3
 8004e04:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004e08:	f7fb fc90 	bl	800072c <__aeabi_ddiv>
 8004e0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e10:	f004 040f 	and.w	r4, r4, #15
 8004e14:	4e8e      	ldr	r6, [pc, #568]	; (8005050 <_dtoa_r+0x5a8>)
 8004e16:	b954      	cbnz	r4, 8004e2e <_dtoa_r+0x386>
 8004e18:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004e1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004e20:	f7fb fc84 	bl	800072c <__aeabi_ddiv>
 8004e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e28:	e029      	b.n	8004e7e <_dtoa_r+0x3d6>
 8004e2a:	2702      	movs	r7, #2
 8004e2c:	e7f2      	b.n	8004e14 <_dtoa_r+0x36c>
 8004e2e:	07e1      	lsls	r1, r4, #31
 8004e30:	d508      	bpl.n	8004e44 <_dtoa_r+0x39c>
 8004e32:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e36:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004e3a:	f7fb fb4d 	bl	80004d8 <__aeabi_dmul>
 8004e3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004e42:	3701      	adds	r7, #1
 8004e44:	1064      	asrs	r4, r4, #1
 8004e46:	3608      	adds	r6, #8
 8004e48:	e7e5      	b.n	8004e16 <_dtoa_r+0x36e>
 8004e4a:	f000 80a5 	beq.w	8004f98 <_dtoa_r+0x4f0>
 8004e4e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e52:	f1ca 0400 	rsb	r4, sl, #0
 8004e56:	4b7d      	ldr	r3, [pc, #500]	; (800504c <_dtoa_r+0x5a4>)
 8004e58:	f004 020f 	and.w	r2, r4, #15
 8004e5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	f7fb fb38 	bl	80004d8 <__aeabi_dmul>
 8004e68:	2702      	movs	r7, #2
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e70:	4e77      	ldr	r6, [pc, #476]	; (8005050 <_dtoa_r+0x5a8>)
 8004e72:	1124      	asrs	r4, r4, #4
 8004e74:	2c00      	cmp	r4, #0
 8004e76:	f040 8084 	bne.w	8004f82 <_dtoa_r+0x4da>
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d1d2      	bne.n	8004e24 <_dtoa_r+0x37c>
 8004e7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f000 808b 	beq.w	8004f9c <_dtoa_r+0x4f4>
 8004e86:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e8a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004e8e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004e92:	2200      	movs	r2, #0
 8004e94:	4b6f      	ldr	r3, [pc, #444]	; (8005054 <_dtoa_r+0x5ac>)
 8004e96:	f7fb fd91 	bl	80009bc <__aeabi_dcmplt>
 8004e9a:	2800      	cmp	r0, #0
 8004e9c:	d07e      	beq.n	8004f9c <_dtoa_r+0x4f4>
 8004e9e:	9b08      	ldr	r3, [sp, #32]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d07b      	beq.n	8004f9c <_dtoa_r+0x4f4>
 8004ea4:	f1b9 0f00 	cmp.w	r9, #0
 8004ea8:	dd38      	ble.n	8004f1c <_dtoa_r+0x474>
 8004eaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004eae:	2200      	movs	r2, #0
 8004eb0:	4b69      	ldr	r3, [pc, #420]	; (8005058 <_dtoa_r+0x5b0>)
 8004eb2:	f7fb fb11 	bl	80004d8 <__aeabi_dmul>
 8004eb6:	464c      	mov	r4, r9
 8004eb8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ebc:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 8004ec0:	3701      	adds	r7, #1
 8004ec2:	4638      	mov	r0, r7
 8004ec4:	f7fb fa9e 	bl	8000404 <__aeabi_i2d>
 8004ec8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ecc:	f7fb fb04 	bl	80004d8 <__aeabi_dmul>
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	4b62      	ldr	r3, [pc, #392]	; (800505c <_dtoa_r+0x5b4>)
 8004ed4:	f7fb f94a 	bl	800016c <__adddf3>
 8004ed8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004edc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004ee0:	9611      	str	r6, [sp, #68]	; 0x44
 8004ee2:	2c00      	cmp	r4, #0
 8004ee4:	d15d      	bne.n	8004fa2 <_dtoa_r+0x4fa>
 8004ee6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eea:	2200      	movs	r2, #0
 8004eec:	4b5c      	ldr	r3, [pc, #368]	; (8005060 <_dtoa_r+0x5b8>)
 8004eee:	f7fb f93b 	bl	8000168 <__aeabi_dsub>
 8004ef2:	4602      	mov	r2, r0
 8004ef4:	460b      	mov	r3, r1
 8004ef6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004efa:	4633      	mov	r3, r6
 8004efc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004efe:	f7fb fd7b 	bl	80009f8 <__aeabi_dcmpgt>
 8004f02:	2800      	cmp	r0, #0
 8004f04:	f040 829c 	bne.w	8005440 <_dtoa_r+0x998>
 8004f08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f0c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004f0e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f12:	f7fb fd53 	bl	80009bc <__aeabi_dcmplt>
 8004f16:	2800      	cmp	r0, #0
 8004f18:	f040 8290 	bne.w	800543c <_dtoa_r+0x994>
 8004f1c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004f20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004f24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f2c0 8152 	blt.w	80051d0 <_dtoa_r+0x728>
 8004f2c:	f1ba 0f0e 	cmp.w	sl, #14
 8004f30:	f300 814e 	bgt.w	80051d0 <_dtoa_r+0x728>
 8004f34:	4b45      	ldr	r3, [pc, #276]	; (800504c <_dtoa_r+0x5a4>)
 8004f36:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8004f3a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f3e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004f42:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f280 80db 	bge.w	8005100 <_dtoa_r+0x658>
 8004f4a:	9b08      	ldr	r3, [sp, #32]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	f300 80d7 	bgt.w	8005100 <_dtoa_r+0x658>
 8004f52:	f040 8272 	bne.w	800543a <_dtoa_r+0x992>
 8004f56:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4b40      	ldr	r3, [pc, #256]	; (8005060 <_dtoa_r+0x5b8>)
 8004f5e:	f7fb fabb 	bl	80004d8 <__aeabi_dmul>
 8004f62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f66:	f7fb fd3d 	bl	80009e4 <__aeabi_dcmpge>
 8004f6a:	9c08      	ldr	r4, [sp, #32]
 8004f6c:	4626      	mov	r6, r4
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	f040 8248 	bne.w	8005404 <_dtoa_r+0x95c>
 8004f74:	2331      	movs	r3, #49	; 0x31
 8004f76:	9f03      	ldr	r7, [sp, #12]
 8004f78:	f10a 0a01 	add.w	sl, sl, #1
 8004f7c:	f807 3b01 	strb.w	r3, [r7], #1
 8004f80:	e244      	b.n	800540c <_dtoa_r+0x964>
 8004f82:	07e2      	lsls	r2, r4, #31
 8004f84:	d505      	bpl.n	8004f92 <_dtoa_r+0x4ea>
 8004f86:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f8a:	f7fb faa5 	bl	80004d8 <__aeabi_dmul>
 8004f8e:	2301      	movs	r3, #1
 8004f90:	3701      	adds	r7, #1
 8004f92:	1064      	asrs	r4, r4, #1
 8004f94:	3608      	adds	r6, #8
 8004f96:	e76d      	b.n	8004e74 <_dtoa_r+0x3cc>
 8004f98:	2702      	movs	r7, #2
 8004f9a:	e770      	b.n	8004e7e <_dtoa_r+0x3d6>
 8004f9c:	46d0      	mov	r8, sl
 8004f9e:	9c08      	ldr	r4, [sp, #32]
 8004fa0:	e78f      	b.n	8004ec2 <_dtoa_r+0x41a>
 8004fa2:	9903      	ldr	r1, [sp, #12]
 8004fa4:	4b29      	ldr	r3, [pc, #164]	; (800504c <_dtoa_r+0x5a4>)
 8004fa6:	4421      	add	r1, r4
 8004fa8:	9112      	str	r1, [sp, #72]	; 0x48
 8004faa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004fac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004fb0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004fb4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004fb8:	2900      	cmp	r1, #0
 8004fba:	d055      	beq.n	8005068 <_dtoa_r+0x5c0>
 8004fbc:	2000      	movs	r0, #0
 8004fbe:	4929      	ldr	r1, [pc, #164]	; (8005064 <_dtoa_r+0x5bc>)
 8004fc0:	f7fb fbb4 	bl	800072c <__aeabi_ddiv>
 8004fc4:	463b      	mov	r3, r7
 8004fc6:	4632      	mov	r2, r6
 8004fc8:	f7fb f8ce 	bl	8000168 <__aeabi_dsub>
 8004fcc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004fd0:	9f03      	ldr	r7, [sp, #12]
 8004fd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fd6:	f7fb fd2f 	bl	8000a38 <__aeabi_d2iz>
 8004fda:	4604      	mov	r4, r0
 8004fdc:	f7fb fa12 	bl	8000404 <__aeabi_i2d>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fe8:	f7fb f8be 	bl	8000168 <__aeabi_dsub>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	3430      	adds	r4, #48	; 0x30
 8004ff2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ffa:	f807 4b01 	strb.w	r4, [r7], #1
 8004ffe:	f7fb fcdd 	bl	80009bc <__aeabi_dcmplt>
 8005002:	2800      	cmp	r0, #0
 8005004:	d174      	bne.n	80050f0 <_dtoa_r+0x648>
 8005006:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800500a:	2000      	movs	r0, #0
 800500c:	4911      	ldr	r1, [pc, #68]	; (8005054 <_dtoa_r+0x5ac>)
 800500e:	f7fb f8ab 	bl	8000168 <__aeabi_dsub>
 8005012:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005016:	f7fb fcd1 	bl	80009bc <__aeabi_dcmplt>
 800501a:	2800      	cmp	r0, #0
 800501c:	f040 80b7 	bne.w	800518e <_dtoa_r+0x6e6>
 8005020:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005022:	429f      	cmp	r7, r3
 8005024:	f43f af7a 	beq.w	8004f1c <_dtoa_r+0x474>
 8005028:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800502c:	2200      	movs	r2, #0
 800502e:	4b0a      	ldr	r3, [pc, #40]	; (8005058 <_dtoa_r+0x5b0>)
 8005030:	f7fb fa52 	bl	80004d8 <__aeabi_dmul>
 8005034:	2200      	movs	r2, #0
 8005036:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800503a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800503e:	4b06      	ldr	r3, [pc, #24]	; (8005058 <_dtoa_r+0x5b0>)
 8005040:	f7fb fa4a 	bl	80004d8 <__aeabi_dmul>
 8005044:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005048:	e7c3      	b.n	8004fd2 <_dtoa_r+0x52a>
 800504a:	bf00      	nop
 800504c:	08006ce0 	.word	0x08006ce0
 8005050:	08006cb8 	.word	0x08006cb8
 8005054:	3ff00000 	.word	0x3ff00000
 8005058:	40240000 	.word	0x40240000
 800505c:	401c0000 	.word	0x401c0000
 8005060:	40140000 	.word	0x40140000
 8005064:	3fe00000 	.word	0x3fe00000
 8005068:	4630      	mov	r0, r6
 800506a:	4639      	mov	r1, r7
 800506c:	f7fb fa34 	bl	80004d8 <__aeabi_dmul>
 8005070:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005072:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005076:	9c03      	ldr	r4, [sp, #12]
 8005078:	9314      	str	r3, [sp, #80]	; 0x50
 800507a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800507e:	f7fb fcdb 	bl	8000a38 <__aeabi_d2iz>
 8005082:	9015      	str	r0, [sp, #84]	; 0x54
 8005084:	f7fb f9be 	bl	8000404 <__aeabi_i2d>
 8005088:	4602      	mov	r2, r0
 800508a:	460b      	mov	r3, r1
 800508c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005090:	f7fb f86a 	bl	8000168 <__aeabi_dsub>
 8005094:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005096:	4606      	mov	r6, r0
 8005098:	3330      	adds	r3, #48	; 0x30
 800509a:	f804 3b01 	strb.w	r3, [r4], #1
 800509e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050a0:	460f      	mov	r7, r1
 80050a2:	429c      	cmp	r4, r3
 80050a4:	f04f 0200 	mov.w	r2, #0
 80050a8:	d124      	bne.n	80050f4 <_dtoa_r+0x64c>
 80050aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050ae:	4bb0      	ldr	r3, [pc, #704]	; (8005370 <_dtoa_r+0x8c8>)
 80050b0:	f7fb f85c 	bl	800016c <__adddf3>
 80050b4:	4602      	mov	r2, r0
 80050b6:	460b      	mov	r3, r1
 80050b8:	4630      	mov	r0, r6
 80050ba:	4639      	mov	r1, r7
 80050bc:	f7fb fc9c 	bl	80009f8 <__aeabi_dcmpgt>
 80050c0:	2800      	cmp	r0, #0
 80050c2:	d163      	bne.n	800518c <_dtoa_r+0x6e4>
 80050c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050c8:	2000      	movs	r0, #0
 80050ca:	49a9      	ldr	r1, [pc, #676]	; (8005370 <_dtoa_r+0x8c8>)
 80050cc:	f7fb f84c 	bl	8000168 <__aeabi_dsub>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4630      	mov	r0, r6
 80050d6:	4639      	mov	r1, r7
 80050d8:	f7fb fc70 	bl	80009bc <__aeabi_dcmplt>
 80050dc:	2800      	cmp	r0, #0
 80050de:	f43f af1d 	beq.w	8004f1c <_dtoa_r+0x474>
 80050e2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80050e4:	1e7b      	subs	r3, r7, #1
 80050e6:	9314      	str	r3, [sp, #80]	; 0x50
 80050e8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80050ec:	2b30      	cmp	r3, #48	; 0x30
 80050ee:	d0f8      	beq.n	80050e2 <_dtoa_r+0x63a>
 80050f0:	46c2      	mov	sl, r8
 80050f2:	e03b      	b.n	800516c <_dtoa_r+0x6c4>
 80050f4:	4b9f      	ldr	r3, [pc, #636]	; (8005374 <_dtoa_r+0x8cc>)
 80050f6:	f7fb f9ef 	bl	80004d8 <__aeabi_dmul>
 80050fa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050fe:	e7bc      	b.n	800507a <_dtoa_r+0x5d2>
 8005100:	9f03      	ldr	r7, [sp, #12]
 8005102:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005106:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800510a:	4640      	mov	r0, r8
 800510c:	4649      	mov	r1, r9
 800510e:	f7fb fb0d 	bl	800072c <__aeabi_ddiv>
 8005112:	f7fb fc91 	bl	8000a38 <__aeabi_d2iz>
 8005116:	4604      	mov	r4, r0
 8005118:	f7fb f974 	bl	8000404 <__aeabi_i2d>
 800511c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005120:	f7fb f9da 	bl	80004d8 <__aeabi_dmul>
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4640      	mov	r0, r8
 800512a:	4649      	mov	r1, r9
 800512c:	f7fb f81c 	bl	8000168 <__aeabi_dsub>
 8005130:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005134:	f807 6b01 	strb.w	r6, [r7], #1
 8005138:	9e03      	ldr	r6, [sp, #12]
 800513a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800513e:	1bbe      	subs	r6, r7, r6
 8005140:	45b4      	cmp	ip, r6
 8005142:	4602      	mov	r2, r0
 8005144:	460b      	mov	r3, r1
 8005146:	d136      	bne.n	80051b6 <_dtoa_r+0x70e>
 8005148:	f7fb f810 	bl	800016c <__adddf3>
 800514c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005150:	4680      	mov	r8, r0
 8005152:	4689      	mov	r9, r1
 8005154:	f7fb fc50 	bl	80009f8 <__aeabi_dcmpgt>
 8005158:	bb58      	cbnz	r0, 80051b2 <_dtoa_r+0x70a>
 800515a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800515e:	4640      	mov	r0, r8
 8005160:	4649      	mov	r1, r9
 8005162:	f7fb fc21 	bl	80009a8 <__aeabi_dcmpeq>
 8005166:	b108      	cbz	r0, 800516c <_dtoa_r+0x6c4>
 8005168:	07e1      	lsls	r1, r4, #31
 800516a:	d422      	bmi.n	80051b2 <_dtoa_r+0x70a>
 800516c:	4628      	mov	r0, r5
 800516e:	4659      	mov	r1, fp
 8005170:	f000 fbea 	bl	8005948 <_Bfree>
 8005174:	2300      	movs	r3, #0
 8005176:	703b      	strb	r3, [r7, #0]
 8005178:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800517a:	f10a 0001 	add.w	r0, sl, #1
 800517e:	6018      	str	r0, [r3, #0]
 8005180:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005182:	2b00      	cmp	r3, #0
 8005184:	f43f acde 	beq.w	8004b44 <_dtoa_r+0x9c>
 8005188:	601f      	str	r7, [r3, #0]
 800518a:	e4db      	b.n	8004b44 <_dtoa_r+0x9c>
 800518c:	4627      	mov	r7, r4
 800518e:	463b      	mov	r3, r7
 8005190:	461f      	mov	r7, r3
 8005192:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005196:	2a39      	cmp	r2, #57	; 0x39
 8005198:	d107      	bne.n	80051aa <_dtoa_r+0x702>
 800519a:	9a03      	ldr	r2, [sp, #12]
 800519c:	429a      	cmp	r2, r3
 800519e:	d1f7      	bne.n	8005190 <_dtoa_r+0x6e8>
 80051a0:	2230      	movs	r2, #48	; 0x30
 80051a2:	9903      	ldr	r1, [sp, #12]
 80051a4:	f108 0801 	add.w	r8, r8, #1
 80051a8:	700a      	strb	r2, [r1, #0]
 80051aa:	781a      	ldrb	r2, [r3, #0]
 80051ac:	3201      	adds	r2, #1
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	e79e      	b.n	80050f0 <_dtoa_r+0x648>
 80051b2:	46d0      	mov	r8, sl
 80051b4:	e7eb      	b.n	800518e <_dtoa_r+0x6e6>
 80051b6:	2200      	movs	r2, #0
 80051b8:	4b6e      	ldr	r3, [pc, #440]	; (8005374 <_dtoa_r+0x8cc>)
 80051ba:	f7fb f98d 	bl	80004d8 <__aeabi_dmul>
 80051be:	2200      	movs	r2, #0
 80051c0:	2300      	movs	r3, #0
 80051c2:	4680      	mov	r8, r0
 80051c4:	4689      	mov	r9, r1
 80051c6:	f7fb fbef 	bl	80009a8 <__aeabi_dcmpeq>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	d09b      	beq.n	8005106 <_dtoa_r+0x65e>
 80051ce:	e7cd      	b.n	800516c <_dtoa_r+0x6c4>
 80051d0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80051d2:	2a00      	cmp	r2, #0
 80051d4:	f000 80d0 	beq.w	8005378 <_dtoa_r+0x8d0>
 80051d8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80051da:	2a01      	cmp	r2, #1
 80051dc:	f300 80ae 	bgt.w	800533c <_dtoa_r+0x894>
 80051e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80051e2:	2a00      	cmp	r2, #0
 80051e4:	f000 80a6 	beq.w	8005334 <_dtoa_r+0x88c>
 80051e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80051ec:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80051ee:	9f06      	ldr	r7, [sp, #24]
 80051f0:	9a06      	ldr	r2, [sp, #24]
 80051f2:	2101      	movs	r1, #1
 80051f4:	441a      	add	r2, r3
 80051f6:	9206      	str	r2, [sp, #24]
 80051f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051fa:	4628      	mov	r0, r5
 80051fc:	441a      	add	r2, r3
 80051fe:	9209      	str	r2, [sp, #36]	; 0x24
 8005200:	f000 fc58 	bl	8005ab4 <__i2b>
 8005204:	4606      	mov	r6, r0
 8005206:	2f00      	cmp	r7, #0
 8005208:	dd0c      	ble.n	8005224 <_dtoa_r+0x77c>
 800520a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	dd09      	ble.n	8005224 <_dtoa_r+0x77c>
 8005210:	42bb      	cmp	r3, r7
 8005212:	bfa8      	it	ge
 8005214:	463b      	movge	r3, r7
 8005216:	9a06      	ldr	r2, [sp, #24]
 8005218:	1aff      	subs	r7, r7, r3
 800521a:	1ad2      	subs	r2, r2, r3
 800521c:	9206      	str	r2, [sp, #24]
 800521e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	9309      	str	r3, [sp, #36]	; 0x24
 8005224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005226:	b1f3      	cbz	r3, 8005266 <_dtoa_r+0x7be>
 8005228:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 80a8 	beq.w	8005380 <_dtoa_r+0x8d8>
 8005230:	2c00      	cmp	r4, #0
 8005232:	dd10      	ble.n	8005256 <_dtoa_r+0x7ae>
 8005234:	4631      	mov	r1, r6
 8005236:	4622      	mov	r2, r4
 8005238:	4628      	mov	r0, r5
 800523a:	f000 fcf9 	bl	8005c30 <__pow5mult>
 800523e:	465a      	mov	r2, fp
 8005240:	4601      	mov	r1, r0
 8005242:	4606      	mov	r6, r0
 8005244:	4628      	mov	r0, r5
 8005246:	f000 fc4b 	bl	8005ae0 <__multiply>
 800524a:	4680      	mov	r8, r0
 800524c:	4659      	mov	r1, fp
 800524e:	4628      	mov	r0, r5
 8005250:	f000 fb7a 	bl	8005948 <_Bfree>
 8005254:	46c3      	mov	fp, r8
 8005256:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005258:	1b1a      	subs	r2, r3, r4
 800525a:	d004      	beq.n	8005266 <_dtoa_r+0x7be>
 800525c:	4659      	mov	r1, fp
 800525e:	4628      	mov	r0, r5
 8005260:	f000 fce6 	bl	8005c30 <__pow5mult>
 8005264:	4683      	mov	fp, r0
 8005266:	2101      	movs	r1, #1
 8005268:	4628      	mov	r0, r5
 800526a:	f000 fc23 	bl	8005ab4 <__i2b>
 800526e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005270:	4604      	mov	r4, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	f340 8086 	ble.w	8005384 <_dtoa_r+0x8dc>
 8005278:	461a      	mov	r2, r3
 800527a:	4601      	mov	r1, r0
 800527c:	4628      	mov	r0, r5
 800527e:	f000 fcd7 	bl	8005c30 <__pow5mult>
 8005282:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005284:	4604      	mov	r4, r0
 8005286:	2b01      	cmp	r3, #1
 8005288:	dd7f      	ble.n	800538a <_dtoa_r+0x8e2>
 800528a:	f04f 0800 	mov.w	r8, #0
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005294:	6918      	ldr	r0, [r3, #16]
 8005296:	f000 fbbf 	bl	8005a18 <__hi0bits>
 800529a:	f1c0 0020 	rsb	r0, r0, #32
 800529e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a0:	4418      	add	r0, r3
 80052a2:	f010 001f 	ands.w	r0, r0, #31
 80052a6:	f000 8092 	beq.w	80053ce <_dtoa_r+0x926>
 80052aa:	f1c0 0320 	rsb	r3, r0, #32
 80052ae:	2b04      	cmp	r3, #4
 80052b0:	f340 808a 	ble.w	80053c8 <_dtoa_r+0x920>
 80052b4:	f1c0 001c 	rsb	r0, r0, #28
 80052b8:	9b06      	ldr	r3, [sp, #24]
 80052ba:	4407      	add	r7, r0
 80052bc:	4403      	add	r3, r0
 80052be:	9306      	str	r3, [sp, #24]
 80052c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c2:	4403      	add	r3, r0
 80052c4:	9309      	str	r3, [sp, #36]	; 0x24
 80052c6:	9b06      	ldr	r3, [sp, #24]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	dd05      	ble.n	80052d8 <_dtoa_r+0x830>
 80052cc:	4659      	mov	r1, fp
 80052ce:	461a      	mov	r2, r3
 80052d0:	4628      	mov	r0, r5
 80052d2:	f000 fd07 	bl	8005ce4 <__lshift>
 80052d6:	4683      	mov	fp, r0
 80052d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052da:	2b00      	cmp	r3, #0
 80052dc:	dd05      	ble.n	80052ea <_dtoa_r+0x842>
 80052de:	4621      	mov	r1, r4
 80052e0:	461a      	mov	r2, r3
 80052e2:	4628      	mov	r0, r5
 80052e4:	f000 fcfe 	bl	8005ce4 <__lshift>
 80052e8:	4604      	mov	r4, r0
 80052ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d070      	beq.n	80053d2 <_dtoa_r+0x92a>
 80052f0:	4621      	mov	r1, r4
 80052f2:	4658      	mov	r0, fp
 80052f4:	f000 fd66 	bl	8005dc4 <__mcmp>
 80052f8:	2800      	cmp	r0, #0
 80052fa:	da6a      	bge.n	80053d2 <_dtoa_r+0x92a>
 80052fc:	2300      	movs	r3, #0
 80052fe:	4659      	mov	r1, fp
 8005300:	220a      	movs	r2, #10
 8005302:	4628      	mov	r0, r5
 8005304:	f000 fb42 	bl	800598c <__multadd>
 8005308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800530a:	4683      	mov	fp, r0
 800530c:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8194 	beq.w	800563e <_dtoa_r+0xb96>
 8005316:	4631      	mov	r1, r6
 8005318:	2300      	movs	r3, #0
 800531a:	220a      	movs	r2, #10
 800531c:	4628      	mov	r0, r5
 800531e:	f000 fb35 	bl	800598c <__multadd>
 8005322:	f1b9 0f00 	cmp.w	r9, #0
 8005326:	4606      	mov	r6, r0
 8005328:	f300 8093 	bgt.w	8005452 <_dtoa_r+0x9aa>
 800532c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800532e:	2b02      	cmp	r3, #2
 8005330:	dc57      	bgt.n	80053e2 <_dtoa_r+0x93a>
 8005332:	e08e      	b.n	8005452 <_dtoa_r+0x9aa>
 8005334:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005336:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800533a:	e757      	b.n	80051ec <_dtoa_r+0x744>
 800533c:	9b08      	ldr	r3, [sp, #32]
 800533e:	1e5c      	subs	r4, r3, #1
 8005340:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005342:	42a3      	cmp	r3, r4
 8005344:	bfb7      	itett	lt
 8005346:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005348:	1b1c      	subge	r4, r3, r4
 800534a:	1ae2      	sublt	r2, r4, r3
 800534c:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800534e:	bfbe      	ittt	lt
 8005350:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005352:	189b      	addlt	r3, r3, r2
 8005354:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005356:	9b08      	ldr	r3, [sp, #32]
 8005358:	bfb8      	it	lt
 800535a:	2400      	movlt	r4, #0
 800535c:	2b00      	cmp	r3, #0
 800535e:	bfbb      	ittet	lt
 8005360:	9b06      	ldrlt	r3, [sp, #24]
 8005362:	9a08      	ldrlt	r2, [sp, #32]
 8005364:	9f06      	ldrge	r7, [sp, #24]
 8005366:	1a9f      	sublt	r7, r3, r2
 8005368:	bfac      	ite	ge
 800536a:	9b08      	ldrge	r3, [sp, #32]
 800536c:	2300      	movlt	r3, #0
 800536e:	e73f      	b.n	80051f0 <_dtoa_r+0x748>
 8005370:	3fe00000 	.word	0x3fe00000
 8005374:	40240000 	.word	0x40240000
 8005378:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800537a:	9f06      	ldr	r7, [sp, #24]
 800537c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800537e:	e742      	b.n	8005206 <_dtoa_r+0x75e>
 8005380:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005382:	e76b      	b.n	800525c <_dtoa_r+0x7b4>
 8005384:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005386:	2b01      	cmp	r3, #1
 8005388:	dc19      	bgt.n	80053be <_dtoa_r+0x916>
 800538a:	9b04      	ldr	r3, [sp, #16]
 800538c:	b9bb      	cbnz	r3, 80053be <_dtoa_r+0x916>
 800538e:	9b05      	ldr	r3, [sp, #20]
 8005390:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005394:	b99b      	cbnz	r3, 80053be <_dtoa_r+0x916>
 8005396:	9b05      	ldr	r3, [sp, #20]
 8005398:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800539c:	0d1b      	lsrs	r3, r3, #20
 800539e:	051b      	lsls	r3, r3, #20
 80053a0:	b183      	cbz	r3, 80053c4 <_dtoa_r+0x91c>
 80053a2:	f04f 0801 	mov.w	r8, #1
 80053a6:	9b06      	ldr	r3, [sp, #24]
 80053a8:	3301      	adds	r3, #1
 80053aa:	9306      	str	r3, [sp, #24]
 80053ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ae:	3301      	adds	r3, #1
 80053b0:	9309      	str	r3, [sp, #36]	; 0x24
 80053b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f47f af6a 	bne.w	800528e <_dtoa_r+0x7e6>
 80053ba:	2001      	movs	r0, #1
 80053bc:	e76f      	b.n	800529e <_dtoa_r+0x7f6>
 80053be:	f04f 0800 	mov.w	r8, #0
 80053c2:	e7f6      	b.n	80053b2 <_dtoa_r+0x90a>
 80053c4:	4698      	mov	r8, r3
 80053c6:	e7f4      	b.n	80053b2 <_dtoa_r+0x90a>
 80053c8:	f43f af7d 	beq.w	80052c6 <_dtoa_r+0x81e>
 80053cc:	4618      	mov	r0, r3
 80053ce:	301c      	adds	r0, #28
 80053d0:	e772      	b.n	80052b8 <_dtoa_r+0x810>
 80053d2:	9b08      	ldr	r3, [sp, #32]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	dc36      	bgt.n	8005446 <_dtoa_r+0x99e>
 80053d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053da:	2b02      	cmp	r3, #2
 80053dc:	dd33      	ble.n	8005446 <_dtoa_r+0x99e>
 80053de:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80053e2:	f1b9 0f00 	cmp.w	r9, #0
 80053e6:	d10d      	bne.n	8005404 <_dtoa_r+0x95c>
 80053e8:	4621      	mov	r1, r4
 80053ea:	464b      	mov	r3, r9
 80053ec:	2205      	movs	r2, #5
 80053ee:	4628      	mov	r0, r5
 80053f0:	f000 facc 	bl	800598c <__multadd>
 80053f4:	4601      	mov	r1, r0
 80053f6:	4604      	mov	r4, r0
 80053f8:	4658      	mov	r0, fp
 80053fa:	f000 fce3 	bl	8005dc4 <__mcmp>
 80053fe:	2800      	cmp	r0, #0
 8005400:	f73f adb8 	bgt.w	8004f74 <_dtoa_r+0x4cc>
 8005404:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005406:	9f03      	ldr	r7, [sp, #12]
 8005408:	ea6f 0a03 	mvn.w	sl, r3
 800540c:	f04f 0800 	mov.w	r8, #0
 8005410:	4621      	mov	r1, r4
 8005412:	4628      	mov	r0, r5
 8005414:	f000 fa98 	bl	8005948 <_Bfree>
 8005418:	2e00      	cmp	r6, #0
 800541a:	f43f aea7 	beq.w	800516c <_dtoa_r+0x6c4>
 800541e:	f1b8 0f00 	cmp.w	r8, #0
 8005422:	d005      	beq.n	8005430 <_dtoa_r+0x988>
 8005424:	45b0      	cmp	r8, r6
 8005426:	d003      	beq.n	8005430 <_dtoa_r+0x988>
 8005428:	4641      	mov	r1, r8
 800542a:	4628      	mov	r0, r5
 800542c:	f000 fa8c 	bl	8005948 <_Bfree>
 8005430:	4631      	mov	r1, r6
 8005432:	4628      	mov	r0, r5
 8005434:	f000 fa88 	bl	8005948 <_Bfree>
 8005438:	e698      	b.n	800516c <_dtoa_r+0x6c4>
 800543a:	2400      	movs	r4, #0
 800543c:	4626      	mov	r6, r4
 800543e:	e7e1      	b.n	8005404 <_dtoa_r+0x95c>
 8005440:	46c2      	mov	sl, r8
 8005442:	4626      	mov	r6, r4
 8005444:	e596      	b.n	8004f74 <_dtoa_r+0x4cc>
 8005446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005448:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80fd 	beq.w	800564c <_dtoa_r+0xba4>
 8005452:	2f00      	cmp	r7, #0
 8005454:	dd05      	ble.n	8005462 <_dtoa_r+0x9ba>
 8005456:	4631      	mov	r1, r6
 8005458:	463a      	mov	r2, r7
 800545a:	4628      	mov	r0, r5
 800545c:	f000 fc42 	bl	8005ce4 <__lshift>
 8005460:	4606      	mov	r6, r0
 8005462:	f1b8 0f00 	cmp.w	r8, #0
 8005466:	d05c      	beq.n	8005522 <_dtoa_r+0xa7a>
 8005468:	4628      	mov	r0, r5
 800546a:	6871      	ldr	r1, [r6, #4]
 800546c:	f000 fa2c 	bl	80058c8 <_Balloc>
 8005470:	4607      	mov	r7, r0
 8005472:	b928      	cbnz	r0, 8005480 <_dtoa_r+0x9d8>
 8005474:	4602      	mov	r2, r0
 8005476:	f240 21ea 	movw	r1, #746	; 0x2ea
 800547a:	4b7f      	ldr	r3, [pc, #508]	; (8005678 <_dtoa_r+0xbd0>)
 800547c:	f7ff bb28 	b.w	8004ad0 <_dtoa_r+0x28>
 8005480:	6932      	ldr	r2, [r6, #16]
 8005482:	f106 010c 	add.w	r1, r6, #12
 8005486:	3202      	adds	r2, #2
 8005488:	0092      	lsls	r2, r2, #2
 800548a:	300c      	adds	r0, #12
 800548c:	f000 fa0e 	bl	80058ac <memcpy>
 8005490:	2201      	movs	r2, #1
 8005492:	4639      	mov	r1, r7
 8005494:	4628      	mov	r0, r5
 8005496:	f000 fc25 	bl	8005ce4 <__lshift>
 800549a:	46b0      	mov	r8, r6
 800549c:	4606      	mov	r6, r0
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	3301      	adds	r3, #1
 80054a2:	9308      	str	r3, [sp, #32]
 80054a4:	9b03      	ldr	r3, [sp, #12]
 80054a6:	444b      	add	r3, r9
 80054a8:	930a      	str	r3, [sp, #40]	; 0x28
 80054aa:	9b04      	ldr	r3, [sp, #16]
 80054ac:	f003 0301 	and.w	r3, r3, #1
 80054b0:	9309      	str	r3, [sp, #36]	; 0x24
 80054b2:	9b08      	ldr	r3, [sp, #32]
 80054b4:	4621      	mov	r1, r4
 80054b6:	3b01      	subs	r3, #1
 80054b8:	4658      	mov	r0, fp
 80054ba:	9304      	str	r3, [sp, #16]
 80054bc:	f7ff fa66 	bl	800498c <quorem>
 80054c0:	4603      	mov	r3, r0
 80054c2:	4641      	mov	r1, r8
 80054c4:	3330      	adds	r3, #48	; 0x30
 80054c6:	9006      	str	r0, [sp, #24]
 80054c8:	4658      	mov	r0, fp
 80054ca:	930b      	str	r3, [sp, #44]	; 0x2c
 80054cc:	f000 fc7a 	bl	8005dc4 <__mcmp>
 80054d0:	4632      	mov	r2, r6
 80054d2:	4681      	mov	r9, r0
 80054d4:	4621      	mov	r1, r4
 80054d6:	4628      	mov	r0, r5
 80054d8:	f000 fc90 	bl	8005dfc <__mdiff>
 80054dc:	68c2      	ldr	r2, [r0, #12]
 80054de:	4607      	mov	r7, r0
 80054e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054e2:	bb02      	cbnz	r2, 8005526 <_dtoa_r+0xa7e>
 80054e4:	4601      	mov	r1, r0
 80054e6:	4658      	mov	r0, fp
 80054e8:	f000 fc6c 	bl	8005dc4 <__mcmp>
 80054ec:	4602      	mov	r2, r0
 80054ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054f0:	4639      	mov	r1, r7
 80054f2:	4628      	mov	r0, r5
 80054f4:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80054f8:	f000 fa26 	bl	8005948 <_Bfree>
 80054fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80054fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005500:	9f08      	ldr	r7, [sp, #32]
 8005502:	ea43 0102 	orr.w	r1, r3, r2
 8005506:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005508:	430b      	orrs	r3, r1
 800550a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800550c:	d10d      	bne.n	800552a <_dtoa_r+0xa82>
 800550e:	2b39      	cmp	r3, #57	; 0x39
 8005510:	d029      	beq.n	8005566 <_dtoa_r+0xabe>
 8005512:	f1b9 0f00 	cmp.w	r9, #0
 8005516:	dd01      	ble.n	800551c <_dtoa_r+0xa74>
 8005518:	9b06      	ldr	r3, [sp, #24]
 800551a:	3331      	adds	r3, #49	; 0x31
 800551c:	9a04      	ldr	r2, [sp, #16]
 800551e:	7013      	strb	r3, [r2, #0]
 8005520:	e776      	b.n	8005410 <_dtoa_r+0x968>
 8005522:	4630      	mov	r0, r6
 8005524:	e7b9      	b.n	800549a <_dtoa_r+0x9f2>
 8005526:	2201      	movs	r2, #1
 8005528:	e7e2      	b.n	80054f0 <_dtoa_r+0xa48>
 800552a:	f1b9 0f00 	cmp.w	r9, #0
 800552e:	db06      	blt.n	800553e <_dtoa_r+0xa96>
 8005530:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005532:	ea41 0909 	orr.w	r9, r1, r9
 8005536:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005538:	ea59 0101 	orrs.w	r1, r9, r1
 800553c:	d120      	bne.n	8005580 <_dtoa_r+0xad8>
 800553e:	2a00      	cmp	r2, #0
 8005540:	ddec      	ble.n	800551c <_dtoa_r+0xa74>
 8005542:	4659      	mov	r1, fp
 8005544:	2201      	movs	r2, #1
 8005546:	4628      	mov	r0, r5
 8005548:	9308      	str	r3, [sp, #32]
 800554a:	f000 fbcb 	bl	8005ce4 <__lshift>
 800554e:	4621      	mov	r1, r4
 8005550:	4683      	mov	fp, r0
 8005552:	f000 fc37 	bl	8005dc4 <__mcmp>
 8005556:	2800      	cmp	r0, #0
 8005558:	9b08      	ldr	r3, [sp, #32]
 800555a:	dc02      	bgt.n	8005562 <_dtoa_r+0xaba>
 800555c:	d1de      	bne.n	800551c <_dtoa_r+0xa74>
 800555e:	07da      	lsls	r2, r3, #31
 8005560:	d5dc      	bpl.n	800551c <_dtoa_r+0xa74>
 8005562:	2b39      	cmp	r3, #57	; 0x39
 8005564:	d1d8      	bne.n	8005518 <_dtoa_r+0xa70>
 8005566:	2339      	movs	r3, #57	; 0x39
 8005568:	9a04      	ldr	r2, [sp, #16]
 800556a:	7013      	strb	r3, [r2, #0]
 800556c:	463b      	mov	r3, r7
 800556e:	461f      	mov	r7, r3
 8005570:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005574:	3b01      	subs	r3, #1
 8005576:	2a39      	cmp	r2, #57	; 0x39
 8005578:	d050      	beq.n	800561c <_dtoa_r+0xb74>
 800557a:	3201      	adds	r2, #1
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	e747      	b.n	8005410 <_dtoa_r+0x968>
 8005580:	2a00      	cmp	r2, #0
 8005582:	dd03      	ble.n	800558c <_dtoa_r+0xae4>
 8005584:	2b39      	cmp	r3, #57	; 0x39
 8005586:	d0ee      	beq.n	8005566 <_dtoa_r+0xabe>
 8005588:	3301      	adds	r3, #1
 800558a:	e7c7      	b.n	800551c <_dtoa_r+0xa74>
 800558c:	9a08      	ldr	r2, [sp, #32]
 800558e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005590:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005594:	428a      	cmp	r2, r1
 8005596:	d02a      	beq.n	80055ee <_dtoa_r+0xb46>
 8005598:	4659      	mov	r1, fp
 800559a:	2300      	movs	r3, #0
 800559c:	220a      	movs	r2, #10
 800559e:	4628      	mov	r0, r5
 80055a0:	f000 f9f4 	bl	800598c <__multadd>
 80055a4:	45b0      	cmp	r8, r6
 80055a6:	4683      	mov	fp, r0
 80055a8:	f04f 0300 	mov.w	r3, #0
 80055ac:	f04f 020a 	mov.w	r2, #10
 80055b0:	4641      	mov	r1, r8
 80055b2:	4628      	mov	r0, r5
 80055b4:	d107      	bne.n	80055c6 <_dtoa_r+0xb1e>
 80055b6:	f000 f9e9 	bl	800598c <__multadd>
 80055ba:	4680      	mov	r8, r0
 80055bc:	4606      	mov	r6, r0
 80055be:	9b08      	ldr	r3, [sp, #32]
 80055c0:	3301      	adds	r3, #1
 80055c2:	9308      	str	r3, [sp, #32]
 80055c4:	e775      	b.n	80054b2 <_dtoa_r+0xa0a>
 80055c6:	f000 f9e1 	bl	800598c <__multadd>
 80055ca:	4631      	mov	r1, r6
 80055cc:	4680      	mov	r8, r0
 80055ce:	2300      	movs	r3, #0
 80055d0:	220a      	movs	r2, #10
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f9da 	bl	800598c <__multadd>
 80055d8:	4606      	mov	r6, r0
 80055da:	e7f0      	b.n	80055be <_dtoa_r+0xb16>
 80055dc:	f1b9 0f00 	cmp.w	r9, #0
 80055e0:	bfcc      	ite	gt
 80055e2:	464f      	movgt	r7, r9
 80055e4:	2701      	movle	r7, #1
 80055e6:	f04f 0800 	mov.w	r8, #0
 80055ea:	9a03      	ldr	r2, [sp, #12]
 80055ec:	4417      	add	r7, r2
 80055ee:	4659      	mov	r1, fp
 80055f0:	2201      	movs	r2, #1
 80055f2:	4628      	mov	r0, r5
 80055f4:	9308      	str	r3, [sp, #32]
 80055f6:	f000 fb75 	bl	8005ce4 <__lshift>
 80055fa:	4621      	mov	r1, r4
 80055fc:	4683      	mov	fp, r0
 80055fe:	f000 fbe1 	bl	8005dc4 <__mcmp>
 8005602:	2800      	cmp	r0, #0
 8005604:	dcb2      	bgt.n	800556c <_dtoa_r+0xac4>
 8005606:	d102      	bne.n	800560e <_dtoa_r+0xb66>
 8005608:	9b08      	ldr	r3, [sp, #32]
 800560a:	07db      	lsls	r3, r3, #31
 800560c:	d4ae      	bmi.n	800556c <_dtoa_r+0xac4>
 800560e:	463b      	mov	r3, r7
 8005610:	461f      	mov	r7, r3
 8005612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005616:	2a30      	cmp	r2, #48	; 0x30
 8005618:	d0fa      	beq.n	8005610 <_dtoa_r+0xb68>
 800561a:	e6f9      	b.n	8005410 <_dtoa_r+0x968>
 800561c:	9a03      	ldr	r2, [sp, #12]
 800561e:	429a      	cmp	r2, r3
 8005620:	d1a5      	bne.n	800556e <_dtoa_r+0xac6>
 8005622:	2331      	movs	r3, #49	; 0x31
 8005624:	f10a 0a01 	add.w	sl, sl, #1
 8005628:	e779      	b.n	800551e <_dtoa_r+0xa76>
 800562a:	4b14      	ldr	r3, [pc, #80]	; (800567c <_dtoa_r+0xbd4>)
 800562c:	f7ff baa8 	b.w	8004b80 <_dtoa_r+0xd8>
 8005630:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005632:	2b00      	cmp	r3, #0
 8005634:	f47f aa81 	bne.w	8004b3a <_dtoa_r+0x92>
 8005638:	4b11      	ldr	r3, [pc, #68]	; (8005680 <_dtoa_r+0xbd8>)
 800563a:	f7ff baa1 	b.w	8004b80 <_dtoa_r+0xd8>
 800563e:	f1b9 0f00 	cmp.w	r9, #0
 8005642:	dc03      	bgt.n	800564c <_dtoa_r+0xba4>
 8005644:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005646:	2b02      	cmp	r3, #2
 8005648:	f73f aecb 	bgt.w	80053e2 <_dtoa_r+0x93a>
 800564c:	9f03      	ldr	r7, [sp, #12]
 800564e:	4621      	mov	r1, r4
 8005650:	4658      	mov	r0, fp
 8005652:	f7ff f99b 	bl	800498c <quorem>
 8005656:	9a03      	ldr	r2, [sp, #12]
 8005658:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800565c:	f807 3b01 	strb.w	r3, [r7], #1
 8005660:	1aba      	subs	r2, r7, r2
 8005662:	4591      	cmp	r9, r2
 8005664:	ddba      	ble.n	80055dc <_dtoa_r+0xb34>
 8005666:	4659      	mov	r1, fp
 8005668:	2300      	movs	r3, #0
 800566a:	220a      	movs	r2, #10
 800566c:	4628      	mov	r0, r5
 800566e:	f000 f98d 	bl	800598c <__multadd>
 8005672:	4683      	mov	fp, r0
 8005674:	e7eb      	b.n	800564e <_dtoa_r+0xba6>
 8005676:	bf00      	nop
 8005678:	08006beb 	.word	0x08006beb
 800567c:	08006b48 	.word	0x08006b48
 8005680:	08006b6c 	.word	0x08006b6c

08005684 <std>:
 8005684:	2300      	movs	r3, #0
 8005686:	b510      	push	{r4, lr}
 8005688:	4604      	mov	r4, r0
 800568a:	e9c0 3300 	strd	r3, r3, [r0]
 800568e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005692:	6083      	str	r3, [r0, #8]
 8005694:	8181      	strh	r1, [r0, #12]
 8005696:	6643      	str	r3, [r0, #100]	; 0x64
 8005698:	81c2      	strh	r2, [r0, #14]
 800569a:	6183      	str	r3, [r0, #24]
 800569c:	4619      	mov	r1, r3
 800569e:	2208      	movs	r2, #8
 80056a0:	305c      	adds	r0, #92	; 0x5c
 80056a2:	f7fe fcf3 	bl	800408c <memset>
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <std+0x38>)
 80056a8:	6224      	str	r4, [r4, #32]
 80056aa:	6263      	str	r3, [r4, #36]	; 0x24
 80056ac:	4b04      	ldr	r3, [pc, #16]	; (80056c0 <std+0x3c>)
 80056ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80056b0:	4b04      	ldr	r3, [pc, #16]	; (80056c4 <std+0x40>)
 80056b2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80056b4:	4b04      	ldr	r3, [pc, #16]	; (80056c8 <std+0x44>)
 80056b6:	6323      	str	r3, [r4, #48]	; 0x30
 80056b8:	bd10      	pop	{r4, pc}
 80056ba:	bf00      	nop
 80056bc:	0800647d 	.word	0x0800647d
 80056c0:	0800649f 	.word	0x0800649f
 80056c4:	080064d7 	.word	0x080064d7
 80056c8:	080064fb 	.word	0x080064fb

080056cc <_cleanup_r>:
 80056cc:	4901      	ldr	r1, [pc, #4]	; (80056d4 <_cleanup_r+0x8>)
 80056ce:	f000 b8af 	b.w	8005830 <_fwalk_reent>
 80056d2:	bf00      	nop
 80056d4:	08006809 	.word	0x08006809

080056d8 <__sfmoreglue>:
 80056d8:	2268      	movs	r2, #104	; 0x68
 80056da:	b570      	push	{r4, r5, r6, lr}
 80056dc:	1e4d      	subs	r5, r1, #1
 80056de:	4355      	muls	r5, r2
 80056e0:	460e      	mov	r6, r1
 80056e2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80056e6:	f000 fced 	bl	80060c4 <_malloc_r>
 80056ea:	4604      	mov	r4, r0
 80056ec:	b140      	cbz	r0, 8005700 <__sfmoreglue+0x28>
 80056ee:	2100      	movs	r1, #0
 80056f0:	e9c0 1600 	strd	r1, r6, [r0]
 80056f4:	300c      	adds	r0, #12
 80056f6:	60a0      	str	r0, [r4, #8]
 80056f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056fc:	f7fe fcc6 	bl	800408c <memset>
 8005700:	4620      	mov	r0, r4
 8005702:	bd70      	pop	{r4, r5, r6, pc}

08005704 <__sfp_lock_acquire>:
 8005704:	4801      	ldr	r0, [pc, #4]	; (800570c <__sfp_lock_acquire+0x8>)
 8005706:	f000 b8b8 	b.w	800587a <__retarget_lock_acquire_recursive>
 800570a:	bf00      	nop
 800570c:	20000365 	.word	0x20000365

08005710 <__sfp_lock_release>:
 8005710:	4801      	ldr	r0, [pc, #4]	; (8005718 <__sfp_lock_release+0x8>)
 8005712:	f000 b8b3 	b.w	800587c <__retarget_lock_release_recursive>
 8005716:	bf00      	nop
 8005718:	20000365 	.word	0x20000365

0800571c <__sinit_lock_acquire>:
 800571c:	4801      	ldr	r0, [pc, #4]	; (8005724 <__sinit_lock_acquire+0x8>)
 800571e:	f000 b8ac 	b.w	800587a <__retarget_lock_acquire_recursive>
 8005722:	bf00      	nop
 8005724:	20000366 	.word	0x20000366

08005728 <__sinit_lock_release>:
 8005728:	4801      	ldr	r0, [pc, #4]	; (8005730 <__sinit_lock_release+0x8>)
 800572a:	f000 b8a7 	b.w	800587c <__retarget_lock_release_recursive>
 800572e:	bf00      	nop
 8005730:	20000366 	.word	0x20000366

08005734 <__sinit>:
 8005734:	b510      	push	{r4, lr}
 8005736:	4604      	mov	r4, r0
 8005738:	f7ff fff0 	bl	800571c <__sinit_lock_acquire>
 800573c:	69a3      	ldr	r3, [r4, #24]
 800573e:	b11b      	cbz	r3, 8005748 <__sinit+0x14>
 8005740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005744:	f7ff bff0 	b.w	8005728 <__sinit_lock_release>
 8005748:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800574c:	6523      	str	r3, [r4, #80]	; 0x50
 800574e:	4b13      	ldr	r3, [pc, #76]	; (800579c <__sinit+0x68>)
 8005750:	4a13      	ldr	r2, [pc, #76]	; (80057a0 <__sinit+0x6c>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	62a2      	str	r2, [r4, #40]	; 0x28
 8005756:	42a3      	cmp	r3, r4
 8005758:	bf08      	it	eq
 800575a:	2301      	moveq	r3, #1
 800575c:	4620      	mov	r0, r4
 800575e:	bf08      	it	eq
 8005760:	61a3      	streq	r3, [r4, #24]
 8005762:	f000 f81f 	bl	80057a4 <__sfp>
 8005766:	6060      	str	r0, [r4, #4]
 8005768:	4620      	mov	r0, r4
 800576a:	f000 f81b 	bl	80057a4 <__sfp>
 800576e:	60a0      	str	r0, [r4, #8]
 8005770:	4620      	mov	r0, r4
 8005772:	f000 f817 	bl	80057a4 <__sfp>
 8005776:	2200      	movs	r2, #0
 8005778:	2104      	movs	r1, #4
 800577a:	60e0      	str	r0, [r4, #12]
 800577c:	6860      	ldr	r0, [r4, #4]
 800577e:	f7ff ff81 	bl	8005684 <std>
 8005782:	2201      	movs	r2, #1
 8005784:	2109      	movs	r1, #9
 8005786:	68a0      	ldr	r0, [r4, #8]
 8005788:	f7ff ff7c 	bl	8005684 <std>
 800578c:	2202      	movs	r2, #2
 800578e:	2112      	movs	r1, #18
 8005790:	68e0      	ldr	r0, [r4, #12]
 8005792:	f7ff ff77 	bl	8005684 <std>
 8005796:	2301      	movs	r3, #1
 8005798:	61a3      	str	r3, [r4, #24]
 800579a:	e7d1      	b.n	8005740 <__sinit+0xc>
 800579c:	08006b34 	.word	0x08006b34
 80057a0:	080056cd 	.word	0x080056cd

080057a4 <__sfp>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	4607      	mov	r7, r0
 80057a8:	f7ff ffac 	bl	8005704 <__sfp_lock_acquire>
 80057ac:	4b1e      	ldr	r3, [pc, #120]	; (8005828 <__sfp+0x84>)
 80057ae:	681e      	ldr	r6, [r3, #0]
 80057b0:	69b3      	ldr	r3, [r6, #24]
 80057b2:	b913      	cbnz	r3, 80057ba <__sfp+0x16>
 80057b4:	4630      	mov	r0, r6
 80057b6:	f7ff ffbd 	bl	8005734 <__sinit>
 80057ba:	3648      	adds	r6, #72	; 0x48
 80057bc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	d503      	bpl.n	80057cc <__sfp+0x28>
 80057c4:	6833      	ldr	r3, [r6, #0]
 80057c6:	b30b      	cbz	r3, 800580c <__sfp+0x68>
 80057c8:	6836      	ldr	r6, [r6, #0]
 80057ca:	e7f7      	b.n	80057bc <__sfp+0x18>
 80057cc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80057d0:	b9d5      	cbnz	r5, 8005808 <__sfp+0x64>
 80057d2:	4b16      	ldr	r3, [pc, #88]	; (800582c <__sfp+0x88>)
 80057d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80057d8:	60e3      	str	r3, [r4, #12]
 80057da:	6665      	str	r5, [r4, #100]	; 0x64
 80057dc:	f000 f84c 	bl	8005878 <__retarget_lock_init_recursive>
 80057e0:	f7ff ff96 	bl	8005710 <__sfp_lock_release>
 80057e4:	2208      	movs	r2, #8
 80057e6:	4629      	mov	r1, r5
 80057e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80057ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80057f0:	6025      	str	r5, [r4, #0]
 80057f2:	61a5      	str	r5, [r4, #24]
 80057f4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057f8:	f7fe fc48 	bl	800408c <memset>
 80057fc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005800:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005804:	4620      	mov	r0, r4
 8005806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005808:	3468      	adds	r4, #104	; 0x68
 800580a:	e7d9      	b.n	80057c0 <__sfp+0x1c>
 800580c:	2104      	movs	r1, #4
 800580e:	4638      	mov	r0, r7
 8005810:	f7ff ff62 	bl	80056d8 <__sfmoreglue>
 8005814:	4604      	mov	r4, r0
 8005816:	6030      	str	r0, [r6, #0]
 8005818:	2800      	cmp	r0, #0
 800581a:	d1d5      	bne.n	80057c8 <__sfp+0x24>
 800581c:	f7ff ff78 	bl	8005710 <__sfp_lock_release>
 8005820:	230c      	movs	r3, #12
 8005822:	603b      	str	r3, [r7, #0]
 8005824:	e7ee      	b.n	8005804 <__sfp+0x60>
 8005826:	bf00      	nop
 8005828:	08006b34 	.word	0x08006b34
 800582c:	ffff0001 	.word	0xffff0001

08005830 <_fwalk_reent>:
 8005830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005834:	4606      	mov	r6, r0
 8005836:	4688      	mov	r8, r1
 8005838:	2700      	movs	r7, #0
 800583a:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800583e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005842:	f1b9 0901 	subs.w	r9, r9, #1
 8005846:	d505      	bpl.n	8005854 <_fwalk_reent+0x24>
 8005848:	6824      	ldr	r4, [r4, #0]
 800584a:	2c00      	cmp	r4, #0
 800584c:	d1f7      	bne.n	800583e <_fwalk_reent+0xe>
 800584e:	4638      	mov	r0, r7
 8005850:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005854:	89ab      	ldrh	r3, [r5, #12]
 8005856:	2b01      	cmp	r3, #1
 8005858:	d907      	bls.n	800586a <_fwalk_reent+0x3a>
 800585a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800585e:	3301      	adds	r3, #1
 8005860:	d003      	beq.n	800586a <_fwalk_reent+0x3a>
 8005862:	4629      	mov	r1, r5
 8005864:	4630      	mov	r0, r6
 8005866:	47c0      	blx	r8
 8005868:	4307      	orrs	r7, r0
 800586a:	3568      	adds	r5, #104	; 0x68
 800586c:	e7e9      	b.n	8005842 <_fwalk_reent+0x12>
	...

08005870 <_localeconv_r>:
 8005870:	4800      	ldr	r0, [pc, #0]	; (8005874 <_localeconv_r+0x4>)
 8005872:	4770      	bx	lr
 8005874:	20000168 	.word	0x20000168

08005878 <__retarget_lock_init_recursive>:
 8005878:	4770      	bx	lr

0800587a <__retarget_lock_acquire_recursive>:
 800587a:	4770      	bx	lr

0800587c <__retarget_lock_release_recursive>:
 800587c:	4770      	bx	lr
	...

08005880 <malloc>:
 8005880:	4b02      	ldr	r3, [pc, #8]	; (800588c <malloc+0xc>)
 8005882:	4601      	mov	r1, r0
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	f000 bc1d 	b.w	80060c4 <_malloc_r>
 800588a:	bf00      	nop
 800588c:	20000014 	.word	0x20000014

08005890 <memchr>:
 8005890:	4603      	mov	r3, r0
 8005892:	b510      	push	{r4, lr}
 8005894:	b2c9      	uxtb	r1, r1
 8005896:	4402      	add	r2, r0
 8005898:	4293      	cmp	r3, r2
 800589a:	4618      	mov	r0, r3
 800589c:	d101      	bne.n	80058a2 <memchr+0x12>
 800589e:	2000      	movs	r0, #0
 80058a0:	e003      	b.n	80058aa <memchr+0x1a>
 80058a2:	7804      	ldrb	r4, [r0, #0]
 80058a4:	3301      	adds	r3, #1
 80058a6:	428c      	cmp	r4, r1
 80058a8:	d1f6      	bne.n	8005898 <memchr+0x8>
 80058aa:	bd10      	pop	{r4, pc}

080058ac <memcpy>:
 80058ac:	440a      	add	r2, r1
 80058ae:	4291      	cmp	r1, r2
 80058b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80058b4:	d100      	bne.n	80058b8 <memcpy+0xc>
 80058b6:	4770      	bx	lr
 80058b8:	b510      	push	{r4, lr}
 80058ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80058be:	4291      	cmp	r1, r2
 80058c0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80058c4:	d1f9      	bne.n	80058ba <memcpy+0xe>
 80058c6:	bd10      	pop	{r4, pc}

080058c8 <_Balloc>:
 80058c8:	b570      	push	{r4, r5, r6, lr}
 80058ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80058cc:	4604      	mov	r4, r0
 80058ce:	460d      	mov	r5, r1
 80058d0:	b976      	cbnz	r6, 80058f0 <_Balloc+0x28>
 80058d2:	2010      	movs	r0, #16
 80058d4:	f7ff ffd4 	bl	8005880 <malloc>
 80058d8:	4602      	mov	r2, r0
 80058da:	6260      	str	r0, [r4, #36]	; 0x24
 80058dc:	b920      	cbnz	r0, 80058e8 <_Balloc+0x20>
 80058de:	2166      	movs	r1, #102	; 0x66
 80058e0:	4b17      	ldr	r3, [pc, #92]	; (8005940 <_Balloc+0x78>)
 80058e2:	4818      	ldr	r0, [pc, #96]	; (8005944 <_Balloc+0x7c>)
 80058e4:	f000 fee0 	bl	80066a8 <__assert_func>
 80058e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80058ec:	6006      	str	r6, [r0, #0]
 80058ee:	60c6      	str	r6, [r0, #12]
 80058f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80058f2:	68f3      	ldr	r3, [r6, #12]
 80058f4:	b183      	cbz	r3, 8005918 <_Balloc+0x50>
 80058f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80058f8:	68db      	ldr	r3, [r3, #12]
 80058fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80058fe:	b9b8      	cbnz	r0, 8005930 <_Balloc+0x68>
 8005900:	2101      	movs	r1, #1
 8005902:	fa01 f605 	lsl.w	r6, r1, r5
 8005906:	1d72      	adds	r2, r6, #5
 8005908:	4620      	mov	r0, r4
 800590a:	0092      	lsls	r2, r2, #2
 800590c:	f000 fb5e 	bl	8005fcc <_calloc_r>
 8005910:	b160      	cbz	r0, 800592c <_Balloc+0x64>
 8005912:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005916:	e00e      	b.n	8005936 <_Balloc+0x6e>
 8005918:	2221      	movs	r2, #33	; 0x21
 800591a:	2104      	movs	r1, #4
 800591c:	4620      	mov	r0, r4
 800591e:	f000 fb55 	bl	8005fcc <_calloc_r>
 8005922:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005924:	60f0      	str	r0, [r6, #12]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d1e4      	bne.n	80058f6 <_Balloc+0x2e>
 800592c:	2000      	movs	r0, #0
 800592e:	bd70      	pop	{r4, r5, r6, pc}
 8005930:	6802      	ldr	r2, [r0, #0]
 8005932:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005936:	2300      	movs	r3, #0
 8005938:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800593c:	e7f7      	b.n	800592e <_Balloc+0x66>
 800593e:	bf00      	nop
 8005940:	08006b79 	.word	0x08006b79
 8005944:	08006c5c 	.word	0x08006c5c

08005948 <_Bfree>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800594c:	4605      	mov	r5, r0
 800594e:	460c      	mov	r4, r1
 8005950:	b976      	cbnz	r6, 8005970 <_Bfree+0x28>
 8005952:	2010      	movs	r0, #16
 8005954:	f7ff ff94 	bl	8005880 <malloc>
 8005958:	4602      	mov	r2, r0
 800595a:	6268      	str	r0, [r5, #36]	; 0x24
 800595c:	b920      	cbnz	r0, 8005968 <_Bfree+0x20>
 800595e:	218a      	movs	r1, #138	; 0x8a
 8005960:	4b08      	ldr	r3, [pc, #32]	; (8005984 <_Bfree+0x3c>)
 8005962:	4809      	ldr	r0, [pc, #36]	; (8005988 <_Bfree+0x40>)
 8005964:	f000 fea0 	bl	80066a8 <__assert_func>
 8005968:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800596c:	6006      	str	r6, [r0, #0]
 800596e:	60c6      	str	r6, [r0, #12]
 8005970:	b13c      	cbz	r4, 8005982 <_Bfree+0x3a>
 8005972:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005974:	6862      	ldr	r2, [r4, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800597c:	6021      	str	r1, [r4, #0]
 800597e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	08006b79 	.word	0x08006b79
 8005988:	08006c5c 	.word	0x08006c5c

0800598c <__multadd>:
 800598c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005990:	4607      	mov	r7, r0
 8005992:	460c      	mov	r4, r1
 8005994:	461e      	mov	r6, r3
 8005996:	2000      	movs	r0, #0
 8005998:	690d      	ldr	r5, [r1, #16]
 800599a:	f101 0c14 	add.w	ip, r1, #20
 800599e:	f8dc 3000 	ldr.w	r3, [ip]
 80059a2:	3001      	adds	r0, #1
 80059a4:	b299      	uxth	r1, r3
 80059a6:	fb02 6101 	mla	r1, r2, r1, r6
 80059aa:	0c1e      	lsrs	r6, r3, #16
 80059ac:	0c0b      	lsrs	r3, r1, #16
 80059ae:	fb02 3306 	mla	r3, r2, r6, r3
 80059b2:	b289      	uxth	r1, r1
 80059b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80059b8:	4285      	cmp	r5, r0
 80059ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80059be:	f84c 1b04 	str.w	r1, [ip], #4
 80059c2:	dcec      	bgt.n	800599e <__multadd+0x12>
 80059c4:	b30e      	cbz	r6, 8005a0a <__multadd+0x7e>
 80059c6:	68a3      	ldr	r3, [r4, #8]
 80059c8:	42ab      	cmp	r3, r5
 80059ca:	dc19      	bgt.n	8005a00 <__multadd+0x74>
 80059cc:	6861      	ldr	r1, [r4, #4]
 80059ce:	4638      	mov	r0, r7
 80059d0:	3101      	adds	r1, #1
 80059d2:	f7ff ff79 	bl	80058c8 <_Balloc>
 80059d6:	4680      	mov	r8, r0
 80059d8:	b928      	cbnz	r0, 80059e6 <__multadd+0x5a>
 80059da:	4602      	mov	r2, r0
 80059dc:	21b5      	movs	r1, #181	; 0xb5
 80059de:	4b0c      	ldr	r3, [pc, #48]	; (8005a10 <__multadd+0x84>)
 80059e0:	480c      	ldr	r0, [pc, #48]	; (8005a14 <__multadd+0x88>)
 80059e2:	f000 fe61 	bl	80066a8 <__assert_func>
 80059e6:	6922      	ldr	r2, [r4, #16]
 80059e8:	f104 010c 	add.w	r1, r4, #12
 80059ec:	3202      	adds	r2, #2
 80059ee:	0092      	lsls	r2, r2, #2
 80059f0:	300c      	adds	r0, #12
 80059f2:	f7ff ff5b 	bl	80058ac <memcpy>
 80059f6:	4621      	mov	r1, r4
 80059f8:	4638      	mov	r0, r7
 80059fa:	f7ff ffa5 	bl	8005948 <_Bfree>
 80059fe:	4644      	mov	r4, r8
 8005a00:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a04:	3501      	adds	r5, #1
 8005a06:	615e      	str	r6, [r3, #20]
 8005a08:	6125      	str	r5, [r4, #16]
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a10:	08006beb 	.word	0x08006beb
 8005a14:	08006c5c 	.word	0x08006c5c

08005a18 <__hi0bits>:
 8005a18:	0c02      	lsrs	r2, r0, #16
 8005a1a:	0412      	lsls	r2, r2, #16
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	b9ca      	cbnz	r2, 8005a54 <__hi0bits+0x3c>
 8005a20:	0403      	lsls	r3, r0, #16
 8005a22:	2010      	movs	r0, #16
 8005a24:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a28:	bf04      	itt	eq
 8005a2a:	021b      	lsleq	r3, r3, #8
 8005a2c:	3008      	addeq	r0, #8
 8005a2e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a32:	bf04      	itt	eq
 8005a34:	011b      	lsleq	r3, r3, #4
 8005a36:	3004      	addeq	r0, #4
 8005a38:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a3c:	bf04      	itt	eq
 8005a3e:	009b      	lsleq	r3, r3, #2
 8005a40:	3002      	addeq	r0, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	db05      	blt.n	8005a52 <__hi0bits+0x3a>
 8005a46:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005a4a:	f100 0001 	add.w	r0, r0, #1
 8005a4e:	bf08      	it	eq
 8005a50:	2020      	moveq	r0, #32
 8005a52:	4770      	bx	lr
 8005a54:	2000      	movs	r0, #0
 8005a56:	e7e5      	b.n	8005a24 <__hi0bits+0xc>

08005a58 <__lo0bits>:
 8005a58:	6803      	ldr	r3, [r0, #0]
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	f013 0007 	ands.w	r0, r3, #7
 8005a60:	d00b      	beq.n	8005a7a <__lo0bits+0x22>
 8005a62:	07d9      	lsls	r1, r3, #31
 8005a64:	d421      	bmi.n	8005aaa <__lo0bits+0x52>
 8005a66:	0798      	lsls	r0, r3, #30
 8005a68:	bf49      	itett	mi
 8005a6a:	085b      	lsrmi	r3, r3, #1
 8005a6c:	089b      	lsrpl	r3, r3, #2
 8005a6e:	2001      	movmi	r0, #1
 8005a70:	6013      	strmi	r3, [r2, #0]
 8005a72:	bf5c      	itt	pl
 8005a74:	2002      	movpl	r0, #2
 8005a76:	6013      	strpl	r3, [r2, #0]
 8005a78:	4770      	bx	lr
 8005a7a:	b299      	uxth	r1, r3
 8005a7c:	b909      	cbnz	r1, 8005a82 <__lo0bits+0x2a>
 8005a7e:	2010      	movs	r0, #16
 8005a80:	0c1b      	lsrs	r3, r3, #16
 8005a82:	b2d9      	uxtb	r1, r3
 8005a84:	b909      	cbnz	r1, 8005a8a <__lo0bits+0x32>
 8005a86:	3008      	adds	r0, #8
 8005a88:	0a1b      	lsrs	r3, r3, #8
 8005a8a:	0719      	lsls	r1, r3, #28
 8005a8c:	bf04      	itt	eq
 8005a8e:	091b      	lsreq	r3, r3, #4
 8005a90:	3004      	addeq	r0, #4
 8005a92:	0799      	lsls	r1, r3, #30
 8005a94:	bf04      	itt	eq
 8005a96:	089b      	lsreq	r3, r3, #2
 8005a98:	3002      	addeq	r0, #2
 8005a9a:	07d9      	lsls	r1, r3, #31
 8005a9c:	d403      	bmi.n	8005aa6 <__lo0bits+0x4e>
 8005a9e:	085b      	lsrs	r3, r3, #1
 8005aa0:	f100 0001 	add.w	r0, r0, #1
 8005aa4:	d003      	beq.n	8005aae <__lo0bits+0x56>
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	4770      	bx	lr
 8005aaa:	2000      	movs	r0, #0
 8005aac:	4770      	bx	lr
 8005aae:	2020      	movs	r0, #32
 8005ab0:	4770      	bx	lr
	...

08005ab4 <__i2b>:
 8005ab4:	b510      	push	{r4, lr}
 8005ab6:	460c      	mov	r4, r1
 8005ab8:	2101      	movs	r1, #1
 8005aba:	f7ff ff05 	bl	80058c8 <_Balloc>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	b928      	cbnz	r0, 8005ace <__i2b+0x1a>
 8005ac2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005ac6:	4b04      	ldr	r3, [pc, #16]	; (8005ad8 <__i2b+0x24>)
 8005ac8:	4804      	ldr	r0, [pc, #16]	; (8005adc <__i2b+0x28>)
 8005aca:	f000 fded 	bl	80066a8 <__assert_func>
 8005ace:	2301      	movs	r3, #1
 8005ad0:	6144      	str	r4, [r0, #20]
 8005ad2:	6103      	str	r3, [r0, #16]
 8005ad4:	bd10      	pop	{r4, pc}
 8005ad6:	bf00      	nop
 8005ad8:	08006beb 	.word	0x08006beb
 8005adc:	08006c5c 	.word	0x08006c5c

08005ae0 <__multiply>:
 8005ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ae4:	4691      	mov	r9, r2
 8005ae6:	690a      	ldr	r2, [r1, #16]
 8005ae8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005aec:	460c      	mov	r4, r1
 8005aee:	429a      	cmp	r2, r3
 8005af0:	bfbe      	ittt	lt
 8005af2:	460b      	movlt	r3, r1
 8005af4:	464c      	movlt	r4, r9
 8005af6:	4699      	movlt	r9, r3
 8005af8:	6927      	ldr	r7, [r4, #16]
 8005afa:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005afe:	68a3      	ldr	r3, [r4, #8]
 8005b00:	6861      	ldr	r1, [r4, #4]
 8005b02:	eb07 060a 	add.w	r6, r7, sl
 8005b06:	42b3      	cmp	r3, r6
 8005b08:	b085      	sub	sp, #20
 8005b0a:	bfb8      	it	lt
 8005b0c:	3101      	addlt	r1, #1
 8005b0e:	f7ff fedb 	bl	80058c8 <_Balloc>
 8005b12:	b930      	cbnz	r0, 8005b22 <__multiply+0x42>
 8005b14:	4602      	mov	r2, r0
 8005b16:	f240 115d 	movw	r1, #349	; 0x15d
 8005b1a:	4b43      	ldr	r3, [pc, #268]	; (8005c28 <__multiply+0x148>)
 8005b1c:	4843      	ldr	r0, [pc, #268]	; (8005c2c <__multiply+0x14c>)
 8005b1e:	f000 fdc3 	bl	80066a8 <__assert_func>
 8005b22:	f100 0514 	add.w	r5, r0, #20
 8005b26:	462b      	mov	r3, r5
 8005b28:	2200      	movs	r2, #0
 8005b2a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b2e:	4543      	cmp	r3, r8
 8005b30:	d321      	bcc.n	8005b76 <__multiply+0x96>
 8005b32:	f104 0314 	add.w	r3, r4, #20
 8005b36:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b3a:	f109 0314 	add.w	r3, r9, #20
 8005b3e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b42:	9202      	str	r2, [sp, #8]
 8005b44:	1b3a      	subs	r2, r7, r4
 8005b46:	3a15      	subs	r2, #21
 8005b48:	f022 0203 	bic.w	r2, r2, #3
 8005b4c:	3204      	adds	r2, #4
 8005b4e:	f104 0115 	add.w	r1, r4, #21
 8005b52:	428f      	cmp	r7, r1
 8005b54:	bf38      	it	cc
 8005b56:	2204      	movcc	r2, #4
 8005b58:	9201      	str	r2, [sp, #4]
 8005b5a:	9a02      	ldr	r2, [sp, #8]
 8005b5c:	9303      	str	r3, [sp, #12]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d80c      	bhi.n	8005b7c <__multiply+0x9c>
 8005b62:	2e00      	cmp	r6, #0
 8005b64:	dd03      	ble.n	8005b6e <__multiply+0x8e>
 8005b66:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d059      	beq.n	8005c22 <__multiply+0x142>
 8005b6e:	6106      	str	r6, [r0, #16]
 8005b70:	b005      	add	sp, #20
 8005b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b76:	f843 2b04 	str.w	r2, [r3], #4
 8005b7a:	e7d8      	b.n	8005b2e <__multiply+0x4e>
 8005b7c:	f8b3 a000 	ldrh.w	sl, [r3]
 8005b80:	f1ba 0f00 	cmp.w	sl, #0
 8005b84:	d023      	beq.n	8005bce <__multiply+0xee>
 8005b86:	46a9      	mov	r9, r5
 8005b88:	f04f 0c00 	mov.w	ip, #0
 8005b8c:	f104 0e14 	add.w	lr, r4, #20
 8005b90:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005b94:	f8d9 1000 	ldr.w	r1, [r9]
 8005b98:	fa1f fb82 	uxth.w	fp, r2
 8005b9c:	b289      	uxth	r1, r1
 8005b9e:	fb0a 110b 	mla	r1, sl, fp, r1
 8005ba2:	4461      	add	r1, ip
 8005ba4:	f8d9 c000 	ldr.w	ip, [r9]
 8005ba8:	0c12      	lsrs	r2, r2, #16
 8005baa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005bae:	fb0a c202 	mla	r2, sl, r2, ip
 8005bb2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005bb6:	b289      	uxth	r1, r1
 8005bb8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005bbc:	4577      	cmp	r7, lr
 8005bbe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005bc2:	f849 1b04 	str.w	r1, [r9], #4
 8005bc6:	d8e3      	bhi.n	8005b90 <__multiply+0xb0>
 8005bc8:	9a01      	ldr	r2, [sp, #4]
 8005bca:	f845 c002 	str.w	ip, [r5, r2]
 8005bce:	9a03      	ldr	r2, [sp, #12]
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005bd6:	f1b9 0f00 	cmp.w	r9, #0
 8005bda:	d020      	beq.n	8005c1e <__multiply+0x13e>
 8005bdc:	46ae      	mov	lr, r5
 8005bde:	f04f 0a00 	mov.w	sl, #0
 8005be2:	6829      	ldr	r1, [r5, #0]
 8005be4:	f104 0c14 	add.w	ip, r4, #20
 8005be8:	f8bc b000 	ldrh.w	fp, [ip]
 8005bec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005bf0:	b289      	uxth	r1, r1
 8005bf2:	fb09 220b 	mla	r2, r9, fp, r2
 8005bf6:	4492      	add	sl, r2
 8005bf8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8005bfc:	f84e 1b04 	str.w	r1, [lr], #4
 8005c00:	f85c 2b04 	ldr.w	r2, [ip], #4
 8005c04:	f8be 1000 	ldrh.w	r1, [lr]
 8005c08:	0c12      	lsrs	r2, r2, #16
 8005c0a:	fb09 1102 	mla	r1, r9, r2, r1
 8005c0e:	4567      	cmp	r7, ip
 8005c10:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8005c14:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c18:	d8e6      	bhi.n	8005be8 <__multiply+0x108>
 8005c1a:	9a01      	ldr	r2, [sp, #4]
 8005c1c:	50a9      	str	r1, [r5, r2]
 8005c1e:	3504      	adds	r5, #4
 8005c20:	e79b      	b.n	8005b5a <__multiply+0x7a>
 8005c22:	3e01      	subs	r6, #1
 8005c24:	e79d      	b.n	8005b62 <__multiply+0x82>
 8005c26:	bf00      	nop
 8005c28:	08006beb 	.word	0x08006beb
 8005c2c:	08006c5c 	.word	0x08006c5c

08005c30 <__pow5mult>:
 8005c30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c34:	4615      	mov	r5, r2
 8005c36:	f012 0203 	ands.w	r2, r2, #3
 8005c3a:	4606      	mov	r6, r0
 8005c3c:	460f      	mov	r7, r1
 8005c3e:	d007      	beq.n	8005c50 <__pow5mult+0x20>
 8005c40:	4c25      	ldr	r4, [pc, #148]	; (8005cd8 <__pow5mult+0xa8>)
 8005c42:	3a01      	subs	r2, #1
 8005c44:	2300      	movs	r3, #0
 8005c46:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005c4a:	f7ff fe9f 	bl	800598c <__multadd>
 8005c4e:	4607      	mov	r7, r0
 8005c50:	10ad      	asrs	r5, r5, #2
 8005c52:	d03d      	beq.n	8005cd0 <__pow5mult+0xa0>
 8005c54:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005c56:	b97c      	cbnz	r4, 8005c78 <__pow5mult+0x48>
 8005c58:	2010      	movs	r0, #16
 8005c5a:	f7ff fe11 	bl	8005880 <malloc>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	6270      	str	r0, [r6, #36]	; 0x24
 8005c62:	b928      	cbnz	r0, 8005c70 <__pow5mult+0x40>
 8005c64:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005c68:	4b1c      	ldr	r3, [pc, #112]	; (8005cdc <__pow5mult+0xac>)
 8005c6a:	481d      	ldr	r0, [pc, #116]	; (8005ce0 <__pow5mult+0xb0>)
 8005c6c:	f000 fd1c 	bl	80066a8 <__assert_func>
 8005c70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005c74:	6004      	str	r4, [r0, #0]
 8005c76:	60c4      	str	r4, [r0, #12]
 8005c78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005c7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005c80:	b94c      	cbnz	r4, 8005c96 <__pow5mult+0x66>
 8005c82:	f240 2171 	movw	r1, #625	; 0x271
 8005c86:	4630      	mov	r0, r6
 8005c88:	f7ff ff14 	bl	8005ab4 <__i2b>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	4604      	mov	r4, r0
 8005c90:	f8c8 0008 	str.w	r0, [r8, #8]
 8005c94:	6003      	str	r3, [r0, #0]
 8005c96:	f04f 0900 	mov.w	r9, #0
 8005c9a:	07eb      	lsls	r3, r5, #31
 8005c9c:	d50a      	bpl.n	8005cb4 <__pow5mult+0x84>
 8005c9e:	4639      	mov	r1, r7
 8005ca0:	4622      	mov	r2, r4
 8005ca2:	4630      	mov	r0, r6
 8005ca4:	f7ff ff1c 	bl	8005ae0 <__multiply>
 8005ca8:	4680      	mov	r8, r0
 8005caa:	4639      	mov	r1, r7
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7ff fe4b 	bl	8005948 <_Bfree>
 8005cb2:	4647      	mov	r7, r8
 8005cb4:	106d      	asrs	r5, r5, #1
 8005cb6:	d00b      	beq.n	8005cd0 <__pow5mult+0xa0>
 8005cb8:	6820      	ldr	r0, [r4, #0]
 8005cba:	b938      	cbnz	r0, 8005ccc <__pow5mult+0x9c>
 8005cbc:	4622      	mov	r2, r4
 8005cbe:	4621      	mov	r1, r4
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	f7ff ff0d 	bl	8005ae0 <__multiply>
 8005cc6:	6020      	str	r0, [r4, #0]
 8005cc8:	f8c0 9000 	str.w	r9, [r0]
 8005ccc:	4604      	mov	r4, r0
 8005cce:	e7e4      	b.n	8005c9a <__pow5mult+0x6a>
 8005cd0:	4638      	mov	r0, r7
 8005cd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005cd6:	bf00      	nop
 8005cd8:	08006da8 	.word	0x08006da8
 8005cdc:	08006b79 	.word	0x08006b79
 8005ce0:	08006c5c 	.word	0x08006c5c

08005ce4 <__lshift>:
 8005ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce8:	460c      	mov	r4, r1
 8005cea:	4607      	mov	r7, r0
 8005cec:	4691      	mov	r9, r2
 8005cee:	6923      	ldr	r3, [r4, #16]
 8005cf0:	6849      	ldr	r1, [r1, #4]
 8005cf2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005cf6:	68a3      	ldr	r3, [r4, #8]
 8005cf8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005cfc:	f108 0601 	add.w	r6, r8, #1
 8005d00:	42b3      	cmp	r3, r6
 8005d02:	db0b      	blt.n	8005d1c <__lshift+0x38>
 8005d04:	4638      	mov	r0, r7
 8005d06:	f7ff fddf 	bl	80058c8 <_Balloc>
 8005d0a:	4605      	mov	r5, r0
 8005d0c:	b948      	cbnz	r0, 8005d22 <__lshift+0x3e>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005d14:	4b29      	ldr	r3, [pc, #164]	; (8005dbc <__lshift+0xd8>)
 8005d16:	482a      	ldr	r0, [pc, #168]	; (8005dc0 <__lshift+0xdc>)
 8005d18:	f000 fcc6 	bl	80066a8 <__assert_func>
 8005d1c:	3101      	adds	r1, #1
 8005d1e:	005b      	lsls	r3, r3, #1
 8005d20:	e7ee      	b.n	8005d00 <__lshift+0x1c>
 8005d22:	2300      	movs	r3, #0
 8005d24:	f100 0114 	add.w	r1, r0, #20
 8005d28:	f100 0210 	add.w	r2, r0, #16
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	4553      	cmp	r3, sl
 8005d30:	db37      	blt.n	8005da2 <__lshift+0xbe>
 8005d32:	6920      	ldr	r0, [r4, #16]
 8005d34:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d38:	f104 0314 	add.w	r3, r4, #20
 8005d3c:	f019 091f 	ands.w	r9, r9, #31
 8005d40:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d44:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8005d48:	d02f      	beq.n	8005daa <__lshift+0xc6>
 8005d4a:	468a      	mov	sl, r1
 8005d4c:	f04f 0c00 	mov.w	ip, #0
 8005d50:	f1c9 0e20 	rsb	lr, r9, #32
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	fa02 f209 	lsl.w	r2, r2, r9
 8005d5a:	ea42 020c 	orr.w	r2, r2, ip
 8005d5e:	f84a 2b04 	str.w	r2, [sl], #4
 8005d62:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d66:	4298      	cmp	r0, r3
 8005d68:	fa22 fc0e 	lsr.w	ip, r2, lr
 8005d6c:	d8f2      	bhi.n	8005d54 <__lshift+0x70>
 8005d6e:	1b03      	subs	r3, r0, r4
 8005d70:	3b15      	subs	r3, #21
 8005d72:	f023 0303 	bic.w	r3, r3, #3
 8005d76:	3304      	adds	r3, #4
 8005d78:	f104 0215 	add.w	r2, r4, #21
 8005d7c:	4290      	cmp	r0, r2
 8005d7e:	bf38      	it	cc
 8005d80:	2304      	movcc	r3, #4
 8005d82:	f841 c003 	str.w	ip, [r1, r3]
 8005d86:	f1bc 0f00 	cmp.w	ip, #0
 8005d8a:	d001      	beq.n	8005d90 <__lshift+0xac>
 8005d8c:	f108 0602 	add.w	r6, r8, #2
 8005d90:	3e01      	subs	r6, #1
 8005d92:	4638      	mov	r0, r7
 8005d94:	4621      	mov	r1, r4
 8005d96:	612e      	str	r6, [r5, #16]
 8005d98:	f7ff fdd6 	bl	8005948 <_Bfree>
 8005d9c:	4628      	mov	r0, r5
 8005d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005da6:	3301      	adds	r3, #1
 8005da8:	e7c1      	b.n	8005d2e <__lshift+0x4a>
 8005daa:	3904      	subs	r1, #4
 8005dac:	f853 2b04 	ldr.w	r2, [r3], #4
 8005db0:	4298      	cmp	r0, r3
 8005db2:	f841 2f04 	str.w	r2, [r1, #4]!
 8005db6:	d8f9      	bhi.n	8005dac <__lshift+0xc8>
 8005db8:	e7ea      	b.n	8005d90 <__lshift+0xac>
 8005dba:	bf00      	nop
 8005dbc:	08006beb 	.word	0x08006beb
 8005dc0:	08006c5c 	.word	0x08006c5c

08005dc4 <__mcmp>:
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	690a      	ldr	r2, [r1, #16]
 8005dc8:	6900      	ldr	r0, [r0, #16]
 8005dca:	b530      	push	{r4, r5, lr}
 8005dcc:	1a80      	subs	r0, r0, r2
 8005dce:	d10d      	bne.n	8005dec <__mcmp+0x28>
 8005dd0:	3314      	adds	r3, #20
 8005dd2:	3114      	adds	r1, #20
 8005dd4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005dd8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005ddc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005de0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005de4:	4295      	cmp	r5, r2
 8005de6:	d002      	beq.n	8005dee <__mcmp+0x2a>
 8005de8:	d304      	bcc.n	8005df4 <__mcmp+0x30>
 8005dea:	2001      	movs	r0, #1
 8005dec:	bd30      	pop	{r4, r5, pc}
 8005dee:	42a3      	cmp	r3, r4
 8005df0:	d3f4      	bcc.n	8005ddc <__mcmp+0x18>
 8005df2:	e7fb      	b.n	8005dec <__mcmp+0x28>
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005df8:	e7f8      	b.n	8005dec <__mcmp+0x28>
	...

08005dfc <__mdiff>:
 8005dfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e00:	460d      	mov	r5, r1
 8005e02:	4607      	mov	r7, r0
 8005e04:	4611      	mov	r1, r2
 8005e06:	4628      	mov	r0, r5
 8005e08:	4614      	mov	r4, r2
 8005e0a:	f7ff ffdb 	bl	8005dc4 <__mcmp>
 8005e0e:	1e06      	subs	r6, r0, #0
 8005e10:	d111      	bne.n	8005e36 <__mdiff+0x3a>
 8005e12:	4631      	mov	r1, r6
 8005e14:	4638      	mov	r0, r7
 8005e16:	f7ff fd57 	bl	80058c8 <_Balloc>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	b928      	cbnz	r0, 8005e2a <__mdiff+0x2e>
 8005e1e:	f240 2132 	movw	r1, #562	; 0x232
 8005e22:	4b3a      	ldr	r3, [pc, #232]	; (8005f0c <__mdiff+0x110>)
 8005e24:	483a      	ldr	r0, [pc, #232]	; (8005f10 <__mdiff+0x114>)
 8005e26:	f000 fc3f 	bl	80066a8 <__assert_func>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005e30:	4610      	mov	r0, r2
 8005e32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e36:	bfa4      	itt	ge
 8005e38:	4623      	movge	r3, r4
 8005e3a:	462c      	movge	r4, r5
 8005e3c:	4638      	mov	r0, r7
 8005e3e:	6861      	ldr	r1, [r4, #4]
 8005e40:	bfa6      	itte	ge
 8005e42:	461d      	movge	r5, r3
 8005e44:	2600      	movge	r6, #0
 8005e46:	2601      	movlt	r6, #1
 8005e48:	f7ff fd3e 	bl	80058c8 <_Balloc>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	b918      	cbnz	r0, 8005e58 <__mdiff+0x5c>
 8005e50:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005e54:	4b2d      	ldr	r3, [pc, #180]	; (8005f0c <__mdiff+0x110>)
 8005e56:	e7e5      	b.n	8005e24 <__mdiff+0x28>
 8005e58:	f102 0814 	add.w	r8, r2, #20
 8005e5c:	46c2      	mov	sl, r8
 8005e5e:	f04f 0c00 	mov.w	ip, #0
 8005e62:	6927      	ldr	r7, [r4, #16]
 8005e64:	60c6      	str	r6, [r0, #12]
 8005e66:	692e      	ldr	r6, [r5, #16]
 8005e68:	f104 0014 	add.w	r0, r4, #20
 8005e6c:	f105 0914 	add.w	r9, r5, #20
 8005e70:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005e74:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005e78:	3410      	adds	r4, #16
 8005e7a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005e7e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005e82:	fa1f f18b 	uxth.w	r1, fp
 8005e86:	448c      	add	ip, r1
 8005e88:	b299      	uxth	r1, r3
 8005e8a:	0c1b      	lsrs	r3, r3, #16
 8005e8c:	ebac 0101 	sub.w	r1, ip, r1
 8005e90:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005e94:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005e98:	b289      	uxth	r1, r1
 8005e9a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005e9e:	454e      	cmp	r6, r9
 8005ea0:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005ea4:	f84a 3b04 	str.w	r3, [sl], #4
 8005ea8:	d8e7      	bhi.n	8005e7a <__mdiff+0x7e>
 8005eaa:	1b73      	subs	r3, r6, r5
 8005eac:	3b15      	subs	r3, #21
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	3515      	adds	r5, #21
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	42ae      	cmp	r6, r5
 8005eb8:	bf38      	it	cc
 8005eba:	2304      	movcc	r3, #4
 8005ebc:	4418      	add	r0, r3
 8005ebe:	4443      	add	r3, r8
 8005ec0:	461e      	mov	r6, r3
 8005ec2:	4605      	mov	r5, r0
 8005ec4:	4575      	cmp	r5, lr
 8005ec6:	d30e      	bcc.n	8005ee6 <__mdiff+0xea>
 8005ec8:	f10e 0103 	add.w	r1, lr, #3
 8005ecc:	1a09      	subs	r1, r1, r0
 8005ece:	f021 0103 	bic.w	r1, r1, #3
 8005ed2:	3803      	subs	r0, #3
 8005ed4:	4586      	cmp	lr, r0
 8005ed6:	bf38      	it	cc
 8005ed8:	2100      	movcc	r1, #0
 8005eda:	4419      	add	r1, r3
 8005edc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005ee0:	b18b      	cbz	r3, 8005f06 <__mdiff+0x10a>
 8005ee2:	6117      	str	r7, [r2, #16]
 8005ee4:	e7a4      	b.n	8005e30 <__mdiff+0x34>
 8005ee6:	f855 8b04 	ldr.w	r8, [r5], #4
 8005eea:	fa1f f188 	uxth.w	r1, r8
 8005eee:	4461      	add	r1, ip
 8005ef0:	140c      	asrs	r4, r1, #16
 8005ef2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005ef6:	b289      	uxth	r1, r1
 8005ef8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005efc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005f00:	f846 1b04 	str.w	r1, [r6], #4
 8005f04:	e7de      	b.n	8005ec4 <__mdiff+0xc8>
 8005f06:	3f01      	subs	r7, #1
 8005f08:	e7e8      	b.n	8005edc <__mdiff+0xe0>
 8005f0a:	bf00      	nop
 8005f0c:	08006beb 	.word	0x08006beb
 8005f10:	08006c5c 	.word	0x08006c5c

08005f14 <__d2b>:
 8005f14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005f18:	2101      	movs	r1, #1
 8005f1a:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005f1e:	4690      	mov	r8, r2
 8005f20:	461d      	mov	r5, r3
 8005f22:	f7ff fcd1 	bl	80058c8 <_Balloc>
 8005f26:	4604      	mov	r4, r0
 8005f28:	b930      	cbnz	r0, 8005f38 <__d2b+0x24>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	f240 310a 	movw	r1, #778	; 0x30a
 8005f30:	4b24      	ldr	r3, [pc, #144]	; (8005fc4 <__d2b+0xb0>)
 8005f32:	4825      	ldr	r0, [pc, #148]	; (8005fc8 <__d2b+0xb4>)
 8005f34:	f000 fbb8 	bl	80066a8 <__assert_func>
 8005f38:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005f3c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8005f40:	bb2d      	cbnz	r5, 8005f8e <__d2b+0x7a>
 8005f42:	9301      	str	r3, [sp, #4]
 8005f44:	f1b8 0300 	subs.w	r3, r8, #0
 8005f48:	d026      	beq.n	8005f98 <__d2b+0x84>
 8005f4a:	4668      	mov	r0, sp
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	f7ff fd83 	bl	8005a58 <__lo0bits>
 8005f52:	9900      	ldr	r1, [sp, #0]
 8005f54:	b1f0      	cbz	r0, 8005f94 <__d2b+0x80>
 8005f56:	9a01      	ldr	r2, [sp, #4]
 8005f58:	f1c0 0320 	rsb	r3, r0, #32
 8005f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f60:	430b      	orrs	r3, r1
 8005f62:	40c2      	lsrs	r2, r0
 8005f64:	6163      	str	r3, [r4, #20]
 8005f66:	9201      	str	r2, [sp, #4]
 8005f68:	9b01      	ldr	r3, [sp, #4]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	bf14      	ite	ne
 8005f6e:	2102      	movne	r1, #2
 8005f70:	2101      	moveq	r1, #1
 8005f72:	61a3      	str	r3, [r4, #24]
 8005f74:	6121      	str	r1, [r4, #16]
 8005f76:	b1c5      	cbz	r5, 8005faa <__d2b+0x96>
 8005f78:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8005f7c:	4405      	add	r5, r0
 8005f7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005f82:	603d      	str	r5, [r7, #0]
 8005f84:	6030      	str	r0, [r6, #0]
 8005f86:	4620      	mov	r0, r4
 8005f88:	b002      	add	sp, #8
 8005f8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f92:	e7d6      	b.n	8005f42 <__d2b+0x2e>
 8005f94:	6161      	str	r1, [r4, #20]
 8005f96:	e7e7      	b.n	8005f68 <__d2b+0x54>
 8005f98:	a801      	add	r0, sp, #4
 8005f9a:	f7ff fd5d 	bl	8005a58 <__lo0bits>
 8005f9e:	2101      	movs	r1, #1
 8005fa0:	9b01      	ldr	r3, [sp, #4]
 8005fa2:	6121      	str	r1, [r4, #16]
 8005fa4:	6163      	str	r3, [r4, #20]
 8005fa6:	3020      	adds	r0, #32
 8005fa8:	e7e5      	b.n	8005f76 <__d2b+0x62>
 8005faa:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8005fae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005fb2:	6038      	str	r0, [r7, #0]
 8005fb4:	6918      	ldr	r0, [r3, #16]
 8005fb6:	f7ff fd2f 	bl	8005a18 <__hi0bits>
 8005fba:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8005fbe:	6031      	str	r1, [r6, #0]
 8005fc0:	e7e1      	b.n	8005f86 <__d2b+0x72>
 8005fc2:	bf00      	nop
 8005fc4:	08006beb 	.word	0x08006beb
 8005fc8:	08006c5c 	.word	0x08006c5c

08005fcc <_calloc_r>:
 8005fcc:	b570      	push	{r4, r5, r6, lr}
 8005fce:	fba1 5402 	umull	r5, r4, r1, r2
 8005fd2:	b934      	cbnz	r4, 8005fe2 <_calloc_r+0x16>
 8005fd4:	4629      	mov	r1, r5
 8005fd6:	f000 f875 	bl	80060c4 <_malloc_r>
 8005fda:	4606      	mov	r6, r0
 8005fdc:	b928      	cbnz	r0, 8005fea <_calloc_r+0x1e>
 8005fde:	4630      	mov	r0, r6
 8005fe0:	bd70      	pop	{r4, r5, r6, pc}
 8005fe2:	220c      	movs	r2, #12
 8005fe4:	2600      	movs	r6, #0
 8005fe6:	6002      	str	r2, [r0, #0]
 8005fe8:	e7f9      	b.n	8005fde <_calloc_r+0x12>
 8005fea:	462a      	mov	r2, r5
 8005fec:	4621      	mov	r1, r4
 8005fee:	f7fe f84d 	bl	800408c <memset>
 8005ff2:	e7f4      	b.n	8005fde <_calloc_r+0x12>

08005ff4 <_free_r>:
 8005ff4:	b538      	push	{r3, r4, r5, lr}
 8005ff6:	4605      	mov	r5, r0
 8005ff8:	2900      	cmp	r1, #0
 8005ffa:	d040      	beq.n	800607e <_free_r+0x8a>
 8005ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006000:	1f0c      	subs	r4, r1, #4
 8006002:	2b00      	cmp	r3, #0
 8006004:	bfb8      	it	lt
 8006006:	18e4      	addlt	r4, r4, r3
 8006008:	f000 fcd6 	bl	80069b8 <__malloc_lock>
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <_free_r+0x8c>)
 800600e:	6813      	ldr	r3, [r2, #0]
 8006010:	b933      	cbnz	r3, 8006020 <_free_r+0x2c>
 8006012:	6063      	str	r3, [r4, #4]
 8006014:	6014      	str	r4, [r2, #0]
 8006016:	4628      	mov	r0, r5
 8006018:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800601c:	f000 bcd2 	b.w	80069c4 <__malloc_unlock>
 8006020:	42a3      	cmp	r3, r4
 8006022:	d908      	bls.n	8006036 <_free_r+0x42>
 8006024:	6820      	ldr	r0, [r4, #0]
 8006026:	1821      	adds	r1, r4, r0
 8006028:	428b      	cmp	r3, r1
 800602a:	bf01      	itttt	eq
 800602c:	6819      	ldreq	r1, [r3, #0]
 800602e:	685b      	ldreq	r3, [r3, #4]
 8006030:	1809      	addeq	r1, r1, r0
 8006032:	6021      	streq	r1, [r4, #0]
 8006034:	e7ed      	b.n	8006012 <_free_r+0x1e>
 8006036:	461a      	mov	r2, r3
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	b10b      	cbz	r3, 8006040 <_free_r+0x4c>
 800603c:	42a3      	cmp	r3, r4
 800603e:	d9fa      	bls.n	8006036 <_free_r+0x42>
 8006040:	6811      	ldr	r1, [r2, #0]
 8006042:	1850      	adds	r0, r2, r1
 8006044:	42a0      	cmp	r0, r4
 8006046:	d10b      	bne.n	8006060 <_free_r+0x6c>
 8006048:	6820      	ldr	r0, [r4, #0]
 800604a:	4401      	add	r1, r0
 800604c:	1850      	adds	r0, r2, r1
 800604e:	4283      	cmp	r3, r0
 8006050:	6011      	str	r1, [r2, #0]
 8006052:	d1e0      	bne.n	8006016 <_free_r+0x22>
 8006054:	6818      	ldr	r0, [r3, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	4401      	add	r1, r0
 800605a:	6011      	str	r1, [r2, #0]
 800605c:	6053      	str	r3, [r2, #4]
 800605e:	e7da      	b.n	8006016 <_free_r+0x22>
 8006060:	d902      	bls.n	8006068 <_free_r+0x74>
 8006062:	230c      	movs	r3, #12
 8006064:	602b      	str	r3, [r5, #0]
 8006066:	e7d6      	b.n	8006016 <_free_r+0x22>
 8006068:	6820      	ldr	r0, [r4, #0]
 800606a:	1821      	adds	r1, r4, r0
 800606c:	428b      	cmp	r3, r1
 800606e:	bf01      	itttt	eq
 8006070:	6819      	ldreq	r1, [r3, #0]
 8006072:	685b      	ldreq	r3, [r3, #4]
 8006074:	1809      	addeq	r1, r1, r0
 8006076:	6021      	streq	r1, [r4, #0]
 8006078:	6063      	str	r3, [r4, #4]
 800607a:	6054      	str	r4, [r2, #4]
 800607c:	e7cb      	b.n	8006016 <_free_r+0x22>
 800607e:	bd38      	pop	{r3, r4, r5, pc}
 8006080:	20000368 	.word	0x20000368

08006084 <sbrk_aligned>:
 8006084:	b570      	push	{r4, r5, r6, lr}
 8006086:	4e0e      	ldr	r6, [pc, #56]	; (80060c0 <sbrk_aligned+0x3c>)
 8006088:	460c      	mov	r4, r1
 800608a:	6831      	ldr	r1, [r6, #0]
 800608c:	4605      	mov	r5, r0
 800608e:	b911      	cbnz	r1, 8006096 <sbrk_aligned+0x12>
 8006090:	f000 f9e4 	bl	800645c <_sbrk_r>
 8006094:	6030      	str	r0, [r6, #0]
 8006096:	4621      	mov	r1, r4
 8006098:	4628      	mov	r0, r5
 800609a:	f000 f9df 	bl	800645c <_sbrk_r>
 800609e:	1c43      	adds	r3, r0, #1
 80060a0:	d00a      	beq.n	80060b8 <sbrk_aligned+0x34>
 80060a2:	1cc4      	adds	r4, r0, #3
 80060a4:	f024 0403 	bic.w	r4, r4, #3
 80060a8:	42a0      	cmp	r0, r4
 80060aa:	d007      	beq.n	80060bc <sbrk_aligned+0x38>
 80060ac:	1a21      	subs	r1, r4, r0
 80060ae:	4628      	mov	r0, r5
 80060b0:	f000 f9d4 	bl	800645c <_sbrk_r>
 80060b4:	3001      	adds	r0, #1
 80060b6:	d101      	bne.n	80060bc <sbrk_aligned+0x38>
 80060b8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80060bc:	4620      	mov	r0, r4
 80060be:	bd70      	pop	{r4, r5, r6, pc}
 80060c0:	2000036c 	.word	0x2000036c

080060c4 <_malloc_r>:
 80060c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	1ccd      	adds	r5, r1, #3
 80060ca:	f025 0503 	bic.w	r5, r5, #3
 80060ce:	3508      	adds	r5, #8
 80060d0:	2d0c      	cmp	r5, #12
 80060d2:	bf38      	it	cc
 80060d4:	250c      	movcc	r5, #12
 80060d6:	2d00      	cmp	r5, #0
 80060d8:	4607      	mov	r7, r0
 80060da:	db01      	blt.n	80060e0 <_malloc_r+0x1c>
 80060dc:	42a9      	cmp	r1, r5
 80060de:	d905      	bls.n	80060ec <_malloc_r+0x28>
 80060e0:	230c      	movs	r3, #12
 80060e2:	2600      	movs	r6, #0
 80060e4:	603b      	str	r3, [r7, #0]
 80060e6:	4630      	mov	r0, r6
 80060e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060ec:	4e2e      	ldr	r6, [pc, #184]	; (80061a8 <_malloc_r+0xe4>)
 80060ee:	f000 fc63 	bl	80069b8 <__malloc_lock>
 80060f2:	6833      	ldr	r3, [r6, #0]
 80060f4:	461c      	mov	r4, r3
 80060f6:	bb34      	cbnz	r4, 8006146 <_malloc_r+0x82>
 80060f8:	4629      	mov	r1, r5
 80060fa:	4638      	mov	r0, r7
 80060fc:	f7ff ffc2 	bl	8006084 <sbrk_aligned>
 8006100:	1c43      	adds	r3, r0, #1
 8006102:	4604      	mov	r4, r0
 8006104:	d14d      	bne.n	80061a2 <_malloc_r+0xde>
 8006106:	6834      	ldr	r4, [r6, #0]
 8006108:	4626      	mov	r6, r4
 800610a:	2e00      	cmp	r6, #0
 800610c:	d140      	bne.n	8006190 <_malloc_r+0xcc>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	4631      	mov	r1, r6
 8006112:	4638      	mov	r0, r7
 8006114:	eb04 0803 	add.w	r8, r4, r3
 8006118:	f000 f9a0 	bl	800645c <_sbrk_r>
 800611c:	4580      	cmp	r8, r0
 800611e:	d13a      	bne.n	8006196 <_malloc_r+0xd2>
 8006120:	6821      	ldr	r1, [r4, #0]
 8006122:	3503      	adds	r5, #3
 8006124:	1a6d      	subs	r5, r5, r1
 8006126:	f025 0503 	bic.w	r5, r5, #3
 800612a:	3508      	adds	r5, #8
 800612c:	2d0c      	cmp	r5, #12
 800612e:	bf38      	it	cc
 8006130:	250c      	movcc	r5, #12
 8006132:	4638      	mov	r0, r7
 8006134:	4629      	mov	r1, r5
 8006136:	f7ff ffa5 	bl	8006084 <sbrk_aligned>
 800613a:	3001      	adds	r0, #1
 800613c:	d02b      	beq.n	8006196 <_malloc_r+0xd2>
 800613e:	6823      	ldr	r3, [r4, #0]
 8006140:	442b      	add	r3, r5
 8006142:	6023      	str	r3, [r4, #0]
 8006144:	e00e      	b.n	8006164 <_malloc_r+0xa0>
 8006146:	6822      	ldr	r2, [r4, #0]
 8006148:	1b52      	subs	r2, r2, r5
 800614a:	d41e      	bmi.n	800618a <_malloc_r+0xc6>
 800614c:	2a0b      	cmp	r2, #11
 800614e:	d916      	bls.n	800617e <_malloc_r+0xba>
 8006150:	1961      	adds	r1, r4, r5
 8006152:	42a3      	cmp	r3, r4
 8006154:	6025      	str	r5, [r4, #0]
 8006156:	bf18      	it	ne
 8006158:	6059      	strne	r1, [r3, #4]
 800615a:	6863      	ldr	r3, [r4, #4]
 800615c:	bf08      	it	eq
 800615e:	6031      	streq	r1, [r6, #0]
 8006160:	5162      	str	r2, [r4, r5]
 8006162:	604b      	str	r3, [r1, #4]
 8006164:	4638      	mov	r0, r7
 8006166:	f104 060b 	add.w	r6, r4, #11
 800616a:	f000 fc2b 	bl	80069c4 <__malloc_unlock>
 800616e:	f026 0607 	bic.w	r6, r6, #7
 8006172:	1d23      	adds	r3, r4, #4
 8006174:	1af2      	subs	r2, r6, r3
 8006176:	d0b6      	beq.n	80060e6 <_malloc_r+0x22>
 8006178:	1b9b      	subs	r3, r3, r6
 800617a:	50a3      	str	r3, [r4, r2]
 800617c:	e7b3      	b.n	80060e6 <_malloc_r+0x22>
 800617e:	6862      	ldr	r2, [r4, #4]
 8006180:	42a3      	cmp	r3, r4
 8006182:	bf0c      	ite	eq
 8006184:	6032      	streq	r2, [r6, #0]
 8006186:	605a      	strne	r2, [r3, #4]
 8006188:	e7ec      	b.n	8006164 <_malloc_r+0xa0>
 800618a:	4623      	mov	r3, r4
 800618c:	6864      	ldr	r4, [r4, #4]
 800618e:	e7b2      	b.n	80060f6 <_malloc_r+0x32>
 8006190:	4634      	mov	r4, r6
 8006192:	6876      	ldr	r6, [r6, #4]
 8006194:	e7b9      	b.n	800610a <_malloc_r+0x46>
 8006196:	230c      	movs	r3, #12
 8006198:	4638      	mov	r0, r7
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	f000 fc12 	bl	80069c4 <__malloc_unlock>
 80061a0:	e7a1      	b.n	80060e6 <_malloc_r+0x22>
 80061a2:	6025      	str	r5, [r4, #0]
 80061a4:	e7de      	b.n	8006164 <_malloc_r+0xa0>
 80061a6:	bf00      	nop
 80061a8:	20000368 	.word	0x20000368

080061ac <__sfputc_r>:
 80061ac:	6893      	ldr	r3, [r2, #8]
 80061ae:	b410      	push	{r4}
 80061b0:	3b01      	subs	r3, #1
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	6093      	str	r3, [r2, #8]
 80061b6:	da07      	bge.n	80061c8 <__sfputc_r+0x1c>
 80061b8:	6994      	ldr	r4, [r2, #24]
 80061ba:	42a3      	cmp	r3, r4
 80061bc:	db01      	blt.n	80061c2 <__sfputc_r+0x16>
 80061be:	290a      	cmp	r1, #10
 80061c0:	d102      	bne.n	80061c8 <__sfputc_r+0x1c>
 80061c2:	bc10      	pop	{r4}
 80061c4:	f000 b99e 	b.w	8006504 <__swbuf_r>
 80061c8:	6813      	ldr	r3, [r2, #0]
 80061ca:	1c58      	adds	r0, r3, #1
 80061cc:	6010      	str	r0, [r2, #0]
 80061ce:	7019      	strb	r1, [r3, #0]
 80061d0:	4608      	mov	r0, r1
 80061d2:	bc10      	pop	{r4}
 80061d4:	4770      	bx	lr

080061d6 <__sfputs_r>:
 80061d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061d8:	4606      	mov	r6, r0
 80061da:	460f      	mov	r7, r1
 80061dc:	4614      	mov	r4, r2
 80061de:	18d5      	adds	r5, r2, r3
 80061e0:	42ac      	cmp	r4, r5
 80061e2:	d101      	bne.n	80061e8 <__sfputs_r+0x12>
 80061e4:	2000      	movs	r0, #0
 80061e6:	e007      	b.n	80061f8 <__sfputs_r+0x22>
 80061e8:	463a      	mov	r2, r7
 80061ea:	4630      	mov	r0, r6
 80061ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80061f0:	f7ff ffdc 	bl	80061ac <__sfputc_r>
 80061f4:	1c43      	adds	r3, r0, #1
 80061f6:	d1f3      	bne.n	80061e0 <__sfputs_r+0xa>
 80061f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080061fc <_vfiprintf_r>:
 80061fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006200:	460d      	mov	r5, r1
 8006202:	4614      	mov	r4, r2
 8006204:	4698      	mov	r8, r3
 8006206:	4606      	mov	r6, r0
 8006208:	b09d      	sub	sp, #116	; 0x74
 800620a:	b118      	cbz	r0, 8006214 <_vfiprintf_r+0x18>
 800620c:	6983      	ldr	r3, [r0, #24]
 800620e:	b90b      	cbnz	r3, 8006214 <_vfiprintf_r+0x18>
 8006210:	f7ff fa90 	bl	8005734 <__sinit>
 8006214:	4b89      	ldr	r3, [pc, #548]	; (800643c <_vfiprintf_r+0x240>)
 8006216:	429d      	cmp	r5, r3
 8006218:	d11b      	bne.n	8006252 <_vfiprintf_r+0x56>
 800621a:	6875      	ldr	r5, [r6, #4]
 800621c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800621e:	07d9      	lsls	r1, r3, #31
 8006220:	d405      	bmi.n	800622e <_vfiprintf_r+0x32>
 8006222:	89ab      	ldrh	r3, [r5, #12]
 8006224:	059a      	lsls	r2, r3, #22
 8006226:	d402      	bmi.n	800622e <_vfiprintf_r+0x32>
 8006228:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800622a:	f7ff fb26 	bl	800587a <__retarget_lock_acquire_recursive>
 800622e:	89ab      	ldrh	r3, [r5, #12]
 8006230:	071b      	lsls	r3, r3, #28
 8006232:	d501      	bpl.n	8006238 <_vfiprintf_r+0x3c>
 8006234:	692b      	ldr	r3, [r5, #16]
 8006236:	b9eb      	cbnz	r3, 8006274 <_vfiprintf_r+0x78>
 8006238:	4629      	mov	r1, r5
 800623a:	4630      	mov	r0, r6
 800623c:	f000 f9c6 	bl	80065cc <__swsetup_r>
 8006240:	b1c0      	cbz	r0, 8006274 <_vfiprintf_r+0x78>
 8006242:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006244:	07dc      	lsls	r4, r3, #31
 8006246:	d50e      	bpl.n	8006266 <_vfiprintf_r+0x6a>
 8006248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800624c:	b01d      	add	sp, #116	; 0x74
 800624e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006252:	4b7b      	ldr	r3, [pc, #492]	; (8006440 <_vfiprintf_r+0x244>)
 8006254:	429d      	cmp	r5, r3
 8006256:	d101      	bne.n	800625c <_vfiprintf_r+0x60>
 8006258:	68b5      	ldr	r5, [r6, #8]
 800625a:	e7df      	b.n	800621c <_vfiprintf_r+0x20>
 800625c:	4b79      	ldr	r3, [pc, #484]	; (8006444 <_vfiprintf_r+0x248>)
 800625e:	429d      	cmp	r5, r3
 8006260:	bf08      	it	eq
 8006262:	68f5      	ldreq	r5, [r6, #12]
 8006264:	e7da      	b.n	800621c <_vfiprintf_r+0x20>
 8006266:	89ab      	ldrh	r3, [r5, #12]
 8006268:	0598      	lsls	r0, r3, #22
 800626a:	d4ed      	bmi.n	8006248 <_vfiprintf_r+0x4c>
 800626c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800626e:	f7ff fb05 	bl	800587c <__retarget_lock_release_recursive>
 8006272:	e7e9      	b.n	8006248 <_vfiprintf_r+0x4c>
 8006274:	2300      	movs	r3, #0
 8006276:	9309      	str	r3, [sp, #36]	; 0x24
 8006278:	2320      	movs	r3, #32
 800627a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800627e:	2330      	movs	r3, #48	; 0x30
 8006280:	f04f 0901 	mov.w	r9, #1
 8006284:	f8cd 800c 	str.w	r8, [sp, #12]
 8006288:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006448 <_vfiprintf_r+0x24c>
 800628c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006290:	4623      	mov	r3, r4
 8006292:	469a      	mov	sl, r3
 8006294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006298:	b10a      	cbz	r2, 800629e <_vfiprintf_r+0xa2>
 800629a:	2a25      	cmp	r2, #37	; 0x25
 800629c:	d1f9      	bne.n	8006292 <_vfiprintf_r+0x96>
 800629e:	ebba 0b04 	subs.w	fp, sl, r4
 80062a2:	d00b      	beq.n	80062bc <_vfiprintf_r+0xc0>
 80062a4:	465b      	mov	r3, fp
 80062a6:	4622      	mov	r2, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	4630      	mov	r0, r6
 80062ac:	f7ff ff93 	bl	80061d6 <__sfputs_r>
 80062b0:	3001      	adds	r0, #1
 80062b2:	f000 80aa 	beq.w	800640a <_vfiprintf_r+0x20e>
 80062b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062b8:	445a      	add	r2, fp
 80062ba:	9209      	str	r2, [sp, #36]	; 0x24
 80062bc:	f89a 3000 	ldrb.w	r3, [sl]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	f000 80a2 	beq.w	800640a <_vfiprintf_r+0x20e>
 80062c6:	2300      	movs	r3, #0
 80062c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80062cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062d0:	f10a 0a01 	add.w	sl, sl, #1
 80062d4:	9304      	str	r3, [sp, #16]
 80062d6:	9307      	str	r3, [sp, #28]
 80062d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062dc:	931a      	str	r3, [sp, #104]	; 0x68
 80062de:	4654      	mov	r4, sl
 80062e0:	2205      	movs	r2, #5
 80062e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062e6:	4858      	ldr	r0, [pc, #352]	; (8006448 <_vfiprintf_r+0x24c>)
 80062e8:	f7ff fad2 	bl	8005890 <memchr>
 80062ec:	9a04      	ldr	r2, [sp, #16]
 80062ee:	b9d8      	cbnz	r0, 8006328 <_vfiprintf_r+0x12c>
 80062f0:	06d1      	lsls	r1, r2, #27
 80062f2:	bf44      	itt	mi
 80062f4:	2320      	movmi	r3, #32
 80062f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80062fa:	0713      	lsls	r3, r2, #28
 80062fc:	bf44      	itt	mi
 80062fe:	232b      	movmi	r3, #43	; 0x2b
 8006300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006304:	f89a 3000 	ldrb.w	r3, [sl]
 8006308:	2b2a      	cmp	r3, #42	; 0x2a
 800630a:	d015      	beq.n	8006338 <_vfiprintf_r+0x13c>
 800630c:	4654      	mov	r4, sl
 800630e:	2000      	movs	r0, #0
 8006310:	f04f 0c0a 	mov.w	ip, #10
 8006314:	9a07      	ldr	r2, [sp, #28]
 8006316:	4621      	mov	r1, r4
 8006318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800631c:	3b30      	subs	r3, #48	; 0x30
 800631e:	2b09      	cmp	r3, #9
 8006320:	d94e      	bls.n	80063c0 <_vfiprintf_r+0x1c4>
 8006322:	b1b0      	cbz	r0, 8006352 <_vfiprintf_r+0x156>
 8006324:	9207      	str	r2, [sp, #28]
 8006326:	e014      	b.n	8006352 <_vfiprintf_r+0x156>
 8006328:	eba0 0308 	sub.w	r3, r0, r8
 800632c:	fa09 f303 	lsl.w	r3, r9, r3
 8006330:	4313      	orrs	r3, r2
 8006332:	46a2      	mov	sl, r4
 8006334:	9304      	str	r3, [sp, #16]
 8006336:	e7d2      	b.n	80062de <_vfiprintf_r+0xe2>
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	1d19      	adds	r1, r3, #4
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	9103      	str	r1, [sp, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	bfbb      	ittet	lt
 8006344:	425b      	neglt	r3, r3
 8006346:	f042 0202 	orrlt.w	r2, r2, #2
 800634a:	9307      	strge	r3, [sp, #28]
 800634c:	9307      	strlt	r3, [sp, #28]
 800634e:	bfb8      	it	lt
 8006350:	9204      	strlt	r2, [sp, #16]
 8006352:	7823      	ldrb	r3, [r4, #0]
 8006354:	2b2e      	cmp	r3, #46	; 0x2e
 8006356:	d10c      	bne.n	8006372 <_vfiprintf_r+0x176>
 8006358:	7863      	ldrb	r3, [r4, #1]
 800635a:	2b2a      	cmp	r3, #42	; 0x2a
 800635c:	d135      	bne.n	80063ca <_vfiprintf_r+0x1ce>
 800635e:	9b03      	ldr	r3, [sp, #12]
 8006360:	3402      	adds	r4, #2
 8006362:	1d1a      	adds	r2, r3, #4
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	9203      	str	r2, [sp, #12]
 8006368:	2b00      	cmp	r3, #0
 800636a:	bfb8      	it	lt
 800636c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006370:	9305      	str	r3, [sp, #20]
 8006372:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800644c <_vfiprintf_r+0x250>
 8006376:	2203      	movs	r2, #3
 8006378:	4650      	mov	r0, sl
 800637a:	7821      	ldrb	r1, [r4, #0]
 800637c:	f7ff fa88 	bl	8005890 <memchr>
 8006380:	b140      	cbz	r0, 8006394 <_vfiprintf_r+0x198>
 8006382:	2340      	movs	r3, #64	; 0x40
 8006384:	eba0 000a 	sub.w	r0, r0, sl
 8006388:	fa03 f000 	lsl.w	r0, r3, r0
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	3401      	adds	r4, #1
 8006390:	4303      	orrs	r3, r0
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006398:	2206      	movs	r2, #6
 800639a:	482d      	ldr	r0, [pc, #180]	; (8006450 <_vfiprintf_r+0x254>)
 800639c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063a0:	f7ff fa76 	bl	8005890 <memchr>
 80063a4:	2800      	cmp	r0, #0
 80063a6:	d03f      	beq.n	8006428 <_vfiprintf_r+0x22c>
 80063a8:	4b2a      	ldr	r3, [pc, #168]	; (8006454 <_vfiprintf_r+0x258>)
 80063aa:	bb1b      	cbnz	r3, 80063f4 <_vfiprintf_r+0x1f8>
 80063ac:	9b03      	ldr	r3, [sp, #12]
 80063ae:	3307      	adds	r3, #7
 80063b0:	f023 0307 	bic.w	r3, r3, #7
 80063b4:	3308      	adds	r3, #8
 80063b6:	9303      	str	r3, [sp, #12]
 80063b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063ba:	443b      	add	r3, r7
 80063bc:	9309      	str	r3, [sp, #36]	; 0x24
 80063be:	e767      	b.n	8006290 <_vfiprintf_r+0x94>
 80063c0:	460c      	mov	r4, r1
 80063c2:	2001      	movs	r0, #1
 80063c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80063c8:	e7a5      	b.n	8006316 <_vfiprintf_r+0x11a>
 80063ca:	2300      	movs	r3, #0
 80063cc:	f04f 0c0a 	mov.w	ip, #10
 80063d0:	4619      	mov	r1, r3
 80063d2:	3401      	adds	r4, #1
 80063d4:	9305      	str	r3, [sp, #20]
 80063d6:	4620      	mov	r0, r4
 80063d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063dc:	3a30      	subs	r2, #48	; 0x30
 80063de:	2a09      	cmp	r2, #9
 80063e0:	d903      	bls.n	80063ea <_vfiprintf_r+0x1ee>
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0c5      	beq.n	8006372 <_vfiprintf_r+0x176>
 80063e6:	9105      	str	r1, [sp, #20]
 80063e8:	e7c3      	b.n	8006372 <_vfiprintf_r+0x176>
 80063ea:	4604      	mov	r4, r0
 80063ec:	2301      	movs	r3, #1
 80063ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80063f2:	e7f0      	b.n	80063d6 <_vfiprintf_r+0x1da>
 80063f4:	ab03      	add	r3, sp, #12
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	462a      	mov	r2, r5
 80063fa:	4630      	mov	r0, r6
 80063fc:	4b16      	ldr	r3, [pc, #88]	; (8006458 <_vfiprintf_r+0x25c>)
 80063fe:	a904      	add	r1, sp, #16
 8006400:	f7fd feea 	bl	80041d8 <_printf_float>
 8006404:	4607      	mov	r7, r0
 8006406:	1c78      	adds	r0, r7, #1
 8006408:	d1d6      	bne.n	80063b8 <_vfiprintf_r+0x1bc>
 800640a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800640c:	07d9      	lsls	r1, r3, #31
 800640e:	d405      	bmi.n	800641c <_vfiprintf_r+0x220>
 8006410:	89ab      	ldrh	r3, [r5, #12]
 8006412:	059a      	lsls	r2, r3, #22
 8006414:	d402      	bmi.n	800641c <_vfiprintf_r+0x220>
 8006416:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006418:	f7ff fa30 	bl	800587c <__retarget_lock_release_recursive>
 800641c:	89ab      	ldrh	r3, [r5, #12]
 800641e:	065b      	lsls	r3, r3, #25
 8006420:	f53f af12 	bmi.w	8006248 <_vfiprintf_r+0x4c>
 8006424:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006426:	e711      	b.n	800624c <_vfiprintf_r+0x50>
 8006428:	ab03      	add	r3, sp, #12
 800642a:	9300      	str	r3, [sp, #0]
 800642c:	462a      	mov	r2, r5
 800642e:	4630      	mov	r0, r6
 8006430:	4b09      	ldr	r3, [pc, #36]	; (8006458 <_vfiprintf_r+0x25c>)
 8006432:	a904      	add	r1, sp, #16
 8006434:	f7fe f96c 	bl	8004710 <_printf_i>
 8006438:	e7e4      	b.n	8006404 <_vfiprintf_r+0x208>
 800643a:	bf00      	nop
 800643c:	08006c1c 	.word	0x08006c1c
 8006440:	08006c3c 	.word	0x08006c3c
 8006444:	08006bfc 	.word	0x08006bfc
 8006448:	08006db4 	.word	0x08006db4
 800644c:	08006dba 	.word	0x08006dba
 8006450:	08006dbe 	.word	0x08006dbe
 8006454:	080041d9 	.word	0x080041d9
 8006458:	080061d7 	.word	0x080061d7

0800645c <_sbrk_r>:
 800645c:	b538      	push	{r3, r4, r5, lr}
 800645e:	2300      	movs	r3, #0
 8006460:	4d05      	ldr	r5, [pc, #20]	; (8006478 <_sbrk_r+0x1c>)
 8006462:	4604      	mov	r4, r0
 8006464:	4608      	mov	r0, r1
 8006466:	602b      	str	r3, [r5, #0]
 8006468:	f7fb fa9a 	bl	80019a0 <_sbrk>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d102      	bne.n	8006476 <_sbrk_r+0x1a>
 8006470:	682b      	ldr	r3, [r5, #0]
 8006472:	b103      	cbz	r3, 8006476 <_sbrk_r+0x1a>
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20000370 	.word	0x20000370

0800647c <__sread>:
 800647c:	b510      	push	{r4, lr}
 800647e:	460c      	mov	r4, r1
 8006480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006484:	f000 faa4 	bl	80069d0 <_read_r>
 8006488:	2800      	cmp	r0, #0
 800648a:	bfab      	itete	ge
 800648c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800648e:	89a3      	ldrhlt	r3, [r4, #12]
 8006490:	181b      	addge	r3, r3, r0
 8006492:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006496:	bfac      	ite	ge
 8006498:	6563      	strge	r3, [r4, #84]	; 0x54
 800649a:	81a3      	strhlt	r3, [r4, #12]
 800649c:	bd10      	pop	{r4, pc}

0800649e <__swrite>:
 800649e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064a2:	461f      	mov	r7, r3
 80064a4:	898b      	ldrh	r3, [r1, #12]
 80064a6:	4605      	mov	r5, r0
 80064a8:	05db      	lsls	r3, r3, #23
 80064aa:	460c      	mov	r4, r1
 80064ac:	4616      	mov	r6, r2
 80064ae:	d505      	bpl.n	80064bc <__swrite+0x1e>
 80064b0:	2302      	movs	r3, #2
 80064b2:	2200      	movs	r2, #0
 80064b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064b8:	f000 f9f4 	bl	80068a4 <_lseek_r>
 80064bc:	89a3      	ldrh	r3, [r4, #12]
 80064be:	4632      	mov	r2, r6
 80064c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80064c4:	81a3      	strh	r3, [r4, #12]
 80064c6:	4628      	mov	r0, r5
 80064c8:	463b      	mov	r3, r7
 80064ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064d2:	f000 b869 	b.w	80065a8 <_write_r>

080064d6 <__sseek>:
 80064d6:	b510      	push	{r4, lr}
 80064d8:	460c      	mov	r4, r1
 80064da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064de:	f000 f9e1 	bl	80068a4 <_lseek_r>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	89a3      	ldrh	r3, [r4, #12]
 80064e6:	bf15      	itete	ne
 80064e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80064ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80064ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80064f2:	81a3      	strheq	r3, [r4, #12]
 80064f4:	bf18      	it	ne
 80064f6:	81a3      	strhne	r3, [r4, #12]
 80064f8:	bd10      	pop	{r4, pc}

080064fa <__sclose>:
 80064fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064fe:	f000 b8f1 	b.w	80066e4 <_close_r>
	...

08006504 <__swbuf_r>:
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006506:	460e      	mov	r6, r1
 8006508:	4614      	mov	r4, r2
 800650a:	4605      	mov	r5, r0
 800650c:	b118      	cbz	r0, 8006516 <__swbuf_r+0x12>
 800650e:	6983      	ldr	r3, [r0, #24]
 8006510:	b90b      	cbnz	r3, 8006516 <__swbuf_r+0x12>
 8006512:	f7ff f90f 	bl	8005734 <__sinit>
 8006516:	4b21      	ldr	r3, [pc, #132]	; (800659c <__swbuf_r+0x98>)
 8006518:	429c      	cmp	r4, r3
 800651a:	d12b      	bne.n	8006574 <__swbuf_r+0x70>
 800651c:	686c      	ldr	r4, [r5, #4]
 800651e:	69a3      	ldr	r3, [r4, #24]
 8006520:	60a3      	str	r3, [r4, #8]
 8006522:	89a3      	ldrh	r3, [r4, #12]
 8006524:	071a      	lsls	r2, r3, #28
 8006526:	d52f      	bpl.n	8006588 <__swbuf_r+0x84>
 8006528:	6923      	ldr	r3, [r4, #16]
 800652a:	b36b      	cbz	r3, 8006588 <__swbuf_r+0x84>
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	6820      	ldr	r0, [r4, #0]
 8006530:	b2f6      	uxtb	r6, r6
 8006532:	1ac0      	subs	r0, r0, r3
 8006534:	6963      	ldr	r3, [r4, #20]
 8006536:	4637      	mov	r7, r6
 8006538:	4283      	cmp	r3, r0
 800653a:	dc04      	bgt.n	8006546 <__swbuf_r+0x42>
 800653c:	4621      	mov	r1, r4
 800653e:	4628      	mov	r0, r5
 8006540:	f000 f962 	bl	8006808 <_fflush_r>
 8006544:	bb30      	cbnz	r0, 8006594 <__swbuf_r+0x90>
 8006546:	68a3      	ldr	r3, [r4, #8]
 8006548:	3001      	adds	r0, #1
 800654a:	3b01      	subs	r3, #1
 800654c:	60a3      	str	r3, [r4, #8]
 800654e:	6823      	ldr	r3, [r4, #0]
 8006550:	1c5a      	adds	r2, r3, #1
 8006552:	6022      	str	r2, [r4, #0]
 8006554:	701e      	strb	r6, [r3, #0]
 8006556:	6963      	ldr	r3, [r4, #20]
 8006558:	4283      	cmp	r3, r0
 800655a:	d004      	beq.n	8006566 <__swbuf_r+0x62>
 800655c:	89a3      	ldrh	r3, [r4, #12]
 800655e:	07db      	lsls	r3, r3, #31
 8006560:	d506      	bpl.n	8006570 <__swbuf_r+0x6c>
 8006562:	2e0a      	cmp	r6, #10
 8006564:	d104      	bne.n	8006570 <__swbuf_r+0x6c>
 8006566:	4621      	mov	r1, r4
 8006568:	4628      	mov	r0, r5
 800656a:	f000 f94d 	bl	8006808 <_fflush_r>
 800656e:	b988      	cbnz	r0, 8006594 <__swbuf_r+0x90>
 8006570:	4638      	mov	r0, r7
 8006572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <__swbuf_r+0x9c>)
 8006576:	429c      	cmp	r4, r3
 8006578:	d101      	bne.n	800657e <__swbuf_r+0x7a>
 800657a:	68ac      	ldr	r4, [r5, #8]
 800657c:	e7cf      	b.n	800651e <__swbuf_r+0x1a>
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <__swbuf_r+0xa0>)
 8006580:	429c      	cmp	r4, r3
 8006582:	bf08      	it	eq
 8006584:	68ec      	ldreq	r4, [r5, #12]
 8006586:	e7ca      	b.n	800651e <__swbuf_r+0x1a>
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	f000 f81e 	bl	80065cc <__swsetup_r>
 8006590:	2800      	cmp	r0, #0
 8006592:	d0cb      	beq.n	800652c <__swbuf_r+0x28>
 8006594:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006598:	e7ea      	b.n	8006570 <__swbuf_r+0x6c>
 800659a:	bf00      	nop
 800659c:	08006c1c 	.word	0x08006c1c
 80065a0:	08006c3c 	.word	0x08006c3c
 80065a4:	08006bfc 	.word	0x08006bfc

080065a8 <_write_r>:
 80065a8:	b538      	push	{r3, r4, r5, lr}
 80065aa:	4604      	mov	r4, r0
 80065ac:	4608      	mov	r0, r1
 80065ae:	4611      	mov	r1, r2
 80065b0:	2200      	movs	r2, #0
 80065b2:	4d05      	ldr	r5, [pc, #20]	; (80065c8 <_write_r+0x20>)
 80065b4:	602a      	str	r2, [r5, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	f7fa fcc4 	bl	8000f44 <_write>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_write_r+0x1e>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_write_r+0x1e>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	20000370 	.word	0x20000370

080065cc <__swsetup_r>:
 80065cc:	4b32      	ldr	r3, [pc, #200]	; (8006698 <__swsetup_r+0xcc>)
 80065ce:	b570      	push	{r4, r5, r6, lr}
 80065d0:	681d      	ldr	r5, [r3, #0]
 80065d2:	4606      	mov	r6, r0
 80065d4:	460c      	mov	r4, r1
 80065d6:	b125      	cbz	r5, 80065e2 <__swsetup_r+0x16>
 80065d8:	69ab      	ldr	r3, [r5, #24]
 80065da:	b913      	cbnz	r3, 80065e2 <__swsetup_r+0x16>
 80065dc:	4628      	mov	r0, r5
 80065de:	f7ff f8a9 	bl	8005734 <__sinit>
 80065e2:	4b2e      	ldr	r3, [pc, #184]	; (800669c <__swsetup_r+0xd0>)
 80065e4:	429c      	cmp	r4, r3
 80065e6:	d10f      	bne.n	8006608 <__swsetup_r+0x3c>
 80065e8:	686c      	ldr	r4, [r5, #4]
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065f0:	0719      	lsls	r1, r3, #28
 80065f2:	d42c      	bmi.n	800664e <__swsetup_r+0x82>
 80065f4:	06dd      	lsls	r5, r3, #27
 80065f6:	d411      	bmi.n	800661c <__swsetup_r+0x50>
 80065f8:	2309      	movs	r3, #9
 80065fa:	6033      	str	r3, [r6, #0]
 80065fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006600:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006604:	81a3      	strh	r3, [r4, #12]
 8006606:	e03e      	b.n	8006686 <__swsetup_r+0xba>
 8006608:	4b25      	ldr	r3, [pc, #148]	; (80066a0 <__swsetup_r+0xd4>)
 800660a:	429c      	cmp	r4, r3
 800660c:	d101      	bne.n	8006612 <__swsetup_r+0x46>
 800660e:	68ac      	ldr	r4, [r5, #8]
 8006610:	e7eb      	b.n	80065ea <__swsetup_r+0x1e>
 8006612:	4b24      	ldr	r3, [pc, #144]	; (80066a4 <__swsetup_r+0xd8>)
 8006614:	429c      	cmp	r4, r3
 8006616:	bf08      	it	eq
 8006618:	68ec      	ldreq	r4, [r5, #12]
 800661a:	e7e6      	b.n	80065ea <__swsetup_r+0x1e>
 800661c:	0758      	lsls	r0, r3, #29
 800661e:	d512      	bpl.n	8006646 <__swsetup_r+0x7a>
 8006620:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006622:	b141      	cbz	r1, 8006636 <__swsetup_r+0x6a>
 8006624:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006628:	4299      	cmp	r1, r3
 800662a:	d002      	beq.n	8006632 <__swsetup_r+0x66>
 800662c:	4630      	mov	r0, r6
 800662e:	f7ff fce1 	bl	8005ff4 <_free_r>
 8006632:	2300      	movs	r3, #0
 8006634:	6363      	str	r3, [r4, #52]	; 0x34
 8006636:	89a3      	ldrh	r3, [r4, #12]
 8006638:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800663c:	81a3      	strh	r3, [r4, #12]
 800663e:	2300      	movs	r3, #0
 8006640:	6063      	str	r3, [r4, #4]
 8006642:	6923      	ldr	r3, [r4, #16]
 8006644:	6023      	str	r3, [r4, #0]
 8006646:	89a3      	ldrh	r3, [r4, #12]
 8006648:	f043 0308 	orr.w	r3, r3, #8
 800664c:	81a3      	strh	r3, [r4, #12]
 800664e:	6923      	ldr	r3, [r4, #16]
 8006650:	b94b      	cbnz	r3, 8006666 <__swsetup_r+0x9a>
 8006652:	89a3      	ldrh	r3, [r4, #12]
 8006654:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006658:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800665c:	d003      	beq.n	8006666 <__swsetup_r+0x9a>
 800665e:	4621      	mov	r1, r4
 8006660:	4630      	mov	r0, r6
 8006662:	f000 f957 	bl	8006914 <__smakebuf_r>
 8006666:	89a0      	ldrh	r0, [r4, #12]
 8006668:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800666c:	f010 0301 	ands.w	r3, r0, #1
 8006670:	d00a      	beq.n	8006688 <__swsetup_r+0xbc>
 8006672:	2300      	movs	r3, #0
 8006674:	60a3      	str	r3, [r4, #8]
 8006676:	6963      	ldr	r3, [r4, #20]
 8006678:	425b      	negs	r3, r3
 800667a:	61a3      	str	r3, [r4, #24]
 800667c:	6923      	ldr	r3, [r4, #16]
 800667e:	b943      	cbnz	r3, 8006692 <__swsetup_r+0xc6>
 8006680:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006684:	d1ba      	bne.n	80065fc <__swsetup_r+0x30>
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	0781      	lsls	r1, r0, #30
 800668a:	bf58      	it	pl
 800668c:	6963      	ldrpl	r3, [r4, #20]
 800668e:	60a3      	str	r3, [r4, #8]
 8006690:	e7f4      	b.n	800667c <__swsetup_r+0xb0>
 8006692:	2000      	movs	r0, #0
 8006694:	e7f7      	b.n	8006686 <__swsetup_r+0xba>
 8006696:	bf00      	nop
 8006698:	20000014 	.word	0x20000014
 800669c:	08006c1c 	.word	0x08006c1c
 80066a0:	08006c3c 	.word	0x08006c3c
 80066a4:	08006bfc 	.word	0x08006bfc

080066a8 <__assert_func>:
 80066a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80066aa:	4614      	mov	r4, r2
 80066ac:	461a      	mov	r2, r3
 80066ae:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <__assert_func+0x2c>)
 80066b0:	4605      	mov	r5, r0
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	68d8      	ldr	r0, [r3, #12]
 80066b6:	b14c      	cbz	r4, 80066cc <__assert_func+0x24>
 80066b8:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <__assert_func+0x30>)
 80066ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80066be:	9100      	str	r1, [sp, #0]
 80066c0:	462b      	mov	r3, r5
 80066c2:	4906      	ldr	r1, [pc, #24]	; (80066dc <__assert_func+0x34>)
 80066c4:	f000 f8dc 	bl	8006880 <fiprintf>
 80066c8:	f000 f9a1 	bl	8006a0e <abort>
 80066cc:	4b04      	ldr	r3, [pc, #16]	; (80066e0 <__assert_func+0x38>)
 80066ce:	461c      	mov	r4, r3
 80066d0:	e7f3      	b.n	80066ba <__assert_func+0x12>
 80066d2:	bf00      	nop
 80066d4:	20000014 	.word	0x20000014
 80066d8:	08006dc5 	.word	0x08006dc5
 80066dc:	08006dd2 	.word	0x08006dd2
 80066e0:	08006e00 	.word	0x08006e00

080066e4 <_close_r>:
 80066e4:	b538      	push	{r3, r4, r5, lr}
 80066e6:	2300      	movs	r3, #0
 80066e8:	4d05      	ldr	r5, [pc, #20]	; (8006700 <_close_r+0x1c>)
 80066ea:	4604      	mov	r4, r0
 80066ec:	4608      	mov	r0, r1
 80066ee:	602b      	str	r3, [r5, #0]
 80066f0:	f7fb f926 	bl	8001940 <_close>
 80066f4:	1c43      	adds	r3, r0, #1
 80066f6:	d102      	bne.n	80066fe <_close_r+0x1a>
 80066f8:	682b      	ldr	r3, [r5, #0]
 80066fa:	b103      	cbz	r3, 80066fe <_close_r+0x1a>
 80066fc:	6023      	str	r3, [r4, #0]
 80066fe:	bd38      	pop	{r3, r4, r5, pc}
 8006700:	20000370 	.word	0x20000370

08006704 <__sflush_r>:
 8006704:	898a      	ldrh	r2, [r1, #12]
 8006706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006708:	4605      	mov	r5, r0
 800670a:	0710      	lsls	r0, r2, #28
 800670c:	460c      	mov	r4, r1
 800670e:	d457      	bmi.n	80067c0 <__sflush_r+0xbc>
 8006710:	684b      	ldr	r3, [r1, #4]
 8006712:	2b00      	cmp	r3, #0
 8006714:	dc04      	bgt.n	8006720 <__sflush_r+0x1c>
 8006716:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	dc01      	bgt.n	8006720 <__sflush_r+0x1c>
 800671c:	2000      	movs	r0, #0
 800671e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006720:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006722:	2e00      	cmp	r6, #0
 8006724:	d0fa      	beq.n	800671c <__sflush_r+0x18>
 8006726:	2300      	movs	r3, #0
 8006728:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800672c:	682f      	ldr	r7, [r5, #0]
 800672e:	602b      	str	r3, [r5, #0]
 8006730:	d032      	beq.n	8006798 <__sflush_r+0x94>
 8006732:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	075a      	lsls	r2, r3, #29
 8006738:	d505      	bpl.n	8006746 <__sflush_r+0x42>
 800673a:	6863      	ldr	r3, [r4, #4]
 800673c:	1ac0      	subs	r0, r0, r3
 800673e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006740:	b10b      	cbz	r3, 8006746 <__sflush_r+0x42>
 8006742:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006744:	1ac0      	subs	r0, r0, r3
 8006746:	2300      	movs	r3, #0
 8006748:	4602      	mov	r2, r0
 800674a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800674c:	4628      	mov	r0, r5
 800674e:	6a21      	ldr	r1, [r4, #32]
 8006750:	47b0      	blx	r6
 8006752:	1c43      	adds	r3, r0, #1
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	d106      	bne.n	8006766 <__sflush_r+0x62>
 8006758:	6829      	ldr	r1, [r5, #0]
 800675a:	291d      	cmp	r1, #29
 800675c:	d82c      	bhi.n	80067b8 <__sflush_r+0xb4>
 800675e:	4a29      	ldr	r2, [pc, #164]	; (8006804 <__sflush_r+0x100>)
 8006760:	40ca      	lsrs	r2, r1
 8006762:	07d6      	lsls	r6, r2, #31
 8006764:	d528      	bpl.n	80067b8 <__sflush_r+0xb4>
 8006766:	2200      	movs	r2, #0
 8006768:	6062      	str	r2, [r4, #4]
 800676a:	6922      	ldr	r2, [r4, #16]
 800676c:	04d9      	lsls	r1, r3, #19
 800676e:	6022      	str	r2, [r4, #0]
 8006770:	d504      	bpl.n	800677c <__sflush_r+0x78>
 8006772:	1c42      	adds	r2, r0, #1
 8006774:	d101      	bne.n	800677a <__sflush_r+0x76>
 8006776:	682b      	ldr	r3, [r5, #0]
 8006778:	b903      	cbnz	r3, 800677c <__sflush_r+0x78>
 800677a:	6560      	str	r0, [r4, #84]	; 0x54
 800677c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800677e:	602f      	str	r7, [r5, #0]
 8006780:	2900      	cmp	r1, #0
 8006782:	d0cb      	beq.n	800671c <__sflush_r+0x18>
 8006784:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006788:	4299      	cmp	r1, r3
 800678a:	d002      	beq.n	8006792 <__sflush_r+0x8e>
 800678c:	4628      	mov	r0, r5
 800678e:	f7ff fc31 	bl	8005ff4 <_free_r>
 8006792:	2000      	movs	r0, #0
 8006794:	6360      	str	r0, [r4, #52]	; 0x34
 8006796:	e7c2      	b.n	800671e <__sflush_r+0x1a>
 8006798:	6a21      	ldr	r1, [r4, #32]
 800679a:	2301      	movs	r3, #1
 800679c:	4628      	mov	r0, r5
 800679e:	47b0      	blx	r6
 80067a0:	1c41      	adds	r1, r0, #1
 80067a2:	d1c7      	bne.n	8006734 <__sflush_r+0x30>
 80067a4:	682b      	ldr	r3, [r5, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d0c4      	beq.n	8006734 <__sflush_r+0x30>
 80067aa:	2b1d      	cmp	r3, #29
 80067ac:	d001      	beq.n	80067b2 <__sflush_r+0xae>
 80067ae:	2b16      	cmp	r3, #22
 80067b0:	d101      	bne.n	80067b6 <__sflush_r+0xb2>
 80067b2:	602f      	str	r7, [r5, #0]
 80067b4:	e7b2      	b.n	800671c <__sflush_r+0x18>
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067bc:	81a3      	strh	r3, [r4, #12]
 80067be:	e7ae      	b.n	800671e <__sflush_r+0x1a>
 80067c0:	690f      	ldr	r7, [r1, #16]
 80067c2:	2f00      	cmp	r7, #0
 80067c4:	d0aa      	beq.n	800671c <__sflush_r+0x18>
 80067c6:	0793      	lsls	r3, r2, #30
 80067c8:	bf18      	it	ne
 80067ca:	2300      	movne	r3, #0
 80067cc:	680e      	ldr	r6, [r1, #0]
 80067ce:	bf08      	it	eq
 80067d0:	694b      	ldreq	r3, [r1, #20]
 80067d2:	1bf6      	subs	r6, r6, r7
 80067d4:	600f      	str	r7, [r1, #0]
 80067d6:	608b      	str	r3, [r1, #8]
 80067d8:	2e00      	cmp	r6, #0
 80067da:	dd9f      	ble.n	800671c <__sflush_r+0x18>
 80067dc:	4633      	mov	r3, r6
 80067de:	463a      	mov	r2, r7
 80067e0:	4628      	mov	r0, r5
 80067e2:	6a21      	ldr	r1, [r4, #32]
 80067e4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80067e8:	47e0      	blx	ip
 80067ea:	2800      	cmp	r0, #0
 80067ec:	dc06      	bgt.n	80067fc <__sflush_r+0xf8>
 80067ee:	89a3      	ldrh	r3, [r4, #12]
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067f8:	81a3      	strh	r3, [r4, #12]
 80067fa:	e790      	b.n	800671e <__sflush_r+0x1a>
 80067fc:	4407      	add	r7, r0
 80067fe:	1a36      	subs	r6, r6, r0
 8006800:	e7ea      	b.n	80067d8 <__sflush_r+0xd4>
 8006802:	bf00      	nop
 8006804:	20400001 	.word	0x20400001

08006808 <_fflush_r>:
 8006808:	b538      	push	{r3, r4, r5, lr}
 800680a:	690b      	ldr	r3, [r1, #16]
 800680c:	4605      	mov	r5, r0
 800680e:	460c      	mov	r4, r1
 8006810:	b913      	cbnz	r3, 8006818 <_fflush_r+0x10>
 8006812:	2500      	movs	r5, #0
 8006814:	4628      	mov	r0, r5
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	b118      	cbz	r0, 8006822 <_fflush_r+0x1a>
 800681a:	6983      	ldr	r3, [r0, #24]
 800681c:	b90b      	cbnz	r3, 8006822 <_fflush_r+0x1a>
 800681e:	f7fe ff89 	bl	8005734 <__sinit>
 8006822:	4b14      	ldr	r3, [pc, #80]	; (8006874 <_fflush_r+0x6c>)
 8006824:	429c      	cmp	r4, r3
 8006826:	d11b      	bne.n	8006860 <_fflush_r+0x58>
 8006828:	686c      	ldr	r4, [r5, #4]
 800682a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0ef      	beq.n	8006812 <_fflush_r+0xa>
 8006832:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006834:	07d0      	lsls	r0, r2, #31
 8006836:	d404      	bmi.n	8006842 <_fflush_r+0x3a>
 8006838:	0599      	lsls	r1, r3, #22
 800683a:	d402      	bmi.n	8006842 <_fflush_r+0x3a>
 800683c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800683e:	f7ff f81c 	bl	800587a <__retarget_lock_acquire_recursive>
 8006842:	4628      	mov	r0, r5
 8006844:	4621      	mov	r1, r4
 8006846:	f7ff ff5d 	bl	8006704 <__sflush_r>
 800684a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800684c:	4605      	mov	r5, r0
 800684e:	07da      	lsls	r2, r3, #31
 8006850:	d4e0      	bmi.n	8006814 <_fflush_r+0xc>
 8006852:	89a3      	ldrh	r3, [r4, #12]
 8006854:	059b      	lsls	r3, r3, #22
 8006856:	d4dd      	bmi.n	8006814 <_fflush_r+0xc>
 8006858:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800685a:	f7ff f80f 	bl	800587c <__retarget_lock_release_recursive>
 800685e:	e7d9      	b.n	8006814 <_fflush_r+0xc>
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <_fflush_r+0x70>)
 8006862:	429c      	cmp	r4, r3
 8006864:	d101      	bne.n	800686a <_fflush_r+0x62>
 8006866:	68ac      	ldr	r4, [r5, #8]
 8006868:	e7df      	b.n	800682a <_fflush_r+0x22>
 800686a:	4b04      	ldr	r3, [pc, #16]	; (800687c <_fflush_r+0x74>)
 800686c:	429c      	cmp	r4, r3
 800686e:	bf08      	it	eq
 8006870:	68ec      	ldreq	r4, [r5, #12]
 8006872:	e7da      	b.n	800682a <_fflush_r+0x22>
 8006874:	08006c1c 	.word	0x08006c1c
 8006878:	08006c3c 	.word	0x08006c3c
 800687c:	08006bfc 	.word	0x08006bfc

08006880 <fiprintf>:
 8006880:	b40e      	push	{r1, r2, r3}
 8006882:	b503      	push	{r0, r1, lr}
 8006884:	4601      	mov	r1, r0
 8006886:	ab03      	add	r3, sp, #12
 8006888:	4805      	ldr	r0, [pc, #20]	; (80068a0 <fiprintf+0x20>)
 800688a:	f853 2b04 	ldr.w	r2, [r3], #4
 800688e:	6800      	ldr	r0, [r0, #0]
 8006890:	9301      	str	r3, [sp, #4]
 8006892:	f7ff fcb3 	bl	80061fc <_vfiprintf_r>
 8006896:	b002      	add	sp, #8
 8006898:	f85d eb04 	ldr.w	lr, [sp], #4
 800689c:	b003      	add	sp, #12
 800689e:	4770      	bx	lr
 80068a0:	20000014 	.word	0x20000014

080068a4 <_lseek_r>:
 80068a4:	b538      	push	{r3, r4, r5, lr}
 80068a6:	4604      	mov	r4, r0
 80068a8:	4608      	mov	r0, r1
 80068aa:	4611      	mov	r1, r2
 80068ac:	2200      	movs	r2, #0
 80068ae:	4d05      	ldr	r5, [pc, #20]	; (80068c4 <_lseek_r+0x20>)
 80068b0:	602a      	str	r2, [r5, #0]
 80068b2:	461a      	mov	r2, r3
 80068b4:	f7fb f868 	bl	8001988 <_lseek>
 80068b8:	1c43      	adds	r3, r0, #1
 80068ba:	d102      	bne.n	80068c2 <_lseek_r+0x1e>
 80068bc:	682b      	ldr	r3, [r5, #0]
 80068be:	b103      	cbz	r3, 80068c2 <_lseek_r+0x1e>
 80068c0:	6023      	str	r3, [r4, #0]
 80068c2:	bd38      	pop	{r3, r4, r5, pc}
 80068c4:	20000370 	.word	0x20000370

080068c8 <__swhatbuf_r>:
 80068c8:	b570      	push	{r4, r5, r6, lr}
 80068ca:	460e      	mov	r6, r1
 80068cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d0:	4614      	mov	r4, r2
 80068d2:	2900      	cmp	r1, #0
 80068d4:	461d      	mov	r5, r3
 80068d6:	b096      	sub	sp, #88	; 0x58
 80068d8:	da08      	bge.n	80068ec <__swhatbuf_r+0x24>
 80068da:	2200      	movs	r2, #0
 80068dc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80068e0:	602a      	str	r2, [r5, #0]
 80068e2:	061a      	lsls	r2, r3, #24
 80068e4:	d410      	bmi.n	8006908 <__swhatbuf_r+0x40>
 80068e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068ea:	e00e      	b.n	800690a <__swhatbuf_r+0x42>
 80068ec:	466a      	mov	r2, sp
 80068ee:	f000 f895 	bl	8006a1c <_fstat_r>
 80068f2:	2800      	cmp	r0, #0
 80068f4:	dbf1      	blt.n	80068da <__swhatbuf_r+0x12>
 80068f6:	9a01      	ldr	r2, [sp, #4]
 80068f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80068fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006900:	425a      	negs	r2, r3
 8006902:	415a      	adcs	r2, r3
 8006904:	602a      	str	r2, [r5, #0]
 8006906:	e7ee      	b.n	80068e6 <__swhatbuf_r+0x1e>
 8006908:	2340      	movs	r3, #64	; 0x40
 800690a:	2000      	movs	r0, #0
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	b016      	add	sp, #88	; 0x58
 8006910:	bd70      	pop	{r4, r5, r6, pc}
	...

08006914 <__smakebuf_r>:
 8006914:	898b      	ldrh	r3, [r1, #12]
 8006916:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006918:	079d      	lsls	r5, r3, #30
 800691a:	4606      	mov	r6, r0
 800691c:	460c      	mov	r4, r1
 800691e:	d507      	bpl.n	8006930 <__smakebuf_r+0x1c>
 8006920:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	6123      	str	r3, [r4, #16]
 8006928:	2301      	movs	r3, #1
 800692a:	6163      	str	r3, [r4, #20]
 800692c:	b002      	add	sp, #8
 800692e:	bd70      	pop	{r4, r5, r6, pc}
 8006930:	466a      	mov	r2, sp
 8006932:	ab01      	add	r3, sp, #4
 8006934:	f7ff ffc8 	bl	80068c8 <__swhatbuf_r>
 8006938:	9900      	ldr	r1, [sp, #0]
 800693a:	4605      	mov	r5, r0
 800693c:	4630      	mov	r0, r6
 800693e:	f7ff fbc1 	bl	80060c4 <_malloc_r>
 8006942:	b948      	cbnz	r0, 8006958 <__smakebuf_r+0x44>
 8006944:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006948:	059a      	lsls	r2, r3, #22
 800694a:	d4ef      	bmi.n	800692c <__smakebuf_r+0x18>
 800694c:	f023 0303 	bic.w	r3, r3, #3
 8006950:	f043 0302 	orr.w	r3, r3, #2
 8006954:	81a3      	strh	r3, [r4, #12]
 8006956:	e7e3      	b.n	8006920 <__smakebuf_r+0xc>
 8006958:	4b0d      	ldr	r3, [pc, #52]	; (8006990 <__smakebuf_r+0x7c>)
 800695a:	62b3      	str	r3, [r6, #40]	; 0x28
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	6020      	str	r0, [r4, #0]
 8006960:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006964:	81a3      	strh	r3, [r4, #12]
 8006966:	9b00      	ldr	r3, [sp, #0]
 8006968:	6120      	str	r0, [r4, #16]
 800696a:	6163      	str	r3, [r4, #20]
 800696c:	9b01      	ldr	r3, [sp, #4]
 800696e:	b15b      	cbz	r3, 8006988 <__smakebuf_r+0x74>
 8006970:	4630      	mov	r0, r6
 8006972:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006976:	f000 f863 	bl	8006a40 <_isatty_r>
 800697a:	b128      	cbz	r0, 8006988 <__smakebuf_r+0x74>
 800697c:	89a3      	ldrh	r3, [r4, #12]
 800697e:	f023 0303 	bic.w	r3, r3, #3
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	81a3      	strh	r3, [r4, #12]
 8006988:	89a0      	ldrh	r0, [r4, #12]
 800698a:	4305      	orrs	r5, r0
 800698c:	81a5      	strh	r5, [r4, #12]
 800698e:	e7cd      	b.n	800692c <__smakebuf_r+0x18>
 8006990:	080056cd 	.word	0x080056cd

08006994 <__ascii_mbtowc>:
 8006994:	b082      	sub	sp, #8
 8006996:	b901      	cbnz	r1, 800699a <__ascii_mbtowc+0x6>
 8006998:	a901      	add	r1, sp, #4
 800699a:	b142      	cbz	r2, 80069ae <__ascii_mbtowc+0x1a>
 800699c:	b14b      	cbz	r3, 80069b2 <__ascii_mbtowc+0x1e>
 800699e:	7813      	ldrb	r3, [r2, #0]
 80069a0:	600b      	str	r3, [r1, #0]
 80069a2:	7812      	ldrb	r2, [r2, #0]
 80069a4:	1e10      	subs	r0, r2, #0
 80069a6:	bf18      	it	ne
 80069a8:	2001      	movne	r0, #1
 80069aa:	b002      	add	sp, #8
 80069ac:	4770      	bx	lr
 80069ae:	4610      	mov	r0, r2
 80069b0:	e7fb      	b.n	80069aa <__ascii_mbtowc+0x16>
 80069b2:	f06f 0001 	mvn.w	r0, #1
 80069b6:	e7f8      	b.n	80069aa <__ascii_mbtowc+0x16>

080069b8 <__malloc_lock>:
 80069b8:	4801      	ldr	r0, [pc, #4]	; (80069c0 <__malloc_lock+0x8>)
 80069ba:	f7fe bf5e 	b.w	800587a <__retarget_lock_acquire_recursive>
 80069be:	bf00      	nop
 80069c0:	20000364 	.word	0x20000364

080069c4 <__malloc_unlock>:
 80069c4:	4801      	ldr	r0, [pc, #4]	; (80069cc <__malloc_unlock+0x8>)
 80069c6:	f7fe bf59 	b.w	800587c <__retarget_lock_release_recursive>
 80069ca:	bf00      	nop
 80069cc:	20000364 	.word	0x20000364

080069d0 <_read_r>:
 80069d0:	b538      	push	{r3, r4, r5, lr}
 80069d2:	4604      	mov	r4, r0
 80069d4:	4608      	mov	r0, r1
 80069d6:	4611      	mov	r1, r2
 80069d8:	2200      	movs	r2, #0
 80069da:	4d05      	ldr	r5, [pc, #20]	; (80069f0 <_read_r+0x20>)
 80069dc:	602a      	str	r2, [r5, #0]
 80069de:	461a      	mov	r2, r3
 80069e0:	f7fa ff91 	bl	8001906 <_read>
 80069e4:	1c43      	adds	r3, r0, #1
 80069e6:	d102      	bne.n	80069ee <_read_r+0x1e>
 80069e8:	682b      	ldr	r3, [r5, #0]
 80069ea:	b103      	cbz	r3, 80069ee <_read_r+0x1e>
 80069ec:	6023      	str	r3, [r4, #0]
 80069ee:	bd38      	pop	{r3, r4, r5, pc}
 80069f0:	20000370 	.word	0x20000370

080069f4 <__ascii_wctomb>:
 80069f4:	4603      	mov	r3, r0
 80069f6:	4608      	mov	r0, r1
 80069f8:	b141      	cbz	r1, 8006a0c <__ascii_wctomb+0x18>
 80069fa:	2aff      	cmp	r2, #255	; 0xff
 80069fc:	d904      	bls.n	8006a08 <__ascii_wctomb+0x14>
 80069fe:	228a      	movs	r2, #138	; 0x8a
 8006a00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	4770      	bx	lr
 8006a08:	2001      	movs	r0, #1
 8006a0a:	700a      	strb	r2, [r1, #0]
 8006a0c:	4770      	bx	lr

08006a0e <abort>:
 8006a0e:	2006      	movs	r0, #6
 8006a10:	b508      	push	{r3, lr}
 8006a12:	f000 f84d 	bl	8006ab0 <raise>
 8006a16:	2001      	movs	r0, #1
 8006a18:	f7fa ff6b 	bl	80018f2 <_exit>

08006a1c <_fstat_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	2300      	movs	r3, #0
 8006a20:	4d06      	ldr	r5, [pc, #24]	; (8006a3c <_fstat_r+0x20>)
 8006a22:	4604      	mov	r4, r0
 8006a24:	4608      	mov	r0, r1
 8006a26:	4611      	mov	r1, r2
 8006a28:	602b      	str	r3, [r5, #0]
 8006a2a:	f7fa ff94 	bl	8001956 <_fstat>
 8006a2e:	1c43      	adds	r3, r0, #1
 8006a30:	d102      	bne.n	8006a38 <_fstat_r+0x1c>
 8006a32:	682b      	ldr	r3, [r5, #0]
 8006a34:	b103      	cbz	r3, 8006a38 <_fstat_r+0x1c>
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	bd38      	pop	{r3, r4, r5, pc}
 8006a3a:	bf00      	nop
 8006a3c:	20000370 	.word	0x20000370

08006a40 <_isatty_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	2300      	movs	r3, #0
 8006a44:	4d05      	ldr	r5, [pc, #20]	; (8006a5c <_isatty_r+0x1c>)
 8006a46:	4604      	mov	r4, r0
 8006a48:	4608      	mov	r0, r1
 8006a4a:	602b      	str	r3, [r5, #0]
 8006a4c:	f7fa ff92 	bl	8001974 <_isatty>
 8006a50:	1c43      	adds	r3, r0, #1
 8006a52:	d102      	bne.n	8006a5a <_isatty_r+0x1a>
 8006a54:	682b      	ldr	r3, [r5, #0]
 8006a56:	b103      	cbz	r3, 8006a5a <_isatty_r+0x1a>
 8006a58:	6023      	str	r3, [r4, #0]
 8006a5a:	bd38      	pop	{r3, r4, r5, pc}
 8006a5c:	20000370 	.word	0x20000370

08006a60 <_raise_r>:
 8006a60:	291f      	cmp	r1, #31
 8006a62:	b538      	push	{r3, r4, r5, lr}
 8006a64:	4604      	mov	r4, r0
 8006a66:	460d      	mov	r5, r1
 8006a68:	d904      	bls.n	8006a74 <_raise_r+0x14>
 8006a6a:	2316      	movs	r3, #22
 8006a6c:	6003      	str	r3, [r0, #0]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006a76:	b112      	cbz	r2, 8006a7e <_raise_r+0x1e>
 8006a78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006a7c:	b94b      	cbnz	r3, 8006a92 <_raise_r+0x32>
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f000 f830 	bl	8006ae4 <_getpid_r>
 8006a84:	462a      	mov	r2, r5
 8006a86:	4601      	mov	r1, r0
 8006a88:	4620      	mov	r0, r4
 8006a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a8e:	f000 b817 	b.w	8006ac0 <_kill_r>
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d00a      	beq.n	8006aac <_raise_r+0x4c>
 8006a96:	1c59      	adds	r1, r3, #1
 8006a98:	d103      	bne.n	8006aa2 <_raise_r+0x42>
 8006a9a:	2316      	movs	r3, #22
 8006a9c:	6003      	str	r3, [r0, #0]
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	e7e7      	b.n	8006a72 <_raise_r+0x12>
 8006aa2:	2400      	movs	r4, #0
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006aaa:	4798      	blx	r3
 8006aac:	2000      	movs	r0, #0
 8006aae:	e7e0      	b.n	8006a72 <_raise_r+0x12>

08006ab0 <raise>:
 8006ab0:	4b02      	ldr	r3, [pc, #8]	; (8006abc <raise+0xc>)
 8006ab2:	4601      	mov	r1, r0
 8006ab4:	6818      	ldr	r0, [r3, #0]
 8006ab6:	f7ff bfd3 	b.w	8006a60 <_raise_r>
 8006aba:	bf00      	nop
 8006abc:	20000014 	.word	0x20000014

08006ac0 <_kill_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4d06      	ldr	r5, [pc, #24]	; (8006ae0 <_kill_r+0x20>)
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	f7fa ff00 	bl	80018d2 <_kill>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d102      	bne.n	8006adc <_kill_r+0x1c>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	b103      	cbz	r3, 8006adc <_kill_r+0x1c>
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000370 	.word	0x20000370

08006ae4 <_getpid_r>:
 8006ae4:	f7fa beee 	b.w	80018c4 <_getpid>

08006ae8 <_init>:
 8006ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006aea:	bf00      	nop
 8006aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006aee:	bc08      	pop	{r3}
 8006af0:	469e      	mov	lr, r3
 8006af2:	4770      	bx	lr

08006af4 <_fini>:
 8006af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006af6:	bf00      	nop
 8006af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006afa:	bc08      	pop	{r3}
 8006afc:	469e      	mov	lr, r3
 8006afe:	4770      	bx	lr
