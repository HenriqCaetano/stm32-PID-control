
motorControl-f103c8t6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ee8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08006ff8  08006ff8  00016ff8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007404  08007404  000201dc  2**0
                  CONTENTS
  4 .ARM          00000000  08007404  08007404  000201dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007404  08007404  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007404  08007404  00017404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007408  08007408  00017408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800740c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c8  200001dc  080075e8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003a4  080075e8  000203a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ca73  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c62  00000000  00000000  0002cc78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0002e8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  0002f568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018790  00000000  00000000  00030138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d32e  00000000  00000000  000488c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008bbe2  00000000  00000000  00055bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e17d8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000461c  00000000  00000000  000e1828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001dc 	.word	0x200001dc
 800012c:	00000000 	.word	0x00000000
 8000130:	08006fe0 	.word	0x08006fe0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e0 	.word	0x200001e0
 800014c:	08006fe0 	.word	0x08006fe0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_f2uiz>:
 8001030:	0042      	lsls	r2, r0, #1
 8001032:	d20e      	bcs.n	8001052 <__aeabi_f2uiz+0x22>
 8001034:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001038:	d30b      	bcc.n	8001052 <__aeabi_f2uiz+0x22>
 800103a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800103e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001042:	d409      	bmi.n	8001058 <__aeabi_f2uiz+0x28>
 8001044:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001048:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800104c:	fa23 f002 	lsr.w	r0, r3, r2
 8001050:	4770      	bx	lr
 8001052:	f04f 0000 	mov.w	r0, #0
 8001056:	4770      	bx	lr
 8001058:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800105c:	d101      	bne.n	8001062 <__aeabi_f2uiz+0x32>
 800105e:	0242      	lsls	r2, r0, #9
 8001060:	d102      	bne.n	8001068 <__aeabi_f2uiz+0x38>
 8001062:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001066:	4770      	bx	lr
 8001068:	f04f 0000 	mov.w	r0, #0
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop

08001070 <_write>:
static void MX_USART1_UART_Init(void);
static void MX_TIM4_Init(void);
static void MX_TIM1_Init(void);
/* USER CODE BEGIN PFP */
//for data transmission using FTDI, requires USART 1 enabled
int _write(int fd, char* ptr, int len) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	60f8      	str	r0, [r7, #12]
 8001078:	60b9      	str	r1, [r7, #8]
 800107a:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	b29a      	uxth	r2, r3
 8001080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	4804      	ldr	r0, [pc, #16]	; (8001098 <_write+0x28>)
 8001088:	f003 f8d3 	bl	8004232 <HAL_UART_Transmit>
    return len;
 800108c:	687b      	ldr	r3, [r7, #4]
}
 800108e:	4618      	mov	r0, r3
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002d0 	.word	0x200002d0

0800109c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010a2:	f000 ff9f 	bl	8001fe4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010a6:	f000 f85b 	bl	8001160 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010aa:	f000 fa1f 	bl	80014ec <MX_GPIO_Init>
  MX_TIM2_Init();
 80010ae:	f000 f93b 	bl	8001328 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80010b2:	f000 f9f1 	bl	8001498 <MX_USART1_UART_Init>
  MX_TIM4_Init();
 80010b6:	f000 f99b 	bl	80013f0 <MX_TIM4_Init>
  MX_TIM1_Init();
 80010ba:	f000 f897 	bl	80011ec <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */


  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); //starts PWM timer
 80010be:	210c      	movs	r1, #12
 80010c0:	481d      	ldr	r0, [pc, #116]	; (8001138 <main+0x9c>)
 80010c2:	f001 ffa5 	bl	8003010 <HAL_TIM_PWM_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL); //starts encoder timer
 80010c6:	213c      	movs	r1, #60	; 0x3c
 80010c8:	481c      	ldr	r0, [pc, #112]	; (800113c <main+0xa0>)
 80010ca:	f002 f8e5 	bl	8003298 <HAL_TIM_Encoder_Start>

  pidInit(&controller, MIN_PWM, MAX_PWM, KP, KI, KD); //starts PID controller
 80010ce:	f04f 0300 	mov.w	r3, #0
 80010d2:	9301      	str	r3, [sp, #4]
 80010d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80010d8:	9300      	str	r3, [sp, #0]
 80010da:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 80010de:	4a18      	ldr	r2, [pc, #96]	; (8001140 <main+0xa4>)
 80010e0:	4918      	ldr	r1, [pc, #96]	; (8001144 <main+0xa8>)
 80010e2:	4819      	ldr	r0, [pc, #100]	; (8001148 <main+0xac>)
 80010e4:	f000 fcd3 	bl	8001a8e <pidInit>

  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin, GPIO_PIN_SET); //enable ON (required)
 80010e8:	2201      	movs	r2, #1
 80010ea:	2108      	movs	r1, #8
 80010ec:	4817      	ldr	r0, [pc, #92]	; (800114c <main+0xb0>)
 80010ee:	f001 fa6d 	bl	80025cc <HAL_GPIO_WritePin>
  motorStop(); //motor initially stopped
 80010f2:	f000 fcb7 	bl	8001a64 <motorStop>

  htim1.Instance->CCR4 = 0; //PWM timer inittialy 0
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <main+0x9c>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	2200      	movs	r2, #0
 80010fc:	641a      	str	r2, [r3, #64]	; 0x40
  TIM4->CNT = 0; //encoder timer inittialy 0
 80010fe:	4b14      	ldr	r3, [pc, #80]	; (8001150 <main+0xb4>)
 8001100:	2200      	movs	r2, #0
 8001102:	625a      	str	r2, [r3, #36]	; 0x24


  for(i= 0; i< STEP_BUFFER_SIZE; i++){
 8001104:	4b13      	ldr	r3, [pc, #76]	; (8001154 <main+0xb8>)
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	e00a      	b.n	8001122 <main+0x86>
	  stepBuffer[i] = 0;
 800110c:	4b11      	ldr	r3, [pc, #68]	; (8001154 <main+0xb8>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a11      	ldr	r2, [pc, #68]	; (8001158 <main+0xbc>)
 8001112:	2100      	movs	r1, #0
 8001114:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for(i= 0; i< STEP_BUFFER_SIZE; i++){
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <main+0xb8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	3301      	adds	r3, #1
 800111e:	4a0d      	ldr	r2, [pc, #52]	; (8001154 <main+0xb8>)
 8001120:	6013      	str	r3, [r2, #0]
 8001122:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <main+0xb8>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b09      	cmp	r3, #9
 8001128:	ddf0      	ble.n	800110c <main+0x70>
  }

 i=0;
 800112a:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <main+0xb8>)
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]


  HAL_TIM_Base_Start_IT(&htim2); //starts interrupt timer
 8001130:	480a      	ldr	r0, [pc, #40]	; (800115c <main+0xc0>)
 8001132:	f001 fec3 	bl	8002ebc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001136:	e7fe      	b.n	8001136 <main+0x9a>
 8001138:	200001f8 	.word	0x200001f8
 800113c:	20000288 	.word	0x20000288
 8001140:	42c80000 	.word	0x42c80000
 8001144:	c2c80000 	.word	0xc2c80000
 8001148:	20000368 	.word	0x20000368
 800114c:	40010800 	.word	0x40010800
 8001150:	40000800 	.word	0x40000800
 8001154:	2000035c 	.word	0x2000035c
 8001158:	20000334 	.word	0x20000334
 800115c:	20000240 	.word	0x20000240

08001160 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b090      	sub	sp, #64	; 0x40
 8001164:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001166:	f107 0318 	add.w	r3, r7, #24
 800116a:	2228      	movs	r2, #40	; 0x28
 800116c:	2100      	movs	r1, #0
 800116e:	4618      	mov	r0, r3
 8001170:	f003 fa08 	bl	8004584 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001182:	2301      	movs	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001186:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800118a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001190:	2301      	movs	r3, #1
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001194:	2302      	movs	r3, #2
 8001196:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800119e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80011a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	4618      	mov	r0, r3
 80011aa:	f001 fa27 	bl	80025fc <HAL_RCC_OscConfig>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80011b4:	f000 fc66 	bl	8001a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011b8:	230f      	movs	r3, #15
 80011ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011bc:	2302      	movs	r3, #2
 80011be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	2102      	movs	r1, #2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f001 fc94 	bl	8002b00 <HAL_RCC_ClockConfig>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011de:	f000 fc51 	bl	8001a84 <Error_Handler>
  }
}
 80011e2:	bf00      	nop
 80011e4:	3740      	adds	r7, #64	; 0x40
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b096      	sub	sp, #88	; 0x58
 80011f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011f2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001200:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]
 800121a:	615a      	str	r2, [r3, #20]
 800121c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2220      	movs	r2, #32
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f003 f9ad 	bl	8004584 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800122a:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <MX_TIM1_Init+0x134>)
 800122c:	4a3d      	ldr	r2, [pc, #244]	; (8001324 <MX_TIM1_Init+0x138>)
 800122e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8001230:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <MX_TIM1_Init+0x134>)
 8001232:	2209      	movs	r2, #9
 8001234:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001236:	4b3a      	ldr	r3, [pc, #232]	; (8001320 <MX_TIM1_Init+0x134>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 699;
 800123c:	4b38      	ldr	r3, [pc, #224]	; (8001320 <MX_TIM1_Init+0x134>)
 800123e:	f240 22bb 	movw	r2, #699	; 0x2bb
 8001242:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001244:	4b36      	ldr	r3, [pc, #216]	; (8001320 <MX_TIM1_Init+0x134>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800124a:	4b35      	ldr	r3, [pc, #212]	; (8001320 <MX_TIM1_Init+0x134>)
 800124c:	2200      	movs	r2, #0
 800124e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001250:	4b33      	ldr	r3, [pc, #204]	; (8001320 <MX_TIM1_Init+0x134>)
 8001252:	2280      	movs	r2, #128	; 0x80
 8001254:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001256:	4832      	ldr	r0, [pc, #200]	; (8001320 <MX_TIM1_Init+0x134>)
 8001258:	f001 fde0 	bl	8002e1c <HAL_TIM_Base_Init>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001262:	f000 fc0f 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001266:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800126a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800126c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001270:	4619      	mov	r1, r3
 8001272:	482b      	ldr	r0, [pc, #172]	; (8001320 <MX_TIM1_Init+0x134>)
 8001274:	f002 fa68 	bl	8003748 <HAL_TIM_ConfigClockSource>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800127e:	f000 fc01 	bl	8001a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001282:	4827      	ldr	r0, [pc, #156]	; (8001320 <MX_TIM1_Init+0x134>)
 8001284:	f001 fe6c 	bl	8002f60 <HAL_TIM_PWM_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800128e:	f000 fbf9 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800129a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800129e:	4619      	mov	r1, r3
 80012a0:	481f      	ldr	r0, [pc, #124]	; (8001320 <MX_TIM1_Init+0x134>)
 80012a2:	f002 feb5 	bl	8004010 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012ac:	f000 fbea 	bl	8001a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b0:	2360      	movs	r3, #96	; 0x60
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012bc:	2300      	movs	r3, #0
 80012be:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80012c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012cc:	220c      	movs	r2, #12
 80012ce:	4619      	mov	r1, r3
 80012d0:	4813      	ldr	r0, [pc, #76]	; (8001320 <MX_TIM1_Init+0x134>)
 80012d2:	f002 f977 	bl	80035c4 <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 80012dc:	f000 fbd2 	bl	8001a84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012fa:	2300      	movs	r3, #0
 80012fc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012fe:	1d3b      	adds	r3, r7, #4
 8001300:	4619      	mov	r1, r3
 8001302:	4807      	ldr	r0, [pc, #28]	; (8001320 <MX_TIM1_Init+0x134>)
 8001304:	f002 fee2 	bl	80040cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800130e:	f000 fbb9 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001312:	4803      	ldr	r0, [pc, #12]	; (8001320 <MX_TIM1_Init+0x134>)
 8001314:	f000 fce4 	bl	8001ce0 <HAL_TIM_MspPostInit>

}
 8001318:	bf00      	nop
 800131a:	3758      	adds	r7, #88	; 0x58
 800131c:	46bd      	mov	sp, r7
 800131e:	bd80      	pop	{r7, pc}
 8001320:	200001f8 	.word	0x200001f8
 8001324:	40012c00 	.word	0x40012c00

08001328 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08c      	sub	sp, #48	; 0x30
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800132e:	f107 0320 	add.w	r3, r7, #32
 8001332:	2200      	movs	r2, #0
 8001334:	601a      	str	r2, [r3, #0]
 8001336:	605a      	str	r2, [r3, #4]
 8001338:	609a      	str	r2, [r3, #8]
 800133a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800133c:	f107 030c 	add.w	r3, r7, #12
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800134c:	1d3b      	adds	r3, r7, #4
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001354:	4b25      	ldr	r3, [pc, #148]	; (80013ec <MX_TIM2_Init+0xc4>)
 8001356:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800135a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1000;
 800135c:	4b23      	ldr	r3, [pc, #140]	; (80013ec <MX_TIM2_Init+0xc4>)
 800135e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001362:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b21      	ldr	r3, [pc, #132]	; (80013ec <MX_TIM2_Init+0xc4>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 720;
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <MX_TIM2_Init+0xc4>)
 800136c:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001370:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001372:	4b1e      	ldr	r3, [pc, #120]	; (80013ec <MX_TIM2_Init+0xc4>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001378:	4b1c      	ldr	r3, [pc, #112]	; (80013ec <MX_TIM2_Init+0xc4>)
 800137a:	2280      	movs	r2, #128	; 0x80
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800137e:	481b      	ldr	r0, [pc, #108]	; (80013ec <MX_TIM2_Init+0xc4>)
 8001380:	f001 fd4c 	bl	8002e1c <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800138a:	f000 fb7b 	bl	8001a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0320 	add.w	r3, r7, #32
 8001398:	4619      	mov	r1, r3
 800139a:	4814      	ldr	r0, [pc, #80]	; (80013ec <MX_TIM2_Init+0xc4>)
 800139c:	f002 f9d4 	bl	8003748 <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80013a6:	f000 fb6d 	bl	8001a84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80013b2:	f107 030c 	add.w	r3, r7, #12
 80013b6:	4619      	mov	r1, r3
 80013b8:	480c      	ldr	r0, [pc, #48]	; (80013ec <MX_TIM2_Init+0xc4>)
 80013ba:	f002 fa8c 	bl	80038d6 <HAL_TIM_SlaveConfigSynchro>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80013c4:	f000 fb5e 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4805      	ldr	r0, [pc, #20]	; (80013ec <MX_TIM2_Init+0xc4>)
 80013d6:	f002 fe1b 	bl	8004010 <HAL_TIMEx_MasterConfigSynchronization>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80013e0:	f000 fb50 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013e4:	bf00      	nop
 80013e6:	3730      	adds	r7, #48	; 0x30
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20000240 	.word	0x20000240

080013f0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013f6:	f107 030c 	add.w	r3, r7, #12
 80013fa:	2224      	movs	r2, #36	; 0x24
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 f8c0 	bl	8004584 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001404:	1d3b      	adds	r3, r7, #4
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800140c:	4b20      	ldr	r3, [pc, #128]	; (8001490 <MX_TIM4_Init+0xa0>)
 800140e:	4a21      	ldr	r2, [pc, #132]	; (8001494 <MX_TIM4_Init+0xa4>)
 8001410:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001412:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <MX_TIM4_Init+0xa0>)
 8001414:	2200      	movs	r2, #0
 8001416:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <MX_TIM4_Init+0xa0>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <MX_TIM4_Init+0xa0>)
 8001420:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001424:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <MX_TIM4_Init+0xa0>)
 8001428:	2200      	movs	r2, #0
 800142a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <MX_TIM4_Init+0xa0>)
 800142e:	2200      	movs	r2, #0
 8001430:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001432:	2301      	movs	r3, #1
 8001434:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800143a:	2301      	movs	r3, #1
 800143c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001446:	2300      	movs	r3, #0
 8001448:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800144a:	2301      	movs	r3, #1
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	4619      	mov	r1, r3
 800145c:	480c      	ldr	r0, [pc, #48]	; (8001490 <MX_TIM4_Init+0xa0>)
 800145e:	f001 fe79 	bl	8003154 <HAL_TIM_Encoder_Init>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001468:	f000 fb0c 	bl	8001a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <MX_TIM4_Init+0xa0>)
 800147a:	f002 fdc9 	bl	8004010 <HAL_TIMEx_MasterConfigSynchronization>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001484:	f000 fafe 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	3730      	adds	r7, #48	; 0x30
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000288 	.word	0x20000288
 8001494:	40000800 	.word	0x40000800

08001498 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 800149e:	4a12      	ldr	r2, [pc, #72]	; (80014e8 <MX_USART1_UART_Init+0x50>)
 80014a0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014a8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014be:	220c      	movs	r2, #12
 80014c0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_USART1_UART_Init+0x4c>)
 80014d0:	f002 fe5f 	bl	8004192 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80014da:	f000 fad3 	bl	8001a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200002d0 	.word	0x200002d0
 80014e8:	40013800 	.word	0x40013800

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 0310 	add.w	r3, r7, #16
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001500:	4b1d      	ldr	r3, [pc, #116]	; (8001578 <MX_GPIO_Init+0x8c>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <MX_GPIO_Init+0x8c>)
 8001506:	f043 0320 	orr.w	r3, r3, #32
 800150a:	6193      	str	r3, [r2, #24]
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <MX_GPIO_Init+0x8c>)
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	f003 0320 	and.w	r3, r3, #32
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b17      	ldr	r3, [pc, #92]	; (8001578 <MX_GPIO_Init+0x8c>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a16      	ldr	r2, [pc, #88]	; (8001578 <MX_GPIO_Init+0x8c>)
 800151e:	f043 0304 	orr.w	r3, r3, #4
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b14      	ldr	r3, [pc, #80]	; (8001578 <MX_GPIO_Init+0x8c>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_GPIO_Init+0x8c>)
 8001532:	699b      	ldr	r3, [r3, #24]
 8001534:	4a10      	ldr	r2, [pc, #64]	; (8001578 <MX_GPIO_Init+0x8c>)
 8001536:	f043 0308 	orr.w	r3, r3, #8
 800153a:	6193      	str	r3, [r2, #24]
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_GPIO_Init+0x8c>)
 800153e:	699b      	ldr	r3, [r3, #24]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENABLE_Pin|IN_A_Pin|IN_B_Pin, GPIO_PIN_RESET);
 8001548:	2200      	movs	r2, #0
 800154a:	2138      	movs	r1, #56	; 0x38
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <MX_GPIO_Init+0x90>)
 800154e:	f001 f83d 	bl	80025cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENABLE_Pin IN_A_Pin IN_B_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|IN_A_Pin|IN_B_Pin;
 8001552:	2338      	movs	r3, #56	; 0x38
 8001554:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2302      	movs	r3, #2
 8001560:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	f107 0310 	add.w	r3, r7, #16
 8001566:	4619      	mov	r1, r3
 8001568:	4804      	ldr	r0, [pc, #16]	; (800157c <MX_GPIO_Init+0x90>)
 800156a:	f000 feab 	bl	80022c4 <HAL_GPIO_Init>

}
 800156e:	bf00      	nop
 8001570:	3720      	adds	r7, #32
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	40010800 	.word	0x40010800

08001580 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//central control function
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 8001580:	b5b0      	push	{r4, r5, r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af02      	add	r7, sp, #8
 8001586:	6078      	str	r0, [r7, #4]
	if(htim == &htim2){
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	f040 821f 	bne.w	80019d0 <HAL_TIM_PeriodElapsedCallback+0x450>

		currentTick = HAL_GetTick();
 8001592:	f000 fd7f 	bl	8002094 <HAL_GetTick>
 8001596:	4603      	mov	r3, r0
 8001598:	4a6b      	ldr	r2, [pc, #428]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800159a:	6013      	str	r3, [r2, #0]


		currentStep = TIM4->CNT;
 800159c:	4b6b      	ldr	r3, [pc, #428]	; (800174c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b6b      	ldr	r3, [pc, #428]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80015a4:	601a      	str	r2, [r3, #0]

		deltaSteps = currentStep - lastStep; //current distance in pulses
 80015a6:	4b6a      	ldr	r3, [pc, #424]	; (8001750 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	4b6a      	ldr	r3, [pc, #424]	; (8001754 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	4a69      	ldr	r2, [pc, #420]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015b2:	6013      	str	r3, [r2, #0]

		if(i >= 10) i=0; //accounts for buffer overflow
 80015b4:	4b69      	ldr	r3, [pc, #420]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2b09      	cmp	r3, #9
 80015ba:	dd02      	ble.n	80015c2 <HAL_TIM_PeriodElapsedCallback+0x42>
 80015bc:	4b67      	ldr	r3, [pc, #412]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]

		//clockWise movement
		if(pulsesSetPoint > 0){
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f04f 0100 	mov.w	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f7ff fd26 	bl	800101c <__aeabi_fcmpgt>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	f000 80e2 	beq.w	800179c <HAL_TIM_PeriodElapsedCallback+0x21c>
			motorClockWise();
 80015d8:	f000 fa24 	bl	8001a24 <motorClockWise>

			if(deltaSteps < 0) deltaSteps += 65535; //accounts for overflow
 80015dc:	4b5e      	ldr	r3, [pc, #376]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	da06      	bge.n	80015f2 <HAL_TIM_PeriodElapsedCallback+0x72>
 80015e4:	4b5c      	ldr	r3, [pc, #368]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80015ec:	33ff      	adds	r3, #255	; 0xff
 80015ee:	4a5a      	ldr	r2, [pc, #360]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015f0:	6013      	str	r3, [r2, #0]
			stepBuffer[i] = deltaSteps;
 80015f2:	4b5a      	ldr	r3, [pc, #360]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a58      	ldr	r2, [pc, #352]	; (8001758 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	495a      	ldr	r1, [pc, #360]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 80015fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			i++;
 8001600:	4b56      	ldr	r3, [pc, #344]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	3301      	adds	r3, #1
 8001606:	4a55      	ldr	r2, [pc, #340]	; (800175c <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8001608:	6013      	str	r3, [r2, #0]

			if(currentTick - lastTick != 0){ //avoid division errors
 800160a:	4b4f      	ldr	r3, [pc, #316]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	4b56      	ldr	r3, [pc, #344]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	429a      	cmp	r2, r3
 8001614:	f000 81bb 	beq.w	800198e <HAL_TIM_PeriodElapsedCallback+0x40e>

//				speedInPulses = ((float)deltaSteps / (float)(currentTick - lastTick)) * 1000; // current speed in pulses / s
				for(j=0; j< STEP_BUFFER_SIZE; j++){
 8001618:	4b54      	ldr	r3, [pc, #336]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800161a:	2200      	movs	r2, #0
 800161c:	601a      	str	r2, [r3, #0]
 800161e:	e017      	b.n	8001650 <HAL_TIM_PeriodElapsedCallback+0xd0>
					auxSum += stepBuffer[j];
 8001620:	4b52      	ldr	r3, [pc, #328]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a4f      	ldr	r2, [pc, #316]	; (8001764 <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8001626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162a:	4618      	mov	r0, r3
 800162c:	f7ff fae6 	bl	8000bfc <__aeabi_i2f>
 8001630:	4602      	mov	r2, r0
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4619      	mov	r1, r3
 8001638:	4610      	mov	r0, r2
 800163a:	f7ff fa2b 	bl	8000a94 <__addsf3>
 800163e:	4603      	mov	r3, r0
 8001640:	461a      	mov	r2, r3
 8001642:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 8001644:	601a      	str	r2, [r3, #0]
				for(j=0; j< STEP_BUFFER_SIZE; j++){
 8001646:	4b49      	ldr	r3, [pc, #292]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	3301      	adds	r3, #1
 800164c:	4a47      	ldr	r2, [pc, #284]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b46      	ldr	r3, [pc, #280]	; (800176c <HAL_TIM_PeriodElapsedCallback+0x1ec>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	2b09      	cmp	r3, #9
 8001656:	dde3      	ble.n	8001620 <HAL_TIM_PeriodElapsedCallback+0xa0>
				}

				auxSum /= STEP_BUFFER_SIZE;
 8001658:	4b45      	ldr	r3, [pc, #276]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4945      	ldr	r1, [pc, #276]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fbd4 	bl	8000e0c <__aeabi_fdiv>
 8001664:	4603      	mov	r3, r0
 8001666:	461a      	mov	r2, r3
 8001668:	4b41      	ldr	r3, [pc, #260]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800166a:	601a      	str	r2, [r3, #0]

				speedInPulses = (auxSum / 10) * 1000; // current speed in pulses / s
 800166c:	4b40      	ldr	r3, [pc, #256]	; (8001770 <HAL_TIM_PeriodElapsedCallback+0x1f0>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	4940      	ldr	r1, [pc, #256]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x1f4>)
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff fbca 	bl	8000e0c <__aeabi_fdiv>
 8001678:	4603      	mov	r3, r0
 800167a:	493f      	ldr	r1, [pc, #252]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff fb11 	bl	8000ca4 <__aeabi_fmul>
 8001682:	4603      	mov	r3, r0
 8001684:	461a      	mov	r2, r3
 8001686:	4b3d      	ldr	r3, [pc, #244]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001688:	601a      	str	r2, [r3, #0]

				pastTime += (float)(currentTick - lastTick) / 1000;
 800168a:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	4b36      	ldr	r3, [pc, #216]	; (8001768 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff faad 	bl	8000bf4 <__aeabi_ui2f>
 800169a:	4603      	mov	r3, r0
 800169c:	4936      	ldr	r1, [pc, #216]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800169e:	4618      	mov	r0, r3
 80016a0:	f7ff fbb4 	bl	8000e0c <__aeabi_fdiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	4b35      	ldr	r3, [pc, #212]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4619      	mov	r1, r3
 80016ae:	4610      	mov	r0, r2
 80016b0:	f7ff f9f0 	bl	8000a94 <__addsf3>
 80016b4:	4603      	mov	r3, r0
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b31      	ldr	r3, [pc, #196]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80016ba:	601a      	str	r2, [r3, #0]

				if(pastTime > 5) pulsesSetPoint = 1168.7886; //debug for PID testing
 80016bc:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4930      	ldr	r1, [pc, #192]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff fcaa 	bl	800101c <__aeabi_fcmpgt>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d002      	beq.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x154>
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80016d0:	4a2d      	ldr	r2, [pc, #180]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80016d2:	601a      	str	r2, [r3, #0]


				duty += computePwmValue(pulsesSetPoint, speedInPulses, &controller); //gets pwm variation in floating point
 80016d4:	4b22      	ldr	r3, [pc, #136]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a28      	ldr	r2, [pc, #160]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80016da:	6811      	ldr	r1, [r2, #0]
 80016dc:	4a2b      	ldr	r2, [pc, #172]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80016de:	4618      	mov	r0, r3
 80016e0:	f000 f9f0 	bl	8001ac4 <computePwmValue>
 80016e4:	4602      	mov	r2, r0
 80016e6:	4b2a      	ldr	r3, [pc, #168]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4619      	mov	r1, r3
 80016ec:	4610      	mov	r0, r2
 80016ee:	f7ff f9d1 	bl	8000a94 <__addsf3>
 80016f2:	4603      	mov	r3, r0
 80016f4:	461a      	mov	r2, r3
 80016f6:	4b26      	ldr	r3, [pc, #152]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80016f8:	601a      	str	r2, [r3, #0]

				//considers CCR limits
				if(duty > 699) duty = 699;
 80016fa:	4b25      	ldr	r3, [pc, #148]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4925      	ldr	r1, [pc, #148]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fc8b 	bl	800101c <__aeabi_fcmpgt>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d003      	beq.n	8001714 <HAL_TIM_PeriodElapsedCallback+0x194>
 800170c:	4b20      	ldr	r3, [pc, #128]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800170e:	4a21      	ldr	r2, [pc, #132]	; (8001794 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e00d      	b.n	8001730 <HAL_TIM_PeriodElapsedCallback+0x1b0>
				else if(duty < 0) duty = 0;
 8001714:	4b1e      	ldr	r3, [pc, #120]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff fc5f 	bl	8000fe0 <__aeabi_fcmplt>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d003      	beq.n	8001730 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8001728:	4b19      	ldr	r3, [pc, #100]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800172a:	f04f 0200 	mov.w	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

				//CCR in 699 -> DUTY CYCLE 100%
				//CCR in 0 -> DUTY CYCLE 0%
				//configurable in .ioc
				TIM1->CCR4 = duty; //updates pwm
 8001730:	4b17      	ldr	r3, [pc, #92]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4c18      	ldr	r4, [pc, #96]	; (8001798 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff fc7a 	bl	8001030 <__aeabi_f2uiz>
 800173c:	4603      	mov	r3, r0
 800173e:	6423      	str	r3, [r4, #64]	; 0x40
 8001740:	e125      	b.n	800198e <HAL_TIM_PeriodElapsedCallback+0x40e>
 8001742:	bf00      	nop
 8001744:	20000240 	.word	0x20000240
 8001748:	2000032c 	.word	0x2000032c
 800174c:	40000800 	.word	0x40000800
 8001750:	20000318 	.word	0x20000318
 8001754:	2000031c 	.word	0x2000031c
 8001758:	20000320 	.word	0x20000320
 800175c:	2000035c 	.word	0x2000035c
 8001760:	20000388 	.word	0x20000388
 8001764:	20000334 	.word	0x20000334
 8001768:	20000330 	.word	0x20000330
 800176c:	20000360 	.word	0x20000360
 8001770:	20000364 	.word	0x20000364
 8001774:	41200000 	.word	0x41200000
 8001778:	447a0000 	.word	0x447a0000
 800177c:	20000324 	.word	0x20000324
 8001780:	20000328 	.word	0x20000328
 8001784:	40a00000 	.word	0x40a00000
 8001788:	4492193c 	.word	0x4492193c
 800178c:	20000368 	.word	0x20000368
 8001790:	20000384 	.word	0x20000384
 8001794:	442ec000 	.word	0x442ec000
 8001798:	40012c00 	.word	0x40012c00
			}
		}
		//antiClockWise movement
		else if(pulsesSetPoint < 0){
 800179c:	4b8e      	ldr	r3, [pc, #568]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x458>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f04f 0100 	mov.w	r1, #0
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fc1b 	bl	8000fe0 <__aeabi_fcmplt>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 8098 	beq.w	80018e2 <HAL_TIM_PeriodElapsedCallback+0x362>
			motorAntiClockWise();
 80017b2:	f000 f947 	bl	8001a44 <motorAntiClockWise>

			if(deltaSteps > 0) deltaSteps -= 65535; //accounts for overflow
 80017b6:	4b89      	ldr	r3, [pc, #548]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	dd06      	ble.n	80017cc <HAL_TIM_PeriodElapsedCallback+0x24c>
 80017be:	4b87      	ldr	r3, [pc, #540]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f5a3 437f 	sub.w	r3, r3, #65280	; 0xff00
 80017c6:	3bff      	subs	r3, #255	; 0xff
 80017c8:	4a84      	ldr	r2, [pc, #528]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80017ca:	6013      	str	r3, [r2, #0]

			stepBuffer[i] = deltaSteps;
 80017cc:	4b84      	ldr	r3, [pc, #528]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a82      	ldr	r2, [pc, #520]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80017d2:	6812      	ldr	r2, [r2, #0]
 80017d4:	4983      	ldr	r1, [pc, #524]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x464>)
 80017d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			i++;
 80017da:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3301      	adds	r3, #1
 80017e0:	4a7f      	ldr	r2, [pc, #508]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80017e2:	6013      	str	r3, [r2, #0]

			if(currentTick - lastTick != 0){ //avoid division errors
 80017e4:	4b80      	ldr	r3, [pc, #512]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b80      	ldr	r3, [pc, #512]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	f000 80ce 	beq.w	800198e <HAL_TIM_PeriodElapsedCallback+0x40e>

				speedInPulses = ((float)deltaSteps / (float)(currentTick - lastTick)) * 1000; // current speed in pulses / s (will be negative!)
 80017f2:	4b7a      	ldr	r3, [pc, #488]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4618      	mov	r0, r3
 80017f8:	f7ff fa00 	bl	8000bfc <__aeabi_i2f>
 80017fc:	4604      	mov	r4, r0
 80017fe:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	4b7a      	ldr	r3, [pc, #488]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff f9f3 	bl	8000bf4 <__aeabi_ui2f>
 800180e:	4603      	mov	r3, r0
 8001810:	4619      	mov	r1, r3
 8001812:	4620      	mov	r0, r4
 8001814:	f7ff fafa 	bl	8000e0c <__aeabi_fdiv>
 8001818:	4603      	mov	r3, r0
 800181a:	4975      	ldr	r1, [pc, #468]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff fa41 	bl	8000ca4 <__aeabi_fmul>
 8001822:	4603      	mov	r3, r0
 8001824:	461a      	mov	r2, r3
 8001826:	4b73      	ldr	r3, [pc, #460]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001828:	601a      	str	r2, [r3, #0]
				pastTime += (float)(currentTick - lastTick) / 1000;
 800182a:	4b6f      	ldr	r3, [pc, #444]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	4b6f      	ldr	r3, [pc, #444]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x46c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	4618      	mov	r0, r3
 8001836:	f7ff f9dd 	bl	8000bf4 <__aeabi_ui2f>
 800183a:	4603      	mov	r3, r0
 800183c:	496c      	ldr	r1, [pc, #432]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fae4 	bl	8000e0c <__aeabi_fdiv>
 8001844:	4603      	mov	r3, r0
 8001846:	461a      	mov	r2, r3
 8001848:	4b6b      	ldr	r3, [pc, #428]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f7ff f920 	bl	8000a94 <__addsf3>
 8001854:	4603      	mov	r3, r0
 8001856:	461a      	mov	r2, r3
 8001858:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800185a:	601a      	str	r2, [r3, #0]

				if(pastTime > 5) pulsesSetPoint = 1168.7886; //debug for PID testing
 800185c:	4b66      	ldr	r3, [pc, #408]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4966      	ldr	r1, [pc, #408]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x47c>)
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fbda 	bl	800101c <__aeabi_fcmpgt>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <HAL_TIM_PeriodElapsedCallback+0x2f4>
 800186e:	4b5a      	ldr	r3, [pc, #360]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001870:	4a63      	ldr	r2, [pc, #396]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x480>)
 8001872:	601a      	str	r2, [r3, #0]

				duty += computePwmValue(pulsesSetPoint, speedInPulses, &controller); //gets pwm variation in floating point
 8001874:	4b58      	ldr	r3, [pc, #352]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x458>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a5e      	ldr	r2, [pc, #376]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 800187a:	6811      	ldr	r1, [r2, #0]
 800187c:	4a61      	ldr	r2, [pc, #388]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x484>)
 800187e:	4618      	mov	r0, r3
 8001880:	f000 f920 	bl	8001ac4 <computePwmValue>
 8001884:	4602      	mov	r2, r0
 8001886:	4b60      	ldr	r3, [pc, #384]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4619      	mov	r1, r3
 800188c:	4610      	mov	r0, r2
 800188e:	f7ff f901 	bl	8000a94 <__addsf3>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	4b5c      	ldr	r3, [pc, #368]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x488>)
 8001898:	601a      	str	r2, [r3, #0]

				//considers CCR limits
				if(duty > 699) duty = 699;
 800189a:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x488>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	495b      	ldr	r1, [pc, #364]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fbbb 	bl	800101c <__aeabi_fcmpgt>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_TIM_PeriodElapsedCallback+0x334>
 80018ac:	4b56      	ldr	r3, [pc, #344]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80018ae:	4a57      	ldr	r2, [pc, #348]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x48c>)
 80018b0:	601a      	str	r2, [r3, #0]
 80018b2:	e00d      	b.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0x350>
				else if(duty < 0) duty = 0;
 80018b4:	4b54      	ldr	r3, [pc, #336]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fb8f 	bl	8000fe0 <__aeabi_fcmplt>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_TIM_PeriodElapsedCallback+0x350>
 80018c8:	4b4f      	ldr	r3, [pc, #316]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]

				//CCR in 699 -> DUTY CYCLE 100%
				//CCR in 0 -> DUTY CYCLE 0%
				//configurable in .ioc
				TIM1->CCR4 = duty; //updates pwm
 80018d0:	4b4d      	ldr	r3, [pc, #308]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4c4e      	ldr	r4, [pc, #312]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80018d6:	4618      	mov	r0, r3
 80018d8:	f7ff fbaa 	bl	8001030 <__aeabi_f2uiz>
 80018dc:	4603      	mov	r3, r0
 80018de:	6423      	str	r3, [r4, #64]	; 0x40
 80018e0:	e055      	b.n	800198e <HAL_TIM_PeriodElapsedCallback+0x40e>
			}
		}
		//no movement
		else {
			motorStop();
 80018e2:	f000 f8bf 	bl	8001a64 <motorStop>
			TIM1->CCR4 = 0; //0% dutyCycle
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x490>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	641a      	str	r2, [r3, #64]	; 0x40
			duty = 0; //avoids biasing next motor speed
 80018ec:	4b46      	ldr	r3, [pc, #280]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x488>)
 80018ee:	f04f 0200 	mov.w	r2, #0
 80018f2:	601a      	str	r2, [r3, #0]

			stepBuffer[i] = deltaSteps;
 80018f4:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a38      	ldr	r2, [pc, #224]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x45c>)
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	4939      	ldr	r1, [pc, #228]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x464>)
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			i++;
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	3301      	adds	r3, #1
 8001908:	4a35      	ldr	r2, [pc, #212]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x460>)
 800190a:	6013      	str	r3, [r2, #0]

			speedInPulses = ((float)deltaSteps / (float)(currentTick - lastTick)) * 1000; // current speed in pulses / s
 800190c:	4b33      	ldr	r3, [pc, #204]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x45c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7ff f973 	bl	8000bfc <__aeabi_i2f>
 8001916:	4604      	mov	r4, r0
 8001918:	4b33      	ldr	r3, [pc, #204]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b33      	ldr	r3, [pc, #204]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f7ff f966 	bl	8000bf4 <__aeabi_ui2f>
 8001928:	4603      	mov	r3, r0
 800192a:	4619      	mov	r1, r3
 800192c:	4620      	mov	r0, r4
 800192e:	f7ff fa6d 	bl	8000e0c <__aeabi_fdiv>
 8001932:	4603      	mov	r3, r0
 8001934:	492e      	ldr	r1, [pc, #184]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff f9b4 	bl	8000ca4 <__aeabi_fmul>
 800193c:	4603      	mov	r3, r0
 800193e:	461a      	mov	r2, r3
 8001940:	4b2c      	ldr	r3, [pc, #176]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001942:	601a      	str	r2, [r3, #0]
			pastTime += (float)(currentTick - lastTick) / 1000;
 8001944:	4b28      	ldr	r3, [pc, #160]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b28      	ldr	r3, [pc, #160]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x46c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	4618      	mov	r0, r3
 8001950:	f7ff f950 	bl	8000bf4 <__aeabi_ui2f>
 8001954:	4603      	mov	r3, r0
 8001956:	4926      	ldr	r1, [pc, #152]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x470>)
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fa57 	bl	8000e0c <__aeabi_fdiv>
 800195e:	4603      	mov	r3, r0
 8001960:	461a      	mov	r2, r3
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4619      	mov	r1, r3
 8001968:	4610      	mov	r0, r2
 800196a:	f7ff f893 	bl	8000a94 <__addsf3>
 800196e:	4603      	mov	r3, r0
 8001970:	461a      	mov	r2, r3
 8001972:	4b21      	ldr	r3, [pc, #132]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001974:	601a      	str	r2, [r3, #0]

			if(pastTime > 5) pulsesSetPoint = 1168.7886; //debug for PID testing
 8001976:	4b20      	ldr	r3, [pc, #128]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4920      	ldr	r1, [pc, #128]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x47c>)
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fb4d 	bl	800101c <__aeabi_fcmpgt>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d002      	beq.n	800198e <HAL_TIM_PeriodElapsedCallback+0x40e>
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x458>)
 800198a:	4a1d      	ldr	r2, [pc, #116]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x480>)
 800198c:	601a      	str	r2, [r3, #0]
		}

//		debug printing
//		printf("counter: %ld step: %d\r\n", TIM4->CNT, deltaSteps); //timer counter and step in pulses
//		printf("PWM: %ld dutyCycle: %f\r\n", TIM1->CCR4, duty); //pwm register and dutyCycle floating point
		printf("%f %f\n\r", speedInPulses, pastTime); //speed and time formatted for python script (graphic)
 800198e:	4b19      	ldr	r3, [pc, #100]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x474>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4618      	mov	r0, r3
 8001994:	f7fe fd48 	bl	8000428 <__aeabi_f2d>
 8001998:	4604      	mov	r4, r0
 800199a:	460d      	mov	r5, r1
 800199c:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x478>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7fe fd41 	bl	8000428 <__aeabi_f2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	e9cd 2300 	strd	r2, r3, [sp]
 80019ae:	4622      	mov	r2, r4
 80019b0:	462b      	mov	r3, r5
 80019b2:	4818      	ldr	r0, [pc, #96]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x494>)
 80019b4:	f003 fa4e 	bl	8004e54 <iprintf>
//		printf("%ld\r\n", currentTick - lastTick); //time between interrupts
//		printf("%f \n\r", auxSum);

		//updates for next iteration
		lastStep = currentStep;
 80019b8:	4b17      	ldr	r3, [pc, #92]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x498>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a17      	ldr	r2, [pc, #92]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x49c>)
 80019be:	6013      	str	r3, [r2, #0]
		lastTick = currentTick;
 80019c0:	4b09      	ldr	r3, [pc, #36]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x468>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a09      	ldr	r2, [pc, #36]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x46c>)
 80019c6:	6013      	str	r3, [r2, #0]

		auxSum = 0;
 80019c8:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x4a0>)
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	601a      	str	r2, [r3, #0]
	}
}
 80019d0:	bf00      	nop
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bdb0      	pop	{r4, r5, r7, pc}
 80019d8:	20000388 	.word	0x20000388
 80019dc:	20000320 	.word	0x20000320
 80019e0:	2000035c 	.word	0x2000035c
 80019e4:	20000334 	.word	0x20000334
 80019e8:	2000032c 	.word	0x2000032c
 80019ec:	20000330 	.word	0x20000330
 80019f0:	447a0000 	.word	0x447a0000
 80019f4:	20000324 	.word	0x20000324
 80019f8:	20000328 	.word	0x20000328
 80019fc:	40a00000 	.word	0x40a00000
 8001a00:	4492193c 	.word	0x4492193c
 8001a04:	20000368 	.word	0x20000368
 8001a08:	20000384 	.word	0x20000384
 8001a0c:	442ec000 	.word	0x442ec000
 8001a10:	40012c00 	.word	0x40012c00
 8001a14:	08006ff8 	.word	0x08006ff8
 8001a18:	20000318 	.word	0x20000318
 8001a1c:	2000031c 	.word	0x2000031c
 8001a20:	20000364 	.word	0x20000364

08001a24 <motorClockWise>:

/**
 * IN A: ON
 * IN B: OFF
 * */
void motorClockWise(){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_SET);
 8001a28:	2201      	movs	r2, #1
 8001a2a:	2110      	movs	r1, #16
 8001a2c:	4804      	ldr	r0, [pc, #16]	; (8001a40 <motorClockWise+0x1c>)
 8001a2e:	f000 fdcd 	bl	80025cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_RESET);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2120      	movs	r1, #32
 8001a36:	4802      	ldr	r0, [pc, #8]	; (8001a40 <motorClockWise+0x1c>)
 8001a38:	f000 fdc8 	bl	80025cc <HAL_GPIO_WritePin>
}
 8001a3c:	bf00      	nop
 8001a3e:	bd80      	pop	{r7, pc}
 8001a40:	40010800 	.word	0x40010800

08001a44 <motorAntiClockWise>:

/**
 * IN A: OFF
 * IN B: ON
 * */
void motorAntiClockWise(){
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_RESET);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	2110      	movs	r1, #16
 8001a4c:	4804      	ldr	r0, [pc, #16]	; (8001a60 <motorAntiClockWise+0x1c>)
 8001a4e:	f000 fdbd 	bl	80025cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_SET);
 8001a52:	2201      	movs	r2, #1
 8001a54:	2120      	movs	r1, #32
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <motorAntiClockWise+0x1c>)
 8001a58:	f000 fdb8 	bl	80025cc <HAL_GPIO_WritePin>
}
 8001a5c:	bf00      	nop
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40010800 	.word	0x40010800

08001a64 <motorStop>:
/**
 * IN A: OFF
 * IN B: OFF
 * */
//brakes to GND
void motorStop(){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, IN_A_Pin, GPIO_PIN_RESET);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2110      	movs	r1, #16
 8001a6c:	4804      	ldr	r0, [pc, #16]	; (8001a80 <motorStop+0x1c>)
 8001a6e:	f000 fdad 	bl	80025cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, IN_B_Pin, GPIO_PIN_RESET);
 8001a72:	2200      	movs	r2, #0
 8001a74:	2120      	movs	r1, #32
 8001a76:	4802      	ldr	r0, [pc, #8]	; (8001a80 <motorStop+0x1c>)
 8001a78:	f000 fda8 	bl	80025cc <HAL_GPIO_WritePin>
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40010800 	.word	0x40010800

08001a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a88:	b672      	cpsid	i
}
 8001a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a8c:	e7fe      	b.n	8001a8c <Error_Handler+0x8>

08001a8e <pidInit>:

#include <stdio.h>

//the min and max values should consider the duty cycle %
//example: if the minValue is 10% duty cycle, the minimalPwm must be a value that reflects it
void pidInit(Pid* p, float minimalPwm, float maximumPwm, float kp, float ki, float kd){
 8001a8e:	b480      	push	{r7}
 8001a90:	b085      	sub	sp, #20
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	60f8      	str	r0, [r7, #12]
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	603b      	str	r3, [r7, #0]
    p->max = maximumPwm;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	60da      	str	r2, [r3, #12]
    p->min = minimalPwm;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	68ba      	ldr	r2, [r7, #8]
 8001aa6:	611a      	str	r2, [r3, #16]
    p->kp = kp;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	683a      	ldr	r2, [r7, #0]
 8001aac:	601a      	str	r2, [r3, #0]
    p->ki = ki;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	605a      	str	r2, [r3, #4]
    p->kd = kd;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	609a      	str	r2, [r3, #8]
}
 8001aba:	bf00      	nop
 8001abc:	3714      	adds	r7, #20
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <computePwmValue>:
/// @brief given current and target speds, computes PWM increment
/// @param setPoint target speed in encoder pulses
/// @param feedBackValue current speeed in encoder pulses
/// @param p PID controller
/// @return increment to PWM
float computePwmValue(float setPoint, float feedBackValue, Pid* p){
 8001ac4:	b590      	push	{r4, r7, lr}
 8001ac6:	b087      	sub	sp, #28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	60f8      	str	r0, [r7, #12]
 8001acc:	60b9      	str	r1, [r7, #8]
 8001ace:	607a      	str	r2, [r7, #4]
    float pastError = p->error;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	613b      	str	r3, [r7, #16]


    if(setPoint < 0) setPoint *= -1;
 8001ad6:	f04f 0100 	mov.w	r1, #0
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f7ff fa80 	bl	8000fe0 <__aeabi_fcmplt>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <computePwmValue+0x2a>
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001aec:	60fb      	str	r3, [r7, #12]
    if (feedBackValue < 0) feedBackValue *= -1;
 8001aee:	f04f 0100 	mov.w	r1, #0
 8001af2:	68b8      	ldr	r0, [r7, #8]
 8001af4:	f7ff fa74 	bl	8000fe0 <__aeabi_fcmplt>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d003      	beq.n	8001b06 <computePwmValue+0x42>
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b04:	60bb      	str	r3, [r7, #8]

    p->error = setPoint - feedBackValue; //get current error
 8001b06:	68b9      	ldr	r1, [r7, #8]
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f7fe ffc1 	bl	8000a90 <__aeabi_fsub>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	461a      	mov	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	615a      	str	r2, [r3, #20]
    p->integralValue += p->error; //update integralError
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	699a      	ldr	r2, [r3, #24]
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	695b      	ldr	r3, [r3, #20]
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4610      	mov	r0, r2
 8001b22:	f7fe ffb7 	bl	8000a94 <__addsf3>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	619a      	str	r2, [r3, #24]

    float result = 0;
 8001b2e:	f04f 0300 	mov.w	r3, #0
 8001b32:	617b      	str	r3, [r7, #20]
    //calculate pwm output
    result = p->kp * p->error; + p->ki * p->integralValue + p->kd * (pastError - p->error);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	695b      	ldr	r3, [r3, #20]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f7ff f8b0 	bl	8000ca4 <__aeabi_fmul>
 8001b44:	4603      	mov	r3, r0
 8001b46:	617b      	str	r3, [r7, #20]
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	699b      	ldr	r3, [r3, #24]
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f7ff f8a6 	bl	8000ca4 <__aeabi_fmul>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689c      	ldr	r4, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	695b      	ldr	r3, [r3, #20]
 8001b60:	4619      	mov	r1, r3
 8001b62:	6938      	ldr	r0, [r7, #16]
 8001b64:	f7fe ff94 	bl	8000a90 <__aeabi_fsub>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4620      	mov	r0, r4
 8001b6e:	f7ff f899 	bl	8000ca4 <__aeabi_fmul>

    //deals with limit values
    if(result > p->max) result = p->max;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	4619      	mov	r1, r3
 8001b78:	6978      	ldr	r0, [r7, #20]
 8001b7a:	f7ff fa4f 	bl	800101c <__aeabi_fcmpgt>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <computePwmValue+0xc8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	e00b      	b.n	8001ba4 <computePwmValue+0xe0>
    else if(result < p->min) result = p->min;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	4619      	mov	r1, r3
 8001b92:	6978      	ldr	r0, [r7, #20]
 8001b94:	f7ff fa24 	bl	8000fe0 <__aeabi_fcmplt>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d002      	beq.n	8001ba4 <computePwmValue+0xe0>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	691b      	ldr	r3, [r3, #16]
 8001ba2:	617b      	str	r3, [r7, #20]

    //printf("%f\r\n", result);
    return result;
 8001ba4:	697b      	ldr	r3, [r7, #20]

}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	371c      	adds	r7, #28
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd90      	pop	{r4, r7, pc}
	...

08001bb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_MspInit+0x40>)
 8001bb8:	699b      	ldr	r3, [r3, #24]
 8001bba:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_MspInit+0x40>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	6193      	str	r3, [r2, #24]
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_MspInit+0x40>)
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	f003 0301 	and.w	r3, r3, #1
 8001bca:	607b      	str	r3, [r7, #4]
 8001bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_MspInit+0x40>)
 8001bd0:	69db      	ldr	r3, [r3, #28]
 8001bd2:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_MspInit+0x40>)
 8001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bd8:	61d3      	str	r3, [r2, #28]
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_MspInit+0x40>)
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be2:	603b      	str	r3, [r7, #0]
 8001be4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr
 8001bf0:	40021000 	.word	0x40021000

08001bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a16      	ldr	r2, [pc, #88]	; (8001c5c <HAL_TIM_Base_MspInit+0x68>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10c      	bne.n	8001c20 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c06:	4b16      	ldr	r3, [pc, #88]	; (8001c60 <HAL_TIM_Base_MspInit+0x6c>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	4a15      	ldr	r2, [pc, #84]	; (8001c60 <HAL_TIM_Base_MspInit+0x6c>)
 8001c0c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001c10:	6193      	str	r3, [r2, #24]
 8001c12:	4b13      	ldr	r3, [pc, #76]	; (8001c60 <HAL_TIM_Base_MspInit+0x6c>)
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001c1e:	e018      	b.n	8001c52 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c28:	d113      	bne.n	8001c52 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_TIM_Base_MspInit+0x6c>)
 8001c2c:	69db      	ldr	r3, [r3, #28]
 8001c2e:	4a0c      	ldr	r2, [pc, #48]	; (8001c60 <HAL_TIM_Base_MspInit+0x6c>)
 8001c30:	f043 0301 	orr.w	r3, r3, #1
 8001c34:	61d3      	str	r3, [r2, #28]
 8001c36:	4b0a      	ldr	r3, [pc, #40]	; (8001c60 <HAL_TIM_Base_MspInit+0x6c>)
 8001c38:	69db      	ldr	r3, [r3, #28]
 8001c3a:	f003 0301 	and.w	r3, r3, #1
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c42:	2200      	movs	r2, #0
 8001c44:	2100      	movs	r1, #0
 8001c46:	201c      	movs	r0, #28
 8001c48:	f000 fb05 	bl	8002256 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c4c:	201c      	movs	r0, #28
 8001c4e:	f000 fb1e 	bl	800228e <HAL_NVIC_EnableIRQ>
}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40012c00 	.word	0x40012c00
 8001c60:	40021000 	.word	0x40021000

08001c64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b088      	sub	sp, #32
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6c:	f107 0310 	add.w	r3, r7, #16
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
  if(htim_encoder->Instance==TIM4)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a15      	ldr	r2, [pc, #84]	; (8001cd4 <HAL_TIM_Encoder_MspInit+0x70>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d123      	bne.n	8001ccc <HAL_TIM_Encoder_MspInit+0x68>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c84:	4b14      	ldr	r3, [pc, #80]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c86:	69db      	ldr	r3, [r3, #28]
 8001c88:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	61d3      	str	r3, [r2, #28]
 8001c90:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c92:	69db      	ldr	r3, [r3, #28]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_TIM_Encoder_MspInit+0x74>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0308 	and.w	r3, r3, #8
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cb4:	23c0      	movs	r3, #192	; 0xc0
 8001cb6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc0:	f107 0310 	add.w	r3, r7, #16
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4805      	ldr	r0, [pc, #20]	; (8001cdc <HAL_TIM_Encoder_MspInit+0x78>)
 8001cc8:	f000 fafc 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001ccc:	bf00      	nop
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	40000800 	.word	0x40000800
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010c00 	.word	0x40010c00

08001ce0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a10      	ldr	r2, [pc, #64]	; (8001d3c <HAL_TIM_MspPostInit+0x5c>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d118      	bne.n	8001d32 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d00:	4b0f      	ldr	r3, [pc, #60]	; (8001d40 <HAL_TIM_MspPostInit+0x60>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <HAL_TIM_MspPostInit+0x60>)
 8001d06:	f043 0304 	orr.w	r3, r3, #4
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <HAL_TIM_MspPostInit+0x60>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f003 0304 	and.w	r3, r3, #4
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d18:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d1e:	2302      	movs	r3, #2
 8001d20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d22:	2302      	movs	r3, #2
 8001d24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	4619      	mov	r1, r3
 8001d2c:	4805      	ldr	r0, [pc, #20]	; (8001d44 <HAL_TIM_MspPostInit+0x64>)
 8001d2e:	f000 fac9 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d32:	bf00      	nop
 8001d34:	3720      	adds	r7, #32
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40012c00 	.word	0x40012c00
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40010800 	.word	0x40010800

08001d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b088      	sub	sp, #32
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d50:	f107 0310 	add.w	r3, r7, #16
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a1c      	ldr	r2, [pc, #112]	; (8001dd4 <HAL_UART_MspInit+0x8c>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d131      	bne.n	8001dcc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_UART_MspInit+0x90>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a1a      	ldr	r2, [pc, #104]	; (8001dd8 <HAL_UART_MspInit+0x90>)
 8001d6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b18      	ldr	r3, [pc, #96]	; (8001dd8 <HAL_UART_MspInit+0x90>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d80:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_UART_MspInit+0x90>)
 8001d82:	699b      	ldr	r3, [r3, #24]
 8001d84:	4a14      	ldr	r2, [pc, #80]	; (8001dd8 <HAL_UART_MspInit+0x90>)
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	6193      	str	r3, [r2, #24]
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <HAL_UART_MspInit+0x90>)
 8001d8e:	699b      	ldr	r3, [r3, #24]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	60bb      	str	r3, [r7, #8]
 8001d96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001d98:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d9e:	2302      	movs	r3, #2
 8001da0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001da2:	2303      	movs	r3, #3
 8001da4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da6:	f107 0310 	add.w	r3, r7, #16
 8001daa:	4619      	mov	r1, r3
 8001dac:	480b      	ldr	r0, [pc, #44]	; (8001ddc <HAL_UART_MspInit+0x94>)
 8001dae:	f000 fa89 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc0:	f107 0310 	add.w	r3, r7, #16
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_UART_MspInit+0x94>)
 8001dc8:	f000 fa7c 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001dcc:	bf00      	nop
 8001dce:	3720      	adds	r7, #32
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	40013800 	.word	0x40013800
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	40010800 	.word	0x40010800

08001de0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001de4:	e7fe      	b.n	8001de4 <NMI_Handler+0x4>

08001de6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001de6:	b480      	push	{r7}
 8001de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dea:	e7fe      	b.n	8001dea <HardFault_Handler+0x4>

08001dec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df0:	e7fe      	b.n	8001df0 <MemManage_Handler+0x4>

08001df2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001df2:	b480      	push	{r7}
 8001df4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001df6:	e7fe      	b.n	8001df6 <BusFault_Handler+0x4>

08001df8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dfc:	e7fe      	b.n	8001dfc <UsageFault_Handler+0x4>

08001dfe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e02:	bf00      	nop
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bc80      	pop	{r7}
 8001e08:	4770      	bx	lr

08001e0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e0a:	b480      	push	{r7}
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bc80      	pop	{r7}
 8001e14:	4770      	bx	lr

08001e16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e16:	b480      	push	{r7}
 8001e18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bc80      	pop	{r7}
 8001e20:	4770      	bx	lr

08001e22 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e26:	f000 f923 	bl	8002070 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001e34:	4802      	ldr	r0, [pc, #8]	; (8001e40 <TIM2_IRQHandler+0x10>)
 8001e36:	f001 fabd 	bl	80033b4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000240 	.word	0x20000240

08001e44 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
	return 1;
 8001e48:	2301      	movs	r3, #1
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bc80      	pop	{r7}
 8001e50:	4770      	bx	lr

08001e52 <_kill>:

int _kill(int pid, int sig)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e5c:	f002 fb68 	bl	8004530 <__errno>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2216      	movs	r2, #22
 8001e64:	601a      	str	r2, [r3, #0]
	return -1;
 8001e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <_exit>:

void _exit (int status)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f7ff ffe7 	bl	8001e52 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e84:	e7fe      	b.n	8001e84 <_exit+0x12>

08001e86 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e86:	b580      	push	{r7, lr}
 8001e88:	b086      	sub	sp, #24
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	60f8      	str	r0, [r7, #12]
 8001e8e:	60b9      	str	r1, [r7, #8]
 8001e90:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e92:	2300      	movs	r3, #0
 8001e94:	617b      	str	r3, [r7, #20]
 8001e96:	e00a      	b.n	8001eae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e98:	f3af 8000 	nop.w
 8001e9c:	4601      	mov	r1, r0
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	1c5a      	adds	r2, r3, #1
 8001ea2:	60ba      	str	r2, [r7, #8]
 8001ea4:	b2ca      	uxtb	r2, r1
 8001ea6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	697a      	ldr	r2, [r7, #20]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	dbf0      	blt.n	8001e98 <_read+0x12>
	}

return len;
 8001eb6:	687b      	ldr	r3, [r7, #4]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	return -1;
 8001ec8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	370c      	adds	r7, #12
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bc80      	pop	{r7}
 8001ed4:	4770      	bx	lr

08001ed6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	b083      	sub	sp, #12
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
 8001ede:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ee6:	605a      	str	r2, [r3, #4]
	return 0;
 8001ee8:	2300      	movs	r3, #0
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bc80      	pop	{r7}
 8001ef2:	4770      	bx	lr

08001ef4 <_isatty>:

int _isatty(int file)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
	return 1;
 8001efc:	2301      	movs	r3, #1
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bc80      	pop	{r7}
 8001f06:	4770      	bx	lr

08001f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b085      	sub	sp, #20
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
	return 0;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3714      	adds	r7, #20
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bc80      	pop	{r7}
 8001f1e:	4770      	bx	lr

08001f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f28:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <_sbrk+0x5c>)
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <_sbrk+0x60>)
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f34:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <_sbrk+0x64>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f3c:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <_sbrk+0x64>)
 8001f3e:	4a12      	ldr	r2, [pc, #72]	; (8001f88 <_sbrk+0x68>)
 8001f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f42:	4b10      	ldr	r3, [pc, #64]	; (8001f84 <_sbrk+0x64>)
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4413      	add	r3, r2
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d207      	bcs.n	8001f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f50:	f002 faee 	bl	8004530 <__errno>
 8001f54:	4603      	mov	r3, r0
 8001f56:	220c      	movs	r2, #12
 8001f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f5a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f5e:	e009      	b.n	8001f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f60:	4b08      	ldr	r3, [pc, #32]	; (8001f84 <_sbrk+0x64>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f66:	4b07      	ldr	r3, [pc, #28]	; (8001f84 <_sbrk+0x64>)
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	4a05      	ldr	r2, [pc, #20]	; (8001f84 <_sbrk+0x64>)
 8001f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f72:	68fb      	ldr	r3, [r7, #12]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	20005000 	.word	0x20005000
 8001f80:	00000400 	.word	0x00000400
 8001f84:	2000038c 	.word	0x2000038c
 8001f88:	200003a8 	.word	0x200003a8

08001f8c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f90:	bf00      	nop
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bc80      	pop	{r7}
 8001f96:	4770      	bx	lr

08001f98 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f98:	f7ff fff8 	bl	8001f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f9c:	480b      	ldr	r0, [pc, #44]	; (8001fcc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f9e:	490c      	ldr	r1, [pc, #48]	; (8001fd0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001fa0:	4a0c      	ldr	r2, [pc, #48]	; (8001fd4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001fa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fa4:	e002      	b.n	8001fac <LoopCopyDataInit>

08001fa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001faa:	3304      	adds	r3, #4

08001fac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fb0:	d3f9      	bcc.n	8001fa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fb2:	4a09      	ldr	r2, [pc, #36]	; (8001fd8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001fb4:	4c09      	ldr	r4, [pc, #36]	; (8001fdc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fb8:	e001      	b.n	8001fbe <LoopFillZerobss>

08001fba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fbc:	3204      	adds	r2, #4

08001fbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fc0:	d3fb      	bcc.n	8001fba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fc2:	f002 fabb 	bl	800453c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fc6:	f7ff f869 	bl	800109c <main>
  bx lr
 8001fca:	4770      	bx	lr
  ldr r0, =_sdata
 8001fcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fd0:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001fd4:	0800740c 	.word	0x0800740c
  ldr r2, =_sbss
 8001fd8:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001fdc:	200003a4 	.word	0x200003a4

08001fe0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fe0:	e7fe      	b.n	8001fe0 <ADC1_2_IRQHandler>
	...

08001fe4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fe8:	4b08      	ldr	r3, [pc, #32]	; (800200c <HAL_Init+0x28>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a07      	ldr	r2, [pc, #28]	; (800200c <HAL_Init+0x28>)
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ff4:	2003      	movs	r0, #3
 8001ff6:	f000 f923 	bl	8002240 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ffa:	200f      	movs	r0, #15
 8001ffc:	f000 f808 	bl	8002010 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002000:	f7ff fdd6 	bl	8001bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40022000 	.word	0x40022000

08002010 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002018:	4b12      	ldr	r3, [pc, #72]	; (8002064 <HAL_InitTick+0x54>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	4b12      	ldr	r3, [pc, #72]	; (8002068 <HAL_InitTick+0x58>)
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	4619      	mov	r1, r3
 8002022:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002026:	fbb3 f3f1 	udiv	r3, r3, r1
 800202a:	fbb2 f3f3 	udiv	r3, r2, r3
 800202e:	4618      	mov	r0, r3
 8002030:	f000 f93b 	bl	80022aa <HAL_SYSTICK_Config>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e00e      	b.n	800205c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b0f      	cmp	r3, #15
 8002042:	d80a      	bhi.n	800205a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002044:	2200      	movs	r2, #0
 8002046:	6879      	ldr	r1, [r7, #4]
 8002048:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800204c:	f000 f903 	bl	8002256 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002050:	4a06      	ldr	r2, [pc, #24]	; (800206c <HAL_InitTick+0x5c>)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002056:	2300      	movs	r3, #0
 8002058:	e000      	b.n	800205c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20000000 	.word	0x20000000
 8002068:	20000008 	.word	0x20000008
 800206c:	20000004 	.word	0x20000004

08002070 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002074:	4b05      	ldr	r3, [pc, #20]	; (800208c <HAL_IncTick+0x1c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	461a      	mov	r2, r3
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_IncTick+0x20>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4413      	add	r3, r2
 8002080:	4a03      	ldr	r2, [pc, #12]	; (8002090 <HAL_IncTick+0x20>)
 8002082:	6013      	str	r3, [r2, #0]
}
 8002084:	bf00      	nop
 8002086:	46bd      	mov	sp, r7
 8002088:	bc80      	pop	{r7}
 800208a:	4770      	bx	lr
 800208c:	20000008 	.word	0x20000008
 8002090:	20000390 	.word	0x20000390

08002094 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  return uwTick;
 8002098:	4b02      	ldr	r3, [pc, #8]	; (80020a4 <HAL_GetTick+0x10>)
 800209a:	681b      	ldr	r3, [r3, #0]
}
 800209c:	4618      	mov	r0, r3
 800209e:	46bd      	mov	sp, r7
 80020a0:	bc80      	pop	{r7}
 80020a2:	4770      	bx	lr
 80020a4:	20000390 	.word	0x20000390

080020a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b085      	sub	sp, #20
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020b8:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020be:	68ba      	ldr	r2, [r7, #8]
 80020c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020c4:	4013      	ands	r3, r2
 80020c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80020d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80020d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80020d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80020da:	4a04      	ldr	r2, [pc, #16]	; (80020ec <__NVIC_SetPriorityGrouping+0x44>)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	60d3      	str	r3, [r2, #12]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	e000ed00 	.word	0xe000ed00

080020f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020f4:	4b04      	ldr	r3, [pc, #16]	; (8002108 <__NVIC_GetPriorityGrouping+0x18>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	0a1b      	lsrs	r3, r3, #8
 80020fa:	f003 0307 	and.w	r3, r3, #7
}
 80020fe:	4618      	mov	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00

0800210c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211a:	2b00      	cmp	r3, #0
 800211c:	db0b      	blt.n	8002136 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	f003 021f 	and.w	r2, r3, #31
 8002124:	4906      	ldr	r1, [pc, #24]	; (8002140 <__NVIC_EnableIRQ+0x34>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	095b      	lsrs	r3, r3, #5
 800212c:	2001      	movs	r0, #1
 800212e:	fa00 f202 	lsl.w	r2, r0, r2
 8002132:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002136:	bf00      	nop
 8002138:	370c      	adds	r7, #12
 800213a:	46bd      	mov	sp, r7
 800213c:	bc80      	pop	{r7}
 800213e:	4770      	bx	lr
 8002140:	e000e100 	.word	0xe000e100

08002144 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	4603      	mov	r3, r0
 800214c:	6039      	str	r1, [r7, #0]
 800214e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002154:	2b00      	cmp	r3, #0
 8002156:	db0a      	blt.n	800216e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	b2da      	uxtb	r2, r3
 800215c:	490c      	ldr	r1, [pc, #48]	; (8002190 <__NVIC_SetPriority+0x4c>)
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	0112      	lsls	r2, r2, #4
 8002164:	b2d2      	uxtb	r2, r2
 8002166:	440b      	add	r3, r1
 8002168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800216c:	e00a      	b.n	8002184 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	b2da      	uxtb	r2, r3
 8002172:	4908      	ldr	r1, [pc, #32]	; (8002194 <__NVIC_SetPriority+0x50>)
 8002174:	79fb      	ldrb	r3, [r7, #7]
 8002176:	f003 030f 	and.w	r3, r3, #15
 800217a:	3b04      	subs	r3, #4
 800217c:	0112      	lsls	r2, r2, #4
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	440b      	add	r3, r1
 8002182:	761a      	strb	r2, [r3, #24]
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	e000e100 	.word	0xe000e100
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002198:	b480      	push	{r7}
 800219a:	b089      	sub	sp, #36	; 0x24
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	f003 0307 	and.w	r3, r3, #7
 80021aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	f1c3 0307 	rsb	r3, r3, #7
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	bf28      	it	cs
 80021b6:	2304      	movcs	r3, #4
 80021b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	3304      	adds	r3, #4
 80021be:	2b06      	cmp	r3, #6
 80021c0:	d902      	bls.n	80021c8 <NVIC_EncodePriority+0x30>
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	3b03      	subs	r3, #3
 80021c6:	e000      	b.n	80021ca <NVIC_EncodePriority+0x32>
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	fa02 f303 	lsl.w	r3, r2, r3
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	401a      	ands	r2, r3
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	fa01 f303 	lsl.w	r3, r1, r3
 80021ea:	43d9      	mvns	r1, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021f0:	4313      	orrs	r3, r2
         );
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bc80      	pop	{r7}
 80021fa:	4770      	bx	lr

080021fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	3b01      	subs	r3, #1
 8002208:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800220c:	d301      	bcc.n	8002212 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002212:	4a0a      	ldr	r2, [pc, #40]	; (800223c <SysTick_Config+0x40>)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3b01      	subs	r3, #1
 8002218:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800221a:	210f      	movs	r1, #15
 800221c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002220:	f7ff ff90 	bl	8002144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002224:	4b05      	ldr	r3, [pc, #20]	; (800223c <SysTick_Config+0x40>)
 8002226:	2200      	movs	r2, #0
 8002228:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800222a:	4b04      	ldr	r3, [pc, #16]	; (800223c <SysTick_Config+0x40>)
 800222c:	2207      	movs	r2, #7
 800222e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	e000e010 	.word	0xe000e010

08002240 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff ff2d 	bl	80020a8 <__NVIC_SetPriorityGrouping>
}
 800224e:	bf00      	nop
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002256:	b580      	push	{r7, lr}
 8002258:	b086      	sub	sp, #24
 800225a:	af00      	add	r7, sp, #0
 800225c:	4603      	mov	r3, r0
 800225e:	60b9      	str	r1, [r7, #8]
 8002260:	607a      	str	r2, [r7, #4]
 8002262:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002268:	f7ff ff42 	bl	80020f0 <__NVIC_GetPriorityGrouping>
 800226c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	68b9      	ldr	r1, [r7, #8]
 8002272:	6978      	ldr	r0, [r7, #20]
 8002274:	f7ff ff90 	bl	8002198 <NVIC_EncodePriority>
 8002278:	4602      	mov	r2, r0
 800227a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800227e:	4611      	mov	r1, r2
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff5f 	bl	8002144 <__NVIC_SetPriority>
}
 8002286:	bf00      	nop
 8002288:	3718      	adds	r7, #24
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}

0800228e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800228e:	b580      	push	{r7, lr}
 8002290:	b082      	sub	sp, #8
 8002292:	af00      	add	r7, sp, #0
 8002294:	4603      	mov	r3, r0
 8002296:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800229c:	4618      	mov	r0, r3
 800229e:	f7ff ff35 	bl	800210c <__NVIC_EnableIRQ>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b082      	sub	sp, #8
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	f7ff ffa2 	bl	80021fc <SysTick_Config>
 80022b8:	4603      	mov	r3, r0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b08b      	sub	sp, #44	; 0x2c
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80022ce:	2300      	movs	r3, #0
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80022d2:	2300      	movs	r3, #0
 80022d4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d6:	e169      	b.n	80025ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80022d8:	2201      	movs	r2, #1
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	f040 8158 	bne.w	80025a6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	4a9a      	ldr	r2, [pc, #616]	; (8002564 <HAL_GPIO_Init+0x2a0>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d05e      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002300:	4a98      	ldr	r2, [pc, #608]	; (8002564 <HAL_GPIO_Init+0x2a0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d875      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 8002306:	4a98      	ldr	r2, [pc, #608]	; (8002568 <HAL_GPIO_Init+0x2a4>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d058      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 800230c:	4a96      	ldr	r2, [pc, #600]	; (8002568 <HAL_GPIO_Init+0x2a4>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d86f      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 8002312:	4a96      	ldr	r2, [pc, #600]	; (800256c <HAL_GPIO_Init+0x2a8>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d052      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002318:	4a94      	ldr	r2, [pc, #592]	; (800256c <HAL_GPIO_Init+0x2a8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d869      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 800231e:	4a94      	ldr	r2, [pc, #592]	; (8002570 <HAL_GPIO_Init+0x2ac>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d04c      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002324:	4a92      	ldr	r2, [pc, #584]	; (8002570 <HAL_GPIO_Init+0x2ac>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d863      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 800232a:	4a92      	ldr	r2, [pc, #584]	; (8002574 <HAL_GPIO_Init+0x2b0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d046      	beq.n	80023be <HAL_GPIO_Init+0xfa>
 8002330:	4a90      	ldr	r2, [pc, #576]	; (8002574 <HAL_GPIO_Init+0x2b0>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d85d      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 8002336:	2b12      	cmp	r3, #18
 8002338:	d82a      	bhi.n	8002390 <HAL_GPIO_Init+0xcc>
 800233a:	2b12      	cmp	r3, #18
 800233c:	d859      	bhi.n	80023f2 <HAL_GPIO_Init+0x12e>
 800233e:	a201      	add	r2, pc, #4	; (adr r2, 8002344 <HAL_GPIO_Init+0x80>)
 8002340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002344:	080023bf 	.word	0x080023bf
 8002348:	08002399 	.word	0x08002399
 800234c:	080023ab 	.word	0x080023ab
 8002350:	080023ed 	.word	0x080023ed
 8002354:	080023f3 	.word	0x080023f3
 8002358:	080023f3 	.word	0x080023f3
 800235c:	080023f3 	.word	0x080023f3
 8002360:	080023f3 	.word	0x080023f3
 8002364:	080023f3 	.word	0x080023f3
 8002368:	080023f3 	.word	0x080023f3
 800236c:	080023f3 	.word	0x080023f3
 8002370:	080023f3 	.word	0x080023f3
 8002374:	080023f3 	.word	0x080023f3
 8002378:	080023f3 	.word	0x080023f3
 800237c:	080023f3 	.word	0x080023f3
 8002380:	080023f3 	.word	0x080023f3
 8002384:	080023f3 	.word	0x080023f3
 8002388:	080023a1 	.word	0x080023a1
 800238c:	080023b5 	.word	0x080023b5
 8002390:	4a79      	ldr	r2, [pc, #484]	; (8002578 <HAL_GPIO_Init+0x2b4>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d013      	beq.n	80023be <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002396:	e02c      	b.n	80023f2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	623b      	str	r3, [r7, #32]
          break;
 800239e:	e029      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	3304      	adds	r3, #4
 80023a6:	623b      	str	r3, [r7, #32]
          break;
 80023a8:	e024      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	3308      	adds	r3, #8
 80023b0:	623b      	str	r3, [r7, #32]
          break;
 80023b2:	e01f      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	330c      	adds	r3, #12
 80023ba:	623b      	str	r3, [r7, #32]
          break;
 80023bc:	e01a      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d102      	bne.n	80023cc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80023c6:	2304      	movs	r3, #4
 80023c8:	623b      	str	r3, [r7, #32]
          break;
 80023ca:	e013      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d105      	bne.n	80023e0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023d4:	2308      	movs	r3, #8
 80023d6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	69fa      	ldr	r2, [r7, #28]
 80023dc:	611a      	str	r2, [r3, #16]
          break;
 80023de:	e009      	b.n	80023f4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80023e0:	2308      	movs	r3, #8
 80023e2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	69fa      	ldr	r2, [r7, #28]
 80023e8:	615a      	str	r2, [r3, #20]
          break;
 80023ea:	e003      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80023ec:	2300      	movs	r3, #0
 80023ee:	623b      	str	r3, [r7, #32]
          break;
 80023f0:	e000      	b.n	80023f4 <HAL_GPIO_Init+0x130>
          break;
 80023f2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	2bff      	cmp	r3, #255	; 0xff
 80023f8:	d801      	bhi.n	80023fe <HAL_GPIO_Init+0x13a>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	e001      	b.n	8002402 <HAL_GPIO_Init+0x13e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3304      	adds	r3, #4
 8002402:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	2bff      	cmp	r3, #255	; 0xff
 8002408:	d802      	bhi.n	8002410 <HAL_GPIO_Init+0x14c>
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	e002      	b.n	8002416 <HAL_GPIO_Init+0x152>
 8002410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002412:	3b08      	subs	r3, #8
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	210f      	movs	r1, #15
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	fa01 f303 	lsl.w	r3, r1, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	401a      	ands	r2, r3
 8002428:	6a39      	ldr	r1, [r7, #32]
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	fa01 f303 	lsl.w	r3, r1, r3
 8002430:	431a      	orrs	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 80b1 	beq.w	80025a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002444:	4b4d      	ldr	r3, [pc, #308]	; (800257c <HAL_GPIO_Init+0x2b8>)
 8002446:	699b      	ldr	r3, [r3, #24]
 8002448:	4a4c      	ldr	r2, [pc, #304]	; (800257c <HAL_GPIO_Init+0x2b8>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6193      	str	r3, [r2, #24]
 8002450:	4b4a      	ldr	r3, [pc, #296]	; (800257c <HAL_GPIO_Init+0x2b8>)
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800245c:	4a48      	ldr	r2, [pc, #288]	; (8002580 <HAL_GPIO_Init+0x2bc>)
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	089b      	lsrs	r3, r3, #2
 8002462:	3302      	adds	r3, #2
 8002464:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002468:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	009b      	lsls	r3, r3, #2
 8002472:	220f      	movs	r2, #15
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a40      	ldr	r2, [pc, #256]	; (8002584 <HAL_GPIO_Init+0x2c0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d013      	beq.n	80024b0 <HAL_GPIO_Init+0x1ec>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4a3f      	ldr	r2, [pc, #252]	; (8002588 <HAL_GPIO_Init+0x2c4>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d00d      	beq.n	80024ac <HAL_GPIO_Init+0x1e8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	4a3e      	ldr	r2, [pc, #248]	; (800258c <HAL_GPIO_Init+0x2c8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d007      	beq.n	80024a8 <HAL_GPIO_Init+0x1e4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a3d      	ldr	r2, [pc, #244]	; (8002590 <HAL_GPIO_Init+0x2cc>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d101      	bne.n	80024a4 <HAL_GPIO_Init+0x1e0>
 80024a0:	2303      	movs	r3, #3
 80024a2:	e006      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024a4:	2304      	movs	r3, #4
 80024a6:	e004      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024a8:	2302      	movs	r3, #2
 80024aa:	e002      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024ac:	2301      	movs	r3, #1
 80024ae:	e000      	b.n	80024b2 <HAL_GPIO_Init+0x1ee>
 80024b0:	2300      	movs	r3, #0
 80024b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b4:	f002 0203 	and.w	r2, r2, #3
 80024b8:	0092      	lsls	r2, r2, #2
 80024ba:	4093      	lsls	r3, r2
 80024bc:	68fa      	ldr	r2, [r7, #12]
 80024be:	4313      	orrs	r3, r2
 80024c0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80024c2:	492f      	ldr	r1, [pc, #188]	; (8002580 <HAL_GPIO_Init+0x2bc>)
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	089b      	lsrs	r3, r3, #2
 80024c8:	3302      	adds	r3, #2
 80024ca:	68fa      	ldr	r2, [r7, #12]
 80024cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80024dc:	4b2d      	ldr	r3, [pc, #180]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	492c      	ldr	r1, [pc, #176]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024e2:	69bb      	ldr	r3, [r7, #24]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	608b      	str	r3, [r1, #8]
 80024e8:	e006      	b.n	80024f8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80024ea:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024ec:	689a      	ldr	r2, [r3, #8]
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	43db      	mvns	r3, r3
 80024f2:	4928      	ldr	r1, [pc, #160]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d006      	beq.n	8002512 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002504:	4b23      	ldr	r3, [pc, #140]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002506:	68da      	ldr	r2, [r3, #12]
 8002508:	4922      	ldr	r1, [pc, #136]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800250a:	69bb      	ldr	r3, [r7, #24]
 800250c:	4313      	orrs	r3, r2
 800250e:	60cb      	str	r3, [r1, #12]
 8002510:	e006      	b.n	8002520 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002512:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002514:	68da      	ldr	r2, [r3, #12]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	43db      	mvns	r3, r3
 800251a:	491e      	ldr	r1, [pc, #120]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800251c:	4013      	ands	r3, r2
 800251e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d006      	beq.n	800253a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800252c:	4b19      	ldr	r3, [pc, #100]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800252e:	685a      	ldr	r2, [r3, #4]
 8002530:	4918      	ldr	r1, [pc, #96]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002532:	69bb      	ldr	r3, [r7, #24]
 8002534:	4313      	orrs	r3, r2
 8002536:	604b      	str	r3, [r1, #4]
 8002538:	e006      	b.n	8002548 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800253a:	4b16      	ldr	r3, [pc, #88]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800253c:	685a      	ldr	r2, [r3, #4]
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	43db      	mvns	r3, r3
 8002542:	4914      	ldr	r1, [pc, #80]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002544:	4013      	ands	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d021      	beq.n	8002598 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002554:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	490e      	ldr	r1, [pc, #56]	; (8002594 <HAL_GPIO_Init+0x2d0>)
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]
 8002560:	e021      	b.n	80025a6 <HAL_GPIO_Init+0x2e2>
 8002562:	bf00      	nop
 8002564:	10320000 	.word	0x10320000
 8002568:	10310000 	.word	0x10310000
 800256c:	10220000 	.word	0x10220000
 8002570:	10210000 	.word	0x10210000
 8002574:	10120000 	.word	0x10120000
 8002578:	10110000 	.word	0x10110000
 800257c:	40021000 	.word	0x40021000
 8002580:	40010000 	.word	0x40010000
 8002584:	40010800 	.word	0x40010800
 8002588:	40010c00 	.word	0x40010c00
 800258c:	40011000 	.word	0x40011000
 8002590:	40011400 	.word	0x40011400
 8002594:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002598:	4b0b      	ldr	r3, [pc, #44]	; (80025c8 <HAL_GPIO_Init+0x304>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	43db      	mvns	r3, r3
 80025a0:	4909      	ldr	r1, [pc, #36]	; (80025c8 <HAL_GPIO_Init+0x304>)
 80025a2:	4013      	ands	r3, r2
 80025a4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	3301      	adds	r3, #1
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f47f ae8e 	bne.w	80022d8 <HAL_GPIO_Init+0x14>
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	372c      	adds	r7, #44	; 0x2c
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bc80      	pop	{r7}
 80025c6:	4770      	bx	lr
 80025c8:	40010400 	.word	0x40010400

080025cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b083      	sub	sp, #12
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	460b      	mov	r3, r1
 80025d6:	807b      	strh	r3, [r7, #2]
 80025d8:	4613      	mov	r3, r2
 80025da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025dc:	787b      	ldrb	r3, [r7, #1]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025e2:	887a      	ldrh	r2, [r7, #2]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80025e8:	e003      	b.n	80025f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80025ea:	887b      	ldrh	r3, [r7, #2]
 80025ec:	041a      	lsls	r2, r3, #16
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	611a      	str	r2, [r3, #16]
}
 80025f2:	bf00      	nop
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e272      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0301 	and.w	r3, r3, #1
 8002616:	2b00      	cmp	r3, #0
 8002618:	f000 8087 	beq.w	800272a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800261c:	4b92      	ldr	r3, [pc, #584]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 030c 	and.w	r3, r3, #12
 8002624:	2b04      	cmp	r3, #4
 8002626:	d00c      	beq.n	8002642 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002628:	4b8f      	ldr	r3, [pc, #572]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f003 030c 	and.w	r3, r3, #12
 8002630:	2b08      	cmp	r3, #8
 8002632:	d112      	bne.n	800265a <HAL_RCC_OscConfig+0x5e>
 8002634:	4b8c      	ldr	r3, [pc, #560]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800263c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002640:	d10b      	bne.n	800265a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002642:	4b89      	ldr	r3, [pc, #548]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d06c      	beq.n	8002728 <HAL_RCC_OscConfig+0x12c>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d168      	bne.n	8002728 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e24c      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002662:	d106      	bne.n	8002672 <HAL_RCC_OscConfig+0x76>
 8002664:	4b80      	ldr	r3, [pc, #512]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a7f      	ldr	r2, [pc, #508]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 800266a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	e02e      	b.n	80026d0 <HAL_RCC_OscConfig+0xd4>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10c      	bne.n	8002694 <HAL_RCC_OscConfig+0x98>
 800267a:	4b7b      	ldr	r3, [pc, #492]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a7a      	ldr	r2, [pc, #488]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	4b78      	ldr	r3, [pc, #480]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a77      	ldr	r2, [pc, #476]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 800268c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e01d      	b.n	80026d0 <HAL_RCC_OscConfig+0xd4>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800269c:	d10c      	bne.n	80026b8 <HAL_RCC_OscConfig+0xbc>
 800269e:	4b72      	ldr	r3, [pc, #456]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a71      	ldr	r2, [pc, #452]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	4b6f      	ldr	r3, [pc, #444]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a6e      	ldr	r2, [pc, #440]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e00b      	b.n	80026d0 <HAL_RCC_OscConfig+0xd4>
 80026b8:	4b6b      	ldr	r3, [pc, #428]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a6a      	ldr	r2, [pc, #424]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80026be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b68      	ldr	r3, [pc, #416]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a67      	ldr	r2, [pc, #412]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d013      	beq.n	8002700 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d8:	f7ff fcdc 	bl	8002094 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7ff fcd8 	bl	8002094 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e200      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026f2:	4b5d      	ldr	r3, [pc, #372]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0xe4>
 80026fe:	e014      	b.n	800272a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002700:	f7ff fcc8 	bl	8002094 <HAL_GetTick>
 8002704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002706:	e008      	b.n	800271a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002708:	f7ff fcc4 	bl	8002094 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	2b64      	cmp	r3, #100	; 0x64
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e1ec      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800271a:	4b53      	ldr	r3, [pc, #332]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f0      	bne.n	8002708 <HAL_RCC_OscConfig+0x10c>
 8002726:	e000      	b.n	800272a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002728:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d063      	beq.n	80027fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002736:	4b4c      	ldr	r3, [pc, #304]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	f003 030c 	and.w	r3, r3, #12
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00b      	beq.n	800275a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002742:	4b49      	ldr	r3, [pc, #292]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b08      	cmp	r3, #8
 800274c:	d11c      	bne.n	8002788 <HAL_RCC_OscConfig+0x18c>
 800274e:	4b46      	ldr	r3, [pc, #280]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d116      	bne.n	8002788 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	4b43      	ldr	r3, [pc, #268]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d005      	beq.n	8002772 <HAL_RCC_OscConfig+0x176>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d001      	beq.n	8002772 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e1c0      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002772:	4b3d      	ldr	r3, [pc, #244]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4939      	ldr	r1, [pc, #228]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002782:	4313      	orrs	r3, r2
 8002784:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002786:	e03a      	b.n	80027fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	691b      	ldr	r3, [r3, #16]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d020      	beq.n	80027d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002790:	4b36      	ldr	r3, [pc, #216]	; (800286c <HAL_RCC_OscConfig+0x270>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002796:	f7ff fc7d 	bl	8002094 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7ff fc79 	bl	8002094 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e1a1      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027b0:	4b2d      	ldr	r3, [pc, #180]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b2a      	ldr	r3, [pc, #168]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4927      	ldr	r1, [pc, #156]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]
 80027d0:	e015      	b.n	80027fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b26      	ldr	r3, [pc, #152]	; (800286c <HAL_RCC_OscConfig+0x270>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff fc5c 	bl	8002094 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e0:	f7ff fc58 	bl	8002094 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e180      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027f2:	4b1d      	ldr	r3, [pc, #116]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d03a      	beq.n	8002880 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	699b      	ldr	r3, [r3, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d019      	beq.n	8002846 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002812:	4b17      	ldr	r3, [pc, #92]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002814:	2201      	movs	r2, #1
 8002816:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002818:	f7ff fc3c 	bl	8002094 <HAL_GetTick>
 800281c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281e:	e008      	b.n	8002832 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002820:	f7ff fc38 	bl	8002094 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	2b02      	cmp	r3, #2
 800282c:	d901      	bls.n	8002832 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800282e:	2303      	movs	r3, #3
 8002830:	e160      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <HAL_RCC_OscConfig+0x26c>)
 8002834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d0f0      	beq.n	8002820 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800283e:	2001      	movs	r0, #1
 8002840:	f000 face 	bl	8002de0 <RCC_Delay>
 8002844:	e01c      	b.n	8002880 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002846:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <HAL_RCC_OscConfig+0x274>)
 8002848:	2200      	movs	r2, #0
 800284a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800284c:	f7ff fc22 	bl	8002094 <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002852:	e00f      	b.n	8002874 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002854:	f7ff fc1e 	bl	8002094 <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d908      	bls.n	8002874 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e146      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
 8002866:	bf00      	nop
 8002868:	40021000 	.word	0x40021000
 800286c:	42420000 	.word	0x42420000
 8002870:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002874:	4b92      	ldr	r3, [pc, #584]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d1e9      	bne.n	8002854 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80a6 	beq.w	80029da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800288e:	2300      	movs	r3, #0
 8002890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002892:	4b8b      	ldr	r3, [pc, #556]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d10d      	bne.n	80028ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800289e:	4b88      	ldr	r3, [pc, #544]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	4a87      	ldr	r2, [pc, #540]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	61d3      	str	r3, [r2, #28]
 80028aa:	4b85      	ldr	r3, [pc, #532]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	60bb      	str	r3, [r7, #8]
 80028b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028b6:	2301      	movs	r3, #1
 80028b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ba:	4b82      	ldr	r3, [pc, #520]	; (8002ac4 <HAL_RCC_OscConfig+0x4c8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d118      	bne.n	80028f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028c6:	4b7f      	ldr	r3, [pc, #508]	; (8002ac4 <HAL_RCC_OscConfig+0x4c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a7e      	ldr	r2, [pc, #504]	; (8002ac4 <HAL_RCC_OscConfig+0x4c8>)
 80028cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028d2:	f7ff fbdf 	bl	8002094 <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028da:	f7ff fbdb 	bl	8002094 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b64      	cmp	r3, #100	; 0x64
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e103      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	4b75      	ldr	r3, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x4c8>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d0f0      	beq.n	80028da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d106      	bne.n	800290e <HAL_RCC_OscConfig+0x312>
 8002900:	4b6f      	ldr	r3, [pc, #444]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4a6e      	ldr	r2, [pc, #440]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	f043 0301 	orr.w	r3, r3, #1
 800290a:	6213      	str	r3, [r2, #32]
 800290c:	e02d      	b.n	800296a <HAL_RCC_OscConfig+0x36e>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68db      	ldr	r3, [r3, #12]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d10c      	bne.n	8002930 <HAL_RCC_OscConfig+0x334>
 8002916:	4b6a      	ldr	r3, [pc, #424]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	4a69      	ldr	r2, [pc, #420]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 0301 	bic.w	r3, r3, #1
 8002920:	6213      	str	r3, [r2, #32]
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	4a66      	ldr	r2, [pc, #408]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	f023 0304 	bic.w	r3, r3, #4
 800292c:	6213      	str	r3, [r2, #32]
 800292e:	e01c      	b.n	800296a <HAL_RCC_OscConfig+0x36e>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	2b05      	cmp	r3, #5
 8002936:	d10c      	bne.n	8002952 <HAL_RCC_OscConfig+0x356>
 8002938:	4b61      	ldr	r3, [pc, #388]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 800293a:	6a1b      	ldr	r3, [r3, #32]
 800293c:	4a60      	ldr	r2, [pc, #384]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 800293e:	f043 0304 	orr.w	r3, r3, #4
 8002942:	6213      	str	r3, [r2, #32]
 8002944:	4b5e      	ldr	r3, [pc, #376]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	4a5d      	ldr	r2, [pc, #372]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6213      	str	r3, [r2, #32]
 8002950:	e00b      	b.n	800296a <HAL_RCC_OscConfig+0x36e>
 8002952:	4b5b      	ldr	r3, [pc, #364]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002954:	6a1b      	ldr	r3, [r3, #32]
 8002956:	4a5a      	ldr	r2, [pc, #360]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002958:	f023 0301 	bic.w	r3, r3, #1
 800295c:	6213      	str	r3, [r2, #32]
 800295e:	4b58      	ldr	r3, [pc, #352]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	4a57      	ldr	r2, [pc, #348]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002964:	f023 0304 	bic.w	r3, r3, #4
 8002968:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d015      	beq.n	800299e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7ff fb8f 	bl	8002094 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7ff fb8b 	bl	8002094 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e0b1      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002990:	4b4b      	ldr	r3, [pc, #300]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d0ee      	beq.n	800297a <HAL_RCC_OscConfig+0x37e>
 800299c:	e014      	b.n	80029c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800299e:	f7ff fb79 	bl	8002094 <HAL_GetTick>
 80029a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a4:	e00a      	b.n	80029bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a6:	f7ff fb75 	bl	8002094 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e09b      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029bc:	4b40      	ldr	r3, [pc, #256]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 80029be:	6a1b      	ldr	r3, [r3, #32]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ee      	bne.n	80029a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80029c8:	7dfb      	ldrb	r3, [r7, #23]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d105      	bne.n	80029da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ce:	4b3c      	ldr	r3, [pc, #240]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	4a3b      	ldr	r2, [pc, #236]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 80029d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69db      	ldr	r3, [r3, #28]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 8087 	beq.w	8002af2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e4:	4b36      	ldr	r3, [pc, #216]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d061      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	69db      	ldr	r3, [r3, #28]
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d146      	bne.n	8002a86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f8:	4b33      	ldr	r3, [pc, #204]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7ff fb49 	bl	8002094 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a06:	f7ff fb45 	bl	8002094 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e06d      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a18:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d1f0      	bne.n	8002a06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a1b      	ldr	r3, [r3, #32]
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2c:	d108      	bne.n	8002a40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	4921      	ldr	r1, [pc, #132]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a40:	4b1f      	ldr	r3, [pc, #124]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	685b      	ldr	r3, [r3, #4]
 8002a44:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a19      	ldr	r1, [r3, #32]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	430b      	orrs	r3, r1
 8002a52:	491b      	ldr	r1, [pc, #108]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a58:	4b1b      	ldr	r3, [pc, #108]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a5e:	f7ff fb19 	bl	8002094 <HAL_GetTick>
 8002a62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a64:	e008      	b.n	8002a78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a66:	f7ff fb15 	bl	8002094 <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e03d      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a78:	4b11      	ldr	r3, [pc, #68]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d0f0      	beq.n	8002a66 <HAL_RCC_OscConfig+0x46a>
 8002a84:	e035      	b.n	8002af2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a86:	4b10      	ldr	r3, [pc, #64]	; (8002ac8 <HAL_RCC_OscConfig+0x4cc>)
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8c:	f7ff fb02 	bl	8002094 <HAL_GetTick>
 8002a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a92:	e008      	b.n	8002aa6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a94:	f7ff fafe 	bl	8002094 <HAL_GetTick>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	1ad3      	subs	r3, r2, r3
 8002a9e:	2b02      	cmp	r3, #2
 8002aa0:	d901      	bls.n	8002aa6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e026      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aa6:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f0      	bne.n	8002a94 <HAL_RCC_OscConfig+0x498>
 8002ab2:	e01e      	b.n	8002af2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	69db      	ldr	r3, [r3, #28]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e019      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40007000 	.word	0x40007000
 8002ac8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002acc:	4b0b      	ldr	r3, [pc, #44]	; (8002afc <HAL_RCC_OscConfig+0x500>)
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a1b      	ldr	r3, [r3, #32]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d106      	bne.n	8002aee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d001      	beq.n	8002af2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e000      	b.n	8002af4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3718      	adds	r7, #24
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d101      	bne.n	8002b14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0d0      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b14:	4b6a      	ldr	r3, [pc, #424]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0307 	and.w	r3, r3, #7
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d910      	bls.n	8002b44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b22:	4b67      	ldr	r3, [pc, #412]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f023 0207 	bic.w	r2, r3, #7
 8002b2a:	4965      	ldr	r1, [pc, #404]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	4b63      	ldr	r3, [pc, #396]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0307 	and.w	r3, r3, #7
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d001      	beq.n	8002b44 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0b8      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d020      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b5c:	4b59      	ldr	r3, [pc, #356]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4a58      	ldr	r2, [pc, #352]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b62:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b66:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d005      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b74:	4b53      	ldr	r3, [pc, #332]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	4a52      	ldr	r2, [pc, #328]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b7a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b7e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b80:	4b50      	ldr	r3, [pc, #320]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	494d      	ldr	r1, [pc, #308]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d040      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d107      	bne.n	8002bb6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b47      	ldr	r3, [pc, #284]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d115      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e07f      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d107      	bne.n	8002bce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bbe:	4b41      	ldr	r3, [pc, #260]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d109      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e073      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bce:	4b3d      	ldr	r3, [pc, #244]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e06b      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bde:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f023 0203 	bic.w	r2, r3, #3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	4936      	ldr	r1, [pc, #216]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bf0:	f7ff fa50 	bl	8002094 <HAL_GetTick>
 8002bf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bf6:	e00a      	b.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bf8:	f7ff fa4c 	bl	8002094 <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e053      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0e:	4b2d      	ldr	r3, [pc, #180]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 020c 	and.w	r2, r3, #12
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d1eb      	bne.n	8002bf8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c20:	4b27      	ldr	r3, [pc, #156]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	683a      	ldr	r2, [r7, #0]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d210      	bcs.n	8002c50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c2e:	4b24      	ldr	r3, [pc, #144]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f023 0207 	bic.w	r2, r3, #7
 8002c36:	4922      	ldr	r1, [pc, #136]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c3e:	4b20      	ldr	r3, [pc, #128]	; (8002cc0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0307 	and.w	r3, r3, #7
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e032      	b.n	8002cb6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 0304 	and.w	r3, r3, #4
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d008      	beq.n	8002c6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	4916      	ldr	r1, [pc, #88]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c7a:	4b12      	ldr	r3, [pc, #72]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	00db      	lsls	r3, r3, #3
 8002c88:	490e      	ldr	r1, [pc, #56]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c8e:	f000 f821 	bl	8002cd4 <HAL_RCC_GetSysClockFreq>
 8002c92:	4602      	mov	r2, r0
 8002c94:	4b0b      	ldr	r3, [pc, #44]	; (8002cc4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	091b      	lsrs	r3, r3, #4
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	490a      	ldr	r1, [pc, #40]	; (8002cc8 <HAL_RCC_ClockConfig+0x1c8>)
 8002ca0:	5ccb      	ldrb	r3, [r1, r3]
 8002ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca6:	4a09      	ldr	r2, [pc, #36]	; (8002ccc <HAL_RCC_ClockConfig+0x1cc>)
 8002ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002caa:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <HAL_RCC_ClockConfig+0x1d0>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff f9ae 	bl	8002010 <HAL_InitTick>

  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40022000 	.word	0x40022000
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08007000 	.word	0x08007000
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	60fb      	str	r3, [r7, #12]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	617b      	str	r3, [r7, #20]
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cea:	2300      	movs	r3, #0
 8002cec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cee:	4b1e      	ldr	r3, [pc, #120]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
 8002cfa:	2b04      	cmp	r3, #4
 8002cfc:	d002      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0x30>
 8002cfe:	2b08      	cmp	r3, #8
 8002d00:	d003      	beq.n	8002d0a <HAL_RCC_GetSysClockFreq+0x36>
 8002d02:	e027      	b.n	8002d54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d06:	613b      	str	r3, [r7, #16]
      break;
 8002d08:	e027      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	0c9b      	lsrs	r3, r3, #18
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	4a17      	ldr	r2, [pc, #92]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002d14:	5cd3      	ldrb	r3, [r2, r3]
 8002d16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d010      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d22:	4b11      	ldr	r3, [pc, #68]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	0c5b      	lsrs	r3, r3, #17
 8002d28:	f003 0301 	and.w	r3, r3, #1
 8002d2c:	4a11      	ldr	r2, [pc, #68]	; (8002d74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002d2e:	5cd3      	ldrb	r3, [r2, r3]
 8002d30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	4a0d      	ldr	r2, [pc, #52]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d36:	fb03 f202 	mul.w	r2, r3, r2
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	e004      	b.n	8002d4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a0c      	ldr	r2, [pc, #48]	; (8002d78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d48:	fb02 f303 	mul.w	r3, r2, r3
 8002d4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	613b      	str	r3, [r7, #16]
      break;
 8002d52:	e002      	b.n	8002d5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d54:	4b05      	ldr	r3, [pc, #20]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002d56:	613b      	str	r3, [r7, #16]
      break;
 8002d58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5a:	693b      	ldr	r3, [r7, #16]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	371c      	adds	r7, #28
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bc80      	pop	{r7}
 8002d64:	4770      	bx	lr
 8002d66:	bf00      	nop
 8002d68:	40021000 	.word	0x40021000
 8002d6c:	007a1200 	.word	0x007a1200
 8002d70:	08007018 	.word	0x08007018
 8002d74:	08007028 	.word	0x08007028
 8002d78:	003d0900 	.word	0x003d0900

08002d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d80:	4b02      	ldr	r3, [pc, #8]	; (8002d8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d82:	681b      	ldr	r3, [r3, #0]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr
 8002d8c:	20000000 	.word	0x20000000

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d94:	f7ff fff2 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	0a1b      	lsrs	r3, r3, #8
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40021000 	.word	0x40021000
 8002db4:	08007010 	.word	0x08007010

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dbc:	f7ff ffde 	bl	8002d7c <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	0adb      	lsrs	r3, r3, #11
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40021000 	.word	0x40021000
 8002ddc:	08007010 	.word	0x08007010

08002de0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b085      	sub	sp, #20
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002de8:	4b0a      	ldr	r3, [pc, #40]	; (8002e14 <RCC_Delay+0x34>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <RCC_Delay+0x38>)
 8002dee:	fba2 2303 	umull	r2, r3, r2, r3
 8002df2:	0a5b      	lsrs	r3, r3, #9
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	fb02 f303 	mul.w	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dfc:	bf00      	nop
  }
  while (Delay --);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1e5a      	subs	r2, r3, #1
 8002e02:	60fa      	str	r2, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f9      	bne.n	8002dfc <RCC_Delay+0x1c>
}
 8002e08:	bf00      	nop
 8002e0a:	bf00      	nop
 8002e0c:	3714      	adds	r7, #20
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr
 8002e14:	20000000 	.word	0x20000000
 8002e18:	10624dd3 	.word	0x10624dd3

08002e1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b082      	sub	sp, #8
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e041      	b.n	8002eb2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f7fe fed6 	bl	8001bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3304      	adds	r3, #4
 8002e58:	4619      	mov	r1, r3
 8002e5a:	4610      	mov	r0, r2
 8002e5c:	f000 fda2 	bl	80039a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2201      	movs	r2, #1
 8002e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
	...

08002ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d001      	beq.n	8002ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e03a      	b.n	8002f4a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	68da      	ldr	r2, [r3, #12]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0201 	orr.w	r2, r2, #1
 8002eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <HAL_TIM_Base_Start_IT+0x98>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d00e      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x58>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efe:	d009      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x58>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <HAL_TIM_Base_Start_IT+0x9c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d004      	beq.n	8002f14 <HAL_TIM_Base_Start_IT+0x58>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a13      	ldr	r2, [pc, #76]	; (8002f5c <HAL_TIM_Base_Start_IT+0xa0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d111      	bne.n	8002f38 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2b06      	cmp	r3, #6
 8002f24:	d010      	beq.n	8002f48 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f36:	e007      	b.n	8002f48 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681a      	ldr	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f042 0201 	orr.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bc80      	pop	{r7}
 8002f52:	4770      	bx	lr
 8002f54:	40012c00 	.word	0x40012c00
 8002f58:	40000400 	.word	0x40000400
 8002f5c:	40000800 	.word	0x40000800

08002f60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d101      	bne.n	8002f72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e041      	b.n	8002ff6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f839 	bl	8002ffe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2202      	movs	r2, #2
 8002f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	3304      	adds	r3, #4
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	4610      	mov	r0, r2
 8002fa0:	f000 fd00 	bl	80039a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3708      	adds	r7, #8
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ffe:	b480      	push	{r7}
 8003000:	b083      	sub	sp, #12
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003006:	bf00      	nop
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	bc80      	pop	{r7}
 800300e:	4770      	bx	lr

08003010 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d109      	bne.n	8003034 <HAL_TIM_PWM_Start+0x24>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b01      	cmp	r3, #1
 800302a:	bf14      	ite	ne
 800302c:	2301      	movne	r3, #1
 800302e:	2300      	moveq	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e022      	b.n	800307a <HAL_TIM_PWM_Start+0x6a>
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	2b04      	cmp	r3, #4
 8003038:	d109      	bne.n	800304e <HAL_TIM_PWM_Start+0x3e>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b01      	cmp	r3, #1
 8003044:	bf14      	ite	ne
 8003046:	2301      	movne	r3, #1
 8003048:	2300      	moveq	r3, #0
 800304a:	b2db      	uxtb	r3, r3
 800304c:	e015      	b.n	800307a <HAL_TIM_PWM_Start+0x6a>
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d109      	bne.n	8003068 <HAL_TIM_PWM_Start+0x58>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b01      	cmp	r3, #1
 800305e:	bf14      	ite	ne
 8003060:	2301      	movne	r3, #1
 8003062:	2300      	moveq	r3, #0
 8003064:	b2db      	uxtb	r3, r3
 8003066:	e008      	b.n	800307a <HAL_TIM_PWM_Start+0x6a>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b01      	cmp	r3, #1
 8003072:	bf14      	ite	ne
 8003074:	2301      	movne	r3, #1
 8003076:	2300      	moveq	r3, #0
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e05e      	b.n	8003140 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d104      	bne.n	8003092 <HAL_TIM_PWM_Start+0x82>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2202      	movs	r2, #2
 800308c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003090:	e013      	b.n	80030ba <HAL_TIM_PWM_Start+0xaa>
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	2b04      	cmp	r3, #4
 8003096:	d104      	bne.n	80030a2 <HAL_TIM_PWM_Start+0x92>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a0:	e00b      	b.n	80030ba <HAL_TIM_PWM_Start+0xaa>
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d104      	bne.n	80030b2 <HAL_TIM_PWM_Start+0xa2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2202      	movs	r2, #2
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b0:	e003      	b.n	80030ba <HAL_TIM_PWM_Start+0xaa>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2202      	movs	r2, #2
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2201      	movs	r2, #1
 80030c0:	6839      	ldr	r1, [r7, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 ff7f 	bl	8003fc6 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a1e      	ldr	r2, [pc, #120]	; (8003148 <HAL_TIM_PWM_Start+0x138>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d107      	bne.n	80030e2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_TIM_PWM_Start+0x138>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00e      	beq.n	800310a <HAL_TIM_PWM_Start+0xfa>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f4:	d009      	beq.n	800310a <HAL_TIM_PWM_Start+0xfa>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a14      	ldr	r2, [pc, #80]	; (800314c <HAL_TIM_PWM_Start+0x13c>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d004      	beq.n	800310a <HAL_TIM_PWM_Start+0xfa>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a12      	ldr	r2, [pc, #72]	; (8003150 <HAL_TIM_PWM_Start+0x140>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d111      	bne.n	800312e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2b06      	cmp	r3, #6
 800311a:	d010      	beq.n	800313e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0201 	orr.w	r2, r2, #1
 800312a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800312c:	e007      	b.n	800313e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f042 0201 	orr.w	r2, r2, #1
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800

08003154 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e093      	b.n	8003290 <HAL_TIM_Encoder_Init+0x13c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b00      	cmp	r3, #0
 8003172:	d106      	bne.n	8003182 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7fe fd71 	bl	8001c64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2202      	movs	r2, #2
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003198:	f023 0307 	bic.w	r3, r3, #7
 800319c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3304      	adds	r3, #4
 80031a6:	4619      	mov	r1, r3
 80031a8:	4610      	mov	r0, r2
 80031aa:	f000 fbfb 	bl	80039a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80031c6:	683b      	ldr	r3, [r7, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d6:	f023 0303 	bic.w	r3, r3, #3
 80031da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	699b      	ldr	r3, [r3, #24]
 80031e4:	021b      	lsls	r3, r3, #8
 80031e6:	4313      	orrs	r3, r2
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80031f4:	f023 030c 	bic.w	r3, r3, #12
 80031f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003200:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68da      	ldr	r2, [r3, #12]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	69db      	ldr	r3, [r3, #28]
 800320e:	021b      	lsls	r3, r3, #8
 8003210:	4313      	orrs	r3, r2
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	011a      	lsls	r2, r3, #4
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6a1b      	ldr	r3, [r3, #32]
 8003222:	031b      	lsls	r3, r3, #12
 8003224:	4313      	orrs	r3, r2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003232:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	695b      	ldr	r3, [r3, #20]
 800323c:	011b      	lsls	r3, r3, #4
 800323e:	4313      	orrs	r3, r2
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	697a      	ldr	r2, [r7, #20]
 800324c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2201      	movs	r2, #1
 8003282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3718      	adds	r7, #24
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80032a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d110      	bne.n	80032ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80032c8:	7bfb      	ldrb	r3, [r7, #15]
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d102      	bne.n	80032d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80032ce:	7b7b      	ldrb	r3, [r7, #13]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d001      	beq.n	80032d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e069      	b.n	80033ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2202      	movs	r2, #2
 80032dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2202      	movs	r2, #2
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e8:	e031      	b.n	800334e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b04      	cmp	r3, #4
 80032ee:	d110      	bne.n	8003312 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80032f0:	7bbb      	ldrb	r3, [r7, #14]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d102      	bne.n	80032fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80032f6:	7b3b      	ldrb	r3, [r7, #12]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d001      	beq.n	8003300 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e055      	b.n	80033ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003310:	e01d      	b.n	800334e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003312:	7bfb      	ldrb	r3, [r7, #15]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d108      	bne.n	800332a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003318:	7bbb      	ldrb	r3, [r7, #14]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d105      	bne.n	800332a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800331e:	7b7b      	ldrb	r3, [r7, #13]
 8003320:	2b01      	cmp	r3, #1
 8003322:	d102      	bne.n	800332a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003324:	7b3b      	ldrb	r3, [r7, #12]
 8003326:	2b01      	cmp	r3, #1
 8003328:	d001      	beq.n	800332e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e03e      	b.n	80033ac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2202      	movs	r2, #2
 8003332:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2202      	movs	r2, #2
 800333a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2202      	movs	r2, #2
 8003342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d003      	beq.n	800335c <HAL_TIM_Encoder_Start+0xc4>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b04      	cmp	r3, #4
 8003358:	d008      	beq.n	800336c <HAL_TIM_Encoder_Start+0xd4>
 800335a:	e00f      	b.n	800337c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2201      	movs	r2, #1
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fe2e 	bl	8003fc6 <TIM_CCxChannelCmd>
      break;
 800336a:	e016      	b.n	800339a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2201      	movs	r2, #1
 8003372:	2104      	movs	r1, #4
 8003374:	4618      	mov	r0, r3
 8003376:	f000 fe26 	bl	8003fc6 <TIM_CCxChannelCmd>
      break;
 800337a:	e00e      	b.n	800339a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2201      	movs	r2, #1
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fe1e 	bl	8003fc6 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	2201      	movs	r2, #1
 8003390:	2104      	movs	r1, #4
 8003392:	4618      	mov	r0, r3
 8003394:	f000 fe17 	bl	8003fc6 <TIM_CCxChannelCmd>
      break;
 8003398:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f042 0201 	orr.w	r2, r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3710      	adds	r7, #16
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d122      	bne.n	8003410 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0302 	and.w	r3, r3, #2
 80033d4:	2b02      	cmp	r3, #2
 80033d6:	d11b      	bne.n	8003410 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0202 	mvn.w	r2, #2
 80033e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f003 0303 	and.w	r3, r3, #3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 fab8 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 faab 	bl	800395a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 faba 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	f003 0304 	and.w	r3, r3, #4
 800341a:	2b04      	cmp	r3, #4
 800341c:	d122      	bne.n	8003464 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	f003 0304 	and.w	r3, r3, #4
 8003428:	2b04      	cmp	r3, #4
 800342a:	d11b      	bne.n	8003464 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0204 	mvn.w	r2, #4
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2202      	movs	r2, #2
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fa8e 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 fa81 	bl	800395a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 fa90 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	691b      	ldr	r3, [r3, #16]
 800346a:	f003 0308 	and.w	r3, r3, #8
 800346e:	2b08      	cmp	r3, #8
 8003470:	d122      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f003 0308 	and.w	r3, r3, #8
 800347c:	2b08      	cmp	r3, #8
 800347e:	d11b      	bne.n	80034b8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f06f 0208 	mvn.w	r2, #8
 8003488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2204      	movs	r2, #4
 800348e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	69db      	ldr	r3, [r3, #28]
 8003496:	f003 0303 	and.w	r3, r3, #3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fa64 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 80034a4:	e005      	b.n	80034b2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa57 	bl	800395a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f000 fa66 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2200      	movs	r2, #0
 80034b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	691b      	ldr	r3, [r3, #16]
 80034be:	f003 0310 	and.w	r3, r3, #16
 80034c2:	2b10      	cmp	r3, #16
 80034c4:	d122      	bne.n	800350c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	f003 0310 	and.w	r3, r3, #16
 80034d0:	2b10      	cmp	r3, #16
 80034d2:	d11b      	bne.n	800350c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0210 	mvn.w	r2, #16
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2208      	movs	r2, #8
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa3a 	bl	800396c <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fa2d 	bl	800395a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa3c 	bl	800397e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	691b      	ldr	r3, [r3, #16]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b01      	cmp	r3, #1
 8003518:	d10e      	bne.n	8003538 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b01      	cmp	r3, #1
 8003526:	d107      	bne.n	8003538 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0201 	mvn.w	r2, #1
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f7fe f824 	bl	8001580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003542:	2b80      	cmp	r3, #128	; 0x80
 8003544:	d10e      	bne.n	8003564 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d107      	bne.n	8003564 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 fe0e 	bl	8004180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d10e      	bne.n	8003590 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800357c:	2b40      	cmp	r3, #64	; 0x40
 800357e:	d107      	bne.n	8003590 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 fa00 	bl	8003990 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f003 0320 	and.w	r3, r3, #32
 800359a:	2b20      	cmp	r3, #32
 800359c:	d10e      	bne.n	80035bc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	f003 0320 	and.w	r3, r3, #32
 80035a8:	2b20      	cmp	r3, #32
 80035aa:	d107      	bne.n	80035bc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f06f 0220 	mvn.w	r2, #32
 80035b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fdd9 	bl	800416e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035bc:	bf00      	nop
 80035be:	3708      	adds	r7, #8
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d0:	2300      	movs	r3, #0
 80035d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035de:	2302      	movs	r3, #2
 80035e0:	e0ae      	b.n	8003740 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2b0c      	cmp	r3, #12
 80035ee:	f200 809f 	bhi.w	8003730 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80035f2:	a201      	add	r2, pc, #4	; (adr r2, 80035f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f8:	0800362d 	.word	0x0800362d
 80035fc:	08003731 	.word	0x08003731
 8003600:	08003731 	.word	0x08003731
 8003604:	08003731 	.word	0x08003731
 8003608:	0800366d 	.word	0x0800366d
 800360c:	08003731 	.word	0x08003731
 8003610:	08003731 	.word	0x08003731
 8003614:	08003731 	.word	0x08003731
 8003618:	080036af 	.word	0x080036af
 800361c:	08003731 	.word	0x08003731
 8003620:	08003731 	.word	0x08003731
 8003624:	08003731 	.word	0x08003731
 8003628:	080036ef 	.word	0x080036ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 fa18 	bl	8003a68 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	699a      	ldr	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f042 0208 	orr.w	r2, r2, #8
 8003646:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0204 	bic.w	r2, r2, #4
 8003656:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6999      	ldr	r1, [r3, #24]
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	691a      	ldr	r2, [r3, #16]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	430a      	orrs	r2, r1
 8003668:	619a      	str	r2, [r3, #24]
      break;
 800366a:	e064      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	68b9      	ldr	r1, [r7, #8]
 8003672:	4618      	mov	r0, r3
 8003674:	f000 fa5e 	bl	8003b34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	699a      	ldr	r2, [r3, #24]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699a      	ldr	r2, [r3, #24]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	6999      	ldr	r1, [r3, #24]
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	021a      	lsls	r2, r3, #8
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	430a      	orrs	r2, r1
 80036aa:	619a      	str	r2, [r3, #24]
      break;
 80036ac:	e043      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68b9      	ldr	r1, [r7, #8]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 faa7 	bl	8003c08 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0208 	orr.w	r2, r2, #8
 80036c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0204 	bic.w	r2, r2, #4
 80036d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69d9      	ldr	r1, [r3, #28]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	691a      	ldr	r2, [r3, #16]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	61da      	str	r2, [r3, #28]
      break;
 80036ec:	e023      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68b9      	ldr	r1, [r7, #8]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 faf1 	bl	8003cdc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69d9      	ldr	r1, [r3, #28]
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	021a      	lsls	r2, r3, #8
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	61da      	str	r2, [r3, #28]
      break;
 800372e:	e002      	b.n	8003736 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	75fb      	strb	r3, [r7, #23]
      break;
 8003734:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800373e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIM_ConfigClockSource+0x1c>
 8003760:	2302      	movs	r3, #2
 8003762:	e0b4      	b.n	80038ce <HAL_TIM_ConfigClockSource+0x186>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003782:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800378a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800379c:	d03e      	beq.n	800381c <HAL_TIM_ConfigClockSource+0xd4>
 800379e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037a2:	f200 8087 	bhi.w	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037aa:	f000 8086 	beq.w	80038ba <HAL_TIM_ConfigClockSource+0x172>
 80037ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b2:	d87f      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037b4:	2b70      	cmp	r3, #112	; 0x70
 80037b6:	d01a      	beq.n	80037ee <HAL_TIM_ConfigClockSource+0xa6>
 80037b8:	2b70      	cmp	r3, #112	; 0x70
 80037ba:	d87b      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037bc:	2b60      	cmp	r3, #96	; 0x60
 80037be:	d050      	beq.n	8003862 <HAL_TIM_ConfigClockSource+0x11a>
 80037c0:	2b60      	cmp	r3, #96	; 0x60
 80037c2:	d877      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037c4:	2b50      	cmp	r3, #80	; 0x50
 80037c6:	d03c      	beq.n	8003842 <HAL_TIM_ConfigClockSource+0xfa>
 80037c8:	2b50      	cmp	r3, #80	; 0x50
 80037ca:	d873      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d058      	beq.n	8003882 <HAL_TIM_ConfigClockSource+0x13a>
 80037d0:	2b40      	cmp	r3, #64	; 0x40
 80037d2:	d86f      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b30      	cmp	r3, #48	; 0x30
 80037d6:	d064      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x15a>
 80037d8:	2b30      	cmp	r3, #48	; 0x30
 80037da:	d86b      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d060      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x15a>
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d867      	bhi.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d05c      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x15a>
 80037e8:	2b10      	cmp	r3, #16
 80037ea:	d05a      	beq.n	80038a2 <HAL_TIM_ConfigClockSource+0x15a>
 80037ec:	e062      	b.n	80038b4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6818      	ldr	r0, [r3, #0]
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	6899      	ldr	r1, [r3, #8]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f000 fbc3 	bl	8003f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003810:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	609a      	str	r2, [r3, #8]
      break;
 800381a:	e04f      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	6899      	ldr	r1, [r3, #8]
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685a      	ldr	r2, [r3, #4]
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	f000 fbac 	bl	8003f88 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800383e:	609a      	str	r2, [r3, #8]
      break;
 8003840:	e03c      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	461a      	mov	r2, r3
 8003850:	f000 fb23 	bl	8003e9a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	2150      	movs	r1, #80	; 0x50
 800385a:	4618      	mov	r0, r3
 800385c:	f000 fb7a 	bl	8003f54 <TIM_ITRx_SetConfig>
      break;
 8003860:	e02c      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	6859      	ldr	r1, [r3, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	461a      	mov	r2, r3
 8003870:	f000 fb41 	bl	8003ef6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2160      	movs	r1, #96	; 0x60
 800387a:	4618      	mov	r0, r3
 800387c:	f000 fb6a 	bl	8003f54 <TIM_ITRx_SetConfig>
      break;
 8003880:	e01c      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6818      	ldr	r0, [r3, #0]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	461a      	mov	r2, r3
 8003890:	f000 fb03 	bl	8003e9a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2140      	movs	r1, #64	; 0x40
 800389a:	4618      	mov	r0, r3
 800389c:	f000 fb5a 	bl	8003f54 <TIM_ITRx_SetConfig>
      break;
 80038a0:	e00c      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4619      	mov	r1, r3
 80038ac:	4610      	mov	r0, r2
 80038ae:	f000 fb51 	bl	8003f54 <TIM_ITRx_SetConfig>
      break;
 80038b2:	e003      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	73fb      	strb	r3, [r7, #15]
      break;
 80038b8:	e000      	b.n	80038bc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}

080038d6 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
 80038de:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d101      	bne.n	80038ee <HAL_TIM_SlaveConfigSynchro+0x18>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e031      	b.n	8003952 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	2201      	movs	r2, #1
 80038f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2202      	movs	r2, #2
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80038fe:	6839      	ldr	r1, [r7, #0]
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fa39 	bl	8003d78 <TIM_SlaveTimer_SetConfig>
 8003906:	4603      	mov	r3, r0
 8003908:	2b00      	cmp	r3, #0
 800390a:	d009      	beq.n	8003920 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e018      	b.n	8003952 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800392e:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68da      	ldr	r2, [r3, #12]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800393e:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800395a:	b480      	push	{r7}
 800395c:	b083      	sub	sp, #12
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003962:	bf00      	nop
 8003964:	370c      	adds	r7, #12
 8003966:	46bd      	mov	sp, r7
 8003968:	bc80      	pop	{r7}
 800396a:	4770      	bx	lr

0800396c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	bc80      	pop	{r7}
 800397c:	4770      	bx	lr

0800397e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b083      	sub	sp, #12
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003986:	bf00      	nop
 8003988:	370c      	adds	r7, #12
 800398a:	46bd      	mov	sp, r7
 800398c:	bc80      	pop	{r7}
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003998:	bf00      	nop
 800399a:	370c      	adds	r7, #12
 800399c:	46bd      	mov	sp, r7
 800399e:	bc80      	pop	{r7}
 80039a0:	4770      	bx	lr
	...

080039a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a29      	ldr	r2, [pc, #164]	; (8003a5c <TIM_Base_SetConfig+0xb8>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d00b      	beq.n	80039d4 <TIM_Base_SetConfig+0x30>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c2:	d007      	beq.n	80039d4 <TIM_Base_SetConfig+0x30>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	4a26      	ldr	r2, [pc, #152]	; (8003a60 <TIM_Base_SetConfig+0xbc>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d003      	beq.n	80039d4 <TIM_Base_SetConfig+0x30>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	4a25      	ldr	r2, [pc, #148]	; (8003a64 <TIM_Base_SetConfig+0xc0>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d108      	bne.n	80039e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <TIM_Base_SetConfig+0xb8>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <TIM_Base_SetConfig+0x62>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039f4:	d007      	beq.n	8003a06 <TIM_Base_SetConfig+0x62>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a19      	ldr	r2, [pc, #100]	; (8003a60 <TIM_Base_SetConfig+0xbc>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_Base_SetConfig+0x62>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a18      	ldr	r2, [pc, #96]	; (8003a64 <TIM_Base_SetConfig+0xc0>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d108      	bne.n	8003a18 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a07      	ldr	r2, [pc, #28]	; (8003a5c <TIM_Base_SetConfig+0xb8>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d103      	bne.n	8003a4c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	691a      	ldr	r2, [r3, #16]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	615a      	str	r2, [r3, #20]
}
 8003a52:	bf00      	nop
 8003a54:	3714      	adds	r7, #20
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr
 8003a5c:	40012c00 	.word	0x40012c00
 8003a60:	40000400 	.word	0x40000400
 8003a64:	40000800 	.word	0x40000800

08003a68 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b087      	sub	sp, #28
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f023 0201 	bic.w	r2, r3, #1
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0303 	bic.w	r3, r3, #3
 8003a9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68fa      	ldr	r2, [r7, #12]
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	f023 0302 	bic.w	r3, r3, #2
 8003ab0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a1c      	ldr	r2, [pc, #112]	; (8003b30 <TIM_OC1_SetConfig+0xc8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d10c      	bne.n	8003ade <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0308 	bic.w	r3, r3, #8
 8003aca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a13      	ldr	r2, [pc, #76]	; (8003b30 <TIM_OC1_SetConfig+0xc8>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d111      	bne.n	8003b0a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40012c00 	.word	0x40012c00

08003b34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6a1b      	ldr	r3, [r3, #32]
 8003b48:	f023 0210 	bic.w	r2, r3, #16
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	699b      	ldr	r3, [r3, #24]
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	021b      	lsls	r3, r3, #8
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	f023 0320 	bic.w	r3, r3, #32
 8003b7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a1d      	ldr	r2, [pc, #116]	; (8003c04 <TIM_OC2_SetConfig+0xd0>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d10d      	bne.n	8003bb0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	697a      	ldr	r2, [r7, #20]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a14      	ldr	r2, [pc, #80]	; (8003c04 <TIM_OC2_SetConfig+0xd0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d113      	bne.n	8003be0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	695b      	ldr	r3, [r3, #20]
 8003bcc:	009b      	lsls	r3, r3, #2
 8003bce:	693a      	ldr	r2, [r7, #16]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	68fa      	ldr	r2, [r7, #12]
 8003bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685a      	ldr	r2, [r3, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bc80      	pop	{r7}
 8003c02:	4770      	bx	lr
 8003c04:	40012c00 	.word	0x40012c00

08003c08 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b087      	sub	sp, #28
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a1b      	ldr	r3, [r3, #32]
 8003c1c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1d      	ldr	r2, [pc, #116]	; (8003cd8 <TIM_OC3_SetConfig+0xd0>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d10d      	bne.n	8003c82 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c7a:	697b      	ldr	r3, [r7, #20]
 8003c7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <TIM_OC3_SetConfig+0xd0>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d113      	bne.n	8003cb2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	693a      	ldr	r2, [r7, #16]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	68fa      	ldr	r2, [r7, #12]
 8003cbc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	685a      	ldr	r2, [r3, #4]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bc80      	pop	{r7}
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40012c00 	.word	0x40012c00

08003cdc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b087      	sub	sp, #28
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	69db      	ldr	r3, [r3, #28]
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	021b      	lsls	r3, r3, #8
 8003d1a:	68fa      	ldr	r2, [r7, #12]
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	031b      	lsls	r3, r3, #12
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4313      	orrs	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a0f      	ldr	r2, [pc, #60]	; (8003d74 <TIM_OC4_SetConfig+0x98>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d109      	bne.n	8003d50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	695b      	ldr	r3, [r3, #20]
 8003d48:	019b      	lsls	r3, r3, #6
 8003d4a:	697a      	ldr	r2, [r7, #20]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	68fa      	ldr	r2, [r7, #12]
 8003d5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685a      	ldr	r2, [r3, #4]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	621a      	str	r2, [r3, #32]
}
 8003d6a:	bf00      	nop
 8003d6c:	371c      	adds	r7, #28
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bc80      	pop	{r7}
 8003d72:	4770      	bx	lr
 8003d74:	40012c00 	.word	0x40012c00

08003d78 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d94:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f023 0307 	bic.w	r3, r3, #7
 8003da6:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b70      	cmp	r3, #112	; 0x70
 8003dc0:	d01a      	beq.n	8003df8 <TIM_SlaveTimer_SetConfig+0x80>
 8003dc2:	2b70      	cmp	r3, #112	; 0x70
 8003dc4:	d860      	bhi.n	8003e88 <TIM_SlaveTimer_SetConfig+0x110>
 8003dc6:	2b60      	cmp	r3, #96	; 0x60
 8003dc8:	d054      	beq.n	8003e74 <TIM_SlaveTimer_SetConfig+0xfc>
 8003dca:	2b60      	cmp	r3, #96	; 0x60
 8003dcc:	d85c      	bhi.n	8003e88 <TIM_SlaveTimer_SetConfig+0x110>
 8003dce:	2b50      	cmp	r3, #80	; 0x50
 8003dd0:	d046      	beq.n	8003e60 <TIM_SlaveTimer_SetConfig+0xe8>
 8003dd2:	2b50      	cmp	r3, #80	; 0x50
 8003dd4:	d858      	bhi.n	8003e88 <TIM_SlaveTimer_SetConfig+0x110>
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d019      	beq.n	8003e0e <TIM_SlaveTimer_SetConfig+0x96>
 8003dda:	2b40      	cmp	r3, #64	; 0x40
 8003ddc:	d854      	bhi.n	8003e88 <TIM_SlaveTimer_SetConfig+0x110>
 8003dde:	2b30      	cmp	r3, #48	; 0x30
 8003de0:	d055      	beq.n	8003e8e <TIM_SlaveTimer_SetConfig+0x116>
 8003de2:	2b30      	cmp	r3, #48	; 0x30
 8003de4:	d850      	bhi.n	8003e88 <TIM_SlaveTimer_SetConfig+0x110>
 8003de6:	2b20      	cmp	r3, #32
 8003de8:	d051      	beq.n	8003e8e <TIM_SlaveTimer_SetConfig+0x116>
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d84c      	bhi.n	8003e88 <TIM_SlaveTimer_SetConfig+0x110>
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d04d      	beq.n	8003e8e <TIM_SlaveTimer_SetConfig+0x116>
 8003df2:	2b10      	cmp	r3, #16
 8003df4:	d04b      	beq.n	8003e8e <TIM_SlaveTimer_SetConfig+0x116>
 8003df6:	e047      	b.n	8003e88 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6818      	ldr	r0, [r3, #0]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68d9      	ldr	r1, [r3, #12]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	689a      	ldr	r2, [r3, #8]
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	f000 f8be 	bl	8003f88 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8003e0c:	e040      	b.n	8003e90 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2b05      	cmp	r3, #5
 8003e14:	d101      	bne.n	8003e1a <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e03b      	b.n	8003e92 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6a1a      	ldr	r2, [r3, #32]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f022 0201 	bic.w	r2, r2, #1
 8003e30:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e40:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	691b      	ldr	r3, [r3, #16]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68fa      	ldr	r2, [r7, #12]
 8003e5c:	621a      	str	r2, [r3, #32]
      break;
 8003e5e:	e017      	b.n	8003e90 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6818      	ldr	r0, [r3, #0]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	6899      	ldr	r1, [r3, #8]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	f000 f814 	bl	8003e9a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003e72:	e00d      	b.n	8003e90 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6818      	ldr	r0, [r3, #0]
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	6899      	ldr	r1, [r3, #8]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	461a      	mov	r2, r3
 8003e82:	f000 f838 	bl	8003ef6 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003e86:	e003      	b.n	8003e90 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e8c:	e000      	b.n	8003e90 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003e8e:	bf00      	nop
  }

  return status;
 8003e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3718      	adds	r7, #24
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b087      	sub	sp, #28
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	60f8      	str	r0, [r7, #12]
 8003ea2:	60b9      	str	r1, [r7, #8]
 8003ea4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a1b      	ldr	r3, [r3, #32]
 8003eaa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a1b      	ldr	r3, [r3, #32]
 8003eb0:	f023 0201 	bic.w	r2, r3, #1
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f023 030a 	bic.w	r3, r3, #10
 8003ed6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	4313      	orrs	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	621a      	str	r2, [r3, #32]
}
 8003eec:	bf00      	nop
 8003eee:	371c      	adds	r7, #28
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bc80      	pop	{r7}
 8003ef4:	4770      	bx	lr

08003ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b087      	sub	sp, #28
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f023 0210 	bic.w	r2, r3, #16
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bc80      	pop	{r7}
 8003f52:	4770      	bx	lr

08003f54 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f54:	b480      	push	{r7}
 8003f56:	b085      	sub	sp, #20
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f6c:	683a      	ldr	r2, [r7, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	f043 0307 	orr.w	r3, r3, #7
 8003f76:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	68fa      	ldr	r2, [r7, #12]
 8003f7c:	609a      	str	r2, [r3, #8]
}
 8003f7e:	bf00      	nop
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bc80      	pop	{r7}
 8003f86:	4770      	bx	lr

08003f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	607a      	str	r2, [r7, #4]
 8003f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	021a      	lsls	r2, r3, #8
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	609a      	str	r2, [r3, #8]
}
 8003fbc:	bf00      	nop
 8003fbe:	371c      	adds	r7, #28
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bc80      	pop	{r7}
 8003fc4:	4770      	bx	lr

08003fc6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b087      	sub	sp, #28
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	f003 031f 	and.w	r3, r3, #31
 8003fd8:	2201      	movs	r2, #1
 8003fda:	fa02 f303 	lsl.w	r3, r2, r3
 8003fde:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6a1a      	ldr	r2, [r3, #32]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	43db      	mvns	r3, r3
 8003fe8:	401a      	ands	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	6a1a      	ldr	r2, [r3, #32]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f003 031f 	and.w	r3, r3, #31
 8003ff8:	6879      	ldr	r1, [r7, #4]
 8003ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8003ffe:	431a      	orrs	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	621a      	str	r2, [r3, #32]
}
 8004004:	bf00      	nop
 8004006:	371c      	adds	r7, #28
 8004008:	46bd      	mov	sp, r7
 800400a:	bc80      	pop	{r7}
 800400c:	4770      	bx	lr
	...

08004010 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004010:	b480      	push	{r7}
 8004012:	b085      	sub	sp, #20
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004020:	2b01      	cmp	r3, #1
 8004022:	d101      	bne.n	8004028 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004024:	2302      	movs	r3, #2
 8004026:	e046      	b.n	80040b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2202      	movs	r2, #2
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800404e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	4313      	orrs	r3, r2
 8004058:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a16      	ldr	r2, [pc, #88]	; (80040c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d00e      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004074:	d009      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a12      	ldr	r2, [pc, #72]	; (80040c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a10      	ldr	r2, [pc, #64]	; (80040c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10c      	bne.n	80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004090:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	4313      	orrs	r3, r2
 800409a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040b4:	2300      	movs	r3, #0
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3714      	adds	r7, #20
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bc80      	pop	{r7}
 80040be:	4770      	bx	lr
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	40000400 	.word	0x40000400
 80040c8:	40000800 	.word	0x40000800

080040cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
 80040d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e0:	2b01      	cmp	r3, #1
 80040e2:	d101      	bne.n	80040e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040e4:	2302      	movs	r3, #2
 80040e6:	e03d      	b.n	8004164 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	68db      	ldr	r3, [r3, #12]
 80040fa:	4313      	orrs	r3, r2
 80040fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	4313      	orrs	r3, r2
 800410a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4313      	orrs	r3, r2
 8004126:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	4313      	orrs	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	4313      	orrs	r3, r2
 8004150:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68fa      	ldr	r2, [r7, #12]
 8004158:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004162:	2300      	movs	r3, #0
}
 8004164:	4618      	mov	r0, r3
 8004166:	3714      	adds	r7, #20
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr

0800416e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800416e:	b480      	push	{r7}
 8004170:	b083      	sub	sp, #12
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004176:	bf00      	nop
 8004178:	370c      	adds	r7, #12
 800417a:	46bd      	mov	sp, r7
 800417c:	bc80      	pop	{r7}
 800417e:	4770      	bx	lr

08004180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	4770      	bx	lr

08004192 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004192:	b580      	push	{r7, lr}
 8004194:	b082      	sub	sp, #8
 8004196:	af00      	add	r7, sp, #0
 8004198:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d101      	bne.n	80041a4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e042      	b.n	800422a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041aa:	b2db      	uxtb	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d106      	bne.n	80041be <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f7fd fdc5 	bl	8001d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2224      	movs	r2, #36	; 0x24
 80041c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80041d4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f91c 	bl	8004414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	691a      	ldr	r2, [r3, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80041ea:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	695a      	ldr	r2, [r3, #20]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041fa:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68da      	ldr	r2, [r3, #12]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800420a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2220      	movs	r2, #32
 8004216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2220      	movs	r2, #32
 800421e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3708      	adds	r7, #8
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004232:	b580      	push	{r7, lr}
 8004234:	b08a      	sub	sp, #40	; 0x28
 8004236:	af02      	add	r7, sp, #8
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	4613      	mov	r3, r2
 8004240:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004242:	2300      	movs	r3, #0
 8004244:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800424c:	b2db      	uxtb	r3, r3
 800424e:	2b20      	cmp	r3, #32
 8004250:	d16d      	bne.n	800432e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d002      	beq.n	800425e <HAL_UART_Transmit+0x2c>
 8004258:	88fb      	ldrh	r3, [r7, #6]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e066      	b.n	8004330 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2221      	movs	r2, #33	; 0x21
 800426c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004270:	f7fd ff10 	bl	8002094 <HAL_GetTick>
 8004274:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	88fa      	ldrh	r2, [r7, #6]
 800427a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	88fa      	ldrh	r2, [r7, #6]
 8004280:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800428a:	d108      	bne.n	800429e <HAL_UART_Transmit+0x6c>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	691b      	ldr	r3, [r3, #16]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	61bb      	str	r3, [r7, #24]
 800429c:	e003      	b.n	80042a6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80042a6:	e02a      	b.n	80042fe <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	9300      	str	r3, [sp, #0]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2200      	movs	r2, #0
 80042b0:	2180      	movs	r1, #128	; 0x80
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 f840 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d001      	beq.n	80042c2 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e036      	b.n	8004330 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d10b      	bne.n	80042e0 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042d6:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	3302      	adds	r3, #2
 80042dc:	61bb      	str	r3, [r7, #24]
 80042de:	e007      	b.n	80042f0 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	781a      	ldrb	r2, [r3, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3301      	adds	r3, #1
 80042ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	3b01      	subs	r3, #1
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004302:	b29b      	uxth	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1cf      	bne.n	80042a8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	2200      	movs	r2, #0
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f810 	bl	8004338 <UART_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800431e:	2303      	movs	r3, #3
 8004320:	e006      	b.n	8004330 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2220      	movs	r2, #32
 8004326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800432a:	2300      	movs	r3, #0
 800432c:	e000      	b.n	8004330 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800432e:	2302      	movs	r3, #2
  }
}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}

08004338 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b090      	sub	sp, #64	; 0x40
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	603b      	str	r3, [r7, #0]
 8004344:	4613      	mov	r3, r2
 8004346:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004348:	e050      	b.n	80043ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800434a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800434c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004350:	d04c      	beq.n	80043ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004352:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004354:	2b00      	cmp	r3, #0
 8004356:	d007      	beq.n	8004368 <UART_WaitOnFlagUntilTimeout+0x30>
 8004358:	f7fd fe9c 	bl	8002094 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004364:	429a      	cmp	r2, r3
 8004366:	d241      	bcs.n	80043ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800437e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004388:	637a      	str	r2, [r7, #52]	; 0x34
 800438a:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800438e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	613b      	str	r3, [r7, #16]
   return(result);
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3314      	adds	r3, #20
 80043ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043bc:	623a      	str	r2, [r7, #32]
 80043be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	69f9      	ldr	r1, [r7, #28]
 80043c2:	6a3a      	ldr	r2, [r7, #32]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2220      	movs	r2, #32
 80043dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e00f      	b.n	800440c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681a      	ldr	r2, [r3, #0]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	4013      	ands	r3, r2
 80043f6:	68ba      	ldr	r2, [r7, #8]
 80043f8:	429a      	cmp	r2, r3
 80043fa:	bf0c      	ite	eq
 80043fc:	2301      	moveq	r3, #1
 80043fe:	2300      	movne	r3, #0
 8004400:	b2db      	uxtb	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	79fb      	ldrb	r3, [r7, #7]
 8004406:	429a      	cmp	r2, r3
 8004408:	d09f      	beq.n	800434a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800440a:	2300      	movs	r3, #0
}
 800440c:	4618      	mov	r0, r3
 800440e:	3740      	adds	r7, #64	; 0x40
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800444e:	f023 030c 	bic.w	r3, r3, #12
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	430b      	orrs	r3, r1
 800445a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2c      	ldr	r2, [pc, #176]	; (8004528 <UART_SetConfig+0x114>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d103      	bne.n	8004484 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800447c:	f7fe fc9c 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	e002      	b.n	800448a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004484:	f7fe fc84 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8004488:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009a      	lsls	r2, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	4a22      	ldr	r2, [pc, #136]	; (800452c <UART_SetConfig+0x118>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	0119      	lsls	r1, r3, #4
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009a      	lsls	r2, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c0:	4b1a      	ldr	r3, [pc, #104]	; (800452c <UART_SetConfig+0x118>)
 80044c2:	fba3 0302 	umull	r0, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2064      	movs	r0, #100	; 0x64
 80044ca:	fb00 f303 	mul.w	r3, r0, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	3332      	adds	r3, #50	; 0x32
 80044d4:	4a15      	ldr	r2, [pc, #84]	; (800452c <UART_SetConfig+0x118>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044e0:	4419      	add	r1, r3
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f8:	4b0c      	ldr	r3, [pc, #48]	; (800452c <UART_SetConfig+0x118>)
 80044fa:	fba3 0302 	umull	r0, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2064      	movs	r0, #100	; 0x64
 8004502:	fb00 f303 	mul.w	r3, r0, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	; 0x32
 800450c:	4a07      	ldr	r2, [pc, #28]	; (800452c <UART_SetConfig+0x118>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	440a      	add	r2, r1
 800451e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40013800 	.word	0x40013800
 800452c:	51eb851f 	.word	0x51eb851f

08004530 <__errno>:
 8004530:	4b01      	ldr	r3, [pc, #4]	; (8004538 <__errno+0x8>)
 8004532:	6818      	ldr	r0, [r3, #0]
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	2000000c 	.word	0x2000000c

0800453c <__libc_init_array>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	2600      	movs	r6, #0
 8004540:	4d0c      	ldr	r5, [pc, #48]	; (8004574 <__libc_init_array+0x38>)
 8004542:	4c0d      	ldr	r4, [pc, #52]	; (8004578 <__libc_init_array+0x3c>)
 8004544:	1b64      	subs	r4, r4, r5
 8004546:	10a4      	asrs	r4, r4, #2
 8004548:	42a6      	cmp	r6, r4
 800454a:	d109      	bne.n	8004560 <__libc_init_array+0x24>
 800454c:	f002 fd48 	bl	8006fe0 <_init>
 8004550:	2600      	movs	r6, #0
 8004552:	4d0a      	ldr	r5, [pc, #40]	; (800457c <__libc_init_array+0x40>)
 8004554:	4c0a      	ldr	r4, [pc, #40]	; (8004580 <__libc_init_array+0x44>)
 8004556:	1b64      	subs	r4, r4, r5
 8004558:	10a4      	asrs	r4, r4, #2
 800455a:	42a6      	cmp	r6, r4
 800455c:	d105      	bne.n	800456a <__libc_init_array+0x2e>
 800455e:	bd70      	pop	{r4, r5, r6, pc}
 8004560:	f855 3b04 	ldr.w	r3, [r5], #4
 8004564:	4798      	blx	r3
 8004566:	3601      	adds	r6, #1
 8004568:	e7ee      	b.n	8004548 <__libc_init_array+0xc>
 800456a:	f855 3b04 	ldr.w	r3, [r5], #4
 800456e:	4798      	blx	r3
 8004570:	3601      	adds	r6, #1
 8004572:	e7f2      	b.n	800455a <__libc_init_array+0x1e>
 8004574:	08007404 	.word	0x08007404
 8004578:	08007404 	.word	0x08007404
 800457c:	08007404 	.word	0x08007404
 8004580:	08007408 	.word	0x08007408

08004584 <memset>:
 8004584:	4603      	mov	r3, r0
 8004586:	4402      	add	r2, r0
 8004588:	4293      	cmp	r3, r2
 800458a:	d100      	bne.n	800458e <memset+0xa>
 800458c:	4770      	bx	lr
 800458e:	f803 1b01 	strb.w	r1, [r3], #1
 8004592:	e7f9      	b.n	8004588 <memset+0x4>

08004594 <__cvt>:
 8004594:	2b00      	cmp	r3, #0
 8004596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800459a:	461f      	mov	r7, r3
 800459c:	bfbb      	ittet	lt
 800459e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80045a2:	461f      	movlt	r7, r3
 80045a4:	2300      	movge	r3, #0
 80045a6:	232d      	movlt	r3, #45	; 0x2d
 80045a8:	b088      	sub	sp, #32
 80045aa:	4614      	mov	r4, r2
 80045ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80045ae:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80045b0:	7013      	strb	r3, [r2, #0]
 80045b2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80045b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80045b8:	f023 0820 	bic.w	r8, r3, #32
 80045bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045c0:	d005      	beq.n	80045ce <__cvt+0x3a>
 80045c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80045c6:	d100      	bne.n	80045ca <__cvt+0x36>
 80045c8:	3501      	adds	r5, #1
 80045ca:	2302      	movs	r3, #2
 80045cc:	e000      	b.n	80045d0 <__cvt+0x3c>
 80045ce:	2303      	movs	r3, #3
 80045d0:	aa07      	add	r2, sp, #28
 80045d2:	9204      	str	r2, [sp, #16]
 80045d4:	aa06      	add	r2, sp, #24
 80045d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80045da:	e9cd 3500 	strd	r3, r5, [sp]
 80045de:	4622      	mov	r2, r4
 80045e0:	463b      	mov	r3, r7
 80045e2:	f000 fcdd 	bl	8004fa0 <_dtoa_r>
 80045e6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80045ea:	4606      	mov	r6, r0
 80045ec:	d102      	bne.n	80045f4 <__cvt+0x60>
 80045ee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80045f0:	07db      	lsls	r3, r3, #31
 80045f2:	d522      	bpl.n	800463a <__cvt+0xa6>
 80045f4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80045f8:	eb06 0905 	add.w	r9, r6, r5
 80045fc:	d110      	bne.n	8004620 <__cvt+0x8c>
 80045fe:	7833      	ldrb	r3, [r6, #0]
 8004600:	2b30      	cmp	r3, #48	; 0x30
 8004602:	d10a      	bne.n	800461a <__cvt+0x86>
 8004604:	2200      	movs	r2, #0
 8004606:	2300      	movs	r3, #0
 8004608:	4620      	mov	r0, r4
 800460a:	4639      	mov	r1, r7
 800460c:	f7fc f9cc 	bl	80009a8 <__aeabi_dcmpeq>
 8004610:	b918      	cbnz	r0, 800461a <__cvt+0x86>
 8004612:	f1c5 0501 	rsb	r5, r5, #1
 8004616:	f8ca 5000 	str.w	r5, [sl]
 800461a:	f8da 3000 	ldr.w	r3, [sl]
 800461e:	4499      	add	r9, r3
 8004620:	2200      	movs	r2, #0
 8004622:	2300      	movs	r3, #0
 8004624:	4620      	mov	r0, r4
 8004626:	4639      	mov	r1, r7
 8004628:	f7fc f9be 	bl	80009a8 <__aeabi_dcmpeq>
 800462c:	b108      	cbz	r0, 8004632 <__cvt+0x9e>
 800462e:	f8cd 901c 	str.w	r9, [sp, #28]
 8004632:	2230      	movs	r2, #48	; 0x30
 8004634:	9b07      	ldr	r3, [sp, #28]
 8004636:	454b      	cmp	r3, r9
 8004638:	d307      	bcc.n	800464a <__cvt+0xb6>
 800463a:	4630      	mov	r0, r6
 800463c:	9b07      	ldr	r3, [sp, #28]
 800463e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004640:	1b9b      	subs	r3, r3, r6
 8004642:	6013      	str	r3, [r2, #0]
 8004644:	b008      	add	sp, #32
 8004646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464a:	1c59      	adds	r1, r3, #1
 800464c:	9107      	str	r1, [sp, #28]
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	e7f0      	b.n	8004634 <__cvt+0xa0>

08004652 <__exponent>:
 8004652:	4603      	mov	r3, r0
 8004654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004656:	2900      	cmp	r1, #0
 8004658:	f803 2b02 	strb.w	r2, [r3], #2
 800465c:	bfb6      	itet	lt
 800465e:	222d      	movlt	r2, #45	; 0x2d
 8004660:	222b      	movge	r2, #43	; 0x2b
 8004662:	4249      	neglt	r1, r1
 8004664:	2909      	cmp	r1, #9
 8004666:	7042      	strb	r2, [r0, #1]
 8004668:	dd2b      	ble.n	80046c2 <__exponent+0x70>
 800466a:	f10d 0407 	add.w	r4, sp, #7
 800466e:	46a4      	mov	ip, r4
 8004670:	270a      	movs	r7, #10
 8004672:	fb91 f6f7 	sdiv	r6, r1, r7
 8004676:	460a      	mov	r2, r1
 8004678:	46a6      	mov	lr, r4
 800467a:	fb07 1516 	mls	r5, r7, r6, r1
 800467e:	2a63      	cmp	r2, #99	; 0x63
 8004680:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004684:	4631      	mov	r1, r6
 8004686:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 800468a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800468e:	dcf0      	bgt.n	8004672 <__exponent+0x20>
 8004690:	3130      	adds	r1, #48	; 0x30
 8004692:	f1ae 0502 	sub.w	r5, lr, #2
 8004696:	f804 1c01 	strb.w	r1, [r4, #-1]
 800469a:	4629      	mov	r1, r5
 800469c:	1c44      	adds	r4, r0, #1
 800469e:	4561      	cmp	r1, ip
 80046a0:	d30a      	bcc.n	80046b8 <__exponent+0x66>
 80046a2:	f10d 0209 	add.w	r2, sp, #9
 80046a6:	eba2 020e 	sub.w	r2, r2, lr
 80046aa:	4565      	cmp	r5, ip
 80046ac:	bf88      	it	hi
 80046ae:	2200      	movhi	r2, #0
 80046b0:	4413      	add	r3, r2
 80046b2:	1a18      	subs	r0, r3, r0
 80046b4:	b003      	add	sp, #12
 80046b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046b8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80046bc:	f804 2f01 	strb.w	r2, [r4, #1]!
 80046c0:	e7ed      	b.n	800469e <__exponent+0x4c>
 80046c2:	2330      	movs	r3, #48	; 0x30
 80046c4:	3130      	adds	r1, #48	; 0x30
 80046c6:	7083      	strb	r3, [r0, #2]
 80046c8:	70c1      	strb	r1, [r0, #3]
 80046ca:	1d03      	adds	r3, r0, #4
 80046cc:	e7f1      	b.n	80046b2 <__exponent+0x60>
	...

080046d0 <_printf_float>:
 80046d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046d4:	b091      	sub	sp, #68	; 0x44
 80046d6:	460c      	mov	r4, r1
 80046d8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80046dc:	4616      	mov	r6, r2
 80046de:	461f      	mov	r7, r3
 80046e0:	4605      	mov	r5, r0
 80046e2:	f001 fb41 	bl	8005d68 <_localeconv_r>
 80046e6:	6803      	ldr	r3, [r0, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	9309      	str	r3, [sp, #36]	; 0x24
 80046ec:	f7fb fd30 	bl	8000150 <strlen>
 80046f0:	2300      	movs	r3, #0
 80046f2:	930e      	str	r3, [sp, #56]	; 0x38
 80046f4:	f8d8 3000 	ldr.w	r3, [r8]
 80046f8:	900a      	str	r0, [sp, #40]	; 0x28
 80046fa:	3307      	adds	r3, #7
 80046fc:	f023 0307 	bic.w	r3, r3, #7
 8004700:	f103 0208 	add.w	r2, r3, #8
 8004704:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004708:	f8d4 b000 	ldr.w	fp, [r4]
 800470c:	f8c8 2000 	str.w	r2, [r8]
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004718:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 800471c:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004720:	930b      	str	r3, [sp, #44]	; 0x2c
 8004722:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004726:	4640      	mov	r0, r8
 8004728:	4b9c      	ldr	r3, [pc, #624]	; (800499c <_printf_float+0x2cc>)
 800472a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800472c:	f7fc f96e 	bl	8000a0c <__aeabi_dcmpun>
 8004730:	bb70      	cbnz	r0, 8004790 <_printf_float+0xc0>
 8004732:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004736:	4640      	mov	r0, r8
 8004738:	4b98      	ldr	r3, [pc, #608]	; (800499c <_printf_float+0x2cc>)
 800473a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800473c:	f7fc f948 	bl	80009d0 <__aeabi_dcmple>
 8004740:	bb30      	cbnz	r0, 8004790 <_printf_float+0xc0>
 8004742:	2200      	movs	r2, #0
 8004744:	2300      	movs	r3, #0
 8004746:	4640      	mov	r0, r8
 8004748:	4651      	mov	r1, sl
 800474a:	f7fc f937 	bl	80009bc <__aeabi_dcmplt>
 800474e:	b110      	cbz	r0, 8004756 <_printf_float+0x86>
 8004750:	232d      	movs	r3, #45	; 0x2d
 8004752:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004756:	4b92      	ldr	r3, [pc, #584]	; (80049a0 <_printf_float+0x2d0>)
 8004758:	4892      	ldr	r0, [pc, #584]	; (80049a4 <_printf_float+0x2d4>)
 800475a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800475e:	bf94      	ite	ls
 8004760:	4698      	movls	r8, r3
 8004762:	4680      	movhi	r8, r0
 8004764:	2303      	movs	r3, #3
 8004766:	f04f 0a00 	mov.w	sl, #0
 800476a:	6123      	str	r3, [r4, #16]
 800476c:	f02b 0304 	bic.w	r3, fp, #4
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	4633      	mov	r3, r6
 8004774:	4621      	mov	r1, r4
 8004776:	4628      	mov	r0, r5
 8004778:	9700      	str	r7, [sp, #0]
 800477a:	aa0f      	add	r2, sp, #60	; 0x3c
 800477c:	f000 f9d4 	bl	8004b28 <_printf_common>
 8004780:	3001      	adds	r0, #1
 8004782:	f040 8090 	bne.w	80048a6 <_printf_float+0x1d6>
 8004786:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800478a:	b011      	add	sp, #68	; 0x44
 800478c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004790:	4642      	mov	r2, r8
 8004792:	4653      	mov	r3, sl
 8004794:	4640      	mov	r0, r8
 8004796:	4651      	mov	r1, sl
 8004798:	f7fc f938 	bl	8000a0c <__aeabi_dcmpun>
 800479c:	b148      	cbz	r0, 80047b2 <_printf_float+0xe2>
 800479e:	f1ba 0f00 	cmp.w	sl, #0
 80047a2:	bfb8      	it	lt
 80047a4:	232d      	movlt	r3, #45	; 0x2d
 80047a6:	4880      	ldr	r0, [pc, #512]	; (80049a8 <_printf_float+0x2d8>)
 80047a8:	bfb8      	it	lt
 80047aa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80047ae:	4b7f      	ldr	r3, [pc, #508]	; (80049ac <_printf_float+0x2dc>)
 80047b0:	e7d3      	b.n	800475a <_printf_float+0x8a>
 80047b2:	6863      	ldr	r3, [r4, #4]
 80047b4:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80047b8:	1c5a      	adds	r2, r3, #1
 80047ba:	d142      	bne.n	8004842 <_printf_float+0x172>
 80047bc:	2306      	movs	r3, #6
 80047be:	6063      	str	r3, [r4, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	9206      	str	r2, [sp, #24]
 80047c4:	aa0e      	add	r2, sp, #56	; 0x38
 80047c6:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80047ca:	aa0d      	add	r2, sp, #52	; 0x34
 80047cc:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80047d0:	9203      	str	r2, [sp, #12]
 80047d2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80047d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80047da:	6023      	str	r3, [r4, #0]
 80047dc:	6863      	ldr	r3, [r4, #4]
 80047de:	4642      	mov	r2, r8
 80047e0:	9300      	str	r3, [sp, #0]
 80047e2:	4628      	mov	r0, r5
 80047e4:	4653      	mov	r3, sl
 80047e6:	910b      	str	r1, [sp, #44]	; 0x2c
 80047e8:	f7ff fed4 	bl	8004594 <__cvt>
 80047ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80047ee:	4680      	mov	r8, r0
 80047f0:	2947      	cmp	r1, #71	; 0x47
 80047f2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80047f4:	d108      	bne.n	8004808 <_printf_float+0x138>
 80047f6:	1cc8      	adds	r0, r1, #3
 80047f8:	db02      	blt.n	8004800 <_printf_float+0x130>
 80047fa:	6863      	ldr	r3, [r4, #4]
 80047fc:	4299      	cmp	r1, r3
 80047fe:	dd40      	ble.n	8004882 <_printf_float+0x1b2>
 8004800:	f1a9 0902 	sub.w	r9, r9, #2
 8004804:	fa5f f989 	uxtb.w	r9, r9
 8004808:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800480c:	d81f      	bhi.n	800484e <_printf_float+0x17e>
 800480e:	464a      	mov	r2, r9
 8004810:	3901      	subs	r1, #1
 8004812:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004816:	910d      	str	r1, [sp, #52]	; 0x34
 8004818:	f7ff ff1b 	bl	8004652 <__exponent>
 800481c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800481e:	4682      	mov	sl, r0
 8004820:	1813      	adds	r3, r2, r0
 8004822:	2a01      	cmp	r2, #1
 8004824:	6123      	str	r3, [r4, #16]
 8004826:	dc02      	bgt.n	800482e <_printf_float+0x15e>
 8004828:	6822      	ldr	r2, [r4, #0]
 800482a:	07d2      	lsls	r2, r2, #31
 800482c:	d501      	bpl.n	8004832 <_printf_float+0x162>
 800482e:	3301      	adds	r3, #1
 8004830:	6123      	str	r3, [r4, #16]
 8004832:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004836:	2b00      	cmp	r3, #0
 8004838:	d09b      	beq.n	8004772 <_printf_float+0xa2>
 800483a:	232d      	movs	r3, #45	; 0x2d
 800483c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004840:	e797      	b.n	8004772 <_printf_float+0xa2>
 8004842:	2947      	cmp	r1, #71	; 0x47
 8004844:	d1bc      	bne.n	80047c0 <_printf_float+0xf0>
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1ba      	bne.n	80047c0 <_printf_float+0xf0>
 800484a:	2301      	movs	r3, #1
 800484c:	e7b7      	b.n	80047be <_printf_float+0xee>
 800484e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004852:	d118      	bne.n	8004886 <_printf_float+0x1b6>
 8004854:	2900      	cmp	r1, #0
 8004856:	6863      	ldr	r3, [r4, #4]
 8004858:	dd0b      	ble.n	8004872 <_printf_float+0x1a2>
 800485a:	6121      	str	r1, [r4, #16]
 800485c:	b913      	cbnz	r3, 8004864 <_printf_float+0x194>
 800485e:	6822      	ldr	r2, [r4, #0]
 8004860:	07d0      	lsls	r0, r2, #31
 8004862:	d502      	bpl.n	800486a <_printf_float+0x19a>
 8004864:	3301      	adds	r3, #1
 8004866:	440b      	add	r3, r1
 8004868:	6123      	str	r3, [r4, #16]
 800486a:	f04f 0a00 	mov.w	sl, #0
 800486e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004870:	e7df      	b.n	8004832 <_printf_float+0x162>
 8004872:	b913      	cbnz	r3, 800487a <_printf_float+0x1aa>
 8004874:	6822      	ldr	r2, [r4, #0]
 8004876:	07d2      	lsls	r2, r2, #31
 8004878:	d501      	bpl.n	800487e <_printf_float+0x1ae>
 800487a:	3302      	adds	r3, #2
 800487c:	e7f4      	b.n	8004868 <_printf_float+0x198>
 800487e:	2301      	movs	r3, #1
 8004880:	e7f2      	b.n	8004868 <_printf_float+0x198>
 8004882:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004888:	4299      	cmp	r1, r3
 800488a:	db05      	blt.n	8004898 <_printf_float+0x1c8>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	6121      	str	r1, [r4, #16]
 8004890:	07d8      	lsls	r0, r3, #31
 8004892:	d5ea      	bpl.n	800486a <_printf_float+0x19a>
 8004894:	1c4b      	adds	r3, r1, #1
 8004896:	e7e7      	b.n	8004868 <_printf_float+0x198>
 8004898:	2900      	cmp	r1, #0
 800489a:	bfcc      	ite	gt
 800489c:	2201      	movgt	r2, #1
 800489e:	f1c1 0202 	rsble	r2, r1, #2
 80048a2:	4413      	add	r3, r2
 80048a4:	e7e0      	b.n	8004868 <_printf_float+0x198>
 80048a6:	6823      	ldr	r3, [r4, #0]
 80048a8:	055a      	lsls	r2, r3, #21
 80048aa:	d407      	bmi.n	80048bc <_printf_float+0x1ec>
 80048ac:	6923      	ldr	r3, [r4, #16]
 80048ae:	4642      	mov	r2, r8
 80048b0:	4631      	mov	r1, r6
 80048b2:	4628      	mov	r0, r5
 80048b4:	47b8      	blx	r7
 80048b6:	3001      	adds	r0, #1
 80048b8:	d12b      	bne.n	8004912 <_printf_float+0x242>
 80048ba:	e764      	b.n	8004786 <_printf_float+0xb6>
 80048bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80048c0:	f240 80dd 	bls.w	8004a7e <_printf_float+0x3ae>
 80048c4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80048c8:	2200      	movs	r2, #0
 80048ca:	2300      	movs	r3, #0
 80048cc:	f7fc f86c 	bl	80009a8 <__aeabi_dcmpeq>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	d033      	beq.n	800493c <_printf_float+0x26c>
 80048d4:	2301      	movs	r3, #1
 80048d6:	4631      	mov	r1, r6
 80048d8:	4628      	mov	r0, r5
 80048da:	4a35      	ldr	r2, [pc, #212]	; (80049b0 <_printf_float+0x2e0>)
 80048dc:	47b8      	blx	r7
 80048de:	3001      	adds	r0, #1
 80048e0:	f43f af51 	beq.w	8004786 <_printf_float+0xb6>
 80048e4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80048e8:	429a      	cmp	r2, r3
 80048ea:	db02      	blt.n	80048f2 <_printf_float+0x222>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	07d8      	lsls	r0, r3, #31
 80048f0:	d50f      	bpl.n	8004912 <_printf_float+0x242>
 80048f2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048f6:	4631      	mov	r1, r6
 80048f8:	4628      	mov	r0, r5
 80048fa:	47b8      	blx	r7
 80048fc:	3001      	adds	r0, #1
 80048fe:	f43f af42 	beq.w	8004786 <_printf_float+0xb6>
 8004902:	f04f 0800 	mov.w	r8, #0
 8004906:	f104 091a 	add.w	r9, r4, #26
 800490a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800490c:	3b01      	subs	r3, #1
 800490e:	4543      	cmp	r3, r8
 8004910:	dc09      	bgt.n	8004926 <_printf_float+0x256>
 8004912:	6823      	ldr	r3, [r4, #0]
 8004914:	079b      	lsls	r3, r3, #30
 8004916:	f100 8102 	bmi.w	8004b1e <_printf_float+0x44e>
 800491a:	68e0      	ldr	r0, [r4, #12]
 800491c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800491e:	4298      	cmp	r0, r3
 8004920:	bfb8      	it	lt
 8004922:	4618      	movlt	r0, r3
 8004924:	e731      	b.n	800478a <_printf_float+0xba>
 8004926:	2301      	movs	r3, #1
 8004928:	464a      	mov	r2, r9
 800492a:	4631      	mov	r1, r6
 800492c:	4628      	mov	r0, r5
 800492e:	47b8      	blx	r7
 8004930:	3001      	adds	r0, #1
 8004932:	f43f af28 	beq.w	8004786 <_printf_float+0xb6>
 8004936:	f108 0801 	add.w	r8, r8, #1
 800493a:	e7e6      	b.n	800490a <_printf_float+0x23a>
 800493c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800493e:	2b00      	cmp	r3, #0
 8004940:	dc38      	bgt.n	80049b4 <_printf_float+0x2e4>
 8004942:	2301      	movs	r3, #1
 8004944:	4631      	mov	r1, r6
 8004946:	4628      	mov	r0, r5
 8004948:	4a19      	ldr	r2, [pc, #100]	; (80049b0 <_printf_float+0x2e0>)
 800494a:	47b8      	blx	r7
 800494c:	3001      	adds	r0, #1
 800494e:	f43f af1a 	beq.w	8004786 <_printf_float+0xb6>
 8004952:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004956:	4313      	orrs	r3, r2
 8004958:	d102      	bne.n	8004960 <_printf_float+0x290>
 800495a:	6823      	ldr	r3, [r4, #0]
 800495c:	07d9      	lsls	r1, r3, #31
 800495e:	d5d8      	bpl.n	8004912 <_printf_float+0x242>
 8004960:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004964:	4631      	mov	r1, r6
 8004966:	4628      	mov	r0, r5
 8004968:	47b8      	blx	r7
 800496a:	3001      	adds	r0, #1
 800496c:	f43f af0b 	beq.w	8004786 <_printf_float+0xb6>
 8004970:	f04f 0900 	mov.w	r9, #0
 8004974:	f104 0a1a 	add.w	sl, r4, #26
 8004978:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800497a:	425b      	negs	r3, r3
 800497c:	454b      	cmp	r3, r9
 800497e:	dc01      	bgt.n	8004984 <_printf_float+0x2b4>
 8004980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004982:	e794      	b.n	80048ae <_printf_float+0x1de>
 8004984:	2301      	movs	r3, #1
 8004986:	4652      	mov	r2, sl
 8004988:	4631      	mov	r1, r6
 800498a:	4628      	mov	r0, r5
 800498c:	47b8      	blx	r7
 800498e:	3001      	adds	r0, #1
 8004990:	f43f aef9 	beq.w	8004786 <_printf_float+0xb6>
 8004994:	f109 0901 	add.w	r9, r9, #1
 8004998:	e7ee      	b.n	8004978 <_printf_float+0x2a8>
 800499a:	bf00      	nop
 800499c:	7fefffff 	.word	0x7fefffff
 80049a0:	08007030 	.word	0x08007030
 80049a4:	08007034 	.word	0x08007034
 80049a8:	0800703c 	.word	0x0800703c
 80049ac:	08007038 	.word	0x08007038
 80049b0:	08007040 	.word	0x08007040
 80049b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80049b8:	429a      	cmp	r2, r3
 80049ba:	bfa8      	it	ge
 80049bc:	461a      	movge	r2, r3
 80049be:	2a00      	cmp	r2, #0
 80049c0:	4691      	mov	r9, r2
 80049c2:	dc37      	bgt.n	8004a34 <_printf_float+0x364>
 80049c4:	f04f 0b00 	mov.w	fp, #0
 80049c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049cc:	f104 021a 	add.w	r2, r4, #26
 80049d0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80049d4:	ebaa 0309 	sub.w	r3, sl, r9
 80049d8:	455b      	cmp	r3, fp
 80049da:	dc33      	bgt.n	8004a44 <_printf_float+0x374>
 80049dc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049e0:	429a      	cmp	r2, r3
 80049e2:	db3b      	blt.n	8004a5c <_printf_float+0x38c>
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	07da      	lsls	r2, r3, #31
 80049e8:	d438      	bmi.n	8004a5c <_printf_float+0x38c>
 80049ea:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80049ec:	990d      	ldr	r1, [sp, #52]	; 0x34
 80049ee:	eba3 020a 	sub.w	r2, r3, sl
 80049f2:	eba3 0901 	sub.w	r9, r3, r1
 80049f6:	4591      	cmp	r9, r2
 80049f8:	bfa8      	it	ge
 80049fa:	4691      	movge	r9, r2
 80049fc:	f1b9 0f00 	cmp.w	r9, #0
 8004a00:	dc34      	bgt.n	8004a6c <_printf_float+0x39c>
 8004a02:	f04f 0800 	mov.w	r8, #0
 8004a06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004a0a:	f104 0a1a 	add.w	sl, r4, #26
 8004a0e:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004a12:	1a9b      	subs	r3, r3, r2
 8004a14:	eba3 0309 	sub.w	r3, r3, r9
 8004a18:	4543      	cmp	r3, r8
 8004a1a:	f77f af7a 	ble.w	8004912 <_printf_float+0x242>
 8004a1e:	2301      	movs	r3, #1
 8004a20:	4652      	mov	r2, sl
 8004a22:	4631      	mov	r1, r6
 8004a24:	4628      	mov	r0, r5
 8004a26:	47b8      	blx	r7
 8004a28:	3001      	adds	r0, #1
 8004a2a:	f43f aeac 	beq.w	8004786 <_printf_float+0xb6>
 8004a2e:	f108 0801 	add.w	r8, r8, #1
 8004a32:	e7ec      	b.n	8004a0e <_printf_float+0x33e>
 8004a34:	4613      	mov	r3, r2
 8004a36:	4631      	mov	r1, r6
 8004a38:	4642      	mov	r2, r8
 8004a3a:	4628      	mov	r0, r5
 8004a3c:	47b8      	blx	r7
 8004a3e:	3001      	adds	r0, #1
 8004a40:	d1c0      	bne.n	80049c4 <_printf_float+0x2f4>
 8004a42:	e6a0      	b.n	8004786 <_printf_float+0xb6>
 8004a44:	2301      	movs	r3, #1
 8004a46:	4631      	mov	r1, r6
 8004a48:	4628      	mov	r0, r5
 8004a4a:	920b      	str	r2, [sp, #44]	; 0x2c
 8004a4c:	47b8      	blx	r7
 8004a4e:	3001      	adds	r0, #1
 8004a50:	f43f ae99 	beq.w	8004786 <_printf_float+0xb6>
 8004a54:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004a56:	f10b 0b01 	add.w	fp, fp, #1
 8004a5a:	e7b9      	b.n	80049d0 <_printf_float+0x300>
 8004a5c:	4631      	mov	r1, r6
 8004a5e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a62:	4628      	mov	r0, r5
 8004a64:	47b8      	blx	r7
 8004a66:	3001      	adds	r0, #1
 8004a68:	d1bf      	bne.n	80049ea <_printf_float+0x31a>
 8004a6a:	e68c      	b.n	8004786 <_printf_float+0xb6>
 8004a6c:	464b      	mov	r3, r9
 8004a6e:	4631      	mov	r1, r6
 8004a70:	4628      	mov	r0, r5
 8004a72:	eb08 020a 	add.w	r2, r8, sl
 8004a76:	47b8      	blx	r7
 8004a78:	3001      	adds	r0, #1
 8004a7a:	d1c2      	bne.n	8004a02 <_printf_float+0x332>
 8004a7c:	e683      	b.n	8004786 <_printf_float+0xb6>
 8004a7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a80:	2a01      	cmp	r2, #1
 8004a82:	dc01      	bgt.n	8004a88 <_printf_float+0x3b8>
 8004a84:	07db      	lsls	r3, r3, #31
 8004a86:	d537      	bpl.n	8004af8 <_printf_float+0x428>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	4642      	mov	r2, r8
 8004a8c:	4631      	mov	r1, r6
 8004a8e:	4628      	mov	r0, r5
 8004a90:	47b8      	blx	r7
 8004a92:	3001      	adds	r0, #1
 8004a94:	f43f ae77 	beq.w	8004786 <_printf_float+0xb6>
 8004a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a9c:	4631      	mov	r1, r6
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	47b8      	blx	r7
 8004aa2:	3001      	adds	r0, #1
 8004aa4:	f43f ae6f 	beq.w	8004786 <_printf_float+0xb6>
 8004aa8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	f7fb ff7a 	bl	80009a8 <__aeabi_dcmpeq>
 8004ab4:	b9d8      	cbnz	r0, 8004aee <_printf_float+0x41e>
 8004ab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ab8:	f108 0201 	add.w	r2, r8, #1
 8004abc:	3b01      	subs	r3, #1
 8004abe:	4631      	mov	r1, r6
 8004ac0:	4628      	mov	r0, r5
 8004ac2:	47b8      	blx	r7
 8004ac4:	3001      	adds	r0, #1
 8004ac6:	d10e      	bne.n	8004ae6 <_printf_float+0x416>
 8004ac8:	e65d      	b.n	8004786 <_printf_float+0xb6>
 8004aca:	2301      	movs	r3, #1
 8004acc:	464a      	mov	r2, r9
 8004ace:	4631      	mov	r1, r6
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	47b8      	blx	r7
 8004ad4:	3001      	adds	r0, #1
 8004ad6:	f43f ae56 	beq.w	8004786 <_printf_float+0xb6>
 8004ada:	f108 0801 	add.w	r8, r8, #1
 8004ade:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	4543      	cmp	r3, r8
 8004ae4:	dcf1      	bgt.n	8004aca <_printf_float+0x3fa>
 8004ae6:	4653      	mov	r3, sl
 8004ae8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004aec:	e6e0      	b.n	80048b0 <_printf_float+0x1e0>
 8004aee:	f04f 0800 	mov.w	r8, #0
 8004af2:	f104 091a 	add.w	r9, r4, #26
 8004af6:	e7f2      	b.n	8004ade <_printf_float+0x40e>
 8004af8:	2301      	movs	r3, #1
 8004afa:	4642      	mov	r2, r8
 8004afc:	e7df      	b.n	8004abe <_printf_float+0x3ee>
 8004afe:	2301      	movs	r3, #1
 8004b00:	464a      	mov	r2, r9
 8004b02:	4631      	mov	r1, r6
 8004b04:	4628      	mov	r0, r5
 8004b06:	47b8      	blx	r7
 8004b08:	3001      	adds	r0, #1
 8004b0a:	f43f ae3c 	beq.w	8004786 <_printf_float+0xb6>
 8004b0e:	f108 0801 	add.w	r8, r8, #1
 8004b12:	68e3      	ldr	r3, [r4, #12]
 8004b14:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004b16:	1a5b      	subs	r3, r3, r1
 8004b18:	4543      	cmp	r3, r8
 8004b1a:	dcf0      	bgt.n	8004afe <_printf_float+0x42e>
 8004b1c:	e6fd      	b.n	800491a <_printf_float+0x24a>
 8004b1e:	f04f 0800 	mov.w	r8, #0
 8004b22:	f104 0919 	add.w	r9, r4, #25
 8004b26:	e7f4      	b.n	8004b12 <_printf_float+0x442>

08004b28 <_printf_common>:
 8004b28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b2c:	4616      	mov	r6, r2
 8004b2e:	4699      	mov	r9, r3
 8004b30:	688a      	ldr	r2, [r1, #8]
 8004b32:	690b      	ldr	r3, [r1, #16]
 8004b34:	4607      	mov	r7, r0
 8004b36:	4293      	cmp	r3, r2
 8004b38:	bfb8      	it	lt
 8004b3a:	4613      	movlt	r3, r2
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b42:	460c      	mov	r4, r1
 8004b44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b48:	b10a      	cbz	r2, 8004b4e <_printf_common+0x26>
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	6033      	str	r3, [r6, #0]
 8004b4e:	6823      	ldr	r3, [r4, #0]
 8004b50:	0699      	lsls	r1, r3, #26
 8004b52:	bf42      	ittt	mi
 8004b54:	6833      	ldrmi	r3, [r6, #0]
 8004b56:	3302      	addmi	r3, #2
 8004b58:	6033      	strmi	r3, [r6, #0]
 8004b5a:	6825      	ldr	r5, [r4, #0]
 8004b5c:	f015 0506 	ands.w	r5, r5, #6
 8004b60:	d106      	bne.n	8004b70 <_printf_common+0x48>
 8004b62:	f104 0a19 	add.w	sl, r4, #25
 8004b66:	68e3      	ldr	r3, [r4, #12]
 8004b68:	6832      	ldr	r2, [r6, #0]
 8004b6a:	1a9b      	subs	r3, r3, r2
 8004b6c:	42ab      	cmp	r3, r5
 8004b6e:	dc28      	bgt.n	8004bc2 <_printf_common+0x9a>
 8004b70:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b74:	1e13      	subs	r3, r2, #0
 8004b76:	6822      	ldr	r2, [r4, #0]
 8004b78:	bf18      	it	ne
 8004b7a:	2301      	movne	r3, #1
 8004b7c:	0692      	lsls	r2, r2, #26
 8004b7e:	d42d      	bmi.n	8004bdc <_printf_common+0xb4>
 8004b80:	4649      	mov	r1, r9
 8004b82:	4638      	mov	r0, r7
 8004b84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b88:	47c0      	blx	r8
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	d020      	beq.n	8004bd0 <_printf_common+0xa8>
 8004b8e:	6823      	ldr	r3, [r4, #0]
 8004b90:	68e5      	ldr	r5, [r4, #12]
 8004b92:	f003 0306 	and.w	r3, r3, #6
 8004b96:	2b04      	cmp	r3, #4
 8004b98:	bf18      	it	ne
 8004b9a:	2500      	movne	r5, #0
 8004b9c:	6832      	ldr	r2, [r6, #0]
 8004b9e:	f04f 0600 	mov.w	r6, #0
 8004ba2:	68a3      	ldr	r3, [r4, #8]
 8004ba4:	bf08      	it	eq
 8004ba6:	1aad      	subeq	r5, r5, r2
 8004ba8:	6922      	ldr	r2, [r4, #16]
 8004baa:	bf08      	it	eq
 8004bac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	bfc4      	itt	gt
 8004bb4:	1a9b      	subgt	r3, r3, r2
 8004bb6:	18ed      	addgt	r5, r5, r3
 8004bb8:	341a      	adds	r4, #26
 8004bba:	42b5      	cmp	r5, r6
 8004bbc:	d11a      	bne.n	8004bf4 <_printf_common+0xcc>
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	e008      	b.n	8004bd4 <_printf_common+0xac>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	4652      	mov	r2, sl
 8004bc6:	4649      	mov	r1, r9
 8004bc8:	4638      	mov	r0, r7
 8004bca:	47c0      	blx	r8
 8004bcc:	3001      	adds	r0, #1
 8004bce:	d103      	bne.n	8004bd8 <_printf_common+0xb0>
 8004bd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd8:	3501      	adds	r5, #1
 8004bda:	e7c4      	b.n	8004b66 <_printf_common+0x3e>
 8004bdc:	2030      	movs	r0, #48	; 0x30
 8004bde:	18e1      	adds	r1, r4, r3
 8004be0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004be4:	1c5a      	adds	r2, r3, #1
 8004be6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004bea:	4422      	add	r2, r4
 8004bec:	3302      	adds	r3, #2
 8004bee:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004bf2:	e7c5      	b.n	8004b80 <_printf_common+0x58>
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	4622      	mov	r2, r4
 8004bf8:	4649      	mov	r1, r9
 8004bfa:	4638      	mov	r0, r7
 8004bfc:	47c0      	blx	r8
 8004bfe:	3001      	adds	r0, #1
 8004c00:	d0e6      	beq.n	8004bd0 <_printf_common+0xa8>
 8004c02:	3601      	adds	r6, #1
 8004c04:	e7d9      	b.n	8004bba <_printf_common+0x92>
	...

08004c08 <_printf_i>:
 8004c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c0c:	7e0f      	ldrb	r7, [r1, #24]
 8004c0e:	4691      	mov	r9, r2
 8004c10:	2f78      	cmp	r7, #120	; 0x78
 8004c12:	4680      	mov	r8, r0
 8004c14:	460c      	mov	r4, r1
 8004c16:	469a      	mov	sl, r3
 8004c18:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c1a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c1e:	d807      	bhi.n	8004c30 <_printf_i+0x28>
 8004c20:	2f62      	cmp	r7, #98	; 0x62
 8004c22:	d80a      	bhi.n	8004c3a <_printf_i+0x32>
 8004c24:	2f00      	cmp	r7, #0
 8004c26:	f000 80d9 	beq.w	8004ddc <_printf_i+0x1d4>
 8004c2a:	2f58      	cmp	r7, #88	; 0x58
 8004c2c:	f000 80a4 	beq.w	8004d78 <_printf_i+0x170>
 8004c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c34:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c38:	e03a      	b.n	8004cb0 <_printf_i+0xa8>
 8004c3a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c3e:	2b15      	cmp	r3, #21
 8004c40:	d8f6      	bhi.n	8004c30 <_printf_i+0x28>
 8004c42:	a101      	add	r1, pc, #4	; (adr r1, 8004c48 <_printf_i+0x40>)
 8004c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c48:	08004ca1 	.word	0x08004ca1
 8004c4c:	08004cb5 	.word	0x08004cb5
 8004c50:	08004c31 	.word	0x08004c31
 8004c54:	08004c31 	.word	0x08004c31
 8004c58:	08004c31 	.word	0x08004c31
 8004c5c:	08004c31 	.word	0x08004c31
 8004c60:	08004cb5 	.word	0x08004cb5
 8004c64:	08004c31 	.word	0x08004c31
 8004c68:	08004c31 	.word	0x08004c31
 8004c6c:	08004c31 	.word	0x08004c31
 8004c70:	08004c31 	.word	0x08004c31
 8004c74:	08004dc3 	.word	0x08004dc3
 8004c78:	08004ce5 	.word	0x08004ce5
 8004c7c:	08004da5 	.word	0x08004da5
 8004c80:	08004c31 	.word	0x08004c31
 8004c84:	08004c31 	.word	0x08004c31
 8004c88:	08004de5 	.word	0x08004de5
 8004c8c:	08004c31 	.word	0x08004c31
 8004c90:	08004ce5 	.word	0x08004ce5
 8004c94:	08004c31 	.word	0x08004c31
 8004c98:	08004c31 	.word	0x08004c31
 8004c9c:	08004dad 	.word	0x08004dad
 8004ca0:	682b      	ldr	r3, [r5, #0]
 8004ca2:	1d1a      	adds	r2, r3, #4
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	602a      	str	r2, [r5, #0]
 8004ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e0a4      	b.n	8004dfe <_printf_i+0x1f6>
 8004cb4:	6820      	ldr	r0, [r4, #0]
 8004cb6:	6829      	ldr	r1, [r5, #0]
 8004cb8:	0606      	lsls	r6, r0, #24
 8004cba:	f101 0304 	add.w	r3, r1, #4
 8004cbe:	d50a      	bpl.n	8004cd6 <_printf_i+0xce>
 8004cc0:	680e      	ldr	r6, [r1, #0]
 8004cc2:	602b      	str	r3, [r5, #0]
 8004cc4:	2e00      	cmp	r6, #0
 8004cc6:	da03      	bge.n	8004cd0 <_printf_i+0xc8>
 8004cc8:	232d      	movs	r3, #45	; 0x2d
 8004cca:	4276      	negs	r6, r6
 8004ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cd0:	230a      	movs	r3, #10
 8004cd2:	485e      	ldr	r0, [pc, #376]	; (8004e4c <_printf_i+0x244>)
 8004cd4:	e019      	b.n	8004d0a <_printf_i+0x102>
 8004cd6:	680e      	ldr	r6, [r1, #0]
 8004cd8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004cdc:	602b      	str	r3, [r5, #0]
 8004cde:	bf18      	it	ne
 8004ce0:	b236      	sxthne	r6, r6
 8004ce2:	e7ef      	b.n	8004cc4 <_printf_i+0xbc>
 8004ce4:	682b      	ldr	r3, [r5, #0]
 8004ce6:	6820      	ldr	r0, [r4, #0]
 8004ce8:	1d19      	adds	r1, r3, #4
 8004cea:	6029      	str	r1, [r5, #0]
 8004cec:	0601      	lsls	r1, r0, #24
 8004cee:	d501      	bpl.n	8004cf4 <_printf_i+0xec>
 8004cf0:	681e      	ldr	r6, [r3, #0]
 8004cf2:	e002      	b.n	8004cfa <_printf_i+0xf2>
 8004cf4:	0646      	lsls	r6, r0, #25
 8004cf6:	d5fb      	bpl.n	8004cf0 <_printf_i+0xe8>
 8004cf8:	881e      	ldrh	r6, [r3, #0]
 8004cfa:	2f6f      	cmp	r7, #111	; 0x6f
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2308      	moveq	r3, #8
 8004d00:	230a      	movne	r3, #10
 8004d02:	4852      	ldr	r0, [pc, #328]	; (8004e4c <_printf_i+0x244>)
 8004d04:	2100      	movs	r1, #0
 8004d06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d0a:	6865      	ldr	r5, [r4, #4]
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	bfa8      	it	ge
 8004d10:	6821      	ldrge	r1, [r4, #0]
 8004d12:	60a5      	str	r5, [r4, #8]
 8004d14:	bfa4      	itt	ge
 8004d16:	f021 0104 	bicge.w	r1, r1, #4
 8004d1a:	6021      	strge	r1, [r4, #0]
 8004d1c:	b90e      	cbnz	r6, 8004d22 <_printf_i+0x11a>
 8004d1e:	2d00      	cmp	r5, #0
 8004d20:	d04d      	beq.n	8004dbe <_printf_i+0x1b6>
 8004d22:	4615      	mov	r5, r2
 8004d24:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d28:	fb03 6711 	mls	r7, r3, r1, r6
 8004d2c:	5dc7      	ldrb	r7, [r0, r7]
 8004d2e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d32:	4637      	mov	r7, r6
 8004d34:	42bb      	cmp	r3, r7
 8004d36:	460e      	mov	r6, r1
 8004d38:	d9f4      	bls.n	8004d24 <_printf_i+0x11c>
 8004d3a:	2b08      	cmp	r3, #8
 8004d3c:	d10b      	bne.n	8004d56 <_printf_i+0x14e>
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	07de      	lsls	r6, r3, #31
 8004d42:	d508      	bpl.n	8004d56 <_printf_i+0x14e>
 8004d44:	6923      	ldr	r3, [r4, #16]
 8004d46:	6861      	ldr	r1, [r4, #4]
 8004d48:	4299      	cmp	r1, r3
 8004d4a:	bfde      	ittt	le
 8004d4c:	2330      	movle	r3, #48	; 0x30
 8004d4e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d52:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d56:	1b52      	subs	r2, r2, r5
 8004d58:	6122      	str	r2, [r4, #16]
 8004d5a:	464b      	mov	r3, r9
 8004d5c:	4621      	mov	r1, r4
 8004d5e:	4640      	mov	r0, r8
 8004d60:	f8cd a000 	str.w	sl, [sp]
 8004d64:	aa03      	add	r2, sp, #12
 8004d66:	f7ff fedf 	bl	8004b28 <_printf_common>
 8004d6a:	3001      	adds	r0, #1
 8004d6c:	d14c      	bne.n	8004e08 <_printf_i+0x200>
 8004d6e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d72:	b004      	add	sp, #16
 8004d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d78:	4834      	ldr	r0, [pc, #208]	; (8004e4c <_printf_i+0x244>)
 8004d7a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004d7e:	6829      	ldr	r1, [r5, #0]
 8004d80:	6823      	ldr	r3, [r4, #0]
 8004d82:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d86:	6029      	str	r1, [r5, #0]
 8004d88:	061d      	lsls	r5, r3, #24
 8004d8a:	d514      	bpl.n	8004db6 <_printf_i+0x1ae>
 8004d8c:	07df      	lsls	r7, r3, #31
 8004d8e:	bf44      	itt	mi
 8004d90:	f043 0320 	orrmi.w	r3, r3, #32
 8004d94:	6023      	strmi	r3, [r4, #0]
 8004d96:	b91e      	cbnz	r6, 8004da0 <_printf_i+0x198>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	f023 0320 	bic.w	r3, r3, #32
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	2310      	movs	r3, #16
 8004da2:	e7af      	b.n	8004d04 <_printf_i+0xfc>
 8004da4:	6823      	ldr	r3, [r4, #0]
 8004da6:	f043 0320 	orr.w	r3, r3, #32
 8004daa:	6023      	str	r3, [r4, #0]
 8004dac:	2378      	movs	r3, #120	; 0x78
 8004dae:	4828      	ldr	r0, [pc, #160]	; (8004e50 <_printf_i+0x248>)
 8004db0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004db4:	e7e3      	b.n	8004d7e <_printf_i+0x176>
 8004db6:	0659      	lsls	r1, r3, #25
 8004db8:	bf48      	it	mi
 8004dba:	b2b6      	uxthmi	r6, r6
 8004dbc:	e7e6      	b.n	8004d8c <_printf_i+0x184>
 8004dbe:	4615      	mov	r5, r2
 8004dc0:	e7bb      	b.n	8004d3a <_printf_i+0x132>
 8004dc2:	682b      	ldr	r3, [r5, #0]
 8004dc4:	6826      	ldr	r6, [r4, #0]
 8004dc6:	1d18      	adds	r0, r3, #4
 8004dc8:	6961      	ldr	r1, [r4, #20]
 8004dca:	6028      	str	r0, [r5, #0]
 8004dcc:	0635      	lsls	r5, r6, #24
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	d501      	bpl.n	8004dd6 <_printf_i+0x1ce>
 8004dd2:	6019      	str	r1, [r3, #0]
 8004dd4:	e002      	b.n	8004ddc <_printf_i+0x1d4>
 8004dd6:	0670      	lsls	r0, r6, #25
 8004dd8:	d5fb      	bpl.n	8004dd2 <_printf_i+0x1ca>
 8004dda:	8019      	strh	r1, [r3, #0]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4615      	mov	r5, r2
 8004de0:	6123      	str	r3, [r4, #16]
 8004de2:	e7ba      	b.n	8004d5a <_printf_i+0x152>
 8004de4:	682b      	ldr	r3, [r5, #0]
 8004de6:	2100      	movs	r1, #0
 8004de8:	1d1a      	adds	r2, r3, #4
 8004dea:	602a      	str	r2, [r5, #0]
 8004dec:	681d      	ldr	r5, [r3, #0]
 8004dee:	6862      	ldr	r2, [r4, #4]
 8004df0:	4628      	mov	r0, r5
 8004df2:	f000 ffc9 	bl	8005d88 <memchr>
 8004df6:	b108      	cbz	r0, 8004dfc <_printf_i+0x1f4>
 8004df8:	1b40      	subs	r0, r0, r5
 8004dfa:	6060      	str	r0, [r4, #4]
 8004dfc:	6863      	ldr	r3, [r4, #4]
 8004dfe:	6123      	str	r3, [r4, #16]
 8004e00:	2300      	movs	r3, #0
 8004e02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e06:	e7a8      	b.n	8004d5a <_printf_i+0x152>
 8004e08:	462a      	mov	r2, r5
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	4640      	mov	r0, r8
 8004e0e:	6923      	ldr	r3, [r4, #16]
 8004e10:	47d0      	blx	sl
 8004e12:	3001      	adds	r0, #1
 8004e14:	d0ab      	beq.n	8004d6e <_printf_i+0x166>
 8004e16:	6823      	ldr	r3, [r4, #0]
 8004e18:	079b      	lsls	r3, r3, #30
 8004e1a:	d413      	bmi.n	8004e44 <_printf_i+0x23c>
 8004e1c:	68e0      	ldr	r0, [r4, #12]
 8004e1e:	9b03      	ldr	r3, [sp, #12]
 8004e20:	4298      	cmp	r0, r3
 8004e22:	bfb8      	it	lt
 8004e24:	4618      	movlt	r0, r3
 8004e26:	e7a4      	b.n	8004d72 <_printf_i+0x16a>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	4632      	mov	r2, r6
 8004e2c:	4649      	mov	r1, r9
 8004e2e:	4640      	mov	r0, r8
 8004e30:	47d0      	blx	sl
 8004e32:	3001      	adds	r0, #1
 8004e34:	d09b      	beq.n	8004d6e <_printf_i+0x166>
 8004e36:	3501      	adds	r5, #1
 8004e38:	68e3      	ldr	r3, [r4, #12]
 8004e3a:	9903      	ldr	r1, [sp, #12]
 8004e3c:	1a5b      	subs	r3, r3, r1
 8004e3e:	42ab      	cmp	r3, r5
 8004e40:	dcf2      	bgt.n	8004e28 <_printf_i+0x220>
 8004e42:	e7eb      	b.n	8004e1c <_printf_i+0x214>
 8004e44:	2500      	movs	r5, #0
 8004e46:	f104 0619 	add.w	r6, r4, #25
 8004e4a:	e7f5      	b.n	8004e38 <_printf_i+0x230>
 8004e4c:	08007042 	.word	0x08007042
 8004e50:	08007053 	.word	0x08007053

08004e54 <iprintf>:
 8004e54:	b40f      	push	{r0, r1, r2, r3}
 8004e56:	4b0a      	ldr	r3, [pc, #40]	; (8004e80 <iprintf+0x2c>)
 8004e58:	b513      	push	{r0, r1, r4, lr}
 8004e5a:	681c      	ldr	r4, [r3, #0]
 8004e5c:	b124      	cbz	r4, 8004e68 <iprintf+0x14>
 8004e5e:	69a3      	ldr	r3, [r4, #24]
 8004e60:	b913      	cbnz	r3, 8004e68 <iprintf+0x14>
 8004e62:	4620      	mov	r0, r4
 8004e64:	f000 fee2 	bl	8005c2c <__sinit>
 8004e68:	ab05      	add	r3, sp, #20
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	9a04      	ldr	r2, [sp, #16]
 8004e6e:	68a1      	ldr	r1, [r4, #8]
 8004e70:	9301      	str	r3, [sp, #4]
 8004e72:	f001 fc3f 	bl	80066f4 <_vfiprintf_r>
 8004e76:	b002      	add	sp, #8
 8004e78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e7c:	b004      	add	sp, #16
 8004e7e:	4770      	bx	lr
 8004e80:	2000000c 	.word	0x2000000c

08004e84 <quorem>:
 8004e84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e88:	6903      	ldr	r3, [r0, #16]
 8004e8a:	690c      	ldr	r4, [r1, #16]
 8004e8c:	4607      	mov	r7, r0
 8004e8e:	42a3      	cmp	r3, r4
 8004e90:	f2c0 8082 	blt.w	8004f98 <quorem+0x114>
 8004e94:	3c01      	subs	r4, #1
 8004e96:	f100 0514 	add.w	r5, r0, #20
 8004e9a:	f101 0814 	add.w	r8, r1, #20
 8004e9e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004ea2:	9301      	str	r3, [sp, #4]
 8004ea4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004ea8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004eac:	3301      	adds	r3, #1
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	fbb2 f6f3 	udiv	r6, r2, r3
 8004eb4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004eb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004ebc:	d331      	bcc.n	8004f22 <quorem+0x9e>
 8004ebe:	f04f 0e00 	mov.w	lr, #0
 8004ec2:	4640      	mov	r0, r8
 8004ec4:	46ac      	mov	ip, r5
 8004ec6:	46f2      	mov	sl, lr
 8004ec8:	f850 2b04 	ldr.w	r2, [r0], #4
 8004ecc:	b293      	uxth	r3, r2
 8004ece:	fb06 e303 	mla	r3, r6, r3, lr
 8004ed2:	0c12      	lsrs	r2, r2, #16
 8004ed4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	fb06 e202 	mla	r2, r6, r2, lr
 8004ede:	ebaa 0303 	sub.w	r3, sl, r3
 8004ee2:	f8dc a000 	ldr.w	sl, [ip]
 8004ee6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004eea:	fa1f fa8a 	uxth.w	sl, sl
 8004eee:	4453      	add	r3, sl
 8004ef0:	f8dc a000 	ldr.w	sl, [ip]
 8004ef4:	b292      	uxth	r2, r2
 8004ef6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004efa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f04:	4581      	cmp	r9, r0
 8004f06:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f0a:	f84c 3b04 	str.w	r3, [ip], #4
 8004f0e:	d2db      	bcs.n	8004ec8 <quorem+0x44>
 8004f10:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f14:	b92b      	cbnz	r3, 8004f22 <quorem+0x9e>
 8004f16:	9b01      	ldr	r3, [sp, #4]
 8004f18:	3b04      	subs	r3, #4
 8004f1a:	429d      	cmp	r5, r3
 8004f1c:	461a      	mov	r2, r3
 8004f1e:	d32f      	bcc.n	8004f80 <quorem+0xfc>
 8004f20:	613c      	str	r4, [r7, #16]
 8004f22:	4638      	mov	r0, r7
 8004f24:	f001 f9ca 	bl	80062bc <__mcmp>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	db25      	blt.n	8004f78 <quorem+0xf4>
 8004f2c:	4628      	mov	r0, r5
 8004f2e:	f04f 0c00 	mov.w	ip, #0
 8004f32:	3601      	adds	r6, #1
 8004f34:	f858 1b04 	ldr.w	r1, [r8], #4
 8004f38:	f8d0 e000 	ldr.w	lr, [r0]
 8004f3c:	b28b      	uxth	r3, r1
 8004f3e:	ebac 0303 	sub.w	r3, ip, r3
 8004f42:	fa1f f28e 	uxth.w	r2, lr
 8004f46:	4413      	add	r3, r2
 8004f48:	0c0a      	lsrs	r2, r1, #16
 8004f4a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004f4e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f58:	45c1      	cmp	r9, r8
 8004f5a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004f5e:	f840 3b04 	str.w	r3, [r0], #4
 8004f62:	d2e7      	bcs.n	8004f34 <quorem+0xb0>
 8004f64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f68:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f6c:	b922      	cbnz	r2, 8004f78 <quorem+0xf4>
 8004f6e:	3b04      	subs	r3, #4
 8004f70:	429d      	cmp	r5, r3
 8004f72:	461a      	mov	r2, r3
 8004f74:	d30a      	bcc.n	8004f8c <quorem+0x108>
 8004f76:	613c      	str	r4, [r7, #16]
 8004f78:	4630      	mov	r0, r6
 8004f7a:	b003      	add	sp, #12
 8004f7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f80:	6812      	ldr	r2, [r2, #0]
 8004f82:	3b04      	subs	r3, #4
 8004f84:	2a00      	cmp	r2, #0
 8004f86:	d1cb      	bne.n	8004f20 <quorem+0x9c>
 8004f88:	3c01      	subs	r4, #1
 8004f8a:	e7c6      	b.n	8004f1a <quorem+0x96>
 8004f8c:	6812      	ldr	r2, [r2, #0]
 8004f8e:	3b04      	subs	r3, #4
 8004f90:	2a00      	cmp	r2, #0
 8004f92:	d1f0      	bne.n	8004f76 <quorem+0xf2>
 8004f94:	3c01      	subs	r4, #1
 8004f96:	e7eb      	b.n	8004f70 <quorem+0xec>
 8004f98:	2000      	movs	r0, #0
 8004f9a:	e7ee      	b.n	8004f7a <quorem+0xf6>
 8004f9c:	0000      	movs	r0, r0
	...

08004fa0 <_dtoa_r>:
 8004fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa4:	4616      	mov	r6, r2
 8004fa6:	461f      	mov	r7, r3
 8004fa8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004faa:	b099      	sub	sp, #100	; 0x64
 8004fac:	4605      	mov	r5, r0
 8004fae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004fb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004fb6:	b974      	cbnz	r4, 8004fd6 <_dtoa_r+0x36>
 8004fb8:	2010      	movs	r0, #16
 8004fba:	f000 fedd 	bl	8005d78 <malloc>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	6268      	str	r0, [r5, #36]	; 0x24
 8004fc2:	b920      	cbnz	r0, 8004fce <_dtoa_r+0x2e>
 8004fc4:	21ea      	movs	r1, #234	; 0xea
 8004fc6:	4ba8      	ldr	r3, [pc, #672]	; (8005268 <_dtoa_r+0x2c8>)
 8004fc8:	48a8      	ldr	r0, [pc, #672]	; (800526c <_dtoa_r+0x2cc>)
 8004fca:	f001 fde9 	bl	8006ba0 <__assert_func>
 8004fce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004fd2:	6004      	str	r4, [r0, #0]
 8004fd4:	60c4      	str	r4, [r0, #12]
 8004fd6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004fd8:	6819      	ldr	r1, [r3, #0]
 8004fda:	b151      	cbz	r1, 8004ff2 <_dtoa_r+0x52>
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	2301      	movs	r3, #1
 8004fe0:	4093      	lsls	r3, r2
 8004fe2:	604a      	str	r2, [r1, #4]
 8004fe4:	608b      	str	r3, [r1, #8]
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f000 ff2a 	bl	8005e40 <_Bfree>
 8004fec:	2200      	movs	r2, #0
 8004fee:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004ff0:	601a      	str	r2, [r3, #0]
 8004ff2:	1e3b      	subs	r3, r7, #0
 8004ff4:	bfaf      	iteee	ge
 8004ff6:	2300      	movge	r3, #0
 8004ff8:	2201      	movlt	r2, #1
 8004ffa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ffe:	9305      	strlt	r3, [sp, #20]
 8005000:	bfa8      	it	ge
 8005002:	f8c8 3000 	strge.w	r3, [r8]
 8005006:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800500a:	4b99      	ldr	r3, [pc, #612]	; (8005270 <_dtoa_r+0x2d0>)
 800500c:	bfb8      	it	lt
 800500e:	f8c8 2000 	strlt.w	r2, [r8]
 8005012:	ea33 0309 	bics.w	r3, r3, r9
 8005016:	d119      	bne.n	800504c <_dtoa_r+0xac>
 8005018:	f242 730f 	movw	r3, #9999	; 0x270f
 800501c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005024:	4333      	orrs	r3, r6
 8005026:	f000 857f 	beq.w	8005b28 <_dtoa_r+0xb88>
 800502a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800502c:	b953      	cbnz	r3, 8005044 <_dtoa_r+0xa4>
 800502e:	4b91      	ldr	r3, [pc, #580]	; (8005274 <_dtoa_r+0x2d4>)
 8005030:	e022      	b.n	8005078 <_dtoa_r+0xd8>
 8005032:	4b91      	ldr	r3, [pc, #580]	; (8005278 <_dtoa_r+0x2d8>)
 8005034:	9303      	str	r3, [sp, #12]
 8005036:	3308      	adds	r3, #8
 8005038:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800503a:	6013      	str	r3, [r2, #0]
 800503c:	9803      	ldr	r0, [sp, #12]
 800503e:	b019      	add	sp, #100	; 0x64
 8005040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005044:	4b8b      	ldr	r3, [pc, #556]	; (8005274 <_dtoa_r+0x2d4>)
 8005046:	9303      	str	r3, [sp, #12]
 8005048:	3303      	adds	r3, #3
 800504a:	e7f5      	b.n	8005038 <_dtoa_r+0x98>
 800504c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005050:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005054:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005058:	2200      	movs	r2, #0
 800505a:	2300      	movs	r3, #0
 800505c:	f7fb fca4 	bl	80009a8 <__aeabi_dcmpeq>
 8005060:	4680      	mov	r8, r0
 8005062:	b158      	cbz	r0, 800507c <_dtoa_r+0xdc>
 8005064:	2301      	movs	r3, #1
 8005066:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800506c:	2b00      	cmp	r3, #0
 800506e:	f000 8558 	beq.w	8005b22 <_dtoa_r+0xb82>
 8005072:	4882      	ldr	r0, [pc, #520]	; (800527c <_dtoa_r+0x2dc>)
 8005074:	6018      	str	r0, [r3, #0]
 8005076:	1e43      	subs	r3, r0, #1
 8005078:	9303      	str	r3, [sp, #12]
 800507a:	e7df      	b.n	800503c <_dtoa_r+0x9c>
 800507c:	ab16      	add	r3, sp, #88	; 0x58
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	ab17      	add	r3, sp, #92	; 0x5c
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	4628      	mov	r0, r5
 8005086:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800508a:	f001 f9bf 	bl	800640c <__d2b>
 800508e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005092:	4683      	mov	fp, r0
 8005094:	2c00      	cmp	r4, #0
 8005096:	d07f      	beq.n	8005198 <_dtoa_r+0x1f8>
 8005098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800509c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800509e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80050a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80050a6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80050aa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80050ae:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80050b2:	2200      	movs	r2, #0
 80050b4:	4b72      	ldr	r3, [pc, #456]	; (8005280 <_dtoa_r+0x2e0>)
 80050b6:	f7fb f857 	bl	8000168 <__aeabi_dsub>
 80050ba:	a365      	add	r3, pc, #404	; (adr r3, 8005250 <_dtoa_r+0x2b0>)
 80050bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c0:	f7fb fa0a 	bl	80004d8 <__aeabi_dmul>
 80050c4:	a364      	add	r3, pc, #400	; (adr r3, 8005258 <_dtoa_r+0x2b8>)
 80050c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ca:	f7fb f84f 	bl	800016c <__adddf3>
 80050ce:	4606      	mov	r6, r0
 80050d0:	4620      	mov	r0, r4
 80050d2:	460f      	mov	r7, r1
 80050d4:	f7fb f996 	bl	8000404 <__aeabi_i2d>
 80050d8:	a361      	add	r3, pc, #388	; (adr r3, 8005260 <_dtoa_r+0x2c0>)
 80050da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050de:	f7fb f9fb 	bl	80004d8 <__aeabi_dmul>
 80050e2:	4602      	mov	r2, r0
 80050e4:	460b      	mov	r3, r1
 80050e6:	4630      	mov	r0, r6
 80050e8:	4639      	mov	r1, r7
 80050ea:	f7fb f83f 	bl	800016c <__adddf3>
 80050ee:	4606      	mov	r6, r0
 80050f0:	460f      	mov	r7, r1
 80050f2:	f7fb fca1 	bl	8000a38 <__aeabi_d2iz>
 80050f6:	2200      	movs	r2, #0
 80050f8:	4682      	mov	sl, r0
 80050fa:	2300      	movs	r3, #0
 80050fc:	4630      	mov	r0, r6
 80050fe:	4639      	mov	r1, r7
 8005100:	f7fb fc5c 	bl	80009bc <__aeabi_dcmplt>
 8005104:	b148      	cbz	r0, 800511a <_dtoa_r+0x17a>
 8005106:	4650      	mov	r0, sl
 8005108:	f7fb f97c 	bl	8000404 <__aeabi_i2d>
 800510c:	4632      	mov	r2, r6
 800510e:	463b      	mov	r3, r7
 8005110:	f7fb fc4a 	bl	80009a8 <__aeabi_dcmpeq>
 8005114:	b908      	cbnz	r0, 800511a <_dtoa_r+0x17a>
 8005116:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800511a:	f1ba 0f16 	cmp.w	sl, #22
 800511e:	d858      	bhi.n	80051d2 <_dtoa_r+0x232>
 8005120:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005124:	4b57      	ldr	r3, [pc, #348]	; (8005284 <_dtoa_r+0x2e4>)
 8005126:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb fc45 	bl	80009bc <__aeabi_dcmplt>
 8005132:	2800      	cmp	r0, #0
 8005134:	d04f      	beq.n	80051d6 <_dtoa_r+0x236>
 8005136:	2300      	movs	r3, #0
 8005138:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800513c:	930f      	str	r3, [sp, #60]	; 0x3c
 800513e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005140:	1b1c      	subs	r4, r3, r4
 8005142:	1e63      	subs	r3, r4, #1
 8005144:	9309      	str	r3, [sp, #36]	; 0x24
 8005146:	bf49      	itett	mi
 8005148:	f1c4 0301 	rsbmi	r3, r4, #1
 800514c:	2300      	movpl	r3, #0
 800514e:	9306      	strmi	r3, [sp, #24]
 8005150:	2300      	movmi	r3, #0
 8005152:	bf54      	ite	pl
 8005154:	9306      	strpl	r3, [sp, #24]
 8005156:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005158:	f1ba 0f00 	cmp.w	sl, #0
 800515c:	db3d      	blt.n	80051da <_dtoa_r+0x23a>
 800515e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005160:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005164:	4453      	add	r3, sl
 8005166:	9309      	str	r3, [sp, #36]	; 0x24
 8005168:	2300      	movs	r3, #0
 800516a:	930a      	str	r3, [sp, #40]	; 0x28
 800516c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800516e:	2b09      	cmp	r3, #9
 8005170:	f200 808c 	bhi.w	800528c <_dtoa_r+0x2ec>
 8005174:	2b05      	cmp	r3, #5
 8005176:	bfc4      	itt	gt
 8005178:	3b04      	subgt	r3, #4
 800517a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800517c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800517e:	bfc8      	it	gt
 8005180:	2400      	movgt	r4, #0
 8005182:	f1a3 0302 	sub.w	r3, r3, #2
 8005186:	bfd8      	it	le
 8005188:	2401      	movle	r4, #1
 800518a:	2b03      	cmp	r3, #3
 800518c:	f200 808a 	bhi.w	80052a4 <_dtoa_r+0x304>
 8005190:	e8df f003 	tbb	[pc, r3]
 8005194:	5b4d4f2d 	.word	0x5b4d4f2d
 8005198:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800519c:	441c      	add	r4, r3
 800519e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	bfc3      	ittte	gt
 80051a6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80051aa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 80051ae:	fa09 f303 	lslgt.w	r3, r9, r3
 80051b2:	f1c3 0320 	rsble	r3, r3, #32
 80051b6:	bfc6      	itte	gt
 80051b8:	fa26 f000 	lsrgt.w	r0, r6, r0
 80051bc:	4318      	orrgt	r0, r3
 80051be:	fa06 f003 	lslle.w	r0, r6, r3
 80051c2:	f7fb f90f 	bl	80003e4 <__aeabi_ui2d>
 80051c6:	2301      	movs	r3, #1
 80051c8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80051cc:	3c01      	subs	r4, #1
 80051ce:	9313      	str	r3, [sp, #76]	; 0x4c
 80051d0:	e76f      	b.n	80050b2 <_dtoa_r+0x112>
 80051d2:	2301      	movs	r3, #1
 80051d4:	e7b2      	b.n	800513c <_dtoa_r+0x19c>
 80051d6:	900f      	str	r0, [sp, #60]	; 0x3c
 80051d8:	e7b1      	b.n	800513e <_dtoa_r+0x19e>
 80051da:	9b06      	ldr	r3, [sp, #24]
 80051dc:	eba3 030a 	sub.w	r3, r3, sl
 80051e0:	9306      	str	r3, [sp, #24]
 80051e2:	f1ca 0300 	rsb	r3, sl, #0
 80051e6:	930a      	str	r3, [sp, #40]	; 0x28
 80051e8:	2300      	movs	r3, #0
 80051ea:	930e      	str	r3, [sp, #56]	; 0x38
 80051ec:	e7be      	b.n	800516c <_dtoa_r+0x1cc>
 80051ee:	2300      	movs	r3, #0
 80051f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80051f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	dc58      	bgt.n	80052aa <_dtoa_r+0x30a>
 80051f8:	f04f 0901 	mov.w	r9, #1
 80051fc:	464b      	mov	r3, r9
 80051fe:	f8cd 9020 	str.w	r9, [sp, #32]
 8005202:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 8005206:	2200      	movs	r2, #0
 8005208:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800520a:	6042      	str	r2, [r0, #4]
 800520c:	2204      	movs	r2, #4
 800520e:	f102 0614 	add.w	r6, r2, #20
 8005212:	429e      	cmp	r6, r3
 8005214:	6841      	ldr	r1, [r0, #4]
 8005216:	d94e      	bls.n	80052b6 <_dtoa_r+0x316>
 8005218:	4628      	mov	r0, r5
 800521a:	f000 fdd1 	bl	8005dc0 <_Balloc>
 800521e:	9003      	str	r0, [sp, #12]
 8005220:	2800      	cmp	r0, #0
 8005222:	d14c      	bne.n	80052be <_dtoa_r+0x31e>
 8005224:	4602      	mov	r2, r0
 8005226:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800522a:	4b17      	ldr	r3, [pc, #92]	; (8005288 <_dtoa_r+0x2e8>)
 800522c:	e6cc      	b.n	8004fc8 <_dtoa_r+0x28>
 800522e:	2301      	movs	r3, #1
 8005230:	e7de      	b.n	80051f0 <_dtoa_r+0x250>
 8005232:	2300      	movs	r3, #0
 8005234:	930b      	str	r3, [sp, #44]	; 0x2c
 8005236:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005238:	eb0a 0903 	add.w	r9, sl, r3
 800523c:	f109 0301 	add.w	r3, r9, #1
 8005240:	2b01      	cmp	r3, #1
 8005242:	9308      	str	r3, [sp, #32]
 8005244:	bfb8      	it	lt
 8005246:	2301      	movlt	r3, #1
 8005248:	e7dd      	b.n	8005206 <_dtoa_r+0x266>
 800524a:	2301      	movs	r3, #1
 800524c:	e7f2      	b.n	8005234 <_dtoa_r+0x294>
 800524e:	bf00      	nop
 8005250:	636f4361 	.word	0x636f4361
 8005254:	3fd287a7 	.word	0x3fd287a7
 8005258:	8b60c8b3 	.word	0x8b60c8b3
 800525c:	3fc68a28 	.word	0x3fc68a28
 8005260:	509f79fb 	.word	0x509f79fb
 8005264:	3fd34413 	.word	0x3fd34413
 8005268:	08007071 	.word	0x08007071
 800526c:	08007088 	.word	0x08007088
 8005270:	7ff00000 	.word	0x7ff00000
 8005274:	0800706d 	.word	0x0800706d
 8005278:	08007064 	.word	0x08007064
 800527c:	08007041 	.word	0x08007041
 8005280:	3ff80000 	.word	0x3ff80000
 8005284:	080071d8 	.word	0x080071d8
 8005288:	080070e3 	.word	0x080070e3
 800528c:	2401      	movs	r4, #1
 800528e:	2300      	movs	r3, #0
 8005290:	940b      	str	r4, [sp, #44]	; 0x2c
 8005292:	9322      	str	r3, [sp, #136]	; 0x88
 8005294:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8005298:	2200      	movs	r2, #0
 800529a:	2312      	movs	r3, #18
 800529c:	f8cd 9020 	str.w	r9, [sp, #32]
 80052a0:	9223      	str	r2, [sp, #140]	; 0x8c
 80052a2:	e7b0      	b.n	8005206 <_dtoa_r+0x266>
 80052a4:	2301      	movs	r3, #1
 80052a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80052a8:	e7f4      	b.n	8005294 <_dtoa_r+0x2f4>
 80052aa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 80052ae:	464b      	mov	r3, r9
 80052b0:	f8cd 9020 	str.w	r9, [sp, #32]
 80052b4:	e7a7      	b.n	8005206 <_dtoa_r+0x266>
 80052b6:	3101      	adds	r1, #1
 80052b8:	6041      	str	r1, [r0, #4]
 80052ba:	0052      	lsls	r2, r2, #1
 80052bc:	e7a7      	b.n	800520e <_dtoa_r+0x26e>
 80052be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80052c0:	9a03      	ldr	r2, [sp, #12]
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	9b08      	ldr	r3, [sp, #32]
 80052c6:	2b0e      	cmp	r3, #14
 80052c8:	f200 80a8 	bhi.w	800541c <_dtoa_r+0x47c>
 80052cc:	2c00      	cmp	r4, #0
 80052ce:	f000 80a5 	beq.w	800541c <_dtoa_r+0x47c>
 80052d2:	f1ba 0f00 	cmp.w	sl, #0
 80052d6:	dd34      	ble.n	8005342 <_dtoa_r+0x3a2>
 80052d8:	4a9a      	ldr	r2, [pc, #616]	; (8005544 <_dtoa_r+0x5a4>)
 80052da:	f00a 030f 	and.w	r3, sl, #15
 80052de:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80052e2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80052e6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80052ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80052ee:	ea4f 142a 	mov.w	r4, sl, asr #4
 80052f2:	d016      	beq.n	8005322 <_dtoa_r+0x382>
 80052f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052f8:	4b93      	ldr	r3, [pc, #588]	; (8005548 <_dtoa_r+0x5a8>)
 80052fa:	2703      	movs	r7, #3
 80052fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005300:	f7fb fa14 	bl	800072c <__aeabi_ddiv>
 8005304:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005308:	f004 040f 	and.w	r4, r4, #15
 800530c:	4e8e      	ldr	r6, [pc, #568]	; (8005548 <_dtoa_r+0x5a8>)
 800530e:	b954      	cbnz	r4, 8005326 <_dtoa_r+0x386>
 8005310:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005314:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005318:	f7fb fa08 	bl	800072c <__aeabi_ddiv>
 800531c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005320:	e029      	b.n	8005376 <_dtoa_r+0x3d6>
 8005322:	2702      	movs	r7, #2
 8005324:	e7f2      	b.n	800530c <_dtoa_r+0x36c>
 8005326:	07e1      	lsls	r1, r4, #31
 8005328:	d508      	bpl.n	800533c <_dtoa_r+0x39c>
 800532a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800532e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005332:	f7fb f8d1 	bl	80004d8 <__aeabi_dmul>
 8005336:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800533a:	3701      	adds	r7, #1
 800533c:	1064      	asrs	r4, r4, #1
 800533e:	3608      	adds	r6, #8
 8005340:	e7e5      	b.n	800530e <_dtoa_r+0x36e>
 8005342:	f000 80a5 	beq.w	8005490 <_dtoa_r+0x4f0>
 8005346:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800534a:	f1ca 0400 	rsb	r4, sl, #0
 800534e:	4b7d      	ldr	r3, [pc, #500]	; (8005544 <_dtoa_r+0x5a4>)
 8005350:	f004 020f 	and.w	r2, r4, #15
 8005354:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	f7fb f8bc 	bl	80004d8 <__aeabi_dmul>
 8005360:	2702      	movs	r7, #2
 8005362:	2300      	movs	r3, #0
 8005364:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005368:	4e77      	ldr	r6, [pc, #476]	; (8005548 <_dtoa_r+0x5a8>)
 800536a:	1124      	asrs	r4, r4, #4
 800536c:	2c00      	cmp	r4, #0
 800536e:	f040 8084 	bne.w	800547a <_dtoa_r+0x4da>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1d2      	bne.n	800531c <_dtoa_r+0x37c>
 8005376:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005378:	2b00      	cmp	r3, #0
 800537a:	f000 808b 	beq.w	8005494 <_dtoa_r+0x4f4>
 800537e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005382:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005386:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800538a:	2200      	movs	r2, #0
 800538c:	4b6f      	ldr	r3, [pc, #444]	; (800554c <_dtoa_r+0x5ac>)
 800538e:	f7fb fb15 	bl	80009bc <__aeabi_dcmplt>
 8005392:	2800      	cmp	r0, #0
 8005394:	d07e      	beq.n	8005494 <_dtoa_r+0x4f4>
 8005396:	9b08      	ldr	r3, [sp, #32]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d07b      	beq.n	8005494 <_dtoa_r+0x4f4>
 800539c:	f1b9 0f00 	cmp.w	r9, #0
 80053a0:	dd38      	ble.n	8005414 <_dtoa_r+0x474>
 80053a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053a6:	2200      	movs	r2, #0
 80053a8:	4b69      	ldr	r3, [pc, #420]	; (8005550 <_dtoa_r+0x5b0>)
 80053aa:	f7fb f895 	bl	80004d8 <__aeabi_dmul>
 80053ae:	464c      	mov	r4, r9
 80053b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053b4:	f10a 38ff 	add.w	r8, sl, #4294967295	; 0xffffffff
 80053b8:	3701      	adds	r7, #1
 80053ba:	4638      	mov	r0, r7
 80053bc:	f7fb f822 	bl	8000404 <__aeabi_i2d>
 80053c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053c4:	f7fb f888 	bl	80004d8 <__aeabi_dmul>
 80053c8:	2200      	movs	r2, #0
 80053ca:	4b62      	ldr	r3, [pc, #392]	; (8005554 <_dtoa_r+0x5b4>)
 80053cc:	f7fa fece 	bl	800016c <__adddf3>
 80053d0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80053d4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053d8:	9611      	str	r6, [sp, #68]	; 0x44
 80053da:	2c00      	cmp	r4, #0
 80053dc:	d15d      	bne.n	800549a <_dtoa_r+0x4fa>
 80053de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053e2:	2200      	movs	r2, #0
 80053e4:	4b5c      	ldr	r3, [pc, #368]	; (8005558 <_dtoa_r+0x5b8>)
 80053e6:	f7fa febf 	bl	8000168 <__aeabi_dsub>
 80053ea:	4602      	mov	r2, r0
 80053ec:	460b      	mov	r3, r1
 80053ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80053f2:	4633      	mov	r3, r6
 80053f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80053f6:	f7fb faff 	bl	80009f8 <__aeabi_dcmpgt>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	f040 829c 	bne.w	8005938 <_dtoa_r+0x998>
 8005400:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005404:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005406:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800540a:	f7fb fad7 	bl	80009bc <__aeabi_dcmplt>
 800540e:	2800      	cmp	r0, #0
 8005410:	f040 8290 	bne.w	8005934 <_dtoa_r+0x994>
 8005414:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005418:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800541c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800541e:	2b00      	cmp	r3, #0
 8005420:	f2c0 8152 	blt.w	80056c8 <_dtoa_r+0x728>
 8005424:	f1ba 0f0e 	cmp.w	sl, #14
 8005428:	f300 814e 	bgt.w	80056c8 <_dtoa_r+0x728>
 800542c:	4b45      	ldr	r3, [pc, #276]	; (8005544 <_dtoa_r+0x5a4>)
 800542e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005432:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005436:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800543a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800543c:	2b00      	cmp	r3, #0
 800543e:	f280 80db 	bge.w	80055f8 <_dtoa_r+0x658>
 8005442:	9b08      	ldr	r3, [sp, #32]
 8005444:	2b00      	cmp	r3, #0
 8005446:	f300 80d7 	bgt.w	80055f8 <_dtoa_r+0x658>
 800544a:	f040 8272 	bne.w	8005932 <_dtoa_r+0x992>
 800544e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005452:	2200      	movs	r2, #0
 8005454:	4b40      	ldr	r3, [pc, #256]	; (8005558 <_dtoa_r+0x5b8>)
 8005456:	f7fb f83f 	bl	80004d8 <__aeabi_dmul>
 800545a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800545e:	f7fb fac1 	bl	80009e4 <__aeabi_dcmpge>
 8005462:	9c08      	ldr	r4, [sp, #32]
 8005464:	4626      	mov	r6, r4
 8005466:	2800      	cmp	r0, #0
 8005468:	f040 8248 	bne.w	80058fc <_dtoa_r+0x95c>
 800546c:	2331      	movs	r3, #49	; 0x31
 800546e:	9f03      	ldr	r7, [sp, #12]
 8005470:	f10a 0a01 	add.w	sl, sl, #1
 8005474:	f807 3b01 	strb.w	r3, [r7], #1
 8005478:	e244      	b.n	8005904 <_dtoa_r+0x964>
 800547a:	07e2      	lsls	r2, r4, #31
 800547c:	d505      	bpl.n	800548a <_dtoa_r+0x4ea>
 800547e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005482:	f7fb f829 	bl	80004d8 <__aeabi_dmul>
 8005486:	2301      	movs	r3, #1
 8005488:	3701      	adds	r7, #1
 800548a:	1064      	asrs	r4, r4, #1
 800548c:	3608      	adds	r6, #8
 800548e:	e76d      	b.n	800536c <_dtoa_r+0x3cc>
 8005490:	2702      	movs	r7, #2
 8005492:	e770      	b.n	8005376 <_dtoa_r+0x3d6>
 8005494:	46d0      	mov	r8, sl
 8005496:	9c08      	ldr	r4, [sp, #32]
 8005498:	e78f      	b.n	80053ba <_dtoa_r+0x41a>
 800549a:	9903      	ldr	r1, [sp, #12]
 800549c:	4b29      	ldr	r3, [pc, #164]	; (8005544 <_dtoa_r+0x5a4>)
 800549e:	4421      	add	r1, r4
 80054a0:	9112      	str	r1, [sp, #72]	; 0x48
 80054a2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80054a4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80054a8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80054ac:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80054b0:	2900      	cmp	r1, #0
 80054b2:	d055      	beq.n	8005560 <_dtoa_r+0x5c0>
 80054b4:	2000      	movs	r0, #0
 80054b6:	4929      	ldr	r1, [pc, #164]	; (800555c <_dtoa_r+0x5bc>)
 80054b8:	f7fb f938 	bl	800072c <__aeabi_ddiv>
 80054bc:	463b      	mov	r3, r7
 80054be:	4632      	mov	r2, r6
 80054c0:	f7fa fe52 	bl	8000168 <__aeabi_dsub>
 80054c4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80054c8:	9f03      	ldr	r7, [sp, #12]
 80054ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ce:	f7fb fab3 	bl	8000a38 <__aeabi_d2iz>
 80054d2:	4604      	mov	r4, r0
 80054d4:	f7fa ff96 	bl	8000404 <__aeabi_i2d>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054e0:	f7fa fe42 	bl	8000168 <__aeabi_dsub>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	3430      	adds	r4, #48	; 0x30
 80054ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054ee:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80054f2:	f807 4b01 	strb.w	r4, [r7], #1
 80054f6:	f7fb fa61 	bl	80009bc <__aeabi_dcmplt>
 80054fa:	2800      	cmp	r0, #0
 80054fc:	d174      	bne.n	80055e8 <_dtoa_r+0x648>
 80054fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005502:	2000      	movs	r0, #0
 8005504:	4911      	ldr	r1, [pc, #68]	; (800554c <_dtoa_r+0x5ac>)
 8005506:	f7fa fe2f 	bl	8000168 <__aeabi_dsub>
 800550a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800550e:	f7fb fa55 	bl	80009bc <__aeabi_dcmplt>
 8005512:	2800      	cmp	r0, #0
 8005514:	f040 80b7 	bne.w	8005686 <_dtoa_r+0x6e6>
 8005518:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800551a:	429f      	cmp	r7, r3
 800551c:	f43f af7a 	beq.w	8005414 <_dtoa_r+0x474>
 8005520:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005524:	2200      	movs	r2, #0
 8005526:	4b0a      	ldr	r3, [pc, #40]	; (8005550 <_dtoa_r+0x5b0>)
 8005528:	f7fa ffd6 	bl	80004d8 <__aeabi_dmul>
 800552c:	2200      	movs	r2, #0
 800552e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005536:	4b06      	ldr	r3, [pc, #24]	; (8005550 <_dtoa_r+0x5b0>)
 8005538:	f7fa ffce 	bl	80004d8 <__aeabi_dmul>
 800553c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005540:	e7c3      	b.n	80054ca <_dtoa_r+0x52a>
 8005542:	bf00      	nop
 8005544:	080071d8 	.word	0x080071d8
 8005548:	080071b0 	.word	0x080071b0
 800554c:	3ff00000 	.word	0x3ff00000
 8005550:	40240000 	.word	0x40240000
 8005554:	401c0000 	.word	0x401c0000
 8005558:	40140000 	.word	0x40140000
 800555c:	3fe00000 	.word	0x3fe00000
 8005560:	4630      	mov	r0, r6
 8005562:	4639      	mov	r1, r7
 8005564:	f7fa ffb8 	bl	80004d8 <__aeabi_dmul>
 8005568:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800556a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800556e:	9c03      	ldr	r4, [sp, #12]
 8005570:	9314      	str	r3, [sp, #80]	; 0x50
 8005572:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005576:	f7fb fa5f 	bl	8000a38 <__aeabi_d2iz>
 800557a:	9015      	str	r0, [sp, #84]	; 0x54
 800557c:	f7fa ff42 	bl	8000404 <__aeabi_i2d>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005588:	f7fa fdee 	bl	8000168 <__aeabi_dsub>
 800558c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800558e:	4606      	mov	r6, r0
 8005590:	3330      	adds	r3, #48	; 0x30
 8005592:	f804 3b01 	strb.w	r3, [r4], #1
 8005596:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005598:	460f      	mov	r7, r1
 800559a:	429c      	cmp	r4, r3
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	d124      	bne.n	80055ec <_dtoa_r+0x64c>
 80055a2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055a6:	4bb0      	ldr	r3, [pc, #704]	; (8005868 <_dtoa_r+0x8c8>)
 80055a8:	f7fa fde0 	bl	800016c <__adddf3>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4630      	mov	r0, r6
 80055b2:	4639      	mov	r1, r7
 80055b4:	f7fb fa20 	bl	80009f8 <__aeabi_dcmpgt>
 80055b8:	2800      	cmp	r0, #0
 80055ba:	d163      	bne.n	8005684 <_dtoa_r+0x6e4>
 80055bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055c0:	2000      	movs	r0, #0
 80055c2:	49a9      	ldr	r1, [pc, #676]	; (8005868 <_dtoa_r+0x8c8>)
 80055c4:	f7fa fdd0 	bl	8000168 <__aeabi_dsub>
 80055c8:	4602      	mov	r2, r0
 80055ca:	460b      	mov	r3, r1
 80055cc:	4630      	mov	r0, r6
 80055ce:	4639      	mov	r1, r7
 80055d0:	f7fb f9f4 	bl	80009bc <__aeabi_dcmplt>
 80055d4:	2800      	cmp	r0, #0
 80055d6:	f43f af1d 	beq.w	8005414 <_dtoa_r+0x474>
 80055da:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80055dc:	1e7b      	subs	r3, r7, #1
 80055de:	9314      	str	r3, [sp, #80]	; 0x50
 80055e0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80055e4:	2b30      	cmp	r3, #48	; 0x30
 80055e6:	d0f8      	beq.n	80055da <_dtoa_r+0x63a>
 80055e8:	46c2      	mov	sl, r8
 80055ea:	e03b      	b.n	8005664 <_dtoa_r+0x6c4>
 80055ec:	4b9f      	ldr	r3, [pc, #636]	; (800586c <_dtoa_r+0x8cc>)
 80055ee:	f7fa ff73 	bl	80004d8 <__aeabi_dmul>
 80055f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055f6:	e7bc      	b.n	8005572 <_dtoa_r+0x5d2>
 80055f8:	9f03      	ldr	r7, [sp, #12]
 80055fa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80055fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	f7fb f891 	bl	800072c <__aeabi_ddiv>
 800560a:	f7fb fa15 	bl	8000a38 <__aeabi_d2iz>
 800560e:	4604      	mov	r4, r0
 8005610:	f7fa fef8 	bl	8000404 <__aeabi_i2d>
 8005614:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005618:	f7fa ff5e 	bl	80004d8 <__aeabi_dmul>
 800561c:	4602      	mov	r2, r0
 800561e:	460b      	mov	r3, r1
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fa fda0 	bl	8000168 <__aeabi_dsub>
 8005628:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800562c:	f807 6b01 	strb.w	r6, [r7], #1
 8005630:	9e03      	ldr	r6, [sp, #12]
 8005632:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005636:	1bbe      	subs	r6, r7, r6
 8005638:	45b4      	cmp	ip, r6
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	d136      	bne.n	80056ae <_dtoa_r+0x70e>
 8005640:	f7fa fd94 	bl	800016c <__adddf3>
 8005644:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005648:	4680      	mov	r8, r0
 800564a:	4689      	mov	r9, r1
 800564c:	f7fb f9d4 	bl	80009f8 <__aeabi_dcmpgt>
 8005650:	bb58      	cbnz	r0, 80056aa <_dtoa_r+0x70a>
 8005652:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005656:	4640      	mov	r0, r8
 8005658:	4649      	mov	r1, r9
 800565a:	f7fb f9a5 	bl	80009a8 <__aeabi_dcmpeq>
 800565e:	b108      	cbz	r0, 8005664 <_dtoa_r+0x6c4>
 8005660:	07e1      	lsls	r1, r4, #31
 8005662:	d422      	bmi.n	80056aa <_dtoa_r+0x70a>
 8005664:	4628      	mov	r0, r5
 8005666:	4659      	mov	r1, fp
 8005668:	f000 fbea 	bl	8005e40 <_Bfree>
 800566c:	2300      	movs	r3, #0
 800566e:	703b      	strb	r3, [r7, #0]
 8005670:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005672:	f10a 0001 	add.w	r0, sl, #1
 8005676:	6018      	str	r0, [r3, #0]
 8005678:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800567a:	2b00      	cmp	r3, #0
 800567c:	f43f acde 	beq.w	800503c <_dtoa_r+0x9c>
 8005680:	601f      	str	r7, [r3, #0]
 8005682:	e4db      	b.n	800503c <_dtoa_r+0x9c>
 8005684:	4627      	mov	r7, r4
 8005686:	463b      	mov	r3, r7
 8005688:	461f      	mov	r7, r3
 800568a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800568e:	2a39      	cmp	r2, #57	; 0x39
 8005690:	d107      	bne.n	80056a2 <_dtoa_r+0x702>
 8005692:	9a03      	ldr	r2, [sp, #12]
 8005694:	429a      	cmp	r2, r3
 8005696:	d1f7      	bne.n	8005688 <_dtoa_r+0x6e8>
 8005698:	2230      	movs	r2, #48	; 0x30
 800569a:	9903      	ldr	r1, [sp, #12]
 800569c:	f108 0801 	add.w	r8, r8, #1
 80056a0:	700a      	strb	r2, [r1, #0]
 80056a2:	781a      	ldrb	r2, [r3, #0]
 80056a4:	3201      	adds	r2, #1
 80056a6:	701a      	strb	r2, [r3, #0]
 80056a8:	e79e      	b.n	80055e8 <_dtoa_r+0x648>
 80056aa:	46d0      	mov	r8, sl
 80056ac:	e7eb      	b.n	8005686 <_dtoa_r+0x6e6>
 80056ae:	2200      	movs	r2, #0
 80056b0:	4b6e      	ldr	r3, [pc, #440]	; (800586c <_dtoa_r+0x8cc>)
 80056b2:	f7fa ff11 	bl	80004d8 <__aeabi_dmul>
 80056b6:	2200      	movs	r2, #0
 80056b8:	2300      	movs	r3, #0
 80056ba:	4680      	mov	r8, r0
 80056bc:	4689      	mov	r9, r1
 80056be:	f7fb f973 	bl	80009a8 <__aeabi_dcmpeq>
 80056c2:	2800      	cmp	r0, #0
 80056c4:	d09b      	beq.n	80055fe <_dtoa_r+0x65e>
 80056c6:	e7cd      	b.n	8005664 <_dtoa_r+0x6c4>
 80056c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80056ca:	2a00      	cmp	r2, #0
 80056cc:	f000 80d0 	beq.w	8005870 <_dtoa_r+0x8d0>
 80056d0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80056d2:	2a01      	cmp	r2, #1
 80056d4:	f300 80ae 	bgt.w	8005834 <_dtoa_r+0x894>
 80056d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80056da:	2a00      	cmp	r2, #0
 80056dc:	f000 80a6 	beq.w	800582c <_dtoa_r+0x88c>
 80056e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80056e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80056e6:	9f06      	ldr	r7, [sp, #24]
 80056e8:	9a06      	ldr	r2, [sp, #24]
 80056ea:	2101      	movs	r1, #1
 80056ec:	441a      	add	r2, r3
 80056ee:	9206      	str	r2, [sp, #24]
 80056f0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056f2:	4628      	mov	r0, r5
 80056f4:	441a      	add	r2, r3
 80056f6:	9209      	str	r2, [sp, #36]	; 0x24
 80056f8:	f000 fc58 	bl	8005fac <__i2b>
 80056fc:	4606      	mov	r6, r0
 80056fe:	2f00      	cmp	r7, #0
 8005700:	dd0c      	ble.n	800571c <_dtoa_r+0x77c>
 8005702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005704:	2b00      	cmp	r3, #0
 8005706:	dd09      	ble.n	800571c <_dtoa_r+0x77c>
 8005708:	42bb      	cmp	r3, r7
 800570a:	bfa8      	it	ge
 800570c:	463b      	movge	r3, r7
 800570e:	9a06      	ldr	r2, [sp, #24]
 8005710:	1aff      	subs	r7, r7, r3
 8005712:	1ad2      	subs	r2, r2, r3
 8005714:	9206      	str	r2, [sp, #24]
 8005716:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	9309      	str	r3, [sp, #36]	; 0x24
 800571c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800571e:	b1f3      	cbz	r3, 800575e <_dtoa_r+0x7be>
 8005720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005722:	2b00      	cmp	r3, #0
 8005724:	f000 80a8 	beq.w	8005878 <_dtoa_r+0x8d8>
 8005728:	2c00      	cmp	r4, #0
 800572a:	dd10      	ble.n	800574e <_dtoa_r+0x7ae>
 800572c:	4631      	mov	r1, r6
 800572e:	4622      	mov	r2, r4
 8005730:	4628      	mov	r0, r5
 8005732:	f000 fcf9 	bl	8006128 <__pow5mult>
 8005736:	465a      	mov	r2, fp
 8005738:	4601      	mov	r1, r0
 800573a:	4606      	mov	r6, r0
 800573c:	4628      	mov	r0, r5
 800573e:	f000 fc4b 	bl	8005fd8 <__multiply>
 8005742:	4680      	mov	r8, r0
 8005744:	4659      	mov	r1, fp
 8005746:	4628      	mov	r0, r5
 8005748:	f000 fb7a 	bl	8005e40 <_Bfree>
 800574c:	46c3      	mov	fp, r8
 800574e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005750:	1b1a      	subs	r2, r3, r4
 8005752:	d004      	beq.n	800575e <_dtoa_r+0x7be>
 8005754:	4659      	mov	r1, fp
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fce6 	bl	8006128 <__pow5mult>
 800575c:	4683      	mov	fp, r0
 800575e:	2101      	movs	r1, #1
 8005760:	4628      	mov	r0, r5
 8005762:	f000 fc23 	bl	8005fac <__i2b>
 8005766:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005768:	4604      	mov	r4, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	f340 8086 	ble.w	800587c <_dtoa_r+0x8dc>
 8005770:	461a      	mov	r2, r3
 8005772:	4601      	mov	r1, r0
 8005774:	4628      	mov	r0, r5
 8005776:	f000 fcd7 	bl	8006128 <__pow5mult>
 800577a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800577c:	4604      	mov	r4, r0
 800577e:	2b01      	cmp	r3, #1
 8005780:	dd7f      	ble.n	8005882 <_dtoa_r+0x8e2>
 8005782:	f04f 0800 	mov.w	r8, #0
 8005786:	6923      	ldr	r3, [r4, #16]
 8005788:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800578c:	6918      	ldr	r0, [r3, #16]
 800578e:	f000 fbbf 	bl	8005f10 <__hi0bits>
 8005792:	f1c0 0020 	rsb	r0, r0, #32
 8005796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005798:	4418      	add	r0, r3
 800579a:	f010 001f 	ands.w	r0, r0, #31
 800579e:	f000 8092 	beq.w	80058c6 <_dtoa_r+0x926>
 80057a2:	f1c0 0320 	rsb	r3, r0, #32
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	f340 808a 	ble.w	80058c0 <_dtoa_r+0x920>
 80057ac:	f1c0 001c 	rsb	r0, r0, #28
 80057b0:	9b06      	ldr	r3, [sp, #24]
 80057b2:	4407      	add	r7, r0
 80057b4:	4403      	add	r3, r0
 80057b6:	9306      	str	r3, [sp, #24]
 80057b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057ba:	4403      	add	r3, r0
 80057bc:	9309      	str	r3, [sp, #36]	; 0x24
 80057be:	9b06      	ldr	r3, [sp, #24]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	dd05      	ble.n	80057d0 <_dtoa_r+0x830>
 80057c4:	4659      	mov	r1, fp
 80057c6:	461a      	mov	r2, r3
 80057c8:	4628      	mov	r0, r5
 80057ca:	f000 fd07 	bl	80061dc <__lshift>
 80057ce:	4683      	mov	fp, r0
 80057d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	dd05      	ble.n	80057e2 <_dtoa_r+0x842>
 80057d6:	4621      	mov	r1, r4
 80057d8:	461a      	mov	r2, r3
 80057da:	4628      	mov	r0, r5
 80057dc:	f000 fcfe 	bl	80061dc <__lshift>
 80057e0:	4604      	mov	r4, r0
 80057e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d070      	beq.n	80058ca <_dtoa_r+0x92a>
 80057e8:	4621      	mov	r1, r4
 80057ea:	4658      	mov	r0, fp
 80057ec:	f000 fd66 	bl	80062bc <__mcmp>
 80057f0:	2800      	cmp	r0, #0
 80057f2:	da6a      	bge.n	80058ca <_dtoa_r+0x92a>
 80057f4:	2300      	movs	r3, #0
 80057f6:	4659      	mov	r1, fp
 80057f8:	220a      	movs	r2, #10
 80057fa:	4628      	mov	r0, r5
 80057fc:	f000 fb42 	bl	8005e84 <__multadd>
 8005800:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005802:	4683      	mov	fp, r0
 8005804:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 8194 	beq.w	8005b36 <_dtoa_r+0xb96>
 800580e:	4631      	mov	r1, r6
 8005810:	2300      	movs	r3, #0
 8005812:	220a      	movs	r2, #10
 8005814:	4628      	mov	r0, r5
 8005816:	f000 fb35 	bl	8005e84 <__multadd>
 800581a:	f1b9 0f00 	cmp.w	r9, #0
 800581e:	4606      	mov	r6, r0
 8005820:	f300 8093 	bgt.w	800594a <_dtoa_r+0x9aa>
 8005824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005826:	2b02      	cmp	r3, #2
 8005828:	dc57      	bgt.n	80058da <_dtoa_r+0x93a>
 800582a:	e08e      	b.n	800594a <_dtoa_r+0x9aa>
 800582c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800582e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005832:	e757      	b.n	80056e4 <_dtoa_r+0x744>
 8005834:	9b08      	ldr	r3, [sp, #32]
 8005836:	1e5c      	subs	r4, r3, #1
 8005838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800583a:	42a3      	cmp	r3, r4
 800583c:	bfb7      	itett	lt
 800583e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005840:	1b1c      	subge	r4, r3, r4
 8005842:	1ae2      	sublt	r2, r4, r3
 8005844:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005846:	bfbe      	ittt	lt
 8005848:	940a      	strlt	r4, [sp, #40]	; 0x28
 800584a:	189b      	addlt	r3, r3, r2
 800584c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800584e:	9b08      	ldr	r3, [sp, #32]
 8005850:	bfb8      	it	lt
 8005852:	2400      	movlt	r4, #0
 8005854:	2b00      	cmp	r3, #0
 8005856:	bfbb      	ittet	lt
 8005858:	9b06      	ldrlt	r3, [sp, #24]
 800585a:	9a08      	ldrlt	r2, [sp, #32]
 800585c:	9f06      	ldrge	r7, [sp, #24]
 800585e:	1a9f      	sublt	r7, r3, r2
 8005860:	bfac      	ite	ge
 8005862:	9b08      	ldrge	r3, [sp, #32]
 8005864:	2300      	movlt	r3, #0
 8005866:	e73f      	b.n	80056e8 <_dtoa_r+0x748>
 8005868:	3fe00000 	.word	0x3fe00000
 800586c:	40240000 	.word	0x40240000
 8005870:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005872:	9f06      	ldr	r7, [sp, #24]
 8005874:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005876:	e742      	b.n	80056fe <_dtoa_r+0x75e>
 8005878:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800587a:	e76b      	b.n	8005754 <_dtoa_r+0x7b4>
 800587c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800587e:	2b01      	cmp	r3, #1
 8005880:	dc19      	bgt.n	80058b6 <_dtoa_r+0x916>
 8005882:	9b04      	ldr	r3, [sp, #16]
 8005884:	b9bb      	cbnz	r3, 80058b6 <_dtoa_r+0x916>
 8005886:	9b05      	ldr	r3, [sp, #20]
 8005888:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800588c:	b99b      	cbnz	r3, 80058b6 <_dtoa_r+0x916>
 800588e:	9b05      	ldr	r3, [sp, #20]
 8005890:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005894:	0d1b      	lsrs	r3, r3, #20
 8005896:	051b      	lsls	r3, r3, #20
 8005898:	b183      	cbz	r3, 80058bc <_dtoa_r+0x91c>
 800589a:	f04f 0801 	mov.w	r8, #1
 800589e:	9b06      	ldr	r3, [sp, #24]
 80058a0:	3301      	adds	r3, #1
 80058a2:	9306      	str	r3, [sp, #24]
 80058a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058a6:	3301      	adds	r3, #1
 80058a8:	9309      	str	r3, [sp, #36]	; 0x24
 80058aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f47f af6a 	bne.w	8005786 <_dtoa_r+0x7e6>
 80058b2:	2001      	movs	r0, #1
 80058b4:	e76f      	b.n	8005796 <_dtoa_r+0x7f6>
 80058b6:	f04f 0800 	mov.w	r8, #0
 80058ba:	e7f6      	b.n	80058aa <_dtoa_r+0x90a>
 80058bc:	4698      	mov	r8, r3
 80058be:	e7f4      	b.n	80058aa <_dtoa_r+0x90a>
 80058c0:	f43f af7d 	beq.w	80057be <_dtoa_r+0x81e>
 80058c4:	4618      	mov	r0, r3
 80058c6:	301c      	adds	r0, #28
 80058c8:	e772      	b.n	80057b0 <_dtoa_r+0x810>
 80058ca:	9b08      	ldr	r3, [sp, #32]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	dc36      	bgt.n	800593e <_dtoa_r+0x99e>
 80058d0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058d2:	2b02      	cmp	r3, #2
 80058d4:	dd33      	ble.n	800593e <_dtoa_r+0x99e>
 80058d6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80058da:	f1b9 0f00 	cmp.w	r9, #0
 80058de:	d10d      	bne.n	80058fc <_dtoa_r+0x95c>
 80058e0:	4621      	mov	r1, r4
 80058e2:	464b      	mov	r3, r9
 80058e4:	2205      	movs	r2, #5
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 facc 	bl	8005e84 <__multadd>
 80058ec:	4601      	mov	r1, r0
 80058ee:	4604      	mov	r4, r0
 80058f0:	4658      	mov	r0, fp
 80058f2:	f000 fce3 	bl	80062bc <__mcmp>
 80058f6:	2800      	cmp	r0, #0
 80058f8:	f73f adb8 	bgt.w	800546c <_dtoa_r+0x4cc>
 80058fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058fe:	9f03      	ldr	r7, [sp, #12]
 8005900:	ea6f 0a03 	mvn.w	sl, r3
 8005904:	f04f 0800 	mov.w	r8, #0
 8005908:	4621      	mov	r1, r4
 800590a:	4628      	mov	r0, r5
 800590c:	f000 fa98 	bl	8005e40 <_Bfree>
 8005910:	2e00      	cmp	r6, #0
 8005912:	f43f aea7 	beq.w	8005664 <_dtoa_r+0x6c4>
 8005916:	f1b8 0f00 	cmp.w	r8, #0
 800591a:	d005      	beq.n	8005928 <_dtoa_r+0x988>
 800591c:	45b0      	cmp	r8, r6
 800591e:	d003      	beq.n	8005928 <_dtoa_r+0x988>
 8005920:	4641      	mov	r1, r8
 8005922:	4628      	mov	r0, r5
 8005924:	f000 fa8c 	bl	8005e40 <_Bfree>
 8005928:	4631      	mov	r1, r6
 800592a:	4628      	mov	r0, r5
 800592c:	f000 fa88 	bl	8005e40 <_Bfree>
 8005930:	e698      	b.n	8005664 <_dtoa_r+0x6c4>
 8005932:	2400      	movs	r4, #0
 8005934:	4626      	mov	r6, r4
 8005936:	e7e1      	b.n	80058fc <_dtoa_r+0x95c>
 8005938:	46c2      	mov	sl, r8
 800593a:	4626      	mov	r6, r4
 800593c:	e596      	b.n	800546c <_dtoa_r+0x4cc>
 800593e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005940:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 80fd 	beq.w	8005b44 <_dtoa_r+0xba4>
 800594a:	2f00      	cmp	r7, #0
 800594c:	dd05      	ble.n	800595a <_dtoa_r+0x9ba>
 800594e:	4631      	mov	r1, r6
 8005950:	463a      	mov	r2, r7
 8005952:	4628      	mov	r0, r5
 8005954:	f000 fc42 	bl	80061dc <__lshift>
 8005958:	4606      	mov	r6, r0
 800595a:	f1b8 0f00 	cmp.w	r8, #0
 800595e:	d05c      	beq.n	8005a1a <_dtoa_r+0xa7a>
 8005960:	4628      	mov	r0, r5
 8005962:	6871      	ldr	r1, [r6, #4]
 8005964:	f000 fa2c 	bl	8005dc0 <_Balloc>
 8005968:	4607      	mov	r7, r0
 800596a:	b928      	cbnz	r0, 8005978 <_dtoa_r+0x9d8>
 800596c:	4602      	mov	r2, r0
 800596e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005972:	4b7f      	ldr	r3, [pc, #508]	; (8005b70 <_dtoa_r+0xbd0>)
 8005974:	f7ff bb28 	b.w	8004fc8 <_dtoa_r+0x28>
 8005978:	6932      	ldr	r2, [r6, #16]
 800597a:	f106 010c 	add.w	r1, r6, #12
 800597e:	3202      	adds	r2, #2
 8005980:	0092      	lsls	r2, r2, #2
 8005982:	300c      	adds	r0, #12
 8005984:	f000 fa0e 	bl	8005da4 <memcpy>
 8005988:	2201      	movs	r2, #1
 800598a:	4639      	mov	r1, r7
 800598c:	4628      	mov	r0, r5
 800598e:	f000 fc25 	bl	80061dc <__lshift>
 8005992:	46b0      	mov	r8, r6
 8005994:	4606      	mov	r6, r0
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	3301      	adds	r3, #1
 800599a:	9308      	str	r3, [sp, #32]
 800599c:	9b03      	ldr	r3, [sp, #12]
 800599e:	444b      	add	r3, r9
 80059a0:	930a      	str	r3, [sp, #40]	; 0x28
 80059a2:	9b04      	ldr	r3, [sp, #16]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	9309      	str	r3, [sp, #36]	; 0x24
 80059aa:	9b08      	ldr	r3, [sp, #32]
 80059ac:	4621      	mov	r1, r4
 80059ae:	3b01      	subs	r3, #1
 80059b0:	4658      	mov	r0, fp
 80059b2:	9304      	str	r3, [sp, #16]
 80059b4:	f7ff fa66 	bl	8004e84 <quorem>
 80059b8:	4603      	mov	r3, r0
 80059ba:	4641      	mov	r1, r8
 80059bc:	3330      	adds	r3, #48	; 0x30
 80059be:	9006      	str	r0, [sp, #24]
 80059c0:	4658      	mov	r0, fp
 80059c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80059c4:	f000 fc7a 	bl	80062bc <__mcmp>
 80059c8:	4632      	mov	r2, r6
 80059ca:	4681      	mov	r9, r0
 80059cc:	4621      	mov	r1, r4
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 fc90 	bl	80062f4 <__mdiff>
 80059d4:	68c2      	ldr	r2, [r0, #12]
 80059d6:	4607      	mov	r7, r0
 80059d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059da:	bb02      	cbnz	r2, 8005a1e <_dtoa_r+0xa7e>
 80059dc:	4601      	mov	r1, r0
 80059de:	4658      	mov	r0, fp
 80059e0:	f000 fc6c 	bl	80062bc <__mcmp>
 80059e4:	4602      	mov	r2, r0
 80059e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059e8:	4639      	mov	r1, r7
 80059ea:	4628      	mov	r0, r5
 80059ec:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80059f0:	f000 fa26 	bl	8005e40 <_Bfree>
 80059f4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80059f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059f8:	9f08      	ldr	r7, [sp, #32]
 80059fa:	ea43 0102 	orr.w	r1, r3, r2
 80059fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a00:	430b      	orrs	r3, r1
 8005a02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a04:	d10d      	bne.n	8005a22 <_dtoa_r+0xa82>
 8005a06:	2b39      	cmp	r3, #57	; 0x39
 8005a08:	d029      	beq.n	8005a5e <_dtoa_r+0xabe>
 8005a0a:	f1b9 0f00 	cmp.w	r9, #0
 8005a0e:	dd01      	ble.n	8005a14 <_dtoa_r+0xa74>
 8005a10:	9b06      	ldr	r3, [sp, #24]
 8005a12:	3331      	adds	r3, #49	; 0x31
 8005a14:	9a04      	ldr	r2, [sp, #16]
 8005a16:	7013      	strb	r3, [r2, #0]
 8005a18:	e776      	b.n	8005908 <_dtoa_r+0x968>
 8005a1a:	4630      	mov	r0, r6
 8005a1c:	e7b9      	b.n	8005992 <_dtoa_r+0x9f2>
 8005a1e:	2201      	movs	r2, #1
 8005a20:	e7e2      	b.n	80059e8 <_dtoa_r+0xa48>
 8005a22:	f1b9 0f00 	cmp.w	r9, #0
 8005a26:	db06      	blt.n	8005a36 <_dtoa_r+0xa96>
 8005a28:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005a2a:	ea41 0909 	orr.w	r9, r1, r9
 8005a2e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a30:	ea59 0101 	orrs.w	r1, r9, r1
 8005a34:	d120      	bne.n	8005a78 <_dtoa_r+0xad8>
 8005a36:	2a00      	cmp	r2, #0
 8005a38:	ddec      	ble.n	8005a14 <_dtoa_r+0xa74>
 8005a3a:	4659      	mov	r1, fp
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	4628      	mov	r0, r5
 8005a40:	9308      	str	r3, [sp, #32]
 8005a42:	f000 fbcb 	bl	80061dc <__lshift>
 8005a46:	4621      	mov	r1, r4
 8005a48:	4683      	mov	fp, r0
 8005a4a:	f000 fc37 	bl	80062bc <__mcmp>
 8005a4e:	2800      	cmp	r0, #0
 8005a50:	9b08      	ldr	r3, [sp, #32]
 8005a52:	dc02      	bgt.n	8005a5a <_dtoa_r+0xaba>
 8005a54:	d1de      	bne.n	8005a14 <_dtoa_r+0xa74>
 8005a56:	07da      	lsls	r2, r3, #31
 8005a58:	d5dc      	bpl.n	8005a14 <_dtoa_r+0xa74>
 8005a5a:	2b39      	cmp	r3, #57	; 0x39
 8005a5c:	d1d8      	bne.n	8005a10 <_dtoa_r+0xa70>
 8005a5e:	2339      	movs	r3, #57	; 0x39
 8005a60:	9a04      	ldr	r2, [sp, #16]
 8005a62:	7013      	strb	r3, [r2, #0]
 8005a64:	463b      	mov	r3, r7
 8005a66:	461f      	mov	r7, r3
 8005a68:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	2a39      	cmp	r2, #57	; 0x39
 8005a70:	d050      	beq.n	8005b14 <_dtoa_r+0xb74>
 8005a72:	3201      	adds	r2, #1
 8005a74:	701a      	strb	r2, [r3, #0]
 8005a76:	e747      	b.n	8005908 <_dtoa_r+0x968>
 8005a78:	2a00      	cmp	r2, #0
 8005a7a:	dd03      	ble.n	8005a84 <_dtoa_r+0xae4>
 8005a7c:	2b39      	cmp	r3, #57	; 0x39
 8005a7e:	d0ee      	beq.n	8005a5e <_dtoa_r+0xabe>
 8005a80:	3301      	adds	r3, #1
 8005a82:	e7c7      	b.n	8005a14 <_dtoa_r+0xa74>
 8005a84:	9a08      	ldr	r2, [sp, #32]
 8005a86:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005a88:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005a8c:	428a      	cmp	r2, r1
 8005a8e:	d02a      	beq.n	8005ae6 <_dtoa_r+0xb46>
 8005a90:	4659      	mov	r1, fp
 8005a92:	2300      	movs	r3, #0
 8005a94:	220a      	movs	r2, #10
 8005a96:	4628      	mov	r0, r5
 8005a98:	f000 f9f4 	bl	8005e84 <__multadd>
 8005a9c:	45b0      	cmp	r8, r6
 8005a9e:	4683      	mov	fp, r0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	f04f 020a 	mov.w	r2, #10
 8005aa8:	4641      	mov	r1, r8
 8005aaa:	4628      	mov	r0, r5
 8005aac:	d107      	bne.n	8005abe <_dtoa_r+0xb1e>
 8005aae:	f000 f9e9 	bl	8005e84 <__multadd>
 8005ab2:	4680      	mov	r8, r0
 8005ab4:	4606      	mov	r6, r0
 8005ab6:	9b08      	ldr	r3, [sp, #32]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	9308      	str	r3, [sp, #32]
 8005abc:	e775      	b.n	80059aa <_dtoa_r+0xa0a>
 8005abe:	f000 f9e1 	bl	8005e84 <__multadd>
 8005ac2:	4631      	mov	r1, r6
 8005ac4:	4680      	mov	r8, r0
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	220a      	movs	r2, #10
 8005aca:	4628      	mov	r0, r5
 8005acc:	f000 f9da 	bl	8005e84 <__multadd>
 8005ad0:	4606      	mov	r6, r0
 8005ad2:	e7f0      	b.n	8005ab6 <_dtoa_r+0xb16>
 8005ad4:	f1b9 0f00 	cmp.w	r9, #0
 8005ad8:	bfcc      	ite	gt
 8005ada:	464f      	movgt	r7, r9
 8005adc:	2701      	movle	r7, #1
 8005ade:	f04f 0800 	mov.w	r8, #0
 8005ae2:	9a03      	ldr	r2, [sp, #12]
 8005ae4:	4417      	add	r7, r2
 8005ae6:	4659      	mov	r1, fp
 8005ae8:	2201      	movs	r2, #1
 8005aea:	4628      	mov	r0, r5
 8005aec:	9308      	str	r3, [sp, #32]
 8005aee:	f000 fb75 	bl	80061dc <__lshift>
 8005af2:	4621      	mov	r1, r4
 8005af4:	4683      	mov	fp, r0
 8005af6:	f000 fbe1 	bl	80062bc <__mcmp>
 8005afa:	2800      	cmp	r0, #0
 8005afc:	dcb2      	bgt.n	8005a64 <_dtoa_r+0xac4>
 8005afe:	d102      	bne.n	8005b06 <_dtoa_r+0xb66>
 8005b00:	9b08      	ldr	r3, [sp, #32]
 8005b02:	07db      	lsls	r3, r3, #31
 8005b04:	d4ae      	bmi.n	8005a64 <_dtoa_r+0xac4>
 8005b06:	463b      	mov	r3, r7
 8005b08:	461f      	mov	r7, r3
 8005b0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b0e:	2a30      	cmp	r2, #48	; 0x30
 8005b10:	d0fa      	beq.n	8005b08 <_dtoa_r+0xb68>
 8005b12:	e6f9      	b.n	8005908 <_dtoa_r+0x968>
 8005b14:	9a03      	ldr	r2, [sp, #12]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d1a5      	bne.n	8005a66 <_dtoa_r+0xac6>
 8005b1a:	2331      	movs	r3, #49	; 0x31
 8005b1c:	f10a 0a01 	add.w	sl, sl, #1
 8005b20:	e779      	b.n	8005a16 <_dtoa_r+0xa76>
 8005b22:	4b14      	ldr	r3, [pc, #80]	; (8005b74 <_dtoa_r+0xbd4>)
 8005b24:	f7ff baa8 	b.w	8005078 <_dtoa_r+0xd8>
 8005b28:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f47f aa81 	bne.w	8005032 <_dtoa_r+0x92>
 8005b30:	4b11      	ldr	r3, [pc, #68]	; (8005b78 <_dtoa_r+0xbd8>)
 8005b32:	f7ff baa1 	b.w	8005078 <_dtoa_r+0xd8>
 8005b36:	f1b9 0f00 	cmp.w	r9, #0
 8005b3a:	dc03      	bgt.n	8005b44 <_dtoa_r+0xba4>
 8005b3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	f73f aecb 	bgt.w	80058da <_dtoa_r+0x93a>
 8005b44:	9f03      	ldr	r7, [sp, #12]
 8005b46:	4621      	mov	r1, r4
 8005b48:	4658      	mov	r0, fp
 8005b4a:	f7ff f99b 	bl	8004e84 <quorem>
 8005b4e:	9a03      	ldr	r2, [sp, #12]
 8005b50:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005b54:	f807 3b01 	strb.w	r3, [r7], #1
 8005b58:	1aba      	subs	r2, r7, r2
 8005b5a:	4591      	cmp	r9, r2
 8005b5c:	ddba      	ble.n	8005ad4 <_dtoa_r+0xb34>
 8005b5e:	4659      	mov	r1, fp
 8005b60:	2300      	movs	r3, #0
 8005b62:	220a      	movs	r2, #10
 8005b64:	4628      	mov	r0, r5
 8005b66:	f000 f98d 	bl	8005e84 <__multadd>
 8005b6a:	4683      	mov	fp, r0
 8005b6c:	e7eb      	b.n	8005b46 <_dtoa_r+0xba6>
 8005b6e:	bf00      	nop
 8005b70:	080070e3 	.word	0x080070e3
 8005b74:	08007040 	.word	0x08007040
 8005b78:	08007064 	.word	0x08007064

08005b7c <std>:
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	b510      	push	{r4, lr}
 8005b80:	4604      	mov	r4, r0
 8005b82:	e9c0 3300 	strd	r3, r3, [r0]
 8005b86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b8a:	6083      	str	r3, [r0, #8]
 8005b8c:	8181      	strh	r1, [r0, #12]
 8005b8e:	6643      	str	r3, [r0, #100]	; 0x64
 8005b90:	81c2      	strh	r2, [r0, #14]
 8005b92:	6183      	str	r3, [r0, #24]
 8005b94:	4619      	mov	r1, r3
 8005b96:	2208      	movs	r2, #8
 8005b98:	305c      	adds	r0, #92	; 0x5c
 8005b9a:	f7fe fcf3 	bl	8004584 <memset>
 8005b9e:	4b05      	ldr	r3, [pc, #20]	; (8005bb4 <std+0x38>)
 8005ba0:	6224      	str	r4, [r4, #32]
 8005ba2:	6263      	str	r3, [r4, #36]	; 0x24
 8005ba4:	4b04      	ldr	r3, [pc, #16]	; (8005bb8 <std+0x3c>)
 8005ba6:	62a3      	str	r3, [r4, #40]	; 0x28
 8005ba8:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <std+0x40>)
 8005baa:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005bac:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <std+0x44>)
 8005bae:	6323      	str	r3, [r4, #48]	; 0x30
 8005bb0:	bd10      	pop	{r4, pc}
 8005bb2:	bf00      	nop
 8005bb4:	08006975 	.word	0x08006975
 8005bb8:	08006997 	.word	0x08006997
 8005bbc:	080069cf 	.word	0x080069cf
 8005bc0:	080069f3 	.word	0x080069f3

08005bc4 <_cleanup_r>:
 8005bc4:	4901      	ldr	r1, [pc, #4]	; (8005bcc <_cleanup_r+0x8>)
 8005bc6:	f000 b8af 	b.w	8005d28 <_fwalk_reent>
 8005bca:	bf00      	nop
 8005bcc:	08006d01 	.word	0x08006d01

08005bd0 <__sfmoreglue>:
 8005bd0:	2268      	movs	r2, #104	; 0x68
 8005bd2:	b570      	push	{r4, r5, r6, lr}
 8005bd4:	1e4d      	subs	r5, r1, #1
 8005bd6:	4355      	muls	r5, r2
 8005bd8:	460e      	mov	r6, r1
 8005bda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005bde:	f000 fced 	bl	80065bc <_malloc_r>
 8005be2:	4604      	mov	r4, r0
 8005be4:	b140      	cbz	r0, 8005bf8 <__sfmoreglue+0x28>
 8005be6:	2100      	movs	r1, #0
 8005be8:	e9c0 1600 	strd	r1, r6, [r0]
 8005bec:	300c      	adds	r0, #12
 8005bee:	60a0      	str	r0, [r4, #8]
 8005bf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005bf4:	f7fe fcc6 	bl	8004584 <memset>
 8005bf8:	4620      	mov	r0, r4
 8005bfa:	bd70      	pop	{r4, r5, r6, pc}

08005bfc <__sfp_lock_acquire>:
 8005bfc:	4801      	ldr	r0, [pc, #4]	; (8005c04 <__sfp_lock_acquire+0x8>)
 8005bfe:	f000 b8b8 	b.w	8005d72 <__retarget_lock_acquire_recursive>
 8005c02:	bf00      	nop
 8005c04:	20000395 	.word	0x20000395

08005c08 <__sfp_lock_release>:
 8005c08:	4801      	ldr	r0, [pc, #4]	; (8005c10 <__sfp_lock_release+0x8>)
 8005c0a:	f000 b8b3 	b.w	8005d74 <__retarget_lock_release_recursive>
 8005c0e:	bf00      	nop
 8005c10:	20000395 	.word	0x20000395

08005c14 <__sinit_lock_acquire>:
 8005c14:	4801      	ldr	r0, [pc, #4]	; (8005c1c <__sinit_lock_acquire+0x8>)
 8005c16:	f000 b8ac 	b.w	8005d72 <__retarget_lock_acquire_recursive>
 8005c1a:	bf00      	nop
 8005c1c:	20000396 	.word	0x20000396

08005c20 <__sinit_lock_release>:
 8005c20:	4801      	ldr	r0, [pc, #4]	; (8005c28 <__sinit_lock_release+0x8>)
 8005c22:	f000 b8a7 	b.w	8005d74 <__retarget_lock_release_recursive>
 8005c26:	bf00      	nop
 8005c28:	20000396 	.word	0x20000396

08005c2c <__sinit>:
 8005c2c:	b510      	push	{r4, lr}
 8005c2e:	4604      	mov	r4, r0
 8005c30:	f7ff fff0 	bl	8005c14 <__sinit_lock_acquire>
 8005c34:	69a3      	ldr	r3, [r4, #24]
 8005c36:	b11b      	cbz	r3, 8005c40 <__sinit+0x14>
 8005c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c3c:	f7ff bff0 	b.w	8005c20 <__sinit_lock_release>
 8005c40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005c44:	6523      	str	r3, [r4, #80]	; 0x50
 8005c46:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <__sinit+0x68>)
 8005c48:	4a13      	ldr	r2, [pc, #76]	; (8005c98 <__sinit+0x6c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005c4e:	42a3      	cmp	r3, r4
 8005c50:	bf08      	it	eq
 8005c52:	2301      	moveq	r3, #1
 8005c54:	4620      	mov	r0, r4
 8005c56:	bf08      	it	eq
 8005c58:	61a3      	streq	r3, [r4, #24]
 8005c5a:	f000 f81f 	bl	8005c9c <__sfp>
 8005c5e:	6060      	str	r0, [r4, #4]
 8005c60:	4620      	mov	r0, r4
 8005c62:	f000 f81b 	bl	8005c9c <__sfp>
 8005c66:	60a0      	str	r0, [r4, #8]
 8005c68:	4620      	mov	r0, r4
 8005c6a:	f000 f817 	bl	8005c9c <__sfp>
 8005c6e:	2200      	movs	r2, #0
 8005c70:	2104      	movs	r1, #4
 8005c72:	60e0      	str	r0, [r4, #12]
 8005c74:	6860      	ldr	r0, [r4, #4]
 8005c76:	f7ff ff81 	bl	8005b7c <std>
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	2109      	movs	r1, #9
 8005c7e:	68a0      	ldr	r0, [r4, #8]
 8005c80:	f7ff ff7c 	bl	8005b7c <std>
 8005c84:	2202      	movs	r2, #2
 8005c86:	2112      	movs	r1, #18
 8005c88:	68e0      	ldr	r0, [r4, #12]
 8005c8a:	f7ff ff77 	bl	8005b7c <std>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	61a3      	str	r3, [r4, #24]
 8005c92:	e7d1      	b.n	8005c38 <__sinit+0xc>
 8005c94:	0800702c 	.word	0x0800702c
 8005c98:	08005bc5 	.word	0x08005bc5

08005c9c <__sfp>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	4607      	mov	r7, r0
 8005ca0:	f7ff ffac 	bl	8005bfc <__sfp_lock_acquire>
 8005ca4:	4b1e      	ldr	r3, [pc, #120]	; (8005d20 <__sfp+0x84>)
 8005ca6:	681e      	ldr	r6, [r3, #0]
 8005ca8:	69b3      	ldr	r3, [r6, #24]
 8005caa:	b913      	cbnz	r3, 8005cb2 <__sfp+0x16>
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7ff ffbd 	bl	8005c2c <__sinit>
 8005cb2:	3648      	adds	r6, #72	; 0x48
 8005cb4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	d503      	bpl.n	8005cc4 <__sfp+0x28>
 8005cbc:	6833      	ldr	r3, [r6, #0]
 8005cbe:	b30b      	cbz	r3, 8005d04 <__sfp+0x68>
 8005cc0:	6836      	ldr	r6, [r6, #0]
 8005cc2:	e7f7      	b.n	8005cb4 <__sfp+0x18>
 8005cc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005cc8:	b9d5      	cbnz	r5, 8005d00 <__sfp+0x64>
 8005cca:	4b16      	ldr	r3, [pc, #88]	; (8005d24 <__sfp+0x88>)
 8005ccc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005cd0:	60e3      	str	r3, [r4, #12]
 8005cd2:	6665      	str	r5, [r4, #100]	; 0x64
 8005cd4:	f000 f84c 	bl	8005d70 <__retarget_lock_init_recursive>
 8005cd8:	f7ff ff96 	bl	8005c08 <__sfp_lock_release>
 8005cdc:	2208      	movs	r2, #8
 8005cde:	4629      	mov	r1, r5
 8005ce0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ce4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ce8:	6025      	str	r5, [r4, #0]
 8005cea:	61a5      	str	r5, [r4, #24]
 8005cec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005cf0:	f7fe fc48 	bl	8004584 <memset>
 8005cf4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005cf8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005d00:	3468      	adds	r4, #104	; 0x68
 8005d02:	e7d9      	b.n	8005cb8 <__sfp+0x1c>
 8005d04:	2104      	movs	r1, #4
 8005d06:	4638      	mov	r0, r7
 8005d08:	f7ff ff62 	bl	8005bd0 <__sfmoreglue>
 8005d0c:	4604      	mov	r4, r0
 8005d0e:	6030      	str	r0, [r6, #0]
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d1d5      	bne.n	8005cc0 <__sfp+0x24>
 8005d14:	f7ff ff78 	bl	8005c08 <__sfp_lock_release>
 8005d18:	230c      	movs	r3, #12
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	e7ee      	b.n	8005cfc <__sfp+0x60>
 8005d1e:	bf00      	nop
 8005d20:	0800702c 	.word	0x0800702c
 8005d24:	ffff0001 	.word	0xffff0001

08005d28 <_fwalk_reent>:
 8005d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d2c:	4606      	mov	r6, r0
 8005d2e:	4688      	mov	r8, r1
 8005d30:	2700      	movs	r7, #0
 8005d32:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005d36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d3a:	f1b9 0901 	subs.w	r9, r9, #1
 8005d3e:	d505      	bpl.n	8005d4c <_fwalk_reent+0x24>
 8005d40:	6824      	ldr	r4, [r4, #0]
 8005d42:	2c00      	cmp	r4, #0
 8005d44:	d1f7      	bne.n	8005d36 <_fwalk_reent+0xe>
 8005d46:	4638      	mov	r0, r7
 8005d48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d4c:	89ab      	ldrh	r3, [r5, #12]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d907      	bls.n	8005d62 <_fwalk_reent+0x3a>
 8005d52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d56:	3301      	adds	r3, #1
 8005d58:	d003      	beq.n	8005d62 <_fwalk_reent+0x3a>
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	47c0      	blx	r8
 8005d60:	4307      	orrs	r7, r0
 8005d62:	3568      	adds	r5, #104	; 0x68
 8005d64:	e7e9      	b.n	8005d3a <_fwalk_reent+0x12>
	...

08005d68 <_localeconv_r>:
 8005d68:	4800      	ldr	r0, [pc, #0]	; (8005d6c <_localeconv_r+0x4>)
 8005d6a:	4770      	bx	lr
 8005d6c:	20000160 	.word	0x20000160

08005d70 <__retarget_lock_init_recursive>:
 8005d70:	4770      	bx	lr

08005d72 <__retarget_lock_acquire_recursive>:
 8005d72:	4770      	bx	lr

08005d74 <__retarget_lock_release_recursive>:
 8005d74:	4770      	bx	lr
	...

08005d78 <malloc>:
 8005d78:	4b02      	ldr	r3, [pc, #8]	; (8005d84 <malloc+0xc>)
 8005d7a:	4601      	mov	r1, r0
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	f000 bc1d 	b.w	80065bc <_malloc_r>
 8005d82:	bf00      	nop
 8005d84:	2000000c 	.word	0x2000000c

08005d88 <memchr>:
 8005d88:	4603      	mov	r3, r0
 8005d8a:	b510      	push	{r4, lr}
 8005d8c:	b2c9      	uxtb	r1, r1
 8005d8e:	4402      	add	r2, r0
 8005d90:	4293      	cmp	r3, r2
 8005d92:	4618      	mov	r0, r3
 8005d94:	d101      	bne.n	8005d9a <memchr+0x12>
 8005d96:	2000      	movs	r0, #0
 8005d98:	e003      	b.n	8005da2 <memchr+0x1a>
 8005d9a:	7804      	ldrb	r4, [r0, #0]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	428c      	cmp	r4, r1
 8005da0:	d1f6      	bne.n	8005d90 <memchr+0x8>
 8005da2:	bd10      	pop	{r4, pc}

08005da4 <memcpy>:
 8005da4:	440a      	add	r2, r1
 8005da6:	4291      	cmp	r1, r2
 8005da8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005dac:	d100      	bne.n	8005db0 <memcpy+0xc>
 8005dae:	4770      	bx	lr
 8005db0:	b510      	push	{r4, lr}
 8005db2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005db6:	4291      	cmp	r1, r2
 8005db8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dbc:	d1f9      	bne.n	8005db2 <memcpy+0xe>
 8005dbe:	bd10      	pop	{r4, pc}

08005dc0 <_Balloc>:
 8005dc0:	b570      	push	{r4, r5, r6, lr}
 8005dc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	460d      	mov	r5, r1
 8005dc8:	b976      	cbnz	r6, 8005de8 <_Balloc+0x28>
 8005dca:	2010      	movs	r0, #16
 8005dcc:	f7ff ffd4 	bl	8005d78 <malloc>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	6260      	str	r0, [r4, #36]	; 0x24
 8005dd4:	b920      	cbnz	r0, 8005de0 <_Balloc+0x20>
 8005dd6:	2166      	movs	r1, #102	; 0x66
 8005dd8:	4b17      	ldr	r3, [pc, #92]	; (8005e38 <_Balloc+0x78>)
 8005dda:	4818      	ldr	r0, [pc, #96]	; (8005e3c <_Balloc+0x7c>)
 8005ddc:	f000 fee0 	bl	8006ba0 <__assert_func>
 8005de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005de4:	6006      	str	r6, [r0, #0]
 8005de6:	60c6      	str	r6, [r0, #12]
 8005de8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005dea:	68f3      	ldr	r3, [r6, #12]
 8005dec:	b183      	cbz	r3, 8005e10 <_Balloc+0x50>
 8005dee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005df6:	b9b8      	cbnz	r0, 8005e28 <_Balloc+0x68>
 8005df8:	2101      	movs	r1, #1
 8005dfa:	fa01 f605 	lsl.w	r6, r1, r5
 8005dfe:	1d72      	adds	r2, r6, #5
 8005e00:	4620      	mov	r0, r4
 8005e02:	0092      	lsls	r2, r2, #2
 8005e04:	f000 fb5e 	bl	80064c4 <_calloc_r>
 8005e08:	b160      	cbz	r0, 8005e24 <_Balloc+0x64>
 8005e0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005e0e:	e00e      	b.n	8005e2e <_Balloc+0x6e>
 8005e10:	2221      	movs	r2, #33	; 0x21
 8005e12:	2104      	movs	r1, #4
 8005e14:	4620      	mov	r0, r4
 8005e16:	f000 fb55 	bl	80064c4 <_calloc_r>
 8005e1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e1c:	60f0      	str	r0, [r6, #12]
 8005e1e:	68db      	ldr	r3, [r3, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d1e4      	bne.n	8005dee <_Balloc+0x2e>
 8005e24:	2000      	movs	r0, #0
 8005e26:	bd70      	pop	{r4, r5, r6, pc}
 8005e28:	6802      	ldr	r2, [r0, #0]
 8005e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e34:	e7f7      	b.n	8005e26 <_Balloc+0x66>
 8005e36:	bf00      	nop
 8005e38:	08007071 	.word	0x08007071
 8005e3c:	08007154 	.word	0x08007154

08005e40 <_Bfree>:
 8005e40:	b570      	push	{r4, r5, r6, lr}
 8005e42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005e44:	4605      	mov	r5, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	b976      	cbnz	r6, 8005e68 <_Bfree+0x28>
 8005e4a:	2010      	movs	r0, #16
 8005e4c:	f7ff ff94 	bl	8005d78 <malloc>
 8005e50:	4602      	mov	r2, r0
 8005e52:	6268      	str	r0, [r5, #36]	; 0x24
 8005e54:	b920      	cbnz	r0, 8005e60 <_Bfree+0x20>
 8005e56:	218a      	movs	r1, #138	; 0x8a
 8005e58:	4b08      	ldr	r3, [pc, #32]	; (8005e7c <_Bfree+0x3c>)
 8005e5a:	4809      	ldr	r0, [pc, #36]	; (8005e80 <_Bfree+0x40>)
 8005e5c:	f000 fea0 	bl	8006ba0 <__assert_func>
 8005e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e64:	6006      	str	r6, [r0, #0]
 8005e66:	60c6      	str	r6, [r0, #12]
 8005e68:	b13c      	cbz	r4, 8005e7a <_Bfree+0x3a>
 8005e6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005e6c:	6862      	ldr	r2, [r4, #4]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e74:	6021      	str	r1, [r4, #0]
 8005e76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e7a:	bd70      	pop	{r4, r5, r6, pc}
 8005e7c:	08007071 	.word	0x08007071
 8005e80:	08007154 	.word	0x08007154

08005e84 <__multadd>:
 8005e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e88:	4607      	mov	r7, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	461e      	mov	r6, r3
 8005e8e:	2000      	movs	r0, #0
 8005e90:	690d      	ldr	r5, [r1, #16]
 8005e92:	f101 0c14 	add.w	ip, r1, #20
 8005e96:	f8dc 3000 	ldr.w	r3, [ip]
 8005e9a:	3001      	adds	r0, #1
 8005e9c:	b299      	uxth	r1, r3
 8005e9e:	fb02 6101 	mla	r1, r2, r1, r6
 8005ea2:	0c1e      	lsrs	r6, r3, #16
 8005ea4:	0c0b      	lsrs	r3, r1, #16
 8005ea6:	fb02 3306 	mla	r3, r2, r6, r3
 8005eaa:	b289      	uxth	r1, r1
 8005eac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005eb0:	4285      	cmp	r5, r0
 8005eb2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005eb6:	f84c 1b04 	str.w	r1, [ip], #4
 8005eba:	dcec      	bgt.n	8005e96 <__multadd+0x12>
 8005ebc:	b30e      	cbz	r6, 8005f02 <__multadd+0x7e>
 8005ebe:	68a3      	ldr	r3, [r4, #8]
 8005ec0:	42ab      	cmp	r3, r5
 8005ec2:	dc19      	bgt.n	8005ef8 <__multadd+0x74>
 8005ec4:	6861      	ldr	r1, [r4, #4]
 8005ec6:	4638      	mov	r0, r7
 8005ec8:	3101      	adds	r1, #1
 8005eca:	f7ff ff79 	bl	8005dc0 <_Balloc>
 8005ece:	4680      	mov	r8, r0
 8005ed0:	b928      	cbnz	r0, 8005ede <__multadd+0x5a>
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	21b5      	movs	r1, #181	; 0xb5
 8005ed6:	4b0c      	ldr	r3, [pc, #48]	; (8005f08 <__multadd+0x84>)
 8005ed8:	480c      	ldr	r0, [pc, #48]	; (8005f0c <__multadd+0x88>)
 8005eda:	f000 fe61 	bl	8006ba0 <__assert_func>
 8005ede:	6922      	ldr	r2, [r4, #16]
 8005ee0:	f104 010c 	add.w	r1, r4, #12
 8005ee4:	3202      	adds	r2, #2
 8005ee6:	0092      	lsls	r2, r2, #2
 8005ee8:	300c      	adds	r0, #12
 8005eea:	f7ff ff5b 	bl	8005da4 <memcpy>
 8005eee:	4621      	mov	r1, r4
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	f7ff ffa5 	bl	8005e40 <_Bfree>
 8005ef6:	4644      	mov	r4, r8
 8005ef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005efc:	3501      	adds	r5, #1
 8005efe:	615e      	str	r6, [r3, #20]
 8005f00:	6125      	str	r5, [r4, #16]
 8005f02:	4620      	mov	r0, r4
 8005f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f08:	080070e3 	.word	0x080070e3
 8005f0c:	08007154 	.word	0x08007154

08005f10 <__hi0bits>:
 8005f10:	0c02      	lsrs	r2, r0, #16
 8005f12:	0412      	lsls	r2, r2, #16
 8005f14:	4603      	mov	r3, r0
 8005f16:	b9ca      	cbnz	r2, 8005f4c <__hi0bits+0x3c>
 8005f18:	0403      	lsls	r3, r0, #16
 8005f1a:	2010      	movs	r0, #16
 8005f1c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005f20:	bf04      	itt	eq
 8005f22:	021b      	lsleq	r3, r3, #8
 8005f24:	3008      	addeq	r0, #8
 8005f26:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005f2a:	bf04      	itt	eq
 8005f2c:	011b      	lsleq	r3, r3, #4
 8005f2e:	3004      	addeq	r0, #4
 8005f30:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005f34:	bf04      	itt	eq
 8005f36:	009b      	lsleq	r3, r3, #2
 8005f38:	3002      	addeq	r0, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	db05      	blt.n	8005f4a <__hi0bits+0x3a>
 8005f3e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005f42:	f100 0001 	add.w	r0, r0, #1
 8005f46:	bf08      	it	eq
 8005f48:	2020      	moveq	r0, #32
 8005f4a:	4770      	bx	lr
 8005f4c:	2000      	movs	r0, #0
 8005f4e:	e7e5      	b.n	8005f1c <__hi0bits+0xc>

08005f50 <__lo0bits>:
 8005f50:	6803      	ldr	r3, [r0, #0]
 8005f52:	4602      	mov	r2, r0
 8005f54:	f013 0007 	ands.w	r0, r3, #7
 8005f58:	d00b      	beq.n	8005f72 <__lo0bits+0x22>
 8005f5a:	07d9      	lsls	r1, r3, #31
 8005f5c:	d421      	bmi.n	8005fa2 <__lo0bits+0x52>
 8005f5e:	0798      	lsls	r0, r3, #30
 8005f60:	bf49      	itett	mi
 8005f62:	085b      	lsrmi	r3, r3, #1
 8005f64:	089b      	lsrpl	r3, r3, #2
 8005f66:	2001      	movmi	r0, #1
 8005f68:	6013      	strmi	r3, [r2, #0]
 8005f6a:	bf5c      	itt	pl
 8005f6c:	2002      	movpl	r0, #2
 8005f6e:	6013      	strpl	r3, [r2, #0]
 8005f70:	4770      	bx	lr
 8005f72:	b299      	uxth	r1, r3
 8005f74:	b909      	cbnz	r1, 8005f7a <__lo0bits+0x2a>
 8005f76:	2010      	movs	r0, #16
 8005f78:	0c1b      	lsrs	r3, r3, #16
 8005f7a:	b2d9      	uxtb	r1, r3
 8005f7c:	b909      	cbnz	r1, 8005f82 <__lo0bits+0x32>
 8005f7e:	3008      	adds	r0, #8
 8005f80:	0a1b      	lsrs	r3, r3, #8
 8005f82:	0719      	lsls	r1, r3, #28
 8005f84:	bf04      	itt	eq
 8005f86:	091b      	lsreq	r3, r3, #4
 8005f88:	3004      	addeq	r0, #4
 8005f8a:	0799      	lsls	r1, r3, #30
 8005f8c:	bf04      	itt	eq
 8005f8e:	089b      	lsreq	r3, r3, #2
 8005f90:	3002      	addeq	r0, #2
 8005f92:	07d9      	lsls	r1, r3, #31
 8005f94:	d403      	bmi.n	8005f9e <__lo0bits+0x4e>
 8005f96:	085b      	lsrs	r3, r3, #1
 8005f98:	f100 0001 	add.w	r0, r0, #1
 8005f9c:	d003      	beq.n	8005fa6 <__lo0bits+0x56>
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	4770      	bx	lr
 8005fa2:	2000      	movs	r0, #0
 8005fa4:	4770      	bx	lr
 8005fa6:	2020      	movs	r0, #32
 8005fa8:	4770      	bx	lr
	...

08005fac <__i2b>:
 8005fac:	b510      	push	{r4, lr}
 8005fae:	460c      	mov	r4, r1
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	f7ff ff05 	bl	8005dc0 <_Balloc>
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	b928      	cbnz	r0, 8005fc6 <__i2b+0x1a>
 8005fba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005fbe:	4b04      	ldr	r3, [pc, #16]	; (8005fd0 <__i2b+0x24>)
 8005fc0:	4804      	ldr	r0, [pc, #16]	; (8005fd4 <__i2b+0x28>)
 8005fc2:	f000 fded 	bl	8006ba0 <__assert_func>
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	6144      	str	r4, [r0, #20]
 8005fca:	6103      	str	r3, [r0, #16]
 8005fcc:	bd10      	pop	{r4, pc}
 8005fce:	bf00      	nop
 8005fd0:	080070e3 	.word	0x080070e3
 8005fd4:	08007154 	.word	0x08007154

08005fd8 <__multiply>:
 8005fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fdc:	4691      	mov	r9, r2
 8005fde:	690a      	ldr	r2, [r1, #16]
 8005fe0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005fe4:	460c      	mov	r4, r1
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	bfbe      	ittt	lt
 8005fea:	460b      	movlt	r3, r1
 8005fec:	464c      	movlt	r4, r9
 8005fee:	4699      	movlt	r9, r3
 8005ff0:	6927      	ldr	r7, [r4, #16]
 8005ff2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005ff6:	68a3      	ldr	r3, [r4, #8]
 8005ff8:	6861      	ldr	r1, [r4, #4]
 8005ffa:	eb07 060a 	add.w	r6, r7, sl
 8005ffe:	42b3      	cmp	r3, r6
 8006000:	b085      	sub	sp, #20
 8006002:	bfb8      	it	lt
 8006004:	3101      	addlt	r1, #1
 8006006:	f7ff fedb 	bl	8005dc0 <_Balloc>
 800600a:	b930      	cbnz	r0, 800601a <__multiply+0x42>
 800600c:	4602      	mov	r2, r0
 800600e:	f240 115d 	movw	r1, #349	; 0x15d
 8006012:	4b43      	ldr	r3, [pc, #268]	; (8006120 <__multiply+0x148>)
 8006014:	4843      	ldr	r0, [pc, #268]	; (8006124 <__multiply+0x14c>)
 8006016:	f000 fdc3 	bl	8006ba0 <__assert_func>
 800601a:	f100 0514 	add.w	r5, r0, #20
 800601e:	462b      	mov	r3, r5
 8006020:	2200      	movs	r2, #0
 8006022:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006026:	4543      	cmp	r3, r8
 8006028:	d321      	bcc.n	800606e <__multiply+0x96>
 800602a:	f104 0314 	add.w	r3, r4, #20
 800602e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006032:	f109 0314 	add.w	r3, r9, #20
 8006036:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800603a:	9202      	str	r2, [sp, #8]
 800603c:	1b3a      	subs	r2, r7, r4
 800603e:	3a15      	subs	r2, #21
 8006040:	f022 0203 	bic.w	r2, r2, #3
 8006044:	3204      	adds	r2, #4
 8006046:	f104 0115 	add.w	r1, r4, #21
 800604a:	428f      	cmp	r7, r1
 800604c:	bf38      	it	cc
 800604e:	2204      	movcc	r2, #4
 8006050:	9201      	str	r2, [sp, #4]
 8006052:	9a02      	ldr	r2, [sp, #8]
 8006054:	9303      	str	r3, [sp, #12]
 8006056:	429a      	cmp	r2, r3
 8006058:	d80c      	bhi.n	8006074 <__multiply+0x9c>
 800605a:	2e00      	cmp	r6, #0
 800605c:	dd03      	ble.n	8006066 <__multiply+0x8e>
 800605e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006062:	2b00      	cmp	r3, #0
 8006064:	d059      	beq.n	800611a <__multiply+0x142>
 8006066:	6106      	str	r6, [r0, #16]
 8006068:	b005      	add	sp, #20
 800606a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800606e:	f843 2b04 	str.w	r2, [r3], #4
 8006072:	e7d8      	b.n	8006026 <__multiply+0x4e>
 8006074:	f8b3 a000 	ldrh.w	sl, [r3]
 8006078:	f1ba 0f00 	cmp.w	sl, #0
 800607c:	d023      	beq.n	80060c6 <__multiply+0xee>
 800607e:	46a9      	mov	r9, r5
 8006080:	f04f 0c00 	mov.w	ip, #0
 8006084:	f104 0e14 	add.w	lr, r4, #20
 8006088:	f85e 2b04 	ldr.w	r2, [lr], #4
 800608c:	f8d9 1000 	ldr.w	r1, [r9]
 8006090:	fa1f fb82 	uxth.w	fp, r2
 8006094:	b289      	uxth	r1, r1
 8006096:	fb0a 110b 	mla	r1, sl, fp, r1
 800609a:	4461      	add	r1, ip
 800609c:	f8d9 c000 	ldr.w	ip, [r9]
 80060a0:	0c12      	lsrs	r2, r2, #16
 80060a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80060a6:	fb0a c202 	mla	r2, sl, r2, ip
 80060aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80060ae:	b289      	uxth	r1, r1
 80060b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80060b4:	4577      	cmp	r7, lr
 80060b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80060ba:	f849 1b04 	str.w	r1, [r9], #4
 80060be:	d8e3      	bhi.n	8006088 <__multiply+0xb0>
 80060c0:	9a01      	ldr	r2, [sp, #4]
 80060c2:	f845 c002 	str.w	ip, [r5, r2]
 80060c6:	9a03      	ldr	r2, [sp, #12]
 80060c8:	3304      	adds	r3, #4
 80060ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80060ce:	f1b9 0f00 	cmp.w	r9, #0
 80060d2:	d020      	beq.n	8006116 <__multiply+0x13e>
 80060d4:	46ae      	mov	lr, r5
 80060d6:	f04f 0a00 	mov.w	sl, #0
 80060da:	6829      	ldr	r1, [r5, #0]
 80060dc:	f104 0c14 	add.w	ip, r4, #20
 80060e0:	f8bc b000 	ldrh.w	fp, [ip]
 80060e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80060e8:	b289      	uxth	r1, r1
 80060ea:	fb09 220b 	mla	r2, r9, fp, r2
 80060ee:	4492      	add	sl, r2
 80060f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80060f4:	f84e 1b04 	str.w	r1, [lr], #4
 80060f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80060fc:	f8be 1000 	ldrh.w	r1, [lr]
 8006100:	0c12      	lsrs	r2, r2, #16
 8006102:	fb09 1102 	mla	r1, r9, r2, r1
 8006106:	4567      	cmp	r7, ip
 8006108:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800610c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006110:	d8e6      	bhi.n	80060e0 <__multiply+0x108>
 8006112:	9a01      	ldr	r2, [sp, #4]
 8006114:	50a9      	str	r1, [r5, r2]
 8006116:	3504      	adds	r5, #4
 8006118:	e79b      	b.n	8006052 <__multiply+0x7a>
 800611a:	3e01      	subs	r6, #1
 800611c:	e79d      	b.n	800605a <__multiply+0x82>
 800611e:	bf00      	nop
 8006120:	080070e3 	.word	0x080070e3
 8006124:	08007154 	.word	0x08007154

08006128 <__pow5mult>:
 8006128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800612c:	4615      	mov	r5, r2
 800612e:	f012 0203 	ands.w	r2, r2, #3
 8006132:	4606      	mov	r6, r0
 8006134:	460f      	mov	r7, r1
 8006136:	d007      	beq.n	8006148 <__pow5mult+0x20>
 8006138:	4c25      	ldr	r4, [pc, #148]	; (80061d0 <__pow5mult+0xa8>)
 800613a:	3a01      	subs	r2, #1
 800613c:	2300      	movs	r3, #0
 800613e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006142:	f7ff fe9f 	bl	8005e84 <__multadd>
 8006146:	4607      	mov	r7, r0
 8006148:	10ad      	asrs	r5, r5, #2
 800614a:	d03d      	beq.n	80061c8 <__pow5mult+0xa0>
 800614c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800614e:	b97c      	cbnz	r4, 8006170 <__pow5mult+0x48>
 8006150:	2010      	movs	r0, #16
 8006152:	f7ff fe11 	bl	8005d78 <malloc>
 8006156:	4602      	mov	r2, r0
 8006158:	6270      	str	r0, [r6, #36]	; 0x24
 800615a:	b928      	cbnz	r0, 8006168 <__pow5mult+0x40>
 800615c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006160:	4b1c      	ldr	r3, [pc, #112]	; (80061d4 <__pow5mult+0xac>)
 8006162:	481d      	ldr	r0, [pc, #116]	; (80061d8 <__pow5mult+0xb0>)
 8006164:	f000 fd1c 	bl	8006ba0 <__assert_func>
 8006168:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800616c:	6004      	str	r4, [r0, #0]
 800616e:	60c4      	str	r4, [r0, #12]
 8006170:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006178:	b94c      	cbnz	r4, 800618e <__pow5mult+0x66>
 800617a:	f240 2171 	movw	r1, #625	; 0x271
 800617e:	4630      	mov	r0, r6
 8006180:	f7ff ff14 	bl	8005fac <__i2b>
 8006184:	2300      	movs	r3, #0
 8006186:	4604      	mov	r4, r0
 8006188:	f8c8 0008 	str.w	r0, [r8, #8]
 800618c:	6003      	str	r3, [r0, #0]
 800618e:	f04f 0900 	mov.w	r9, #0
 8006192:	07eb      	lsls	r3, r5, #31
 8006194:	d50a      	bpl.n	80061ac <__pow5mult+0x84>
 8006196:	4639      	mov	r1, r7
 8006198:	4622      	mov	r2, r4
 800619a:	4630      	mov	r0, r6
 800619c:	f7ff ff1c 	bl	8005fd8 <__multiply>
 80061a0:	4680      	mov	r8, r0
 80061a2:	4639      	mov	r1, r7
 80061a4:	4630      	mov	r0, r6
 80061a6:	f7ff fe4b 	bl	8005e40 <_Bfree>
 80061aa:	4647      	mov	r7, r8
 80061ac:	106d      	asrs	r5, r5, #1
 80061ae:	d00b      	beq.n	80061c8 <__pow5mult+0xa0>
 80061b0:	6820      	ldr	r0, [r4, #0]
 80061b2:	b938      	cbnz	r0, 80061c4 <__pow5mult+0x9c>
 80061b4:	4622      	mov	r2, r4
 80061b6:	4621      	mov	r1, r4
 80061b8:	4630      	mov	r0, r6
 80061ba:	f7ff ff0d 	bl	8005fd8 <__multiply>
 80061be:	6020      	str	r0, [r4, #0]
 80061c0:	f8c0 9000 	str.w	r9, [r0]
 80061c4:	4604      	mov	r4, r0
 80061c6:	e7e4      	b.n	8006192 <__pow5mult+0x6a>
 80061c8:	4638      	mov	r0, r7
 80061ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061ce:	bf00      	nop
 80061d0:	080072a0 	.word	0x080072a0
 80061d4:	08007071 	.word	0x08007071
 80061d8:	08007154 	.word	0x08007154

080061dc <__lshift>:
 80061dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061e0:	460c      	mov	r4, r1
 80061e2:	4607      	mov	r7, r0
 80061e4:	4691      	mov	r9, r2
 80061e6:	6923      	ldr	r3, [r4, #16]
 80061e8:	6849      	ldr	r1, [r1, #4]
 80061ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80061ee:	68a3      	ldr	r3, [r4, #8]
 80061f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80061f4:	f108 0601 	add.w	r6, r8, #1
 80061f8:	42b3      	cmp	r3, r6
 80061fa:	db0b      	blt.n	8006214 <__lshift+0x38>
 80061fc:	4638      	mov	r0, r7
 80061fe:	f7ff fddf 	bl	8005dc0 <_Balloc>
 8006202:	4605      	mov	r5, r0
 8006204:	b948      	cbnz	r0, 800621a <__lshift+0x3e>
 8006206:	4602      	mov	r2, r0
 8006208:	f240 11d9 	movw	r1, #473	; 0x1d9
 800620c:	4b29      	ldr	r3, [pc, #164]	; (80062b4 <__lshift+0xd8>)
 800620e:	482a      	ldr	r0, [pc, #168]	; (80062b8 <__lshift+0xdc>)
 8006210:	f000 fcc6 	bl	8006ba0 <__assert_func>
 8006214:	3101      	adds	r1, #1
 8006216:	005b      	lsls	r3, r3, #1
 8006218:	e7ee      	b.n	80061f8 <__lshift+0x1c>
 800621a:	2300      	movs	r3, #0
 800621c:	f100 0114 	add.w	r1, r0, #20
 8006220:	f100 0210 	add.w	r2, r0, #16
 8006224:	4618      	mov	r0, r3
 8006226:	4553      	cmp	r3, sl
 8006228:	db37      	blt.n	800629a <__lshift+0xbe>
 800622a:	6920      	ldr	r0, [r4, #16]
 800622c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006230:	f104 0314 	add.w	r3, r4, #20
 8006234:	f019 091f 	ands.w	r9, r9, #31
 8006238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800623c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006240:	d02f      	beq.n	80062a2 <__lshift+0xc6>
 8006242:	468a      	mov	sl, r1
 8006244:	f04f 0c00 	mov.w	ip, #0
 8006248:	f1c9 0e20 	rsb	lr, r9, #32
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	fa02 f209 	lsl.w	r2, r2, r9
 8006252:	ea42 020c 	orr.w	r2, r2, ip
 8006256:	f84a 2b04 	str.w	r2, [sl], #4
 800625a:	f853 2b04 	ldr.w	r2, [r3], #4
 800625e:	4298      	cmp	r0, r3
 8006260:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006264:	d8f2      	bhi.n	800624c <__lshift+0x70>
 8006266:	1b03      	subs	r3, r0, r4
 8006268:	3b15      	subs	r3, #21
 800626a:	f023 0303 	bic.w	r3, r3, #3
 800626e:	3304      	adds	r3, #4
 8006270:	f104 0215 	add.w	r2, r4, #21
 8006274:	4290      	cmp	r0, r2
 8006276:	bf38      	it	cc
 8006278:	2304      	movcc	r3, #4
 800627a:	f841 c003 	str.w	ip, [r1, r3]
 800627e:	f1bc 0f00 	cmp.w	ip, #0
 8006282:	d001      	beq.n	8006288 <__lshift+0xac>
 8006284:	f108 0602 	add.w	r6, r8, #2
 8006288:	3e01      	subs	r6, #1
 800628a:	4638      	mov	r0, r7
 800628c:	4621      	mov	r1, r4
 800628e:	612e      	str	r6, [r5, #16]
 8006290:	f7ff fdd6 	bl	8005e40 <_Bfree>
 8006294:	4628      	mov	r0, r5
 8006296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800629a:	f842 0f04 	str.w	r0, [r2, #4]!
 800629e:	3301      	adds	r3, #1
 80062a0:	e7c1      	b.n	8006226 <__lshift+0x4a>
 80062a2:	3904      	subs	r1, #4
 80062a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80062a8:	4298      	cmp	r0, r3
 80062aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80062ae:	d8f9      	bhi.n	80062a4 <__lshift+0xc8>
 80062b0:	e7ea      	b.n	8006288 <__lshift+0xac>
 80062b2:	bf00      	nop
 80062b4:	080070e3 	.word	0x080070e3
 80062b8:	08007154 	.word	0x08007154

080062bc <__mcmp>:
 80062bc:	4603      	mov	r3, r0
 80062be:	690a      	ldr	r2, [r1, #16]
 80062c0:	6900      	ldr	r0, [r0, #16]
 80062c2:	b530      	push	{r4, r5, lr}
 80062c4:	1a80      	subs	r0, r0, r2
 80062c6:	d10d      	bne.n	80062e4 <__mcmp+0x28>
 80062c8:	3314      	adds	r3, #20
 80062ca:	3114      	adds	r1, #20
 80062cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80062d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80062d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80062d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80062dc:	4295      	cmp	r5, r2
 80062de:	d002      	beq.n	80062e6 <__mcmp+0x2a>
 80062e0:	d304      	bcc.n	80062ec <__mcmp+0x30>
 80062e2:	2001      	movs	r0, #1
 80062e4:	bd30      	pop	{r4, r5, pc}
 80062e6:	42a3      	cmp	r3, r4
 80062e8:	d3f4      	bcc.n	80062d4 <__mcmp+0x18>
 80062ea:	e7fb      	b.n	80062e4 <__mcmp+0x28>
 80062ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80062f0:	e7f8      	b.n	80062e4 <__mcmp+0x28>
	...

080062f4 <__mdiff>:
 80062f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f8:	460d      	mov	r5, r1
 80062fa:	4607      	mov	r7, r0
 80062fc:	4611      	mov	r1, r2
 80062fe:	4628      	mov	r0, r5
 8006300:	4614      	mov	r4, r2
 8006302:	f7ff ffdb 	bl	80062bc <__mcmp>
 8006306:	1e06      	subs	r6, r0, #0
 8006308:	d111      	bne.n	800632e <__mdiff+0x3a>
 800630a:	4631      	mov	r1, r6
 800630c:	4638      	mov	r0, r7
 800630e:	f7ff fd57 	bl	8005dc0 <_Balloc>
 8006312:	4602      	mov	r2, r0
 8006314:	b928      	cbnz	r0, 8006322 <__mdiff+0x2e>
 8006316:	f240 2132 	movw	r1, #562	; 0x232
 800631a:	4b3a      	ldr	r3, [pc, #232]	; (8006404 <__mdiff+0x110>)
 800631c:	483a      	ldr	r0, [pc, #232]	; (8006408 <__mdiff+0x114>)
 800631e:	f000 fc3f 	bl	8006ba0 <__assert_func>
 8006322:	2301      	movs	r3, #1
 8006324:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006328:	4610      	mov	r0, r2
 800632a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632e:	bfa4      	itt	ge
 8006330:	4623      	movge	r3, r4
 8006332:	462c      	movge	r4, r5
 8006334:	4638      	mov	r0, r7
 8006336:	6861      	ldr	r1, [r4, #4]
 8006338:	bfa6      	itte	ge
 800633a:	461d      	movge	r5, r3
 800633c:	2600      	movge	r6, #0
 800633e:	2601      	movlt	r6, #1
 8006340:	f7ff fd3e 	bl	8005dc0 <_Balloc>
 8006344:	4602      	mov	r2, r0
 8006346:	b918      	cbnz	r0, 8006350 <__mdiff+0x5c>
 8006348:	f44f 7110 	mov.w	r1, #576	; 0x240
 800634c:	4b2d      	ldr	r3, [pc, #180]	; (8006404 <__mdiff+0x110>)
 800634e:	e7e5      	b.n	800631c <__mdiff+0x28>
 8006350:	f102 0814 	add.w	r8, r2, #20
 8006354:	46c2      	mov	sl, r8
 8006356:	f04f 0c00 	mov.w	ip, #0
 800635a:	6927      	ldr	r7, [r4, #16]
 800635c:	60c6      	str	r6, [r0, #12]
 800635e:	692e      	ldr	r6, [r5, #16]
 8006360:	f104 0014 	add.w	r0, r4, #20
 8006364:	f105 0914 	add.w	r9, r5, #20
 8006368:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800636c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006370:	3410      	adds	r4, #16
 8006372:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006376:	f859 3b04 	ldr.w	r3, [r9], #4
 800637a:	fa1f f18b 	uxth.w	r1, fp
 800637e:	448c      	add	ip, r1
 8006380:	b299      	uxth	r1, r3
 8006382:	0c1b      	lsrs	r3, r3, #16
 8006384:	ebac 0101 	sub.w	r1, ip, r1
 8006388:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800638c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006390:	b289      	uxth	r1, r1
 8006392:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006396:	454e      	cmp	r6, r9
 8006398:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800639c:	f84a 3b04 	str.w	r3, [sl], #4
 80063a0:	d8e7      	bhi.n	8006372 <__mdiff+0x7e>
 80063a2:	1b73      	subs	r3, r6, r5
 80063a4:	3b15      	subs	r3, #21
 80063a6:	f023 0303 	bic.w	r3, r3, #3
 80063aa:	3515      	adds	r5, #21
 80063ac:	3304      	adds	r3, #4
 80063ae:	42ae      	cmp	r6, r5
 80063b0:	bf38      	it	cc
 80063b2:	2304      	movcc	r3, #4
 80063b4:	4418      	add	r0, r3
 80063b6:	4443      	add	r3, r8
 80063b8:	461e      	mov	r6, r3
 80063ba:	4605      	mov	r5, r0
 80063bc:	4575      	cmp	r5, lr
 80063be:	d30e      	bcc.n	80063de <__mdiff+0xea>
 80063c0:	f10e 0103 	add.w	r1, lr, #3
 80063c4:	1a09      	subs	r1, r1, r0
 80063c6:	f021 0103 	bic.w	r1, r1, #3
 80063ca:	3803      	subs	r0, #3
 80063cc:	4586      	cmp	lr, r0
 80063ce:	bf38      	it	cc
 80063d0:	2100      	movcc	r1, #0
 80063d2:	4419      	add	r1, r3
 80063d4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80063d8:	b18b      	cbz	r3, 80063fe <__mdiff+0x10a>
 80063da:	6117      	str	r7, [r2, #16]
 80063dc:	e7a4      	b.n	8006328 <__mdiff+0x34>
 80063de:	f855 8b04 	ldr.w	r8, [r5], #4
 80063e2:	fa1f f188 	uxth.w	r1, r8
 80063e6:	4461      	add	r1, ip
 80063e8:	140c      	asrs	r4, r1, #16
 80063ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80063ee:	b289      	uxth	r1, r1
 80063f0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80063f4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80063f8:	f846 1b04 	str.w	r1, [r6], #4
 80063fc:	e7de      	b.n	80063bc <__mdiff+0xc8>
 80063fe:	3f01      	subs	r7, #1
 8006400:	e7e8      	b.n	80063d4 <__mdiff+0xe0>
 8006402:	bf00      	nop
 8006404:	080070e3 	.word	0x080070e3
 8006408:	08007154 	.word	0x08007154

0800640c <__d2b>:
 800640c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006410:	2101      	movs	r1, #1
 8006412:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006416:	4690      	mov	r8, r2
 8006418:	461d      	mov	r5, r3
 800641a:	f7ff fcd1 	bl	8005dc0 <_Balloc>
 800641e:	4604      	mov	r4, r0
 8006420:	b930      	cbnz	r0, 8006430 <__d2b+0x24>
 8006422:	4602      	mov	r2, r0
 8006424:	f240 310a 	movw	r1, #778	; 0x30a
 8006428:	4b24      	ldr	r3, [pc, #144]	; (80064bc <__d2b+0xb0>)
 800642a:	4825      	ldr	r0, [pc, #148]	; (80064c0 <__d2b+0xb4>)
 800642c:	f000 fbb8 	bl	8006ba0 <__assert_func>
 8006430:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006434:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006438:	bb2d      	cbnz	r5, 8006486 <__d2b+0x7a>
 800643a:	9301      	str	r3, [sp, #4]
 800643c:	f1b8 0300 	subs.w	r3, r8, #0
 8006440:	d026      	beq.n	8006490 <__d2b+0x84>
 8006442:	4668      	mov	r0, sp
 8006444:	9300      	str	r3, [sp, #0]
 8006446:	f7ff fd83 	bl	8005f50 <__lo0bits>
 800644a:	9900      	ldr	r1, [sp, #0]
 800644c:	b1f0      	cbz	r0, 800648c <__d2b+0x80>
 800644e:	9a01      	ldr	r2, [sp, #4]
 8006450:	f1c0 0320 	rsb	r3, r0, #32
 8006454:	fa02 f303 	lsl.w	r3, r2, r3
 8006458:	430b      	orrs	r3, r1
 800645a:	40c2      	lsrs	r2, r0
 800645c:	6163      	str	r3, [r4, #20]
 800645e:	9201      	str	r2, [sp, #4]
 8006460:	9b01      	ldr	r3, [sp, #4]
 8006462:	2b00      	cmp	r3, #0
 8006464:	bf14      	ite	ne
 8006466:	2102      	movne	r1, #2
 8006468:	2101      	moveq	r1, #1
 800646a:	61a3      	str	r3, [r4, #24]
 800646c:	6121      	str	r1, [r4, #16]
 800646e:	b1c5      	cbz	r5, 80064a2 <__d2b+0x96>
 8006470:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006474:	4405      	add	r5, r0
 8006476:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800647a:	603d      	str	r5, [r7, #0]
 800647c:	6030      	str	r0, [r6, #0]
 800647e:	4620      	mov	r0, r4
 8006480:	b002      	add	sp, #8
 8006482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800648a:	e7d6      	b.n	800643a <__d2b+0x2e>
 800648c:	6161      	str	r1, [r4, #20]
 800648e:	e7e7      	b.n	8006460 <__d2b+0x54>
 8006490:	a801      	add	r0, sp, #4
 8006492:	f7ff fd5d 	bl	8005f50 <__lo0bits>
 8006496:	2101      	movs	r1, #1
 8006498:	9b01      	ldr	r3, [sp, #4]
 800649a:	6121      	str	r1, [r4, #16]
 800649c:	6163      	str	r3, [r4, #20]
 800649e:	3020      	adds	r0, #32
 80064a0:	e7e5      	b.n	800646e <__d2b+0x62>
 80064a2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80064a6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80064aa:	6038      	str	r0, [r7, #0]
 80064ac:	6918      	ldr	r0, [r3, #16]
 80064ae:	f7ff fd2f 	bl	8005f10 <__hi0bits>
 80064b2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80064b6:	6031      	str	r1, [r6, #0]
 80064b8:	e7e1      	b.n	800647e <__d2b+0x72>
 80064ba:	bf00      	nop
 80064bc:	080070e3 	.word	0x080070e3
 80064c0:	08007154 	.word	0x08007154

080064c4 <_calloc_r>:
 80064c4:	b570      	push	{r4, r5, r6, lr}
 80064c6:	fba1 5402 	umull	r5, r4, r1, r2
 80064ca:	b934      	cbnz	r4, 80064da <_calloc_r+0x16>
 80064cc:	4629      	mov	r1, r5
 80064ce:	f000 f875 	bl	80065bc <_malloc_r>
 80064d2:	4606      	mov	r6, r0
 80064d4:	b928      	cbnz	r0, 80064e2 <_calloc_r+0x1e>
 80064d6:	4630      	mov	r0, r6
 80064d8:	bd70      	pop	{r4, r5, r6, pc}
 80064da:	220c      	movs	r2, #12
 80064dc:	2600      	movs	r6, #0
 80064de:	6002      	str	r2, [r0, #0]
 80064e0:	e7f9      	b.n	80064d6 <_calloc_r+0x12>
 80064e2:	462a      	mov	r2, r5
 80064e4:	4621      	mov	r1, r4
 80064e6:	f7fe f84d 	bl	8004584 <memset>
 80064ea:	e7f4      	b.n	80064d6 <_calloc_r+0x12>

080064ec <_free_r>:
 80064ec:	b538      	push	{r3, r4, r5, lr}
 80064ee:	4605      	mov	r5, r0
 80064f0:	2900      	cmp	r1, #0
 80064f2:	d040      	beq.n	8006576 <_free_r+0x8a>
 80064f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064f8:	1f0c      	subs	r4, r1, #4
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	bfb8      	it	lt
 80064fe:	18e4      	addlt	r4, r4, r3
 8006500:	f000 fcd6 	bl	8006eb0 <__malloc_lock>
 8006504:	4a1c      	ldr	r2, [pc, #112]	; (8006578 <_free_r+0x8c>)
 8006506:	6813      	ldr	r3, [r2, #0]
 8006508:	b933      	cbnz	r3, 8006518 <_free_r+0x2c>
 800650a:	6063      	str	r3, [r4, #4]
 800650c:	6014      	str	r4, [r2, #0]
 800650e:	4628      	mov	r0, r5
 8006510:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006514:	f000 bcd2 	b.w	8006ebc <__malloc_unlock>
 8006518:	42a3      	cmp	r3, r4
 800651a:	d908      	bls.n	800652e <_free_r+0x42>
 800651c:	6820      	ldr	r0, [r4, #0]
 800651e:	1821      	adds	r1, r4, r0
 8006520:	428b      	cmp	r3, r1
 8006522:	bf01      	itttt	eq
 8006524:	6819      	ldreq	r1, [r3, #0]
 8006526:	685b      	ldreq	r3, [r3, #4]
 8006528:	1809      	addeq	r1, r1, r0
 800652a:	6021      	streq	r1, [r4, #0]
 800652c:	e7ed      	b.n	800650a <_free_r+0x1e>
 800652e:	461a      	mov	r2, r3
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	b10b      	cbz	r3, 8006538 <_free_r+0x4c>
 8006534:	42a3      	cmp	r3, r4
 8006536:	d9fa      	bls.n	800652e <_free_r+0x42>
 8006538:	6811      	ldr	r1, [r2, #0]
 800653a:	1850      	adds	r0, r2, r1
 800653c:	42a0      	cmp	r0, r4
 800653e:	d10b      	bne.n	8006558 <_free_r+0x6c>
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	4401      	add	r1, r0
 8006544:	1850      	adds	r0, r2, r1
 8006546:	4283      	cmp	r3, r0
 8006548:	6011      	str	r1, [r2, #0]
 800654a:	d1e0      	bne.n	800650e <_free_r+0x22>
 800654c:	6818      	ldr	r0, [r3, #0]
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	4401      	add	r1, r0
 8006552:	6011      	str	r1, [r2, #0]
 8006554:	6053      	str	r3, [r2, #4]
 8006556:	e7da      	b.n	800650e <_free_r+0x22>
 8006558:	d902      	bls.n	8006560 <_free_r+0x74>
 800655a:	230c      	movs	r3, #12
 800655c:	602b      	str	r3, [r5, #0]
 800655e:	e7d6      	b.n	800650e <_free_r+0x22>
 8006560:	6820      	ldr	r0, [r4, #0]
 8006562:	1821      	adds	r1, r4, r0
 8006564:	428b      	cmp	r3, r1
 8006566:	bf01      	itttt	eq
 8006568:	6819      	ldreq	r1, [r3, #0]
 800656a:	685b      	ldreq	r3, [r3, #4]
 800656c:	1809      	addeq	r1, r1, r0
 800656e:	6021      	streq	r1, [r4, #0]
 8006570:	6063      	str	r3, [r4, #4]
 8006572:	6054      	str	r4, [r2, #4]
 8006574:	e7cb      	b.n	800650e <_free_r+0x22>
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20000398 	.word	0x20000398

0800657c <sbrk_aligned>:
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	4e0e      	ldr	r6, [pc, #56]	; (80065b8 <sbrk_aligned+0x3c>)
 8006580:	460c      	mov	r4, r1
 8006582:	6831      	ldr	r1, [r6, #0]
 8006584:	4605      	mov	r5, r0
 8006586:	b911      	cbnz	r1, 800658e <sbrk_aligned+0x12>
 8006588:	f000 f9e4 	bl	8006954 <_sbrk_r>
 800658c:	6030      	str	r0, [r6, #0]
 800658e:	4621      	mov	r1, r4
 8006590:	4628      	mov	r0, r5
 8006592:	f000 f9df 	bl	8006954 <_sbrk_r>
 8006596:	1c43      	adds	r3, r0, #1
 8006598:	d00a      	beq.n	80065b0 <sbrk_aligned+0x34>
 800659a:	1cc4      	adds	r4, r0, #3
 800659c:	f024 0403 	bic.w	r4, r4, #3
 80065a0:	42a0      	cmp	r0, r4
 80065a2:	d007      	beq.n	80065b4 <sbrk_aligned+0x38>
 80065a4:	1a21      	subs	r1, r4, r0
 80065a6:	4628      	mov	r0, r5
 80065a8:	f000 f9d4 	bl	8006954 <_sbrk_r>
 80065ac:	3001      	adds	r0, #1
 80065ae:	d101      	bne.n	80065b4 <sbrk_aligned+0x38>
 80065b0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80065b4:	4620      	mov	r0, r4
 80065b6:	bd70      	pop	{r4, r5, r6, pc}
 80065b8:	2000039c 	.word	0x2000039c

080065bc <_malloc_r>:
 80065bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065c0:	1ccd      	adds	r5, r1, #3
 80065c2:	f025 0503 	bic.w	r5, r5, #3
 80065c6:	3508      	adds	r5, #8
 80065c8:	2d0c      	cmp	r5, #12
 80065ca:	bf38      	it	cc
 80065cc:	250c      	movcc	r5, #12
 80065ce:	2d00      	cmp	r5, #0
 80065d0:	4607      	mov	r7, r0
 80065d2:	db01      	blt.n	80065d8 <_malloc_r+0x1c>
 80065d4:	42a9      	cmp	r1, r5
 80065d6:	d905      	bls.n	80065e4 <_malloc_r+0x28>
 80065d8:	230c      	movs	r3, #12
 80065da:	2600      	movs	r6, #0
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	4630      	mov	r0, r6
 80065e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065e4:	4e2e      	ldr	r6, [pc, #184]	; (80066a0 <_malloc_r+0xe4>)
 80065e6:	f000 fc63 	bl	8006eb0 <__malloc_lock>
 80065ea:	6833      	ldr	r3, [r6, #0]
 80065ec:	461c      	mov	r4, r3
 80065ee:	bb34      	cbnz	r4, 800663e <_malloc_r+0x82>
 80065f0:	4629      	mov	r1, r5
 80065f2:	4638      	mov	r0, r7
 80065f4:	f7ff ffc2 	bl	800657c <sbrk_aligned>
 80065f8:	1c43      	adds	r3, r0, #1
 80065fa:	4604      	mov	r4, r0
 80065fc:	d14d      	bne.n	800669a <_malloc_r+0xde>
 80065fe:	6834      	ldr	r4, [r6, #0]
 8006600:	4626      	mov	r6, r4
 8006602:	2e00      	cmp	r6, #0
 8006604:	d140      	bne.n	8006688 <_malloc_r+0xcc>
 8006606:	6823      	ldr	r3, [r4, #0]
 8006608:	4631      	mov	r1, r6
 800660a:	4638      	mov	r0, r7
 800660c:	eb04 0803 	add.w	r8, r4, r3
 8006610:	f000 f9a0 	bl	8006954 <_sbrk_r>
 8006614:	4580      	cmp	r8, r0
 8006616:	d13a      	bne.n	800668e <_malloc_r+0xd2>
 8006618:	6821      	ldr	r1, [r4, #0]
 800661a:	3503      	adds	r5, #3
 800661c:	1a6d      	subs	r5, r5, r1
 800661e:	f025 0503 	bic.w	r5, r5, #3
 8006622:	3508      	adds	r5, #8
 8006624:	2d0c      	cmp	r5, #12
 8006626:	bf38      	it	cc
 8006628:	250c      	movcc	r5, #12
 800662a:	4638      	mov	r0, r7
 800662c:	4629      	mov	r1, r5
 800662e:	f7ff ffa5 	bl	800657c <sbrk_aligned>
 8006632:	3001      	adds	r0, #1
 8006634:	d02b      	beq.n	800668e <_malloc_r+0xd2>
 8006636:	6823      	ldr	r3, [r4, #0]
 8006638:	442b      	add	r3, r5
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	e00e      	b.n	800665c <_malloc_r+0xa0>
 800663e:	6822      	ldr	r2, [r4, #0]
 8006640:	1b52      	subs	r2, r2, r5
 8006642:	d41e      	bmi.n	8006682 <_malloc_r+0xc6>
 8006644:	2a0b      	cmp	r2, #11
 8006646:	d916      	bls.n	8006676 <_malloc_r+0xba>
 8006648:	1961      	adds	r1, r4, r5
 800664a:	42a3      	cmp	r3, r4
 800664c:	6025      	str	r5, [r4, #0]
 800664e:	bf18      	it	ne
 8006650:	6059      	strne	r1, [r3, #4]
 8006652:	6863      	ldr	r3, [r4, #4]
 8006654:	bf08      	it	eq
 8006656:	6031      	streq	r1, [r6, #0]
 8006658:	5162      	str	r2, [r4, r5]
 800665a:	604b      	str	r3, [r1, #4]
 800665c:	4638      	mov	r0, r7
 800665e:	f104 060b 	add.w	r6, r4, #11
 8006662:	f000 fc2b 	bl	8006ebc <__malloc_unlock>
 8006666:	f026 0607 	bic.w	r6, r6, #7
 800666a:	1d23      	adds	r3, r4, #4
 800666c:	1af2      	subs	r2, r6, r3
 800666e:	d0b6      	beq.n	80065de <_malloc_r+0x22>
 8006670:	1b9b      	subs	r3, r3, r6
 8006672:	50a3      	str	r3, [r4, r2]
 8006674:	e7b3      	b.n	80065de <_malloc_r+0x22>
 8006676:	6862      	ldr	r2, [r4, #4]
 8006678:	42a3      	cmp	r3, r4
 800667a:	bf0c      	ite	eq
 800667c:	6032      	streq	r2, [r6, #0]
 800667e:	605a      	strne	r2, [r3, #4]
 8006680:	e7ec      	b.n	800665c <_malloc_r+0xa0>
 8006682:	4623      	mov	r3, r4
 8006684:	6864      	ldr	r4, [r4, #4]
 8006686:	e7b2      	b.n	80065ee <_malloc_r+0x32>
 8006688:	4634      	mov	r4, r6
 800668a:	6876      	ldr	r6, [r6, #4]
 800668c:	e7b9      	b.n	8006602 <_malloc_r+0x46>
 800668e:	230c      	movs	r3, #12
 8006690:	4638      	mov	r0, r7
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	f000 fc12 	bl	8006ebc <__malloc_unlock>
 8006698:	e7a1      	b.n	80065de <_malloc_r+0x22>
 800669a:	6025      	str	r5, [r4, #0]
 800669c:	e7de      	b.n	800665c <_malloc_r+0xa0>
 800669e:	bf00      	nop
 80066a0:	20000398 	.word	0x20000398

080066a4 <__sfputc_r>:
 80066a4:	6893      	ldr	r3, [r2, #8]
 80066a6:	b410      	push	{r4}
 80066a8:	3b01      	subs	r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	6093      	str	r3, [r2, #8]
 80066ae:	da07      	bge.n	80066c0 <__sfputc_r+0x1c>
 80066b0:	6994      	ldr	r4, [r2, #24]
 80066b2:	42a3      	cmp	r3, r4
 80066b4:	db01      	blt.n	80066ba <__sfputc_r+0x16>
 80066b6:	290a      	cmp	r1, #10
 80066b8:	d102      	bne.n	80066c0 <__sfputc_r+0x1c>
 80066ba:	bc10      	pop	{r4}
 80066bc:	f000 b99e 	b.w	80069fc <__swbuf_r>
 80066c0:	6813      	ldr	r3, [r2, #0]
 80066c2:	1c58      	adds	r0, r3, #1
 80066c4:	6010      	str	r0, [r2, #0]
 80066c6:	7019      	strb	r1, [r3, #0]
 80066c8:	4608      	mov	r0, r1
 80066ca:	bc10      	pop	{r4}
 80066cc:	4770      	bx	lr

080066ce <__sfputs_r>:
 80066ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d0:	4606      	mov	r6, r0
 80066d2:	460f      	mov	r7, r1
 80066d4:	4614      	mov	r4, r2
 80066d6:	18d5      	adds	r5, r2, r3
 80066d8:	42ac      	cmp	r4, r5
 80066da:	d101      	bne.n	80066e0 <__sfputs_r+0x12>
 80066dc:	2000      	movs	r0, #0
 80066de:	e007      	b.n	80066f0 <__sfputs_r+0x22>
 80066e0:	463a      	mov	r2, r7
 80066e2:	4630      	mov	r0, r6
 80066e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e8:	f7ff ffdc 	bl	80066a4 <__sfputc_r>
 80066ec:	1c43      	adds	r3, r0, #1
 80066ee:	d1f3      	bne.n	80066d8 <__sfputs_r+0xa>
 80066f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080066f4 <_vfiprintf_r>:
 80066f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f8:	460d      	mov	r5, r1
 80066fa:	4614      	mov	r4, r2
 80066fc:	4698      	mov	r8, r3
 80066fe:	4606      	mov	r6, r0
 8006700:	b09d      	sub	sp, #116	; 0x74
 8006702:	b118      	cbz	r0, 800670c <_vfiprintf_r+0x18>
 8006704:	6983      	ldr	r3, [r0, #24]
 8006706:	b90b      	cbnz	r3, 800670c <_vfiprintf_r+0x18>
 8006708:	f7ff fa90 	bl	8005c2c <__sinit>
 800670c:	4b89      	ldr	r3, [pc, #548]	; (8006934 <_vfiprintf_r+0x240>)
 800670e:	429d      	cmp	r5, r3
 8006710:	d11b      	bne.n	800674a <_vfiprintf_r+0x56>
 8006712:	6875      	ldr	r5, [r6, #4]
 8006714:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006716:	07d9      	lsls	r1, r3, #31
 8006718:	d405      	bmi.n	8006726 <_vfiprintf_r+0x32>
 800671a:	89ab      	ldrh	r3, [r5, #12]
 800671c:	059a      	lsls	r2, r3, #22
 800671e:	d402      	bmi.n	8006726 <_vfiprintf_r+0x32>
 8006720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006722:	f7ff fb26 	bl	8005d72 <__retarget_lock_acquire_recursive>
 8006726:	89ab      	ldrh	r3, [r5, #12]
 8006728:	071b      	lsls	r3, r3, #28
 800672a:	d501      	bpl.n	8006730 <_vfiprintf_r+0x3c>
 800672c:	692b      	ldr	r3, [r5, #16]
 800672e:	b9eb      	cbnz	r3, 800676c <_vfiprintf_r+0x78>
 8006730:	4629      	mov	r1, r5
 8006732:	4630      	mov	r0, r6
 8006734:	f000 f9c6 	bl	8006ac4 <__swsetup_r>
 8006738:	b1c0      	cbz	r0, 800676c <_vfiprintf_r+0x78>
 800673a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800673c:	07dc      	lsls	r4, r3, #31
 800673e:	d50e      	bpl.n	800675e <_vfiprintf_r+0x6a>
 8006740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006744:	b01d      	add	sp, #116	; 0x74
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	4b7b      	ldr	r3, [pc, #492]	; (8006938 <_vfiprintf_r+0x244>)
 800674c:	429d      	cmp	r5, r3
 800674e:	d101      	bne.n	8006754 <_vfiprintf_r+0x60>
 8006750:	68b5      	ldr	r5, [r6, #8]
 8006752:	e7df      	b.n	8006714 <_vfiprintf_r+0x20>
 8006754:	4b79      	ldr	r3, [pc, #484]	; (800693c <_vfiprintf_r+0x248>)
 8006756:	429d      	cmp	r5, r3
 8006758:	bf08      	it	eq
 800675a:	68f5      	ldreq	r5, [r6, #12]
 800675c:	e7da      	b.n	8006714 <_vfiprintf_r+0x20>
 800675e:	89ab      	ldrh	r3, [r5, #12]
 8006760:	0598      	lsls	r0, r3, #22
 8006762:	d4ed      	bmi.n	8006740 <_vfiprintf_r+0x4c>
 8006764:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006766:	f7ff fb05 	bl	8005d74 <__retarget_lock_release_recursive>
 800676a:	e7e9      	b.n	8006740 <_vfiprintf_r+0x4c>
 800676c:	2300      	movs	r3, #0
 800676e:	9309      	str	r3, [sp, #36]	; 0x24
 8006770:	2320      	movs	r3, #32
 8006772:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006776:	2330      	movs	r3, #48	; 0x30
 8006778:	f04f 0901 	mov.w	r9, #1
 800677c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006780:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006940 <_vfiprintf_r+0x24c>
 8006784:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006788:	4623      	mov	r3, r4
 800678a:	469a      	mov	sl, r3
 800678c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006790:	b10a      	cbz	r2, 8006796 <_vfiprintf_r+0xa2>
 8006792:	2a25      	cmp	r2, #37	; 0x25
 8006794:	d1f9      	bne.n	800678a <_vfiprintf_r+0x96>
 8006796:	ebba 0b04 	subs.w	fp, sl, r4
 800679a:	d00b      	beq.n	80067b4 <_vfiprintf_r+0xc0>
 800679c:	465b      	mov	r3, fp
 800679e:	4622      	mov	r2, r4
 80067a0:	4629      	mov	r1, r5
 80067a2:	4630      	mov	r0, r6
 80067a4:	f7ff ff93 	bl	80066ce <__sfputs_r>
 80067a8:	3001      	adds	r0, #1
 80067aa:	f000 80aa 	beq.w	8006902 <_vfiprintf_r+0x20e>
 80067ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80067b0:	445a      	add	r2, fp
 80067b2:	9209      	str	r2, [sp, #36]	; 0x24
 80067b4:	f89a 3000 	ldrb.w	r3, [sl]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	f000 80a2 	beq.w	8006902 <_vfiprintf_r+0x20e>
 80067be:	2300      	movs	r3, #0
 80067c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80067c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80067c8:	f10a 0a01 	add.w	sl, sl, #1
 80067cc:	9304      	str	r3, [sp, #16]
 80067ce:	9307      	str	r3, [sp, #28]
 80067d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80067d4:	931a      	str	r3, [sp, #104]	; 0x68
 80067d6:	4654      	mov	r4, sl
 80067d8:	2205      	movs	r2, #5
 80067da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067de:	4858      	ldr	r0, [pc, #352]	; (8006940 <_vfiprintf_r+0x24c>)
 80067e0:	f7ff fad2 	bl	8005d88 <memchr>
 80067e4:	9a04      	ldr	r2, [sp, #16]
 80067e6:	b9d8      	cbnz	r0, 8006820 <_vfiprintf_r+0x12c>
 80067e8:	06d1      	lsls	r1, r2, #27
 80067ea:	bf44      	itt	mi
 80067ec:	2320      	movmi	r3, #32
 80067ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067f2:	0713      	lsls	r3, r2, #28
 80067f4:	bf44      	itt	mi
 80067f6:	232b      	movmi	r3, #43	; 0x2b
 80067f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80067fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006800:	2b2a      	cmp	r3, #42	; 0x2a
 8006802:	d015      	beq.n	8006830 <_vfiprintf_r+0x13c>
 8006804:	4654      	mov	r4, sl
 8006806:	2000      	movs	r0, #0
 8006808:	f04f 0c0a 	mov.w	ip, #10
 800680c:	9a07      	ldr	r2, [sp, #28]
 800680e:	4621      	mov	r1, r4
 8006810:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006814:	3b30      	subs	r3, #48	; 0x30
 8006816:	2b09      	cmp	r3, #9
 8006818:	d94e      	bls.n	80068b8 <_vfiprintf_r+0x1c4>
 800681a:	b1b0      	cbz	r0, 800684a <_vfiprintf_r+0x156>
 800681c:	9207      	str	r2, [sp, #28]
 800681e:	e014      	b.n	800684a <_vfiprintf_r+0x156>
 8006820:	eba0 0308 	sub.w	r3, r0, r8
 8006824:	fa09 f303 	lsl.w	r3, r9, r3
 8006828:	4313      	orrs	r3, r2
 800682a:	46a2      	mov	sl, r4
 800682c:	9304      	str	r3, [sp, #16]
 800682e:	e7d2      	b.n	80067d6 <_vfiprintf_r+0xe2>
 8006830:	9b03      	ldr	r3, [sp, #12]
 8006832:	1d19      	adds	r1, r3, #4
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	9103      	str	r1, [sp, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	bfbb      	ittet	lt
 800683c:	425b      	neglt	r3, r3
 800683e:	f042 0202 	orrlt.w	r2, r2, #2
 8006842:	9307      	strge	r3, [sp, #28]
 8006844:	9307      	strlt	r3, [sp, #28]
 8006846:	bfb8      	it	lt
 8006848:	9204      	strlt	r2, [sp, #16]
 800684a:	7823      	ldrb	r3, [r4, #0]
 800684c:	2b2e      	cmp	r3, #46	; 0x2e
 800684e:	d10c      	bne.n	800686a <_vfiprintf_r+0x176>
 8006850:	7863      	ldrb	r3, [r4, #1]
 8006852:	2b2a      	cmp	r3, #42	; 0x2a
 8006854:	d135      	bne.n	80068c2 <_vfiprintf_r+0x1ce>
 8006856:	9b03      	ldr	r3, [sp, #12]
 8006858:	3402      	adds	r4, #2
 800685a:	1d1a      	adds	r2, r3, #4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	9203      	str	r2, [sp, #12]
 8006860:	2b00      	cmp	r3, #0
 8006862:	bfb8      	it	lt
 8006864:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006868:	9305      	str	r3, [sp, #20]
 800686a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006944 <_vfiprintf_r+0x250>
 800686e:	2203      	movs	r2, #3
 8006870:	4650      	mov	r0, sl
 8006872:	7821      	ldrb	r1, [r4, #0]
 8006874:	f7ff fa88 	bl	8005d88 <memchr>
 8006878:	b140      	cbz	r0, 800688c <_vfiprintf_r+0x198>
 800687a:	2340      	movs	r3, #64	; 0x40
 800687c:	eba0 000a 	sub.w	r0, r0, sl
 8006880:	fa03 f000 	lsl.w	r0, r3, r0
 8006884:	9b04      	ldr	r3, [sp, #16]
 8006886:	3401      	adds	r4, #1
 8006888:	4303      	orrs	r3, r0
 800688a:	9304      	str	r3, [sp, #16]
 800688c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006890:	2206      	movs	r2, #6
 8006892:	482d      	ldr	r0, [pc, #180]	; (8006948 <_vfiprintf_r+0x254>)
 8006894:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006898:	f7ff fa76 	bl	8005d88 <memchr>
 800689c:	2800      	cmp	r0, #0
 800689e:	d03f      	beq.n	8006920 <_vfiprintf_r+0x22c>
 80068a0:	4b2a      	ldr	r3, [pc, #168]	; (800694c <_vfiprintf_r+0x258>)
 80068a2:	bb1b      	cbnz	r3, 80068ec <_vfiprintf_r+0x1f8>
 80068a4:	9b03      	ldr	r3, [sp, #12]
 80068a6:	3307      	adds	r3, #7
 80068a8:	f023 0307 	bic.w	r3, r3, #7
 80068ac:	3308      	adds	r3, #8
 80068ae:	9303      	str	r3, [sp, #12]
 80068b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068b2:	443b      	add	r3, r7
 80068b4:	9309      	str	r3, [sp, #36]	; 0x24
 80068b6:	e767      	b.n	8006788 <_vfiprintf_r+0x94>
 80068b8:	460c      	mov	r4, r1
 80068ba:	2001      	movs	r0, #1
 80068bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80068c0:	e7a5      	b.n	800680e <_vfiprintf_r+0x11a>
 80068c2:	2300      	movs	r3, #0
 80068c4:	f04f 0c0a 	mov.w	ip, #10
 80068c8:	4619      	mov	r1, r3
 80068ca:	3401      	adds	r4, #1
 80068cc:	9305      	str	r3, [sp, #20]
 80068ce:	4620      	mov	r0, r4
 80068d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80068d4:	3a30      	subs	r2, #48	; 0x30
 80068d6:	2a09      	cmp	r2, #9
 80068d8:	d903      	bls.n	80068e2 <_vfiprintf_r+0x1ee>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d0c5      	beq.n	800686a <_vfiprintf_r+0x176>
 80068de:	9105      	str	r1, [sp, #20]
 80068e0:	e7c3      	b.n	800686a <_vfiprintf_r+0x176>
 80068e2:	4604      	mov	r4, r0
 80068e4:	2301      	movs	r3, #1
 80068e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80068ea:	e7f0      	b.n	80068ce <_vfiprintf_r+0x1da>
 80068ec:	ab03      	add	r3, sp, #12
 80068ee:	9300      	str	r3, [sp, #0]
 80068f0:	462a      	mov	r2, r5
 80068f2:	4630      	mov	r0, r6
 80068f4:	4b16      	ldr	r3, [pc, #88]	; (8006950 <_vfiprintf_r+0x25c>)
 80068f6:	a904      	add	r1, sp, #16
 80068f8:	f7fd feea 	bl	80046d0 <_printf_float>
 80068fc:	4607      	mov	r7, r0
 80068fe:	1c78      	adds	r0, r7, #1
 8006900:	d1d6      	bne.n	80068b0 <_vfiprintf_r+0x1bc>
 8006902:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006904:	07d9      	lsls	r1, r3, #31
 8006906:	d405      	bmi.n	8006914 <_vfiprintf_r+0x220>
 8006908:	89ab      	ldrh	r3, [r5, #12]
 800690a:	059a      	lsls	r2, r3, #22
 800690c:	d402      	bmi.n	8006914 <_vfiprintf_r+0x220>
 800690e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006910:	f7ff fa30 	bl	8005d74 <__retarget_lock_release_recursive>
 8006914:	89ab      	ldrh	r3, [r5, #12]
 8006916:	065b      	lsls	r3, r3, #25
 8006918:	f53f af12 	bmi.w	8006740 <_vfiprintf_r+0x4c>
 800691c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800691e:	e711      	b.n	8006744 <_vfiprintf_r+0x50>
 8006920:	ab03      	add	r3, sp, #12
 8006922:	9300      	str	r3, [sp, #0]
 8006924:	462a      	mov	r2, r5
 8006926:	4630      	mov	r0, r6
 8006928:	4b09      	ldr	r3, [pc, #36]	; (8006950 <_vfiprintf_r+0x25c>)
 800692a:	a904      	add	r1, sp, #16
 800692c:	f7fe f96c 	bl	8004c08 <_printf_i>
 8006930:	e7e4      	b.n	80068fc <_vfiprintf_r+0x208>
 8006932:	bf00      	nop
 8006934:	08007114 	.word	0x08007114
 8006938:	08007134 	.word	0x08007134
 800693c:	080070f4 	.word	0x080070f4
 8006940:	080072ac 	.word	0x080072ac
 8006944:	080072b2 	.word	0x080072b2
 8006948:	080072b6 	.word	0x080072b6
 800694c:	080046d1 	.word	0x080046d1
 8006950:	080066cf 	.word	0x080066cf

08006954 <_sbrk_r>:
 8006954:	b538      	push	{r3, r4, r5, lr}
 8006956:	2300      	movs	r3, #0
 8006958:	4d05      	ldr	r5, [pc, #20]	; (8006970 <_sbrk_r+0x1c>)
 800695a:	4604      	mov	r4, r0
 800695c:	4608      	mov	r0, r1
 800695e:	602b      	str	r3, [r5, #0]
 8006960:	f7fb fade 	bl	8001f20 <_sbrk>
 8006964:	1c43      	adds	r3, r0, #1
 8006966:	d102      	bne.n	800696e <_sbrk_r+0x1a>
 8006968:	682b      	ldr	r3, [r5, #0]
 800696a:	b103      	cbz	r3, 800696e <_sbrk_r+0x1a>
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	bd38      	pop	{r3, r4, r5, pc}
 8006970:	200003a0 	.word	0x200003a0

08006974 <__sread>:
 8006974:	b510      	push	{r4, lr}
 8006976:	460c      	mov	r4, r1
 8006978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697c:	f000 faa4 	bl	8006ec8 <_read_r>
 8006980:	2800      	cmp	r0, #0
 8006982:	bfab      	itete	ge
 8006984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006986:	89a3      	ldrhlt	r3, [r4, #12]
 8006988:	181b      	addge	r3, r3, r0
 800698a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800698e:	bfac      	ite	ge
 8006990:	6563      	strge	r3, [r4, #84]	; 0x54
 8006992:	81a3      	strhlt	r3, [r4, #12]
 8006994:	bd10      	pop	{r4, pc}

08006996 <__swrite>:
 8006996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800699a:	461f      	mov	r7, r3
 800699c:	898b      	ldrh	r3, [r1, #12]
 800699e:	4605      	mov	r5, r0
 80069a0:	05db      	lsls	r3, r3, #23
 80069a2:	460c      	mov	r4, r1
 80069a4:	4616      	mov	r6, r2
 80069a6:	d505      	bpl.n	80069b4 <__swrite+0x1e>
 80069a8:	2302      	movs	r3, #2
 80069aa:	2200      	movs	r2, #0
 80069ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069b0:	f000 f9f4 	bl	8006d9c <_lseek_r>
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	4632      	mov	r2, r6
 80069b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069bc:	81a3      	strh	r3, [r4, #12]
 80069be:	4628      	mov	r0, r5
 80069c0:	463b      	mov	r3, r7
 80069c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80069c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80069ca:	f000 b869 	b.w	8006aa0 <_write_r>

080069ce <__sseek>:
 80069ce:	b510      	push	{r4, lr}
 80069d0:	460c      	mov	r4, r1
 80069d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069d6:	f000 f9e1 	bl	8006d9c <_lseek_r>
 80069da:	1c43      	adds	r3, r0, #1
 80069dc:	89a3      	ldrh	r3, [r4, #12]
 80069de:	bf15      	itete	ne
 80069e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80069e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80069e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80069ea:	81a3      	strheq	r3, [r4, #12]
 80069ec:	bf18      	it	ne
 80069ee:	81a3      	strhne	r3, [r4, #12]
 80069f0:	bd10      	pop	{r4, pc}

080069f2 <__sclose>:
 80069f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069f6:	f000 b8f1 	b.w	8006bdc <_close_r>
	...

080069fc <__swbuf_r>:
 80069fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069fe:	460e      	mov	r6, r1
 8006a00:	4614      	mov	r4, r2
 8006a02:	4605      	mov	r5, r0
 8006a04:	b118      	cbz	r0, 8006a0e <__swbuf_r+0x12>
 8006a06:	6983      	ldr	r3, [r0, #24]
 8006a08:	b90b      	cbnz	r3, 8006a0e <__swbuf_r+0x12>
 8006a0a:	f7ff f90f 	bl	8005c2c <__sinit>
 8006a0e:	4b21      	ldr	r3, [pc, #132]	; (8006a94 <__swbuf_r+0x98>)
 8006a10:	429c      	cmp	r4, r3
 8006a12:	d12b      	bne.n	8006a6c <__swbuf_r+0x70>
 8006a14:	686c      	ldr	r4, [r5, #4]
 8006a16:	69a3      	ldr	r3, [r4, #24]
 8006a18:	60a3      	str	r3, [r4, #8]
 8006a1a:	89a3      	ldrh	r3, [r4, #12]
 8006a1c:	071a      	lsls	r2, r3, #28
 8006a1e:	d52f      	bpl.n	8006a80 <__swbuf_r+0x84>
 8006a20:	6923      	ldr	r3, [r4, #16]
 8006a22:	b36b      	cbz	r3, 8006a80 <__swbuf_r+0x84>
 8006a24:	6923      	ldr	r3, [r4, #16]
 8006a26:	6820      	ldr	r0, [r4, #0]
 8006a28:	b2f6      	uxtb	r6, r6
 8006a2a:	1ac0      	subs	r0, r0, r3
 8006a2c:	6963      	ldr	r3, [r4, #20]
 8006a2e:	4637      	mov	r7, r6
 8006a30:	4283      	cmp	r3, r0
 8006a32:	dc04      	bgt.n	8006a3e <__swbuf_r+0x42>
 8006a34:	4621      	mov	r1, r4
 8006a36:	4628      	mov	r0, r5
 8006a38:	f000 f962 	bl	8006d00 <_fflush_r>
 8006a3c:	bb30      	cbnz	r0, 8006a8c <__swbuf_r+0x90>
 8006a3e:	68a3      	ldr	r3, [r4, #8]
 8006a40:	3001      	adds	r0, #1
 8006a42:	3b01      	subs	r3, #1
 8006a44:	60a3      	str	r3, [r4, #8]
 8006a46:	6823      	ldr	r3, [r4, #0]
 8006a48:	1c5a      	adds	r2, r3, #1
 8006a4a:	6022      	str	r2, [r4, #0]
 8006a4c:	701e      	strb	r6, [r3, #0]
 8006a4e:	6963      	ldr	r3, [r4, #20]
 8006a50:	4283      	cmp	r3, r0
 8006a52:	d004      	beq.n	8006a5e <__swbuf_r+0x62>
 8006a54:	89a3      	ldrh	r3, [r4, #12]
 8006a56:	07db      	lsls	r3, r3, #31
 8006a58:	d506      	bpl.n	8006a68 <__swbuf_r+0x6c>
 8006a5a:	2e0a      	cmp	r6, #10
 8006a5c:	d104      	bne.n	8006a68 <__swbuf_r+0x6c>
 8006a5e:	4621      	mov	r1, r4
 8006a60:	4628      	mov	r0, r5
 8006a62:	f000 f94d 	bl	8006d00 <_fflush_r>
 8006a66:	b988      	cbnz	r0, 8006a8c <__swbuf_r+0x90>
 8006a68:	4638      	mov	r0, r7
 8006a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a6c:	4b0a      	ldr	r3, [pc, #40]	; (8006a98 <__swbuf_r+0x9c>)
 8006a6e:	429c      	cmp	r4, r3
 8006a70:	d101      	bne.n	8006a76 <__swbuf_r+0x7a>
 8006a72:	68ac      	ldr	r4, [r5, #8]
 8006a74:	e7cf      	b.n	8006a16 <__swbuf_r+0x1a>
 8006a76:	4b09      	ldr	r3, [pc, #36]	; (8006a9c <__swbuf_r+0xa0>)
 8006a78:	429c      	cmp	r4, r3
 8006a7a:	bf08      	it	eq
 8006a7c:	68ec      	ldreq	r4, [r5, #12]
 8006a7e:	e7ca      	b.n	8006a16 <__swbuf_r+0x1a>
 8006a80:	4621      	mov	r1, r4
 8006a82:	4628      	mov	r0, r5
 8006a84:	f000 f81e 	bl	8006ac4 <__swsetup_r>
 8006a88:	2800      	cmp	r0, #0
 8006a8a:	d0cb      	beq.n	8006a24 <__swbuf_r+0x28>
 8006a8c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006a90:	e7ea      	b.n	8006a68 <__swbuf_r+0x6c>
 8006a92:	bf00      	nop
 8006a94:	08007114 	.word	0x08007114
 8006a98:	08007134 	.word	0x08007134
 8006a9c:	080070f4 	.word	0x080070f4

08006aa0 <_write_r>:
 8006aa0:	b538      	push	{r3, r4, r5, lr}
 8006aa2:	4604      	mov	r4, r0
 8006aa4:	4608      	mov	r0, r1
 8006aa6:	4611      	mov	r1, r2
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	4d05      	ldr	r5, [pc, #20]	; (8006ac0 <_write_r+0x20>)
 8006aac:	602a      	str	r2, [r5, #0]
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f7fa fade 	bl	8001070 <_write>
 8006ab4:	1c43      	adds	r3, r0, #1
 8006ab6:	d102      	bne.n	8006abe <_write_r+0x1e>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	b103      	cbz	r3, 8006abe <_write_r+0x1e>
 8006abc:	6023      	str	r3, [r4, #0]
 8006abe:	bd38      	pop	{r3, r4, r5, pc}
 8006ac0:	200003a0 	.word	0x200003a0

08006ac4 <__swsetup_r>:
 8006ac4:	4b32      	ldr	r3, [pc, #200]	; (8006b90 <__swsetup_r+0xcc>)
 8006ac6:	b570      	push	{r4, r5, r6, lr}
 8006ac8:	681d      	ldr	r5, [r3, #0]
 8006aca:	4606      	mov	r6, r0
 8006acc:	460c      	mov	r4, r1
 8006ace:	b125      	cbz	r5, 8006ada <__swsetup_r+0x16>
 8006ad0:	69ab      	ldr	r3, [r5, #24]
 8006ad2:	b913      	cbnz	r3, 8006ada <__swsetup_r+0x16>
 8006ad4:	4628      	mov	r0, r5
 8006ad6:	f7ff f8a9 	bl	8005c2c <__sinit>
 8006ada:	4b2e      	ldr	r3, [pc, #184]	; (8006b94 <__swsetup_r+0xd0>)
 8006adc:	429c      	cmp	r4, r3
 8006ade:	d10f      	bne.n	8006b00 <__swsetup_r+0x3c>
 8006ae0:	686c      	ldr	r4, [r5, #4]
 8006ae2:	89a3      	ldrh	r3, [r4, #12]
 8006ae4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ae8:	0719      	lsls	r1, r3, #28
 8006aea:	d42c      	bmi.n	8006b46 <__swsetup_r+0x82>
 8006aec:	06dd      	lsls	r5, r3, #27
 8006aee:	d411      	bmi.n	8006b14 <__swsetup_r+0x50>
 8006af0:	2309      	movs	r3, #9
 8006af2:	6033      	str	r3, [r6, #0]
 8006af4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006af8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	e03e      	b.n	8006b7e <__swsetup_r+0xba>
 8006b00:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <__swsetup_r+0xd4>)
 8006b02:	429c      	cmp	r4, r3
 8006b04:	d101      	bne.n	8006b0a <__swsetup_r+0x46>
 8006b06:	68ac      	ldr	r4, [r5, #8]
 8006b08:	e7eb      	b.n	8006ae2 <__swsetup_r+0x1e>
 8006b0a:	4b24      	ldr	r3, [pc, #144]	; (8006b9c <__swsetup_r+0xd8>)
 8006b0c:	429c      	cmp	r4, r3
 8006b0e:	bf08      	it	eq
 8006b10:	68ec      	ldreq	r4, [r5, #12]
 8006b12:	e7e6      	b.n	8006ae2 <__swsetup_r+0x1e>
 8006b14:	0758      	lsls	r0, r3, #29
 8006b16:	d512      	bpl.n	8006b3e <__swsetup_r+0x7a>
 8006b18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b1a:	b141      	cbz	r1, 8006b2e <__swsetup_r+0x6a>
 8006b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b20:	4299      	cmp	r1, r3
 8006b22:	d002      	beq.n	8006b2a <__swsetup_r+0x66>
 8006b24:	4630      	mov	r0, r6
 8006b26:	f7ff fce1 	bl	80064ec <_free_r>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b2e:	89a3      	ldrh	r3, [r4, #12]
 8006b30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b34:	81a3      	strh	r3, [r4, #12]
 8006b36:	2300      	movs	r3, #0
 8006b38:	6063      	str	r3, [r4, #4]
 8006b3a:	6923      	ldr	r3, [r4, #16]
 8006b3c:	6023      	str	r3, [r4, #0]
 8006b3e:	89a3      	ldrh	r3, [r4, #12]
 8006b40:	f043 0308 	orr.w	r3, r3, #8
 8006b44:	81a3      	strh	r3, [r4, #12]
 8006b46:	6923      	ldr	r3, [r4, #16]
 8006b48:	b94b      	cbnz	r3, 8006b5e <__swsetup_r+0x9a>
 8006b4a:	89a3      	ldrh	r3, [r4, #12]
 8006b4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b54:	d003      	beq.n	8006b5e <__swsetup_r+0x9a>
 8006b56:	4621      	mov	r1, r4
 8006b58:	4630      	mov	r0, r6
 8006b5a:	f000 f957 	bl	8006e0c <__smakebuf_r>
 8006b5e:	89a0      	ldrh	r0, [r4, #12]
 8006b60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b64:	f010 0301 	ands.w	r3, r0, #1
 8006b68:	d00a      	beq.n	8006b80 <__swsetup_r+0xbc>
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	60a3      	str	r3, [r4, #8]
 8006b6e:	6963      	ldr	r3, [r4, #20]
 8006b70:	425b      	negs	r3, r3
 8006b72:	61a3      	str	r3, [r4, #24]
 8006b74:	6923      	ldr	r3, [r4, #16]
 8006b76:	b943      	cbnz	r3, 8006b8a <__swsetup_r+0xc6>
 8006b78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b7c:	d1ba      	bne.n	8006af4 <__swsetup_r+0x30>
 8006b7e:	bd70      	pop	{r4, r5, r6, pc}
 8006b80:	0781      	lsls	r1, r0, #30
 8006b82:	bf58      	it	pl
 8006b84:	6963      	ldrpl	r3, [r4, #20]
 8006b86:	60a3      	str	r3, [r4, #8]
 8006b88:	e7f4      	b.n	8006b74 <__swsetup_r+0xb0>
 8006b8a:	2000      	movs	r0, #0
 8006b8c:	e7f7      	b.n	8006b7e <__swsetup_r+0xba>
 8006b8e:	bf00      	nop
 8006b90:	2000000c 	.word	0x2000000c
 8006b94:	08007114 	.word	0x08007114
 8006b98:	08007134 	.word	0x08007134
 8006b9c:	080070f4 	.word	0x080070f4

08006ba0 <__assert_func>:
 8006ba0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ba2:	4614      	mov	r4, r2
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	4b09      	ldr	r3, [pc, #36]	; (8006bcc <__assert_func+0x2c>)
 8006ba8:	4605      	mov	r5, r0
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68d8      	ldr	r0, [r3, #12]
 8006bae:	b14c      	cbz	r4, 8006bc4 <__assert_func+0x24>
 8006bb0:	4b07      	ldr	r3, [pc, #28]	; (8006bd0 <__assert_func+0x30>)
 8006bb2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bb6:	9100      	str	r1, [sp, #0]
 8006bb8:	462b      	mov	r3, r5
 8006bba:	4906      	ldr	r1, [pc, #24]	; (8006bd4 <__assert_func+0x34>)
 8006bbc:	f000 f8dc 	bl	8006d78 <fiprintf>
 8006bc0:	f000 f9a1 	bl	8006f06 <abort>
 8006bc4:	4b04      	ldr	r3, [pc, #16]	; (8006bd8 <__assert_func+0x38>)
 8006bc6:	461c      	mov	r4, r3
 8006bc8:	e7f3      	b.n	8006bb2 <__assert_func+0x12>
 8006bca:	bf00      	nop
 8006bcc:	2000000c 	.word	0x2000000c
 8006bd0:	080072bd 	.word	0x080072bd
 8006bd4:	080072ca 	.word	0x080072ca
 8006bd8:	080072f8 	.word	0x080072f8

08006bdc <_close_r>:
 8006bdc:	b538      	push	{r3, r4, r5, lr}
 8006bde:	2300      	movs	r3, #0
 8006be0:	4d05      	ldr	r5, [pc, #20]	; (8006bf8 <_close_r+0x1c>)
 8006be2:	4604      	mov	r4, r0
 8006be4:	4608      	mov	r0, r1
 8006be6:	602b      	str	r3, [r5, #0]
 8006be8:	f7fb f96a 	bl	8001ec0 <_close>
 8006bec:	1c43      	adds	r3, r0, #1
 8006bee:	d102      	bne.n	8006bf6 <_close_r+0x1a>
 8006bf0:	682b      	ldr	r3, [r5, #0]
 8006bf2:	b103      	cbz	r3, 8006bf6 <_close_r+0x1a>
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	bd38      	pop	{r3, r4, r5, pc}
 8006bf8:	200003a0 	.word	0x200003a0

08006bfc <__sflush_r>:
 8006bfc:	898a      	ldrh	r2, [r1, #12]
 8006bfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c00:	4605      	mov	r5, r0
 8006c02:	0710      	lsls	r0, r2, #28
 8006c04:	460c      	mov	r4, r1
 8006c06:	d457      	bmi.n	8006cb8 <__sflush_r+0xbc>
 8006c08:	684b      	ldr	r3, [r1, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dc04      	bgt.n	8006c18 <__sflush_r+0x1c>
 8006c0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	dc01      	bgt.n	8006c18 <__sflush_r+0x1c>
 8006c14:	2000      	movs	r0, #0
 8006c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	d0fa      	beq.n	8006c14 <__sflush_r+0x18>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006c24:	682f      	ldr	r7, [r5, #0]
 8006c26:	602b      	str	r3, [r5, #0]
 8006c28:	d032      	beq.n	8006c90 <__sflush_r+0x94>
 8006c2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006c2c:	89a3      	ldrh	r3, [r4, #12]
 8006c2e:	075a      	lsls	r2, r3, #29
 8006c30:	d505      	bpl.n	8006c3e <__sflush_r+0x42>
 8006c32:	6863      	ldr	r3, [r4, #4]
 8006c34:	1ac0      	subs	r0, r0, r3
 8006c36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006c38:	b10b      	cbz	r3, 8006c3e <__sflush_r+0x42>
 8006c3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c3c:	1ac0      	subs	r0, r0, r3
 8006c3e:	2300      	movs	r3, #0
 8006c40:	4602      	mov	r2, r0
 8006c42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006c44:	4628      	mov	r0, r5
 8006c46:	6a21      	ldr	r1, [r4, #32]
 8006c48:	47b0      	blx	r6
 8006c4a:	1c43      	adds	r3, r0, #1
 8006c4c:	89a3      	ldrh	r3, [r4, #12]
 8006c4e:	d106      	bne.n	8006c5e <__sflush_r+0x62>
 8006c50:	6829      	ldr	r1, [r5, #0]
 8006c52:	291d      	cmp	r1, #29
 8006c54:	d82c      	bhi.n	8006cb0 <__sflush_r+0xb4>
 8006c56:	4a29      	ldr	r2, [pc, #164]	; (8006cfc <__sflush_r+0x100>)
 8006c58:	40ca      	lsrs	r2, r1
 8006c5a:	07d6      	lsls	r6, r2, #31
 8006c5c:	d528      	bpl.n	8006cb0 <__sflush_r+0xb4>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	6062      	str	r2, [r4, #4]
 8006c62:	6922      	ldr	r2, [r4, #16]
 8006c64:	04d9      	lsls	r1, r3, #19
 8006c66:	6022      	str	r2, [r4, #0]
 8006c68:	d504      	bpl.n	8006c74 <__sflush_r+0x78>
 8006c6a:	1c42      	adds	r2, r0, #1
 8006c6c:	d101      	bne.n	8006c72 <__sflush_r+0x76>
 8006c6e:	682b      	ldr	r3, [r5, #0]
 8006c70:	b903      	cbnz	r3, 8006c74 <__sflush_r+0x78>
 8006c72:	6560      	str	r0, [r4, #84]	; 0x54
 8006c74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c76:	602f      	str	r7, [r5, #0]
 8006c78:	2900      	cmp	r1, #0
 8006c7a:	d0cb      	beq.n	8006c14 <__sflush_r+0x18>
 8006c7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006c80:	4299      	cmp	r1, r3
 8006c82:	d002      	beq.n	8006c8a <__sflush_r+0x8e>
 8006c84:	4628      	mov	r0, r5
 8006c86:	f7ff fc31 	bl	80064ec <_free_r>
 8006c8a:	2000      	movs	r0, #0
 8006c8c:	6360      	str	r0, [r4, #52]	; 0x34
 8006c8e:	e7c2      	b.n	8006c16 <__sflush_r+0x1a>
 8006c90:	6a21      	ldr	r1, [r4, #32]
 8006c92:	2301      	movs	r3, #1
 8006c94:	4628      	mov	r0, r5
 8006c96:	47b0      	blx	r6
 8006c98:	1c41      	adds	r1, r0, #1
 8006c9a:	d1c7      	bne.n	8006c2c <__sflush_r+0x30>
 8006c9c:	682b      	ldr	r3, [r5, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d0c4      	beq.n	8006c2c <__sflush_r+0x30>
 8006ca2:	2b1d      	cmp	r3, #29
 8006ca4:	d001      	beq.n	8006caa <__sflush_r+0xae>
 8006ca6:	2b16      	cmp	r3, #22
 8006ca8:	d101      	bne.n	8006cae <__sflush_r+0xb2>
 8006caa:	602f      	str	r7, [r5, #0]
 8006cac:	e7b2      	b.n	8006c14 <__sflush_r+0x18>
 8006cae:	89a3      	ldrh	r3, [r4, #12]
 8006cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb4:	81a3      	strh	r3, [r4, #12]
 8006cb6:	e7ae      	b.n	8006c16 <__sflush_r+0x1a>
 8006cb8:	690f      	ldr	r7, [r1, #16]
 8006cba:	2f00      	cmp	r7, #0
 8006cbc:	d0aa      	beq.n	8006c14 <__sflush_r+0x18>
 8006cbe:	0793      	lsls	r3, r2, #30
 8006cc0:	bf18      	it	ne
 8006cc2:	2300      	movne	r3, #0
 8006cc4:	680e      	ldr	r6, [r1, #0]
 8006cc6:	bf08      	it	eq
 8006cc8:	694b      	ldreq	r3, [r1, #20]
 8006cca:	1bf6      	subs	r6, r6, r7
 8006ccc:	600f      	str	r7, [r1, #0]
 8006cce:	608b      	str	r3, [r1, #8]
 8006cd0:	2e00      	cmp	r6, #0
 8006cd2:	dd9f      	ble.n	8006c14 <__sflush_r+0x18>
 8006cd4:	4633      	mov	r3, r6
 8006cd6:	463a      	mov	r2, r7
 8006cd8:	4628      	mov	r0, r5
 8006cda:	6a21      	ldr	r1, [r4, #32]
 8006cdc:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006ce0:	47e0      	blx	ip
 8006ce2:	2800      	cmp	r0, #0
 8006ce4:	dc06      	bgt.n	8006cf4 <__sflush_r+0xf8>
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006cec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cf0:	81a3      	strh	r3, [r4, #12]
 8006cf2:	e790      	b.n	8006c16 <__sflush_r+0x1a>
 8006cf4:	4407      	add	r7, r0
 8006cf6:	1a36      	subs	r6, r6, r0
 8006cf8:	e7ea      	b.n	8006cd0 <__sflush_r+0xd4>
 8006cfa:	bf00      	nop
 8006cfc:	20400001 	.word	0x20400001

08006d00 <_fflush_r>:
 8006d00:	b538      	push	{r3, r4, r5, lr}
 8006d02:	690b      	ldr	r3, [r1, #16]
 8006d04:	4605      	mov	r5, r0
 8006d06:	460c      	mov	r4, r1
 8006d08:	b913      	cbnz	r3, 8006d10 <_fflush_r+0x10>
 8006d0a:	2500      	movs	r5, #0
 8006d0c:	4628      	mov	r0, r5
 8006d0e:	bd38      	pop	{r3, r4, r5, pc}
 8006d10:	b118      	cbz	r0, 8006d1a <_fflush_r+0x1a>
 8006d12:	6983      	ldr	r3, [r0, #24]
 8006d14:	b90b      	cbnz	r3, 8006d1a <_fflush_r+0x1a>
 8006d16:	f7fe ff89 	bl	8005c2c <__sinit>
 8006d1a:	4b14      	ldr	r3, [pc, #80]	; (8006d6c <_fflush_r+0x6c>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	d11b      	bne.n	8006d58 <_fflush_r+0x58>
 8006d20:	686c      	ldr	r4, [r5, #4]
 8006d22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d0ef      	beq.n	8006d0a <_fflush_r+0xa>
 8006d2a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006d2c:	07d0      	lsls	r0, r2, #31
 8006d2e:	d404      	bmi.n	8006d3a <_fflush_r+0x3a>
 8006d30:	0599      	lsls	r1, r3, #22
 8006d32:	d402      	bmi.n	8006d3a <_fflush_r+0x3a>
 8006d34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d36:	f7ff f81c 	bl	8005d72 <__retarget_lock_acquire_recursive>
 8006d3a:	4628      	mov	r0, r5
 8006d3c:	4621      	mov	r1, r4
 8006d3e:	f7ff ff5d 	bl	8006bfc <__sflush_r>
 8006d42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006d44:	4605      	mov	r5, r0
 8006d46:	07da      	lsls	r2, r3, #31
 8006d48:	d4e0      	bmi.n	8006d0c <_fflush_r+0xc>
 8006d4a:	89a3      	ldrh	r3, [r4, #12]
 8006d4c:	059b      	lsls	r3, r3, #22
 8006d4e:	d4dd      	bmi.n	8006d0c <_fflush_r+0xc>
 8006d50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006d52:	f7ff f80f 	bl	8005d74 <__retarget_lock_release_recursive>
 8006d56:	e7d9      	b.n	8006d0c <_fflush_r+0xc>
 8006d58:	4b05      	ldr	r3, [pc, #20]	; (8006d70 <_fflush_r+0x70>)
 8006d5a:	429c      	cmp	r4, r3
 8006d5c:	d101      	bne.n	8006d62 <_fflush_r+0x62>
 8006d5e:	68ac      	ldr	r4, [r5, #8]
 8006d60:	e7df      	b.n	8006d22 <_fflush_r+0x22>
 8006d62:	4b04      	ldr	r3, [pc, #16]	; (8006d74 <_fflush_r+0x74>)
 8006d64:	429c      	cmp	r4, r3
 8006d66:	bf08      	it	eq
 8006d68:	68ec      	ldreq	r4, [r5, #12]
 8006d6a:	e7da      	b.n	8006d22 <_fflush_r+0x22>
 8006d6c:	08007114 	.word	0x08007114
 8006d70:	08007134 	.word	0x08007134
 8006d74:	080070f4 	.word	0x080070f4

08006d78 <fiprintf>:
 8006d78:	b40e      	push	{r1, r2, r3}
 8006d7a:	b503      	push	{r0, r1, lr}
 8006d7c:	4601      	mov	r1, r0
 8006d7e:	ab03      	add	r3, sp, #12
 8006d80:	4805      	ldr	r0, [pc, #20]	; (8006d98 <fiprintf+0x20>)
 8006d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d86:	6800      	ldr	r0, [r0, #0]
 8006d88:	9301      	str	r3, [sp, #4]
 8006d8a:	f7ff fcb3 	bl	80066f4 <_vfiprintf_r>
 8006d8e:	b002      	add	sp, #8
 8006d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d94:	b003      	add	sp, #12
 8006d96:	4770      	bx	lr
 8006d98:	2000000c 	.word	0x2000000c

08006d9c <_lseek_r>:
 8006d9c:	b538      	push	{r3, r4, r5, lr}
 8006d9e:	4604      	mov	r4, r0
 8006da0:	4608      	mov	r0, r1
 8006da2:	4611      	mov	r1, r2
 8006da4:	2200      	movs	r2, #0
 8006da6:	4d05      	ldr	r5, [pc, #20]	; (8006dbc <_lseek_r+0x20>)
 8006da8:	602a      	str	r2, [r5, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	f7fb f8ac 	bl	8001f08 <_lseek>
 8006db0:	1c43      	adds	r3, r0, #1
 8006db2:	d102      	bne.n	8006dba <_lseek_r+0x1e>
 8006db4:	682b      	ldr	r3, [r5, #0]
 8006db6:	b103      	cbz	r3, 8006dba <_lseek_r+0x1e>
 8006db8:	6023      	str	r3, [r4, #0]
 8006dba:	bd38      	pop	{r3, r4, r5, pc}
 8006dbc:	200003a0 	.word	0x200003a0

08006dc0 <__swhatbuf_r>:
 8006dc0:	b570      	push	{r4, r5, r6, lr}
 8006dc2:	460e      	mov	r6, r1
 8006dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dc8:	4614      	mov	r4, r2
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	461d      	mov	r5, r3
 8006dce:	b096      	sub	sp, #88	; 0x58
 8006dd0:	da08      	bge.n	8006de4 <__swhatbuf_r+0x24>
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006dd8:	602a      	str	r2, [r5, #0]
 8006dda:	061a      	lsls	r2, r3, #24
 8006ddc:	d410      	bmi.n	8006e00 <__swhatbuf_r+0x40>
 8006dde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006de2:	e00e      	b.n	8006e02 <__swhatbuf_r+0x42>
 8006de4:	466a      	mov	r2, sp
 8006de6:	f000 f895 	bl	8006f14 <_fstat_r>
 8006dea:	2800      	cmp	r0, #0
 8006dec:	dbf1      	blt.n	8006dd2 <__swhatbuf_r+0x12>
 8006dee:	9a01      	ldr	r2, [sp, #4]
 8006df0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006df4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006df8:	425a      	negs	r2, r3
 8006dfa:	415a      	adcs	r2, r3
 8006dfc:	602a      	str	r2, [r5, #0]
 8006dfe:	e7ee      	b.n	8006dde <__swhatbuf_r+0x1e>
 8006e00:	2340      	movs	r3, #64	; 0x40
 8006e02:	2000      	movs	r0, #0
 8006e04:	6023      	str	r3, [r4, #0]
 8006e06:	b016      	add	sp, #88	; 0x58
 8006e08:	bd70      	pop	{r4, r5, r6, pc}
	...

08006e0c <__smakebuf_r>:
 8006e0c:	898b      	ldrh	r3, [r1, #12]
 8006e0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e10:	079d      	lsls	r5, r3, #30
 8006e12:	4606      	mov	r6, r0
 8006e14:	460c      	mov	r4, r1
 8006e16:	d507      	bpl.n	8006e28 <__smakebuf_r+0x1c>
 8006e18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e1c:	6023      	str	r3, [r4, #0]
 8006e1e:	6123      	str	r3, [r4, #16]
 8006e20:	2301      	movs	r3, #1
 8006e22:	6163      	str	r3, [r4, #20]
 8006e24:	b002      	add	sp, #8
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
 8006e28:	466a      	mov	r2, sp
 8006e2a:	ab01      	add	r3, sp, #4
 8006e2c:	f7ff ffc8 	bl	8006dc0 <__swhatbuf_r>
 8006e30:	9900      	ldr	r1, [sp, #0]
 8006e32:	4605      	mov	r5, r0
 8006e34:	4630      	mov	r0, r6
 8006e36:	f7ff fbc1 	bl	80065bc <_malloc_r>
 8006e3a:	b948      	cbnz	r0, 8006e50 <__smakebuf_r+0x44>
 8006e3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e40:	059a      	lsls	r2, r3, #22
 8006e42:	d4ef      	bmi.n	8006e24 <__smakebuf_r+0x18>
 8006e44:	f023 0303 	bic.w	r3, r3, #3
 8006e48:	f043 0302 	orr.w	r3, r3, #2
 8006e4c:	81a3      	strh	r3, [r4, #12]
 8006e4e:	e7e3      	b.n	8006e18 <__smakebuf_r+0xc>
 8006e50:	4b0d      	ldr	r3, [pc, #52]	; (8006e88 <__smakebuf_r+0x7c>)
 8006e52:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e54:	89a3      	ldrh	r3, [r4, #12]
 8006e56:	6020      	str	r0, [r4, #0]
 8006e58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e5c:	81a3      	strh	r3, [r4, #12]
 8006e5e:	9b00      	ldr	r3, [sp, #0]
 8006e60:	6120      	str	r0, [r4, #16]
 8006e62:	6163      	str	r3, [r4, #20]
 8006e64:	9b01      	ldr	r3, [sp, #4]
 8006e66:	b15b      	cbz	r3, 8006e80 <__smakebuf_r+0x74>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e6e:	f000 f863 	bl	8006f38 <_isatty_r>
 8006e72:	b128      	cbz	r0, 8006e80 <__smakebuf_r+0x74>
 8006e74:	89a3      	ldrh	r3, [r4, #12]
 8006e76:	f023 0303 	bic.w	r3, r3, #3
 8006e7a:	f043 0301 	orr.w	r3, r3, #1
 8006e7e:	81a3      	strh	r3, [r4, #12]
 8006e80:	89a0      	ldrh	r0, [r4, #12]
 8006e82:	4305      	orrs	r5, r0
 8006e84:	81a5      	strh	r5, [r4, #12]
 8006e86:	e7cd      	b.n	8006e24 <__smakebuf_r+0x18>
 8006e88:	08005bc5 	.word	0x08005bc5

08006e8c <__ascii_mbtowc>:
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	b901      	cbnz	r1, 8006e92 <__ascii_mbtowc+0x6>
 8006e90:	a901      	add	r1, sp, #4
 8006e92:	b142      	cbz	r2, 8006ea6 <__ascii_mbtowc+0x1a>
 8006e94:	b14b      	cbz	r3, 8006eaa <__ascii_mbtowc+0x1e>
 8006e96:	7813      	ldrb	r3, [r2, #0]
 8006e98:	600b      	str	r3, [r1, #0]
 8006e9a:	7812      	ldrb	r2, [r2, #0]
 8006e9c:	1e10      	subs	r0, r2, #0
 8006e9e:	bf18      	it	ne
 8006ea0:	2001      	movne	r0, #1
 8006ea2:	b002      	add	sp, #8
 8006ea4:	4770      	bx	lr
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	e7fb      	b.n	8006ea2 <__ascii_mbtowc+0x16>
 8006eaa:	f06f 0001 	mvn.w	r0, #1
 8006eae:	e7f8      	b.n	8006ea2 <__ascii_mbtowc+0x16>

08006eb0 <__malloc_lock>:
 8006eb0:	4801      	ldr	r0, [pc, #4]	; (8006eb8 <__malloc_lock+0x8>)
 8006eb2:	f7fe bf5e 	b.w	8005d72 <__retarget_lock_acquire_recursive>
 8006eb6:	bf00      	nop
 8006eb8:	20000394 	.word	0x20000394

08006ebc <__malloc_unlock>:
 8006ebc:	4801      	ldr	r0, [pc, #4]	; (8006ec4 <__malloc_unlock+0x8>)
 8006ebe:	f7fe bf59 	b.w	8005d74 <__retarget_lock_release_recursive>
 8006ec2:	bf00      	nop
 8006ec4:	20000394 	.word	0x20000394

08006ec8 <_read_r>:
 8006ec8:	b538      	push	{r3, r4, r5, lr}
 8006eca:	4604      	mov	r4, r0
 8006ecc:	4608      	mov	r0, r1
 8006ece:	4611      	mov	r1, r2
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	4d05      	ldr	r5, [pc, #20]	; (8006ee8 <_read_r+0x20>)
 8006ed4:	602a      	str	r2, [r5, #0]
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	f7fa ffd5 	bl	8001e86 <_read>
 8006edc:	1c43      	adds	r3, r0, #1
 8006ede:	d102      	bne.n	8006ee6 <_read_r+0x1e>
 8006ee0:	682b      	ldr	r3, [r5, #0]
 8006ee2:	b103      	cbz	r3, 8006ee6 <_read_r+0x1e>
 8006ee4:	6023      	str	r3, [r4, #0]
 8006ee6:	bd38      	pop	{r3, r4, r5, pc}
 8006ee8:	200003a0 	.word	0x200003a0

08006eec <__ascii_wctomb>:
 8006eec:	4603      	mov	r3, r0
 8006eee:	4608      	mov	r0, r1
 8006ef0:	b141      	cbz	r1, 8006f04 <__ascii_wctomb+0x18>
 8006ef2:	2aff      	cmp	r2, #255	; 0xff
 8006ef4:	d904      	bls.n	8006f00 <__ascii_wctomb+0x14>
 8006ef6:	228a      	movs	r2, #138	; 0x8a
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	4770      	bx	lr
 8006f00:	2001      	movs	r0, #1
 8006f02:	700a      	strb	r2, [r1, #0]
 8006f04:	4770      	bx	lr

08006f06 <abort>:
 8006f06:	2006      	movs	r0, #6
 8006f08:	b508      	push	{r3, lr}
 8006f0a:	f000 f84d 	bl	8006fa8 <raise>
 8006f0e:	2001      	movs	r0, #1
 8006f10:	f7fa ffaf 	bl	8001e72 <_exit>

08006f14 <_fstat_r>:
 8006f14:	b538      	push	{r3, r4, r5, lr}
 8006f16:	2300      	movs	r3, #0
 8006f18:	4d06      	ldr	r5, [pc, #24]	; (8006f34 <_fstat_r+0x20>)
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	4608      	mov	r0, r1
 8006f1e:	4611      	mov	r1, r2
 8006f20:	602b      	str	r3, [r5, #0]
 8006f22:	f7fa ffd8 	bl	8001ed6 <_fstat>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	d102      	bne.n	8006f30 <_fstat_r+0x1c>
 8006f2a:	682b      	ldr	r3, [r5, #0]
 8006f2c:	b103      	cbz	r3, 8006f30 <_fstat_r+0x1c>
 8006f2e:	6023      	str	r3, [r4, #0]
 8006f30:	bd38      	pop	{r3, r4, r5, pc}
 8006f32:	bf00      	nop
 8006f34:	200003a0 	.word	0x200003a0

08006f38 <_isatty_r>:
 8006f38:	b538      	push	{r3, r4, r5, lr}
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	4d05      	ldr	r5, [pc, #20]	; (8006f54 <_isatty_r+0x1c>)
 8006f3e:	4604      	mov	r4, r0
 8006f40:	4608      	mov	r0, r1
 8006f42:	602b      	str	r3, [r5, #0]
 8006f44:	f7fa ffd6 	bl	8001ef4 <_isatty>
 8006f48:	1c43      	adds	r3, r0, #1
 8006f4a:	d102      	bne.n	8006f52 <_isatty_r+0x1a>
 8006f4c:	682b      	ldr	r3, [r5, #0]
 8006f4e:	b103      	cbz	r3, 8006f52 <_isatty_r+0x1a>
 8006f50:	6023      	str	r3, [r4, #0]
 8006f52:	bd38      	pop	{r3, r4, r5, pc}
 8006f54:	200003a0 	.word	0x200003a0

08006f58 <_raise_r>:
 8006f58:	291f      	cmp	r1, #31
 8006f5a:	b538      	push	{r3, r4, r5, lr}
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	d904      	bls.n	8006f6c <_raise_r+0x14>
 8006f62:	2316      	movs	r3, #22
 8006f64:	6003      	str	r3, [r0, #0]
 8006f66:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006f6e:	b112      	cbz	r2, 8006f76 <_raise_r+0x1e>
 8006f70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006f74:	b94b      	cbnz	r3, 8006f8a <_raise_r+0x32>
 8006f76:	4620      	mov	r0, r4
 8006f78:	f000 f830 	bl	8006fdc <_getpid_r>
 8006f7c:	462a      	mov	r2, r5
 8006f7e:	4601      	mov	r1, r0
 8006f80:	4620      	mov	r0, r4
 8006f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f86:	f000 b817 	b.w	8006fb8 <_kill_r>
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d00a      	beq.n	8006fa4 <_raise_r+0x4c>
 8006f8e:	1c59      	adds	r1, r3, #1
 8006f90:	d103      	bne.n	8006f9a <_raise_r+0x42>
 8006f92:	2316      	movs	r3, #22
 8006f94:	6003      	str	r3, [r0, #0]
 8006f96:	2001      	movs	r0, #1
 8006f98:	e7e7      	b.n	8006f6a <_raise_r+0x12>
 8006f9a:	2400      	movs	r4, #0
 8006f9c:	4628      	mov	r0, r5
 8006f9e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006fa2:	4798      	blx	r3
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	e7e0      	b.n	8006f6a <_raise_r+0x12>

08006fa8 <raise>:
 8006fa8:	4b02      	ldr	r3, [pc, #8]	; (8006fb4 <raise+0xc>)
 8006faa:	4601      	mov	r1, r0
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	f7ff bfd3 	b.w	8006f58 <_raise_r>
 8006fb2:	bf00      	nop
 8006fb4:	2000000c 	.word	0x2000000c

08006fb8 <_kill_r>:
 8006fb8:	b538      	push	{r3, r4, r5, lr}
 8006fba:	2300      	movs	r3, #0
 8006fbc:	4d06      	ldr	r5, [pc, #24]	; (8006fd8 <_kill_r+0x20>)
 8006fbe:	4604      	mov	r4, r0
 8006fc0:	4608      	mov	r0, r1
 8006fc2:	4611      	mov	r1, r2
 8006fc4:	602b      	str	r3, [r5, #0]
 8006fc6:	f7fa ff44 	bl	8001e52 <_kill>
 8006fca:	1c43      	adds	r3, r0, #1
 8006fcc:	d102      	bne.n	8006fd4 <_kill_r+0x1c>
 8006fce:	682b      	ldr	r3, [r5, #0]
 8006fd0:	b103      	cbz	r3, 8006fd4 <_kill_r+0x1c>
 8006fd2:	6023      	str	r3, [r4, #0]
 8006fd4:	bd38      	pop	{r3, r4, r5, pc}
 8006fd6:	bf00      	nop
 8006fd8:	200003a0 	.word	0x200003a0

08006fdc <_getpid_r>:
 8006fdc:	f7fa bf32 	b.w	8001e44 <_getpid>

08006fe0 <_init>:
 8006fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fe2:	bf00      	nop
 8006fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fe6:	bc08      	pop	{r3}
 8006fe8:	469e      	mov	lr, r3
 8006fea:	4770      	bx	lr

08006fec <_fini>:
 8006fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fee:	bf00      	nop
 8006ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ff2:	bc08      	pop	{r3}
 8006ff4:	469e      	mov	lr, r3
 8006ff6:	4770      	bx	lr
